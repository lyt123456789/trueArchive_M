package cn.com.trueway.workflow.core.action;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.sql.Blob;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.Hibernate;
import org.hibernate.lob.SerializableClob;
import org.json.JSONException;
import org.jsoup.Jsoup;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.com.trueway.base.actionSupport.BaseAction;
import cn.com.trueway.base.util.CebToPdf;
import cn.com.trueway.base.util.CommonUtil;
import cn.com.trueway.base.util.Constant;
import cn.com.trueway.base.util.ConstantsOfForm;
import cn.com.trueway.base.util.ExportExcel;
import cn.com.trueway.base.util.FileUploadUtils;
import cn.com.trueway.base.util.FileUtils;
import cn.com.trueway.base.util.HtmlToPdf;
import cn.com.trueway.base.util.JacobWordUtil;
import cn.com.trueway.base.util.JsonDateValueProcessor;
import cn.com.trueway.base.util.MergePdf;
import cn.com.trueway.base.util.MyConstants;
import cn.com.trueway.base.util.PDFToTrue;
import cn.com.trueway.base.util.Paging;
import cn.com.trueway.base.util.PathUtil;
import cn.com.trueway.base.util.TrueToPdf;
import cn.com.trueway.base.util.UrlCatcher;
import cn.com.trueway.base.util.Utils;
import cn.com.trueway.base.util.UuidGenerator;
import cn.com.trueway.base.util.WordToPdfOfPrinter;
import cn.com.trueway.document.business.action.ToRecDocAction;
import cn.com.trueway.document.business.docxg.client.service.DocExchangeClient;
import cn.com.trueway.document.business.docxg.client.support.GenUserKey;
import cn.com.trueway.document.business.docxg.client.vo.DepRelationShip;
import cn.com.trueway.document.business.docxg.client.vo.DocxgFieldMap;
import cn.com.trueway.document.business.model.Doc;
import cn.com.trueway.document.business.model.DocXgDepartment;
import cn.com.trueway.document.business.model.ReceiveProcessShip;
import cn.com.trueway.document.business.model.ToRecDoc;
import cn.com.trueway.document.business.service.FieldMatchingService;
import cn.com.trueway.document.business.service.SelectTreeService;
import cn.com.trueway.document.business.service.SendDocService;
import cn.com.trueway.document.business.service.ToRecDocService;
import cn.com.trueway.document.business.util.AnalyzeWSXml;
import cn.com.trueway.document.business.util.DocXgConst;
import cn.com.trueway.document.component.docNumberManager.model.po.DocNumberWhBw;
import cn.com.trueway.document.component.docNumberManager.model.po.DocNumberWhFw;
import cn.com.trueway.document.component.docNumberManager.service.DocNumberManagerService;
import cn.com.trueway.document.component.taglib.attachment.model.po.CutPages;
import cn.com.trueway.document.component.taglib.attachment.model.po.SendAttachments;
import cn.com.trueway.document.component.taglib.attachment.model.po.SendAttachmentsHistory;
import cn.com.trueway.document.component.taglib.attachment.service.AttachmentService;
import cn.com.trueway.document.component.taglib.attachment.thread.AttachmentThread;
import cn.com.trueway.document.component.taglib.comment.model.po.Comment;
import cn.com.trueway.document.component.taglib.comment.model.po.PersonalComment;
import cn.com.trueway.document.component.taglib.comment.service.CommentService;
import cn.com.trueway.document.component.taglib.docNumber.service.DocNumberService;
import cn.com.trueway.extra.meeting.service.MeetingInfoService;
import cn.com.trueway.ldbook.pojo.MsgSend;
import cn.com.trueway.ldbook.util.RemoteLogin;
import cn.com.trueway.ldbook.web.Method.StrList;
import cn.com.trueway.sys.util.SystemParamConfigUtil;
import cn.com.trueway.workflow.business.pojo.HandRoundShip;
import cn.com.trueway.workflow.business.service.BusinessService;
import cn.com.trueway.workflow.core.action.thread.CallWebServiceThread;
import cn.com.trueway.workflow.core.action.thread.FileUploadThread;
import cn.com.trueway.workflow.core.action.thread.OperateBatchThread;
import cn.com.trueway.workflow.core.action.thread.PDFToPNGImageThread;
import cn.com.trueway.workflow.core.action.thread.PushDataToPdfThread;
import cn.com.trueway.workflow.core.action.thread.ToPdfThread;
import cn.com.trueway.workflow.core.action.thread.TrueJsonLogThread;
import cn.com.trueway.workflow.core.pojo.AccessLog;
import cn.com.trueway.workflow.core.pojo.ColumnMapColumn;
import cn.com.trueway.workflow.core.pojo.DataDicMatch;
import cn.com.trueway.workflow.core.pojo.Department;
import cn.com.trueway.workflow.core.pojo.DoFile;
import cn.com.trueway.workflow.core.pojo.DoFileReceive;
import cn.com.trueway.workflow.core.pojo.DofileFavourite;
import cn.com.trueway.workflow.core.pojo.DzJcdb;
import cn.com.trueway.workflow.core.pojo.DzJcdbShip;
import cn.com.trueway.workflow.core.pojo.Employee;
import cn.com.trueway.workflow.core.pojo.EmployeeLeave;
import cn.com.trueway.workflow.core.pojo.FollowShip;
import cn.com.trueway.workflow.core.pojo.GetProcess;
import cn.com.trueway.workflow.core.pojo.ItemXccEmp;
import cn.com.trueway.workflow.core.pojo.OfficeInfoView;
import cn.com.trueway.workflow.core.pojo.Pending;
import cn.com.trueway.workflow.core.pojo.PersonMessage;
import cn.com.trueway.workflow.core.pojo.PushMessage;
import cn.com.trueway.workflow.core.pojo.ReadedEndPending;
import cn.com.trueway.workflow.core.pojo.Replay;
import cn.com.trueway.workflow.core.pojo.Reply;
import cn.com.trueway.workflow.core.pojo.SendNextProcess;
import cn.com.trueway.workflow.core.pojo.Sw;
import cn.com.trueway.workflow.core.pojo.TodoMessage;
import cn.com.trueway.workflow.core.pojo.TrueJson;
import cn.com.trueway.workflow.core.pojo.TrueJsonLog;
import cn.com.trueway.workflow.core.pojo.WfBackNode;
import cn.com.trueway.workflow.core.pojo.WfChild;
import cn.com.trueway.workflow.core.pojo.WfConsult;
import cn.com.trueway.workflow.core.pojo.WfCyName;
import cn.com.trueway.workflow.core.pojo.WfDictionary;
import cn.com.trueway.workflow.core.pojo.WfDuBanLog;
import cn.com.trueway.workflow.core.pojo.WfFieldInfo;
import cn.com.trueway.workflow.core.pojo.WfItem;
import cn.com.trueway.workflow.core.pojo.WfLine;
import cn.com.trueway.workflow.core.pojo.WfMain;
import cn.com.trueway.workflow.core.pojo.WfNode;
import cn.com.trueway.workflow.core.pojo.WfProcess;
import cn.com.trueway.workflow.core.pojo.WfRecallLog;
import cn.com.trueway.workflow.core.pojo.WfTableInfo;
import cn.com.trueway.workflow.core.pojo.WfTemplate;
import cn.com.trueway.workflow.core.pojo.WfXml;
import cn.com.trueway.workflow.core.pojo.vo.AllDetailElement;
import cn.com.trueway.workflow.core.pojo.vo.CommentElement;
import cn.com.trueway.workflow.core.pojo.vo.EmpData;
import cn.com.trueway.workflow.core.pojo.vo.FormElement;
import cn.com.trueway.workflow.core.pojo.vo.ItemType;
import cn.com.trueway.workflow.core.pojo.vo.MobileAttachment;
import cn.com.trueway.workflow.core.pojo.vo.MobileElement;
import cn.com.trueway.workflow.core.pojo.vo.NodeInfo;
import cn.com.trueway.workflow.core.pojo.vo.StepIndexVO;
import cn.com.trueway.workflow.core.pojo.vo.Todos;
import cn.com.trueway.workflow.core.pojo.vo.TrueJSON;
import cn.com.trueway.workflow.core.pojo.vo.TrueOperateLog;
import cn.com.trueway.workflow.core.pojo.vo.WfProcessVO;
import cn.com.trueway.workflow.core.service.AttachmentTypeService;
import cn.com.trueway.workflow.core.service.DataCenterService;
import cn.com.trueway.workflow.core.service.DictionaryService;
import cn.com.trueway.workflow.core.service.FieldInfoService;
import cn.com.trueway.workflow.core.service.FlowService;
import cn.com.trueway.workflow.core.service.FormPermitService;
import cn.com.trueway.workflow.core.service.IntegrateService;
import cn.com.trueway.workflow.core.service.ItemRelationService;
import cn.com.trueway.workflow.core.service.ItemService;
import cn.com.trueway.workflow.core.service.LabelService;
import cn.com.trueway.workflow.core.service.PendingService;
import cn.com.trueway.workflow.core.service.ReplayService;
import cn.com.trueway.workflow.core.service.TableInfoExtendService;
import cn.com.trueway.workflow.core.service.TableInfoService;
import cn.com.trueway.workflow.core.service.TemplateService;
import cn.com.trueway.workflow.core.service.TrueJsonService;
import cn.com.trueway.workflow.core.service.WorkflowBasicFlowService;
import cn.com.trueway.workflow.set.action.FormAction;
import cn.com.trueway.workflow.set.pojo.CommonGroupUsers;
import cn.com.trueway.workflow.set.pojo.DepartmentLeader;
import cn.com.trueway.workflow.set.pojo.EmployeeSort;
import cn.com.trueway.workflow.set.pojo.FlexibleFormJson;
import cn.com.trueway.workflow.set.pojo.FormStyle;
import cn.com.trueway.workflow.set.pojo.FormTagMapColumn;
import cn.com.trueway.workflow.set.pojo.InnerUserMapEmployee;
import cn.com.trueway.workflow.set.pojo.KeyValue;
import cn.com.trueway.workflow.set.pojo.Procedure;
import cn.com.trueway.workflow.set.pojo.ServerPlugClass;
import cn.com.trueway.workflow.set.pojo.ServerPlugMethod;
import cn.com.trueway.workflow.set.pojo.ServerPlugParam;
import cn.com.trueway.workflow.set.pojo.ServerPlugin;
import cn.com.trueway.workflow.set.pojo.TagBean;
import cn.com.trueway.workflow.set.pojo.Trueform;
import cn.com.trueway.workflow.set.pojo.TrueformData;
import cn.com.trueway.workflow.set.pojo.WebJson;
import cn.com.trueway.workflow.set.pojo.ZwkjForm;
import cn.com.trueway.workflow.set.pojo.vo.SimpleDeptVo;
import cn.com.trueway.workflow.set.service.DepartmentService;
import cn.com.trueway.workflow.set.service.EmployeeLeaderService;
import cn.com.trueway.workflow.set.service.EmployeeRoleService;
import cn.com.trueway.workflow.set.service.EmployeeService;
import cn.com.trueway.workflow.set.service.GroupService;
import cn.com.trueway.workflow.set.service.ServerPluginService;
import cn.com.trueway.workflow.set.service.ThirdpartyInterfaceLogService;
import cn.com.trueway.workflow.set.service.ZtreeService;
import cn.com.trueway.workflow.set.service.ZwkjFormService;
import cn.com.trueway.workflow.set.util.ClobToString;
import cn.com.trueway.workflow.set.util.Constants;
import cn.com.trueway.workflow.set.util.CreateSimpleWord;
import cn.com.trueway.workflow.set.util.DownloadFileUtil;
import cn.com.trueway.workflow.set.util.FileGeneThread;
import cn.com.trueway.workflow.set.util.GenePdfUtil;
import cn.com.trueway.workflow.set.util.JSONReplaceUtil;
import cn.com.trueway.workflow.set.util.MsgToObj;
import cn.com.trueway.workflow.set.util.MyUtils;
import cn.com.trueway.workflow.set.util.PdfPage;
import cn.com.trueway.workflow.set.util.QrcodeUtil;
import cn.com.trueway.workflow.set.util.SendMsgUtil;
import cn.com.trueway.workflow.set.util.ToPdfUtil;
import cn.com.trueway.workflow.set.util.TxtUtil;
import cn.com.trueway.workflow.set.util.WebSocketUtil;
import cn.com.trueway.workflow.set.util.WordAndWaterMarkTool;
import cn.com.trueway.workflow.set.util.ZipUtil;
import cn.com.trueway.workflow.webService.service.ArchiveWebService;
import cn.com.trueway.workflow.webService.service.ExchangeReceiveService;

import com.google.gson.Gson;
import com.trueway.client.util.CommonUtils;
/**
 * 
 * 描述：核心操作类库
 * 作者：蔡亚军
 * 创建时间：2015-7-24 下午1:29:04
 * 修改人：<修改人中文名或拼音缩写>
 * 修改时间：<修改日期，格式：同创建时间>
 * 修改原因及地方：<修改原因描述>
 * 版本：v1.0
 * JDK版本：JDK1.6
 */
public class TableInfoAction extends BaseAction {

	private static final long serialVersionUID = 1L;

	/**
	 * 正文附件的后缀
	 */
	private final String ATT_SUFFIX_NAME 	= SystemParamConfigUtil.getParamValueByParam("attSuffixName"); 
	
	/**
	 * 附加附件的后缀
	 */
	private final String ATT_FJSUFFIX_NAME 	= SystemParamConfigUtil.getParamValueByParam("attFjSuffixName");
	
	private final String FILE_DOWNLOAD_URL	= SystemParamConfigUtil.getParamValueByParam("filedownloadurl");
	
	private static final Logger LOGGER 		= LoggerFactory.getLogger(TableInfoAction.class);
	
	private final String QRCODE_FILE_PATH		= "qrcode/";
	
	private final String QRCODE_FILE_TYPE		= "jpg";
	
	private ItemService 				itemService;

	private TableInfoService 			tableInfoService;

	private FieldInfoService 			fieldInfoService;

	private WfTableInfo 				table;
	
	private ZwkjFormService 			zwkjFormService;

	private DepartmentService 			departmentService;

	private WorkflowBasicFlowService 	workflowBasicFlowService;

	private GroupService 				groupService;

	private PendingService 				pendingService;

	private FormPermitService 			formPermitService;

	private FormAction 					formAction;

	private DocNumberService 			docNumberService;

	private DocExchangeClient 			docExchangeClient;

	private CommentService 				commentService;

	private ServerPluginService 		serverPluginService;

	private TemplateService 			templateService;

	private LabelService 				labelService;

	private DictionaryService 				dictionaryService;

	private AttachmentService 				attachmentService;

	private WfTemplate 						template;

	private ItemRelationService 			itemRelationService;

	private EmployeeService 				employeeService;
	
	private AttachmentTypeService 			attachmentTypeService;
	
	private EmployeeRoleService 			employeeRoleService;
	
	private SelectTreeService 				selectTreeService;
	
	private SendDocService 					sendDocService;
	
	private FieldMatchingService 			fieldMatchingService;
	
	private DocNumberManagerService 		docNumberManagerService;
	
	private FlowService 					flowService ; 
	
	private ReplayService 					replayService;
	
	private EmployeeLeaderService 			employeeLeaderService;
	
	private DataCenterService 				dataCenterService;
	
	private MeetingInfoService 				meetingInfoService;
	
	private TrueJsonService 				trueJsonService;
	
	private IntegrateService 				integrateService;

	private ExchangeReceiveService 			exchangeReceiveService;
	
	private TableInfoExtendService			tableInfoExtendService;
	
	private ToRecDocService 				toRecDocService;
	
	private ToRecDocAction 					toRecDocAction;
	
	private ArchiveWebService 				archiveWebService;
	
	private BusinessService 				businessService;
	
	private ZtreeService 					ztreeService;
	
	private ThirdpartyInterfaceLogService	thirdpartyInterfaceLogService;

  	private File 						file; 
  	
  	public IntegrateService getIntegrateService() {
		return integrateService;
	}
	public void setIntegrateService(IntegrateService integrateService) {
		this.integrateService = integrateService;
	}

	public ExchangeReceiveService getExchangeReceiveService() {
		return exchangeReceiveService;
	}
	public void setExchangeReceiveService(
			ExchangeReceiveService exchangeReceiveService) {
		this.exchangeReceiveService = exchangeReceiveService;
	}

	public EmployeeLeaderService getEmployeeLeaderService() {
		return employeeLeaderService;
	}
	public void setEmployeeLeaderService(EmployeeLeaderService employeeLeaderService) {
		this.employeeLeaderService = employeeLeaderService;
	}
	public File getFile() {
		return file;
	}
	public void setFile(File file) {
		this.file = file;
	}
	public FlowService getFlowService() {
		return flowService;
	}
	public void setFlowService(FlowService flowService) {
		this.flowService = flowService;
	}
	
	public SelectTreeService getSelectTreeService() {
		return selectTreeService;
	}

	public void setSelectTreeService(SelectTreeService selectTreeService) {
		this.selectTreeService = selectTreeService;
	}

	public SendDocService getSendDocService() {
		return sendDocService;
	}

	public void setSendDocService(SendDocService sendDocService) {
		this.sendDocService = sendDocService;
	}

	public FieldMatchingService getFieldMatchingService() {
		return fieldMatchingService;
	}

	public void setFieldMatchingService(FieldMatchingService fieldMatchingService) {
		this.fieldMatchingService = fieldMatchingService;
	}

	public DocNumberManagerService getDocNumberManagerService() {
		return docNumberManagerService;
	}

	public void setDocNumberManagerService(
			DocNumberManagerService docNumberManagerService) {
		this.docNumberManagerService = docNumberManagerService;
	}

	
	public EmployeeRoleService getEmployeeRoleService() {
		return employeeRoleService;
	}

	public AttachmentTypeService getAttachmentTypeService() {
		return attachmentTypeService;
	}

	public void setAttachmentTypeService(AttachmentTypeService attachmentTypeService) {
		this.attachmentTypeService = attachmentTypeService;
	}

	public MeetingInfoService getMeetingInfoService() {
		return meetingInfoService;
	}

	public void setMeetingInfoService(MeetingInfoService meetingInfoService) {
		this.meetingInfoService = meetingInfoService;
	}

	public void setEmployeeRoleService(EmployeeRoleService employeeRoleService) {
		this.employeeRoleService = employeeRoleService;
	}
	
	public ReplayService getReplayService() {
		return replayService;
	}
	public void setReplayService(ReplayService replayService) {
		this.replayService = replayService;
	}

	public DataCenterService getDataCenterService() {
		return dataCenterService;
	}
	public void setDataCenterService(DataCenterService dataCenterService) {
		this.dataCenterService = dataCenterService;
	}
	
	public TrueJsonService getTrueJsonService() {
		return trueJsonService;
	}
	public void setTrueJsonService(TrueJsonService trueJsonService) {
		this.trueJsonService = trueJsonService;
	}

	public ToRecDocService getToRecDocService() {
		return toRecDocService;
	}
	public void setToRecDocService(ToRecDocService toRecDocService) {
		this.toRecDocService = toRecDocService;
	}

	public ToRecDocAction getToRecDocAction() {
		return toRecDocAction;
	}
	public void setToRecDocAction(ToRecDocAction toRecDocAction) {
		this.toRecDocAction = toRecDocAction;
	}

	public BusinessService getBusinessService() {
		return businessService;
	}
	public void setBusinessService(BusinessService businessService) {
		this.businessService = businessService;
	}

	private String fileFileName; 
	
	private String fileContentType;
	
	private DataBaseOracle dataBaseOracle;
	
	public ItemRelationService getItemRelationService() {
		return itemRelationService;
	}

	public void setItemRelationService(ItemRelationService itemRelationService) {
		this.itemRelationService = itemRelationService;
	}

	public String getFileFileName() {
		return fileFileName;
	}

	public ItemService getItemService() {
		return itemService;
	}

	public void setItemService(ItemService itemService) {
		this.itemService = itemService;
	}

	public void setFileFileName(String fileFileName) {
		this.fileFileName = fileFileName;
	}

	public String getFileContentType() {
		return fileContentType;
	}

	public void setFileContentType(String fileContentType) {
		this.fileContentType = fileContentType;
	}

	public TableInfoService getTableInfoService() {
		return tableInfoService;
	}

	public void setTableInfoService(TableInfoService tableInfoService) {
		this.tableInfoService = tableInfoService;
	}

	public FieldInfoService getFieldInfoService() {
		return fieldInfoService;
	}

	public void setFieldInfoService(FieldInfoService fieldInfoService) {
		this.fieldInfoService = fieldInfoService;
	}

	public WfTableInfo getTable() {
		return table;
	}

	public void setTable(WfTableInfo table) {
		this.table = table;
	}

	public ZwkjFormService getZwkjFormService() {
		return zwkjFormService;
	}

	public void setZwkjFormService(ZwkjFormService zwkjFormService) {
		this.zwkjFormService = zwkjFormService;
	}

	public WorkflowBasicFlowService getWorkflowBasicFlowService() {
		return workflowBasicFlowService;
	}

	public void setWorkflowBasicFlowService(
			WorkflowBasicFlowService workflowBasicFlowService) {
		this.workflowBasicFlowService = workflowBasicFlowService;
	}

	public GroupService getGroupService() {
		return groupService;
	}

	public void setGroupService(GroupService groupService) {
		this.groupService = groupService;
	}

	public PendingService getPendingService() {
		return pendingService;
	}

	public void setPendingService(PendingService pendingService) {
		this.pendingService = pendingService;
	}

	public FormPermitService getFormPermitService() {
		return formPermitService;
	}

	public void setFormPermitService(FormPermitService formPermitService) {
		this.formPermitService = formPermitService;
	}

	public FormAction getFormAction() {
		return formAction;
	}

	public void setFormAction(FormAction formAction) {
		this.formAction = formAction;
	}

	public DocNumberService getDocNumberService() {
		return docNumberService;
	}

	public void setDocNumberService(DocNumberService docNumberService) {
		this.docNumberService = docNumberService;
	}

	public DocExchangeClient getDocExchangeClient() {
		return docExchangeClient;
	}

	public void setDocExchangeClient(DocExchangeClient docExchangeClient) {
		this.docExchangeClient = docExchangeClient;
	}

	public CommentService getCommentService() {
		return commentService;
	}

	public void setCommentService(CommentService commentService) {
		this.commentService = commentService;
	}

	public ServerPluginService getServerPluginService() {
		return serverPluginService;
	}

	public void setServerPluginService(ServerPluginService serverPluginService) {
		this.serverPluginService = serverPluginService;
	}

	public DepartmentService getDepartmentService() {
		return departmentService;
	}

	public void setDepartmentService(DepartmentService departmentService) {
		this.departmentService = departmentService;
	}

	public TemplateService getTemplateService() {
		return templateService;
	}

	public void setTemplateService(TemplateService templateService) {
		this.templateService = templateService;
	}

	public WfTemplate getTemplate() {
		return template;
	}

	public void setTemplate(WfTemplate template) {
		this.template = template;
	}

	public LabelService getLabelService() {
		return labelService;
	}

	public void setLabelService(LabelService labelService) {
		this.labelService = labelService;
	}

	public DictionaryService getDictionaryService() {
		return dictionaryService;
	}

	public void setDictionaryService(DictionaryService dictionaryService) {
		this.dictionaryService = dictionaryService;
	}

	public AttachmentService getAttachmentService() {
		return attachmentService;
	}

	public void setAttachmentService(AttachmentService attachmentService) {
		this.attachmentService = attachmentService;
	}

	public EmployeeService getEmployeeService() {
		return employeeService;
	}

	public void setEmployeeService(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}

	public DataBaseOracle getDataBaseOracle() {
		return dataBaseOracle;
	}

	public void setDataBaseOracle(DataBaseOracle dataBaseOracle) {
		this.dataBaseOracle = dataBaseOracle;
	}
	
	public TableInfoExtendService getTableInfoExtendService() {
		return tableInfoExtendService;
	}
	public void setTableInfoExtendService(
			TableInfoExtendService tableInfoExtendService) {
		this.tableInfoExtendService = tableInfoExtendService;
	}
	public ZtreeService getZtreeService() {
		return ztreeService;
	}
	public void setZtreeService(ZtreeService ztreeService) {
		this.ztreeService = ztreeService;
	}
	public String getVersion(){
		return null;
	}
	
	public ArchiveWebService getArchiveWebService() {
	    return archiveWebService;
	}
	
	public void setArchiveWebService(ArchiveWebService archiveWebService) {
	    this.archiveWebService = archiveWebService;
	}
	
	public ThirdpartyInterfaceLogService getThirdpartyInterfaceLogService() {
		return thirdpartyInterfaceLogService;
	}
	
	public void setThirdpartyInterfaceLogService(
			ThirdpartyInterfaceLogService thirdpartyInterfaceLogService) {
		this.thirdpartyInterfaceLogService = thirdpartyInterfaceLogService;
	}
	
	public void download() {
		try {
			File file = new File(SystemParamConfigUtil.getParamValueByParam("kjPath"));
			String stringName="";
			if(file.exists()){
				//获取文件，查询是否有文件时间比现在大有的话就表示有新控件
				String[] files = file.list();
				long longName=0;
				for(int i=0;i<files.length;i++){
					long newVersion = Long.valueOf(files[i].replace(".exe", ""));
					if(newVersion>longName){
						stringName=files[i];
						longName=newVersion;
					}
				}
			}
			// 文件下载
			DownloadFileUtil.downloadFile(getResponse(), SystemParamConfigUtil.getParamValueByParam("kjPath")+File.separatorChar+stringName, stringName);
//				return null;
		} catch (Exception e) {
			e.printStackTrace();
//			return "fileDownloadError";
		}
	}
	
	
	public String getTableList(){
		String column=getRequest().getParameter("column");
		String value=getRequest().getParameter("value");
		String workflowId = getRequest().getParameter("workflowId");
		String lcid = (String)getRequest().getSession().getAttribute(MyConstants.workflow_session_id);
		if(table == null){
			table = new WfTableInfo();
		}

		String vc_parent = getRequest().getParameter("vc_parent");
		table.setVc_parent(vc_parent);
		if(CommonUtil.stringNotNULL(workflowId)){
			table.setLcid(workflowId);
			getRequest().setAttribute("workflowId", workflowId);
		}else{
			table.setLcid(lcid);
		}
		
		// 分页相关，代码执行顺序不变
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getTableCountForPage(column, value, table).size();
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<WfTableInfo> list = tableInfoService.getTableListForPage(column,
				value, table, Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("list", list);
		if (table.getVc_parent() != null && !"".equals(table.getVc_parent())) {
			getRequest().setAttribute("vc_parent", table.getVc_parent());
		}
		return "tableList";
	}
	
	/**
	 * 判断当前流程业务表数目
	 * xiep
	 * 2016-12-26
	 */
	public void getTableCount(){
		String workflowId = getRequest().getParameter("workflowId");
		table = new WfTableInfo();
		table.setLcid(workflowId);
		List<String> ids = tableInfoService.getTableCountForPage("", "", table);
		JSONObject jo = new JSONObject();
		jo.put("count", ids.size());
		jo.put("ids", JSONArray.fromObject(ids));
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(jo.toString());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}

	public String toAddJsp() {
		String vc_parent = getRequest().getParameter("vc_parent");
		String workflowId = getRequest().getParameter("workflowId");
		getRequest().setAttribute("workflowId", workflowId);
		List<WfFieldInfo> list = fieldInfoService.getPublicField();
		getRequest().setAttribute("list", list);
		if (vc_parent != null && !"".equals(vc_parent)) {
			List<WfFieldInfo> clist = fieldInfoService
					.getAllFieldByTableId(vc_parent);
			table = tableInfoService.getTableById(vc_parent);
			getRequest().setAttribute("fieldList", clist);
			getRequest().setAttribute("table", table);
			return "toAddXJsp";
		} else {
			return "toAddJsp";
		}
	}

	public String toRefJsp() {
		String lcid = this.getRequest().getParameter("workflowId");
		if(CommonUtil.stringIsNULL(lcid)){
			lcid = (String) getRequest().getSession().getAttribute(MyConstants.workflow_session_id);
		}
		List<WfTableInfo> list = tableInfoService.getAllTableNotLc(lcid);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("lcid", lcid);
		return "toRefJsp";
	}

	public String ref() {
		String lcid = this.getRequest().getParameter("lcid");
		if(CommonUtil.stringIsNULL(lcid)){
			lcid = (String) getRequest().getSession().getAttribute(MyConstants.workflow_session_id);
		}
		String id = getRequest().getParameter("id");
		table = tableInfoService.getTableById(id);
		String ref = "";
		// 以,将id隔开，查询时like '%,ID,%'
		if (CommonUtil.stringNotNULL(table.getReflc())) {
			ref = table.getReflc() + lcid + ",";
		} else {
			ref = "," + lcid + ",";
		}
		table.setReflc(ref);
		tableInfoService.addTable(table);
		return null;
	}

	public void add() throws IOException {
		// 取流程ID
		String lcid = this.getRequest().getParameter("workflowId");
		if(CommonUtil.stringIsNULL(lcid)){
			lcid = (String) getRequest().getSession().getAttribute(MyConstants.workflow_session_id);
		}
		/* 取表数据 */
		String vc_tablename = getRequest().getParameter("vc_tablename").toUpperCase().trim();
		String vc_tname = getRequest().getParameter("vc_tname");
		String vc_parent = getRequest().getParameter("vc_parent");
		/* 取表字段 */
		String[] id = getRequest().getParameterValues("id");
		String[] vc_name = getRequest().getParameterValues("vc_name");
		String[] vc_fieldname = getRequest().getParameterValues("vc_fieldname");
		String[] i_fieldtype = getRequest().getParameterValues("i_fieldtype");
		String[] i_length = getRequest().getParameterValues("i_length");
		String[] b_value = getRequest().getParameterValues("b_value");
		String[] vc_value = getRequest().getParameterValues("vc_value");
		String[] vc_comment = getRequest().getParameterValues("vc_comment");
		String[] vc_ftable = getRequest().getParameterValues("vc_ftable");
		String[] vc_ffield = getRequest().getParameterValues("vc_ffield");

		/* 保存表信息 */
		WfTableInfo wfTable = new WfTableInfo();
		wfTable.setVc_tablename(vc_tablename);
		wfTable.setVc_name(vc_tname);
		wfTable.setVc_parent(vc_parent);
		wfTable.setVc_creatdate(new Timestamp(System.currentTimeMillis()));
		wfTable.setLcid(lcid);
		wfTable = tableInfoService.addTable(wfTable);
		String tableId = wfTable.getId();

		/* 保存字段信息 */
		WfFieldInfo wfField = null;
		List<WfFieldInfo> fieldList = new ArrayList<WfFieldInfo>();
		for (int i = 0; vc_name != null && i < vc_name.length; i++) {
			wfField = new WfFieldInfo();
			wfField.setId(id[i]);
			wfField.setVc_name(vc_name[i].trim());
			wfField.setVc_fieldname(vc_fieldname[i].trim());
			wfField.setI_fieldtype(i_fieldtype[i]);
			wfField.setI_length(i_length[i]);
			wfField.setB_value(b_value[i]);
			wfField.setVc_value(vc_value[i]);
			if (id[i] == null || "".equals(id[i])) {
				wfField.setI_tableid(tableId);
			}
			wfField.setI_orderid(i + 1);
			wfField.setVc_comment(vc_comment[i]);
			if (vc_ftable != null && vc_ffield != null && vc_ftable[i] != null
					&& !"".equals(vc_ftable[i]) && vc_ffield[i] != null
					&& !"".equals(vc_ffield[i])) {
				wfField.setVc_ftable(vc_ftable[i].split(",")[0]);
				wfField.setVc_ftablename(vc_ftable[i].split(",")[1]);
				wfField.setVc_ffield(vc_ffield[i].split(",")[0]);
				wfField.setVc_ffieldname(vc_ffield[i].split(",")[1]);
			}
			fieldList.add(wfField);
		}
		fieldInfoService.addField(fieldList);

		// 创建数据库表
		tableInfoService.createTable(tableInfoService.getCreateSql(fieldList,
				vc_tablename));

		// 增加表外键
		List<String> foreKeySqlList = tableInfoService.getForeKeySql(fieldList,
				vc_tablename);
		for (String sql : foreKeySqlList) {
			tableInfoService.createTable(sql);
		}

		// 增加表注释
		String csql = tableInfoService.getTableCommentSql(vc_tname,
				vc_tablename);
		tableInfoService.createTable(csql);

		// 增加字段注释
		List<String> commentSqlList = tableInfoService.getCommentSql(fieldList,
				vc_tablename);
		for (String sql : commentSqlList) {
			tableInfoService.createTable(sql);
		}
		getResponse().sendRedirect(getRequest().getContextPath()+"/table_getTableList.do?workflowId="+lcid);
	}
	
	public void edit() throws IOException {
		/* 取表数据 */
		String vc_tablename = getRequest().getParameter("vc_tablename")
				.toUpperCase();
		String vc_tname = getRequest().getParameter("vc_tname");
		String tableid = getRequest().getParameter("tableid");

		// 修改表信息
		table = tableInfoService.getTableById(tableid);
		table.setVc_name(vc_tname);
		tableInfoService.addTable(table);

		/* 取表字段 */
		String[] id = getRequest().getParameterValues("id");
		String[] vc_name = getRequest().getParameterValues("vc_name");
		String[] vc_fieldname = getRequest().getParameterValues("vc_fieldname");
		String[] i_fieldtype = getRequest().getParameterValues("i_fieldtype");
		String[] i_length = getRequest().getParameterValues("i_length");
		String[] i_tableid = getRequest().getParameterValues("i_tableid");
		String[] b_value = getRequest().getParameterValues("b_value");
		String[] vc_value = getRequest().getParameterValues("vc_value");
		String[] vc_comment = getRequest().getParameterValues("vc_comment");
		String[] vc_ftable = getRequest().getParameterValues("vc_ftable");
		String[] vc_ffield = getRequest().getParameterValues("vc_ffield");

		/* 保存字段信息 */
		WfFieldInfo wfField = null;
		List<WfFieldInfo> fieldList = new ArrayList<WfFieldInfo>();
		List<WfFieldInfo> addList = new ArrayList<WfFieldInfo>();
		for (int i = 0; vc_name != null && i < vc_name.length; i++) {
			wfField = new WfFieldInfo();
			wfField.setId(id[i]);
			wfField.setVc_name(vc_name[i]);
			wfField.setVc_fieldname(vc_fieldname[i]);
			wfField.setI_fieldtype(i_fieldtype[i]);
			wfField.setI_length(i_length[i]);
			wfField.setB_value(b_value[i]);
			wfField.setVc_value(vc_value[i]);
			// 修改时，id为空且tableid为空的字段，为新增的字段
			if ((id[i] == null || "".equals(id[i]))
					&& (i_tableid[i] == null || "".equals(i_tableid[i])))
				i_tableid[i] = tableid;

			wfField.setI_tableid(i_tableid[i]);
			wfField.setI_orderid(i + 1);
			wfField.setVc_comment(vc_comment[i]);
			if (vc_ftable != null && vc_ffield != null && vc_ftable[i] != null
					&& !"".equals(vc_ftable[i]) && vc_ffield[i] != null
					&& !"".equals(vc_ffield[i])) {
				wfField.setVc_ftable(vc_ftable[i].split(",")[0]);
				wfField.setVc_ftablename(vc_ftable[i].split(",")[1]);
				wfField.setVc_ffield(vc_ffield[i].split(",")[0]);
				wfField.setVc_ffieldname(vc_ffield[i].split(",")[1]);
			}
			fieldList.add(wfField);
			// 获得新增的字段
			if (wfField.getId() == null || "".equals(wfField.getId())) {
				addList.add(wfField);
			}
		}
		// 获得修改前的字段
		List<WfFieldInfo> oldList = fieldInfoService
				.getAllFieldByTableId(tableid);

		// 新增，有则修改
		fieldInfoService.addField(fieldList);

		List<WfFieldInfo> delList = new ArrayList<WfFieldInfo>();

		// 获得删除的字段
		for (WfFieldInfo oldfield : oldList) {
			int delete = 1;
			for (WfFieldInfo field : fieldList) {
				if (oldfield.getId().equals(field.getId())) {
					delete = 0;
					break;
				}
			}
			if (delete == 1) {
				delList.add(oldfield);
			}
		}

		// 删除字段
		for (WfFieldInfo field : delList) {
			fieldInfoService.delField(field);
		}

		// 增加表字段
		List<String> alterSqlList = tableInfoService.getFieldSql(addList,
				vc_tablename);
		for (String sql : alterSqlList) {
			tableInfoService.createTable(sql);
		}

		// 增加表外键
		List<String> foreKeySqlList = tableInfoService.getForeKeySql(addList,
				vc_tablename);
		for (String sql : foreKeySqlList) {
			tableInfoService.createTable(sql);
		}

		// 增加字段注释
		List<String> commentSqlList = tableInfoService.getCommentSql(addList,
				vc_tablename);
		for (String sql : commentSqlList) {
			tableInfoService.createTable(sql);
		}

		// 返回列表页
		getResponse().sendRedirect(getRequest().getContextPath()+"/table_getTableList.do?workflowId="+table.getLcid());
	}

	public String del() {
		String lcid = this.getRequest().getParameter("workflowId");
		if(CommonUtil.stringIsNULL(lcid)){
			lcid = (String) getRequest().getSession().getAttribute(MyConstants.workflow_session_id);
		}
		String ids = getRequest().getParameter("ids");
		String[] id = ids.split(",");
		for (String strId : id) {
			table = tableInfoService.getTableById(strId);
			if (lcid.equals(table.getLcid())) {
				table.setLcid(null);
			} else {
				if (table.getReflc() != null) {
					String vc_ref = table.getReflc().replace("," + lcid + ",",
							",");
					table.setReflc(vc_ref);
				}
			}

			tableInfoService.addTable(table);
		}
		return getTableList();
	}

	public String toEditJsp() {
		String id = getRequest().getParameter("id");
		String workflowId = getRequest().getParameter("workflowId");
		table = tableInfoService.getTableById(id);
		List<WfFieldInfo> list = null;
		/* 分别获得主表和细表的LIST，主表包含基础字段，细表不包含 */
		if (table.getVc_parent() != null && !"".equals(table.getVc_parent())) {
			list = fieldInfoService.getAllFieldByXbTableId(id);
		} else {
			list = fieldInfoService.getAllFieldByTableId(id);
		}
		getRequest().setAttribute("table", table);
		getRequest().setAttribute("workflowId", workflowId);
		getRequest().setAttribute("list", list);
		return "toEditJsp";
	}

	public void getSql() {
		/* 取表数据 */
		String vc_tablename = getRequest().getParameter("vc_tablename");

		/* 取表字段 */
		String[] vc_fieldname = getRequest().getParameter("vc_fieldname")
				.split(",");
		String[] i_fieldtype = getRequest().getParameter("i_fieldtype").split(
				",");
		String[] i_length = getRequest().getParameter("i_length").split(",");
		String[] b_value = getRequest().getParameter("b_value").split(",");
		String[] vc_value = getRequest().getParameter("vc_value").split(",");

		/* 字段信息 */
		WfFieldInfo wfField = null;
		List<WfFieldInfo> fieldList = new ArrayList<WfFieldInfo>();
		for (int i = 0; vc_fieldname != null && i < vc_fieldname.length; i++) {
			wfField = new WfFieldInfo();
			wfField.setVc_fieldname(vc_fieldname[i]);
			wfField.setI_fieldtype(i_fieldtype[i]);
			if (i_length.length >= i + 1) {
				wfField.setI_length(i_length[i]);
			}
			wfField.setB_value(b_value[i]);
			if (vc_value.length >= i + 1) {
				wfField.setVc_value(vc_value[i]);
			}
			fieldList.add(wfField);
		}

		String sql = tableInfoService.getCreateSql(fieldList, vc_tablename);

		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(sql);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}

	public void checkTableName() {
		String vc_tablename = this.getRequest().getParameter("vc_tablename")
				.toUpperCase();
		String isExist = "no";
		int num = tableInfoService.isExistTable(vc_tablename);
		if (num > 0) {
			isExist = "yes";
		}
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(isExist);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}

	/**
	 * 
	 * 描述：点击事项,开是发起事项
	 * @return
	 * @throws Exception String
	 * 作者:蔡亚军
	 * 创建时间:2016-1-21 下午1:34:26
	 */
	public String openFirstForm() throws Exception {
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			String status = getRequest().getParameter("status");
			String workFlowId = getRequest().getParameter("workflowid");
			String directSend =  getRequest().getParameter("directSend");
			String instanceId = getRequest().getParameter("instanceId");
			String processId = getRequest().getParameter("processId");
			String dicValue = getRequest().getParameter("dicValue");
			String modId = getRequest().getParameter("modId");//模块id
			String matchId = getRequest().getParameter("matchId");//匹配id
			String dicId = getRequest().getParameter("dicId");//数据字典id
			// 事项id
			String itemId = getRequest().getParameter("itemid");
			// 子流程的类型-0:一个实例 1:多个实例
			String cType = getRequest().getParameter("cType");
			// 与父流程关系--0:异步 1:同步
			String relation = getRequest().getParameter("relation");
			// 是否是从子流程进来
			String isChildWf = getRequest().getParameter("isChildWf");
			// 从父流程带过来的 意见
			String commentJson = getRequest().getParameter("commentJson");
			commentJson = JSONReplaceUtil.replaceJson(commentJson);
			if(getRequest().getParameter("isChildJson")!=null&&getRequest().getParameter("isChildJson").equals("1")){
				commentJson = (String) getRequest().getSession().getAttribute("commentJson1");
				commentJson = JSONReplaceUtil.replaceJson(commentJson);
				getRequest().getSession().removeAttribute("commentJson1");
			}
			// 父流程的实例id
			String finstanceId = getRequest().getParameter("finstanceId");
			String oldFormId = getRequest().getParameter("formId");
			String yqinstanceid = getRequest().getParameter("yqinstanceid");	//被申请延期的待办实例id
			
			WfItem wfitem = itemService.getItemById(itemId);
			
			//第一步节点
			WfNode wfNode = null;
			try {
				wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
			} catch (Exception e) {
				e.printStackTrace();
			}
			getRequest().setAttribute("dqNodeName", wfNode.getWfn_name());
			getRequest().setAttribute("iszf", wfNode.getWfn_iszf());
			getRequest().setAttribute("iswcsx", wfNode.getWfn_iswcsx());
			getRequest().setAttribute("isUploadAttach", wfNode.getWfn_isUploadAttach());		//是否必须上传附件
			// 当前节点所绑定的表单Id
			String formId = wfNode.getWfn_defaultform();
			Integer skipNextnodes = wfNode.getWfn_skipNextnodes();
			//根据formId获取表单
			ZwkjForm form = zwkjFormService.getOneFormById(formId);
			Integer fontSize = form.getFontSize();
			String formLocation = form.getForm_jspfilename();
			// 根据当前节点Id查找下一节点Id
			Object[] nodeList =   workflowBasicFlowService.showNextNode(workFlowId, wfNode.getWfn_id());
			// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			List<WfChild> childs = workflowBasicFlowService.showChildOfWf(workFlowId, wfNode.getWfn_id());
			// 下一步是否包含办结节点
			String isHaveEndNode = "false";
			List<WfNode> nodes = new ArrayList<WfNode>();
			if(nodeList!=null && nodeList.length==2){
				if(nodeList[0]!=null){
					nodes = (List<WfNode>)nodeList[0];
					int k = nodeList[1]==null?0:Integer.parseInt(nodeList[1].toString());
					if(k>0){		//存在配置着条件的节点
						WfMain wfMain = workflowBasicFlowService.getWfMainById(workFlowId);
						if(wfMain!=null){		//获取设定的默认的节点名称
							String nodeName = wfMain.getWfm_nodeName();
							if(nodeName==null || nodeName.equals("")){
								nodeName = "提交";
							}
							getRequest().setAttribute("nodeName", nodeName);
						}
					}
				}
			}
			boolean isEndReply = false;
			for (WfNode wn : nodes) {
				if (("end").equals(wn.getWfn_type())) {
					isHaveEndNode = "true";
					break;
				}
			}
			boolean isSend = false; // 办文为false,发文为true
			WfItem item = docNumberService.findItemByWorkFlowId(workFlowId);
			if (item != null && item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) {
				isSend = true;
			}
			String oldPath = null;
			// 步骤记录
			if(directSend != null && "true".equals(directSend)){
				// 直接发文 取 sw 表里面的instanceId
			}else{
				instanceId = UuidGenerator.generate36UUID();
				processId = UuidGenerator.generate36UUID();
			}
			//续办流程，打开表单时，带原办件的数据，将原表单合在新附件最后
			String isContinue = getRequest().getParameter("isContinue");
			if("yes".equals(isContinue)){
				String origProcId = getRequest().getParameter("origProcId");//原办件最后一步过程信息ID
//			String origInstanceId = getRequest().getParameter("origInstanceId");//原办件instanceId
				//原表单作为附件上传
				uploadOrigDofileAttachment(origProcId, instanceId, wfNode.getWfn_id());
				getRequest().setAttribute("origProcId", origProcId);
				getRequest().setAttribute("isContinue", isContinue);
			}
			// 第一步的标志
			boolean isFirst = true;
			// 标题的字段---用于页面中判断必填
			String title_column = getTitle(workFlowId, formId, instanceId).split(";")[1];
			// 下一步是否是最后一步
			boolean isEndProcess = false;
			for (WfNode node : nodes) {
				if (("end").equals(node.getWfn_type())) {
					isEndProcess = true;
				}
				if(node.getNode_isReply() != null && node.getNode_isReply()==1){
					isEndReply = true;
				}
			}
			
			// 判断是第一步(为阅者状态用)
			boolean firstStep = true;
			// 获取当前登录用户
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			// webid(存的是部门id)
			List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
			String userId = emp.getEmployeeGuid();
			// 判断是否是传阅流程
			boolean isCyWork = false;
			if (item != null) {
				if (("2").equals(item.getVc_sxlx())) { // 传阅
					isCyWork = true;
				}
			}
			// 进入子流程是否需填写表单
			String isWriteNewValue = getRequest().getParameter("isWriteNewValue");
			// 根据目录的前缀 匹配虚拟目录
			String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			if (("false").equals(isWriteNewValue)) {
				// 获取前面的主流程id
				String proceId = getRequest().getParameter("processId");
				getRequest().setAttribute("f_proceId", proceId);
				// 查找当前待办的Process实体
				WfProcess wfProcess = pendingService.getProcessByID(proceId);
				// 换表单从前到尾的总附件的instanceId
				String allInstanceId = wfProcess.getAllInstanceid();
				// 生成的pdf地址
				String pdfPath = "";
				isFirst = false;
				// 查找父流程的表单值
				//获取父流程步骤finstanceId
				WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
				getRequest().getSession().removeAttribute("pdfpath");	
				String pdfNewPath = "";
				if(pWfProcess!=null){
					String path = pWfProcess.getPdfPath();
					if(path!=null && !path.equals("")){
						String pdfpath = path.split(",")[1];
						try {
							GenePdfUtil genePdfUtil = GenePdfUtil.getInstance();
							//pdfNewPath = pdfpath;
							String[] args = new TrueToPdf().trueToPdf(pdfpath);
							String pdf_path = args[0];
							pdfNewPath = pdf_path.substring(0, pdf_path.length()-4)+"fj.pdf";
							genePdfUtil.genePdf(pdf_path,commentJson,pdfNewPath);
						} catch (Exception e) {
							e.printStackTrace();
						}
						getRequest().getSession().setAttribute("pdfpath", pdfNewPath);	//需要携带给子类的pdf
						getRequest().getSession().setAttribute("pjson", commentJson);	//中间步骤更新json
					}
				}
				// 生成pdf
				if(wfNode.getWfn_form_continue()!=null && ("1").equals(wfNode.getWfn_form_continue())){
					pdfPath = getHtmlToNewOfPath(wfNode.getWfn_defaultform(), wfNode.getWfn_id(), "", wfNode.getWfn_defaultform(), false, true);
					pdfPath = new PDFToTrue().pdfToTrue(pdfPath, null);
					oldPath = pdfPath;
					commentJson = "";
				}else{
					pdfPath = getRequest().getParameter("newPdfPath");
					oldPath=pdfPath;
				}
				if (pdfPath != null && !"".equals(pdfPath)){
					String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
					pdfPath = pdfPath.split(",")[0];
					if(pdfPath.startsWith(newPdfRoot)){
						pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
					}else{
						pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
					}
				}
				getRequest().setAttribute("pdfPath", pdfPath);
				getRequest().setAttribute("oldFormId", oldFormId);
				getRequest().setAttribute("oldProcessId", proceId);
				//换表单json置空
				if(isChildWf != null){
					getRequest().setAttribute("commentJson", commentJson==null ?null:commentJson.replace("'", "’").replace("\"", "“"));
				}else{
					getRequest().setAttribute("commentJson", "");
				}
				getRequest().setAttribute("newInstanceId", wfProcess.getWfInstanceUid());
				if(allInstanceId != null&&!("").equals(allInstanceId) && !("null").equals(allInstanceId)){
					if(wfNode.getWfn_form_continue()!=null&&"1".equals(wfNode.getWfn_form_continue())){
						if(pdfNewPath!=null && !pdfNewPath.equals("")){
							wfProcess.setPdfPath(pdfNewPath+","+pdfNewPath);
						}
						if((wfProcess.getIsManyInstance()!=null&&wfProcess.getIsManyInstance().equals("1"))&&wfProcess.getStepIndex()==1){
							this.addAllAtt2(wfProcess, wfProcess.getWfInstanceUid(), emp);
						}else{
							this.addAllAtt2(wfProcess, instanceId, emp);
						}
						
					}else{
						List<SendAttachments> list = attachmentService.findSendAttsByDocguid(finstanceId+"fj");
						List<SendAttachments> oldlist = attachmentService.findSendAttsByDocguid(finstanceId+"oldfj");
						if(list!=null&&list.size()>0){
							for(int i=0;i<list.size();i++){
								SendAttachments sendAttachments = list.get(i);
								SendAttachments newSendAttachments = new SendAttachments();
								newSendAttachments.setDocguid(instanceId+"oldfj");
								newSendAttachments.setFilename(sendAttachments.getFilename());
								newSendAttachments.setFiletype(sendAttachments.getFiletype());
								newSendAttachments.setFilesize(sendAttachments.getFilesize());
								newSendAttachments.setLocalation(sendAttachments.getLocalation());
								newSendAttachments.setFileindex(sendAttachments.getFileindex());
								newSendAttachments.setFiletime(sendAttachments.getFiletime());
								newSendAttachments.setEditer(sendAttachments.getEditer());
								newSendAttachments.setTitle(sendAttachments.getTitle());
								newSendAttachments.setType(sendAttachments.getType());
								attachmentService.addSendAtts(newSendAttachments);
							}
						}
						if(oldlist!=null&&oldlist.size()>0){
							for(int i=0;i<oldlist.size();i++){
								SendAttachments sendAttachments = oldlist.get(i);
								SendAttachments newSendAttachments = new SendAttachments();
								newSendAttachments.setDocguid(instanceId+"oldfj");
								newSendAttachments.setFilename(sendAttachments.getFilename());
								newSendAttachments.setFiletype(sendAttachments.getFiletype());
								newSendAttachments.setFilesize(sendAttachments.getFilesize());
								newSendAttachments.setLocalation(sendAttachments.getLocalation());
								newSendAttachments.setFileindex(sendAttachments.getFileindex());
								newSendAttachments.setFiletime(sendAttachments.getFiletime());
								newSendAttachments.setEditer(sendAttachments.getEditer());
								newSendAttachments.setTitle(sendAttachments.getTitle());
								newSendAttachments.setType(sendAttachments.getType());
								attachmentService.addSendAtts(newSendAttachments);
							}
						}
					}
				}
				getRequest().setAttribute("newProcessId", wfProcess.getWfProcessUid());
				getRequest().setAttribute("allInstanceId", allInstanceId);
			} else {
				//根据事项
				if(wfitem!=null){
					
					getRequest().setAttribute("siteId", item.getVc_ssbmid());
					
					String isFlexibleForm = wfitem.getIsFlexibleForm();
					getRequest().setAttribute("isFlexibleForm", isFlexibleForm!=null?isFlexibleForm:"0");		//是否使用弹性表单
					getRequest().setAttribute("itemType", wfitem.getVc_sxlx());
					if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
						String formPageJson = form.getFormPageJson();					//表单转换为true的内容
						getRequest().setAttribute("formPageJson", formPageJson);		
						
					}else{
						String formPdfPath = form.getForm_pdf();
						if (formPdfPath != null && !"".equals(formPdfPath)) {
							String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() 
									+ getRequest().getContextPath();
							formPdfPath = serverUrl+ "/form/html/"+formPdfPath.substring(formPdfPath.lastIndexOf("/") + 1);	
						}
						JSONArray jArr = new JSONArray();
						JSONObject jObj = new JSONObject();
						jObj.put("id", "form");
						jObj.put("name", "form");
						jObj.put("pdfUrl", formPdfPath);
						jObj.put("isSeal", "0");
						jArr.add(jObj);
						getRequest().setAttribute("pdfPath", formPdfPath);
						getRequest().setAttribute("allPdfPath", jArr.toString());
					}
				}
				
			}
			List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId + ATT_SUFFIX_NAME,null);
			List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(instanceId + ATT_FJSUFFIX_NAME,null);
			List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(instanceId + "oldfj",null);
			getRequest().setAttribute("attSize", sattList.size() + sattExtList.size()+ oldExtList.size());
			String allowUpload = "false";//是否允许上传附件
			String zwTemSel = "false";//是否选择正文模板
			if(wfNode != null){
				if("1".equals(wfNode.getNode_allowUpload())){
					allowUpload =  "true";
				}
				if("1".equals(wfNode.getWfn_zwTemSel())){
					zwTemSel = "true";
				}
			}
			
			if(null != skipNextnodes && skipNextnodes.equals(1)){
				nodes = tableInfoExtendService.skipNextNodes(nodes, emp.getEmployeeGuid());
			}
			
			getRequest().setAttribute("nodes", nodes);
			getRequest().setAttribute("childs", childs);
			getRequest().setAttribute("isHaveEndNode", isHaveEndNode);
			getRequest().setAttribute("workFlowId", workFlowId);
			getRequest().setAttribute("itemId", itemId);
			getRequest().setAttribute("formLocation", formLocation);
			getRequest().setAttribute("formId", formId);
			getRequest().setAttribute("nodeId", wfNode.getWfn_id());
			getRequest().setAttribute("isfollow", wfNode.getWfn_isfollow());
			getRequest().setAttribute("isseal", wfNode.getWfn_isseal());
			getRequest().setAttribute("isUploadAttach", wfNode.getWfn_isUploadAttach());		//是否必须上传附件
			getRequest().setAttribute("isFirst", isFirst);
			getRequest().setAttribute("title_column", title_column);
			getRequest().setAttribute("isEndProcess", isEndProcess);
			getRequest().setAttribute("send", 1);// 第一步展现出下一步的所有节点
			getRequest().setAttribute("firstStep", firstStep);
			getRequest().setAttribute("isCyWork", isCyWork);
			getRequest().setAttribute("instanceId", instanceId);
			getRequest().setAttribute("docguid", instanceId);
			getRequest().setAttribute("processId", processId);
			getRequest().setAttribute("yqinstanceid", yqinstanceid);
			getRequest().setAttribute("userId", userId);
			getRequest().setAttribute("cType", cType);
			getRequest().setAttribute("relation", relation);
			getRequest().setAttribute("isChildWf", isChildWf);
			if(directSend != null && "true".equals(directSend)){
				getRequest().setAttribute("directSend", directSend);
			}
			getRequest().setAttribute("finstanceId", finstanceId);
			getRequest().setAttribute("isSend", isSend);
			getRequest().setAttribute("isWriteNewValue", isWriteNewValue);
			// 附件
			List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
			getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));
			//根据流程id，节点id，表单ID获取改节点有几个字段必填,第一个字段为编码，第二个字段为中文名称
			List<Object[]> list=tableInfoService.getIsBt(workFlowId,wfNode.getWfn_id(),formId,"1");
			StringBuffer sb = new StringBuffer();
			if(list!=null){
				for(int i=0;i<list.size();i++){
					Object[] obj = list.get(i);
					if(i!=0){
						sb.append(";");
					}
					sb.append((String)obj[0]).append(":").append((String)obj[1]);
				}
			}
			getRequest().setAttribute("isbt", sb.toString());
			// 分发打开新的表单
			String pdfPath = (String) getRequest().getAttribute("pdfPath");
			if(pdfPath!=null && !pdfPath.equals("")){
				String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
				pdfPath = pdfPath.replace(serverUrl, PathUtil.getWebRoot());
				if(oldPath==null){
					oldPath = pdfPath;
				}
				int imageCount  =1;
				try {
					imageCount = PdfPage.getPdfPage(oldPath);
				} catch (Exception e) {
				}
				getRequest().setAttribute("imageCount", imageCount);
			}else{
				getRequest().setAttribute("imageCount", 1);
			}
			// ------------------------------个人常用语------------start-------------------
			String userName = tableInfoService.findNameByEmpId(userId);
			List<PersonalComment> personalComments = commentService.getPersonalComments(userId);
			String personComs = "";// '{"datas":[{"text":"同意"},{"text":"请批示"},{"text":"请速办"},{"text":"送传阅"}]}';
			if (personalComments != null && personalComments.size() != 0) {
				for (PersonalComment pc : personalComments) {
					personComs += pc.getContent() + ",";
				}
				if(!("").equals(personComs) && personComs.length()>0){
					personComs = personComs.substring(0,personComs.length()-1);
				}
			}
			// ------------------------------个人常用语--------------end-----------------
			getRequest().setAttribute("userId", userId);
			getSession().setAttribute("userName", userName);
			getRequest().setAttribute("isEndReply", isEndReply);
			getSession().setAttribute("loginname", emp.getEmployeeLoginname());
			getSession().setAttribute("personalComments", personComs);
			getSession().setAttribute("zsdw", SystemParamConfigUtil.getParamValueByParam("xtoId"));
			getSession().setAttribute("csdw", SystemParamConfigUtil.getParamValueByParam("xccid"));
			getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
			getSession().setAttribute("yffs", SystemParamConfigUtil.getParamValueByParam("fs"));
			getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
			getRequest().setAttribute("isOver", "0");
			String params = getRequest().getParameter("params");  //params = "wjnr**12345678989***lwdw**中威科技";
			getRequest().setAttribute("params", params); 
			String socketIp = SystemParamConfigUtil.getParamValueByParam("sockIp");
			getRequest().setAttribute("socketIp", socketIp);
			getRequest().setAttribute("noCheck", true);
			getRequest().setAttribute("modId", modId);
			getRequest().setAttribute("matchId", matchId);
			getRequest().setAttribute("dicId", dicId);
			getRequest().setAttribute("dicValue", dicValue);
			String trueOAUrl = SystemParamConfigUtil.getParamValueByParam("trueOAUrl");
			getRequest().setAttribute("trueOAUrl", trueOAUrl);
			//方正电子公章系统地址
			String founderSealUrl = SystemParamConfigUtil.getParamValueByParam("founderSealUrl");
			getRequest().setAttribute("founderSealUrl", founderSealUrl);
			//获取页面风格相关参数
			Map<String, String> map = new HashMap<String, String>();      
			List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);                   		
			if(null != fontSize && fontSize != 0){
				getRequest().setAttribute("fontSize", fontSize);
			}else{
				if(formStylelist != null && formStylelist.size() > 0){                               		
					FormStyle formStyle = formStylelist.get(0);                                      		
					if(formStyle != null){                                                           		
						getRequest().setAttribute("fontSize", formStyle.getFontSize());              		
					}
				}
			}
			
			if(formStylelist != null && formStylelist.size() > 0){                               		
				FormStyle formStyle = formStylelist.get(0);                                      		
				if(formStyle != null){                                                           		
					getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());		
					getRequest().setAttribute("dateFormat", formStyle.getDateFormat());   
					getRequest().setAttribute("font", formStyle.getFont());
				}
			}                                                                                    		
			getRequest().setAttribute("showCyBtn", false);
			getRequest().setAttribute("zwTemSel", zwTemSel);
			getRequest().setAttribute("allowUpload", allowUpload);
			getRequest().setAttribute("isFq", true);
			String title = wfitem != null ? wfitem.getVc_sxmc():"";
			getRequest().setAttribute("title", StringUtils.isNotBlank(title) ? title.replace("\r\n", "").replace("\r", "").replace("\n", "") : title);
			String downloadUrl = FILE_DOWNLOAD_URL;
			String realId = SystemParamConfigUtil.getParamValueByParam("readIp");
			String[] realIds = realId.split("##");
			if(downloadUrl.indexOf(realIds[1]) != -1){
				downloadUrl = downloadUrl.replace(realIds[1], realIds[0]);
			}
			getRequest().setAttribute("downloadUrl", FILE_DOWNLOAD_URL);
			String serverurl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			if(serverurl.indexOf(realIds[1]) != -1){
				serverurl = serverurl.replace(realIds[1], realIds[0]);
			}
			getRequest().setAttribute("serverurl", serverurl);
			
			String leaderIds = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
			
			String hideOpt_siteId = SystemParamConfigUtil.getParamValueByParam("hideOpt_siteId");
			if(CommonUtil.stringNotNULL(hideOpt_siteId) && hideOpt_siteId.contains(emp.getSiteId())){
				if(CommonUtil.stringNotNULL(leaderIds) && leaderIds.contains(emp.getEmployeeGuid())){
					getRequest().setAttribute("needHideOperate", false);
				}else{
					getRequest().setAttribute("needHideOperate", true);
				}
			}else{
				getRequest().setAttribute("needHideOperate", false);
			}
		}
		return "pagesdome";
	}
	
	
	/**
	 * 得到工作流节点绑定的人员组
	 */
	public String userGroup() {
		String nodeId = getRequest().getParameter("nodeId");
		String click = getRequest().getParameter("click");
		String exchange = getRequest().getParameter("exchange");
		String isTreeAll =  getRequest().getParameter("isTreeAll");
		WfNode wfNode = new WfNode();
		if (Boolean.parseBoolean(click) == true) {// 点击节点才有人显示
			wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		} else {
			wfNode = null;
		}
		String send = getRequest().getParameter("send");
		String routType = getRequest().getParameter("routType");
		if (routType == null || ("").equals(routType) || ("null").equals(routType)) {
			getRequest().setAttribute("routType", 0);
		} else {
			getRequest().setAttribute("routType", routType);
		}
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("send", send);
		getRequest().setAttribute("exchange", exchange);
		getRequest().setAttribute("isTreeAll", isTreeAll);
		return "userGroup";
	}
	
	/**
	 * 描述：得到工作流节点绑定的人员组
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午4:12:56
	 */
	public String deptGroup() {
		String nodeId = getRequest().getParameter("nodeId");
		String click = getRequest().getParameter("click");
		String exchange = getRequest().getParameter("exchange");
		WfNode wfNode = new WfNode();
		if (Boolean.parseBoolean(click) == true) {// 点击节点才有人显示
			wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		} else {
			wfNode = null;
		}
		String send = getRequest().getParameter("send");
		String routType = getRequest().getParameter("routType");
		String groupId = "";
		List<InnerUserMapEmployee> innerUserList = new ArrayList<InnerUserMapEmployee>();
		if (!("").equals(wfNode) && wfNode != null) {
			// 获取人员组的id
			groupId = wfNode.getWfn_staff();
			// 获取人员组的人员信息
			innerUserList = groupService.getListByInnerUserId(groupId,null,"");
		}
		// 重定向时
		if (routType == null || ("").equals(routType)
				|| ("null").equals(routType)) {
			getRequest().setAttribute("routType", 0);
		} else {
			getRequest().setAttribute("routType", routType);
		}
		getRequest().setAttribute("userList", innerUserList);
		String userid = null;
		if (innerUserList != null) {
			for (int i = 0; i < innerUserList.size(); i++) {
				InnerUserMapEmployee innerUserMapEmployee = innerUserList
						.get(i);
				if (userid != null) {
					userid += ("," + innerUserMapEmployee.getEmployee_id());
				} else {
					userid = innerUserMapEmployee.getEmployee_id();
				}

			}
		}
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("send", send);
		getRequest().setAttribute("exchange", exchange);
		return "deptGroup";
	}
	
	/**
	 * 
	 * 描述：根据最大的instanceId获取办件处于的步骤
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午4:13:19
	 */
	public void getMaxProcessIdByAllInstanceId() throws Exception{
		String allInstanceId = getRequest().getParameter("allInstanceId");
		String processId = tableInfoService.getMaxProcessIdByAllInstanceId(allInstanceId);
		//以下步骤,在中间步骤中插入父instanceId
		WfProcess wfprocess = tableInfoService.getProcessById(processId);
		if(wfprocess!=null ){
			String instanceId = wfprocess.getfInstancdUid();
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				Integer pStepIndex = list.get(0).getStepIndex();
				wfprocess.setpStepIndex(pStepIndex);
				tableInfoService.update(wfprocess);
			}
		}
		try {
			getResponse().getWriter().print(processId);
		} catch (IOException e) {
			getResponse().getWriter().print("");
		} finally {
			getResponse().getWriter().close();
		}
	}
	
	/**
	 * @Title: isGoExChange
	 * @Description: 获取是否走公文交换平台的人员信息 及 假节点分发插一条步骤数据入库
	 * @param 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public void isGoExChange() throws IOException {
		// 针对只有一个人处理--xtoName、xccName
		String xtoName = getRequest().getParameter("xtoName");
		String xccName = getRequest().getParameter("xccName");
		String userId = xtoName + xccName;
		String[] userIds = userId.split(",");
		// 是否合并节点--即下一节点下面有多个子流程
		String nodeId = getRequest().getParameter("nextNodeId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String commentJson = getRequest().getParameter("json");
		commentJson = JSONReplaceUtil.replaceJson(commentJson);
		String thisformId = getRequest().getParameter("formId");
		String oldProcessId = getRequest().getParameter("oldProcessId");

		//获取当前的用户
		Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		WfProcess oldProcess = pendingService.getProcessByID(oldProcessId);
		//不存在:针对于打开会议管理模式(打开子流程直接登记分发)
		if(oldProcess==null){ 
			getResponse().getWriter().print("noInfo,"+employee.getEmployeeGuid()); 
			return ;
		}
		
		//保存日志信息表
		TrueJson entity = new TrueJson();
		entity.setInstanceId(oldProcess.getWfInstanceUid());
		entity.setProcessId(oldProcessId);
		entity.setSaveDate(new Date());
		entity.setUserId(employee.getEmployeeGuid());
		entity.setTrueJson(commentJson);
		entity.setExcute("isGoExChange");
		trueJsonService.saveTrueJson(entity);
		
		
		String oldNodeId = oldProcess.getNodeUid();
		// 具体详细信息
		String info = "";// 格式：isMerge,empId,instanceId,processId,formId,workflowId;.....
		Integer isMerge = 0;
		String instanceId = "";
		String processId = "";
		String formId = "";
		String childWorkflowId = "";
		String childNodeId = "";
		String doType = "";//主办协办
		String wfc_ctype = "";//子流程类型
		//统计下未能被选中的人员信息
		
		List<String> unCheckedUserList = new ArrayList<String>();
		List<String> choiceUserList = new ArrayList<String>();
		//List<String> allUserList = new ArrayList<String>();
		List<WfChild> childList = new ArrayList<WfChild>();
		if (!("").equals(userId)) {
			for(String id:userIds){
				unCheckedUserList.add(id);
			}
			// 根据当前节点Id查找下一子流程和当前节点中间的线
			List<WfLine> wflines = workflowBasicFlowService.findNextWfLineByNodeId(nodeId, workFlowId);
			if (wflines.size() > 0 && wflines != null) {
				// 获取线上面的人及当前线的下一端的位置
				for (WfLine wfLine : wflines) {
					for (String empId : userIds) {
						// 针对收文只有一个人
						String wfLineCondition = wfLine.getWfl_conditions();
						if(wfLineCondition!=null && wfLineCondition.contains(",")){
							String[] wfLConditionEmps = wfLineCondition.split(",");
							for (String wfce : wfLConditionEmps) {
								if (empId.equals(wfce)) {
									choiceUserList.add(empId);
									Employee emp = employeeService.findEmployeeById(empId);
									Department dep = null;
									if(emp==null){
										isMerge = 2;
										dep = departmentService.findDepartmentById(empId);
									}else{
										dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
										isMerge = dep.getIsExchange();
									}
									// ---------是否合并---------
									//isMerge = dep.getIsExchange();
									// 获取下一模块名---节点或者子流程
									String moduleId = wfLine.getWfl_wBaseMode();
									// 根据模块名查找对应的子流程
									WfChild wfChild = workflowBasicFlowService.getWfChildByModuleId(moduleId, workFlowId);
									// ---------子流程id---------
									if (wfChild != null) {
										childWorkflowId = wfChild.getWfc_cid();
										wfc_ctype = wfChild.getWfc_ctype();
										if(!childList.contains(wfChild)){
											childList.add(wfChild);
										}
										// 获取子流程第一步节点
										WfNode childWfFirstNode = workflowBasicFlowService.findFirstNodeId(wfChild.getWfc_cid());
										// ---------子流程节点绑定的表单id---------
										formId = childWfFirstNode.getWfn_defaultform();
										// ---------子流程第一步节点id---------------
										childNodeId = childWfFirstNode.getWfn_id();
									}
									instanceId = UuidGenerator.generate36UUID();
									processId = UuidGenerator.generate36UUID();
									if(!("").equals(xtoName) && xtoName.indexOf(wfce) > -1){
										doType = "1";
									}else if(!("").equals(xccName) && xccName.indexOf(wfce) > -1){
										doType = "2";
									}
									info += isMerge  + "," + empId + "," + instanceId + "," + processId + "," + formId + ","
										   		+ childWorkflowId + "," + childNodeId + "," + doType + "," + wfc_ctype + ";";
									break;
								}
							}
						}
					}
				}
			}
		}
		unCheckedUserList.removeAll(choiceUserList);
		if (!("").equals(info)) {
			info = info.substring(0, info.length() - 1);
		}
		try {
			//保存该节点的数据库值
			this.saveForm(thisformId, 2, instanceId, thisformId, nodeId, workFlowId, "" ,"false","");
			oldProcess.setCommentJson(commentJson);
			tableInfoService.addNewProcessOfFake(oldProcess,nodeId);
			//插入附件
			String closeframe = getRequest().getParameter("closeframe");
			if(closeframe==null || closeframe.equals("")){
				this.addAllAtt(oldProcess, oldProcess.getAllInstanceid(), employee);
			}
			boolean outparwf = true;
			for(WfChild child: childList){
				if(child.getWfc_outparwf()!=null && child.getWfc_outparwf().equals("1")){
				}else{
					outparwf = false;
				}
			}
			if(childList==null ||childList.size() ==0){
				outparwf = false;
			}
			//2.发送下一步
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			
			String nodeinfo = getNextNodeInfo(oldNodeId, unCheckedUserList);		//获取连接的下一节点

			automaticToNext(info, oldProcessId, nodeId, oldProcess.getNodeUid(),emp, commentJson);		//分发子流程

			///getResponse().getWriter().print("outparwf:"+nodeinfo);
			getResponse().getWriter().print("outparwf:");

		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			getResponse().getWriter().close();
		}
	}
	
	
	/**
	 * 
	 * 描述：获取某一节点的下一节点
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2015-8-11 下午3:30:17
	 */
	public String getNextNodeInfo(String nodeId, List<String> unCheckedUserList){
		if(unCheckedUserList==null || unCheckedUserList.size()==0){		//吴漏选人员
			return "";
		}
		WfNode node = workflowBasicFlowService.findNodeById(nodeId);
		String nextNodeId = "";		//下一节点id
		String route_type = "";  //节点类型
		WfNode nextNode = null; 
		String m_userId = "";
		if(node!=null){
			WfMain main =  node.getWfMain();
			String wfUId = main.getWfm_id();		//流程id
			List<WfLine> wflines = workflowBasicFlowService.findNextWfLineByNodeId(nodeId, wfUId);		//该节点指向的线条
			if (wflines.size() > 0 && wflines != null) {
				// 获取线上面的人及当前线的下一端的位置
				for (WfLine wfline : wflines) {
					String wflineCondition = wfline.getWfl_conditions();			//查询线条上面的条件
					String moduleId = wfline.getWfl_wBaseMode();
					for(String userId : unCheckedUserList){
						if(wflineCondition!= null && wflineCondition.contains(userId)){	//人员符合条件
							WfNode wfnode = workflowBasicFlowService.getWfNodeByModuleId(moduleId, wfUId);
							if(wfnode!=null){
								nextNode = wfnode;
							}
							m_userId = userId;
							if(nextNode!=null){
								break;
							}
						}
					}
				}
			}
			if(nextNode==null){
				List<WfNode> list = workflowBasicFlowService.showNode(wfUId, nodeId, "");
				if(list!=null && list.size()>0){
					nextNode = list.get(0);
				}
				m_userId = unCheckedUserList.get(0);
			}
			
			if(nextNode!=null){
				nextNodeId = nextNode.getWfn_id();
				route_type = nextNode.getWfn_route_type();
			}
		}
		return nextNodeId+","+route_type+","+m_userId;
	}
	
	
	/**
	 * 
	 * 描述：插入待收信息
	 * 作者:蔡亚军
	 * 创建时间:2015-6-16 下午4:53:44
	 */
	public void automaticToNext(String info, String oldProcessId, String nodeId, 
			String fromNodeId,Employee emp, String commentJson) throws Exception{
		WfProcess oldProcess = pendingService.getProcessByID(oldProcessId);
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (oldProcess.getStepIndex() == 1 && !("").equals(oldProcess.getDoType()) 
						&& ("1").equals(oldProcess.getIsChildWf())) {
				isFirstChildWf = "true";
		}
		if(info!=null && !info.equals("")){
			String[] infos = info.split(";");
			String oldInstanceId = oldProcess.getWfInstanceUid();
			List<SendAttachments> newlist = attachmentService.findSendAttsByDocguid(oldInstanceId+"fj");
			for(int i=0; i<infos.length; i++){
				String[] wfU_info = infos[i].split(",");
				String toNodeId = wfU_info[6];
				// 子流程id
				String childWorkflowId = wfU_info[5];
				// 主办协办
				String doType = wfU_info[7];
				// 子流程类型
				String wfc_ctype = wfU_info[8];
				// 获取子流程第一步节点
				WfNode childWfFirstNode = workflowBasicFlowService.findFirstNodeId(childWorkflowId);
				// 针对只有一个人处理--xtoName、xccName
				String userId = wfU_info[1];
				// 标题用主流程的
				String vc_title = getTitle(oldProcess.getWfUid(), oldProcess.getFormId(), oldProcess.getWfInstanceUid()).split(";")[0];
				String newInstanceId = wfU_info[2];
				if(newlist!=null && newlist.size()!=0){
					for(SendAttachments sendAttachments: newlist){
						SendAttachments newSendAttachments = new SendAttachments();
						newSendAttachments.setDocguid(newInstanceId+"oldfj");
						newSendAttachments.setFilename(sendAttachments.getFilename());
						newSendAttachments.setFiletype(sendAttachments.getFiletype());
						newSendAttachments.setFilesize(sendAttachments.getFilesize());
						newSendAttachments.setLocalation(sendAttachments.getLocalation());
						newSendAttachments.setFileindex(sendAttachments.getFileindex());
						newSendAttachments.setFiletime(sendAttachments.getFiletime());
						newSendAttachments.setEditer(sendAttachments.getEditer());
						newSendAttachments.setTitle(sendAttachments.getTitle());
						newSendAttachments.setType(sendAttachments.getType());
						attachmentService.addSendAtts(newSendAttachments);
					}
				}
				
				// 页面回值--保存
				saveForm(oldProcess.getFormId(), 2, oldInstanceId, oldProcess.getFormId(), fromNodeId, childWorkflowId,"",isFirstChildWf,"");
				// 入步骤记录及待收库
				WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(oldInstanceId);
				String formId = childWfFirstNode.getWfn_defaultform();
				String htmlpath = "";
				String path = pWfProcess.getPdfPath();
				String combinepdf = "";
				
				zwkjFormService.saveChildFormValue(oldInstanceId, fromNodeId, oldProcess.getFormId(), newInstanceId, formId);
				
				//插入的待办信息
				SendNextProcess sendNextProcess = new SendNextProcess();
				sendNextProcess.setTitle(oldProcess.getProcessTitle());
				sendNextProcess.setM_userId(userId);
				sendNextProcess.setUserId(emp.getEmployeeGuid());
				sendNextProcess.setInstanceId(newInstanceId);
				sendNextProcess.setChildWorkflowId(childWorkflowId);
				sendNextProcess.setNodeId(nodeId);
				sendNextProcess.setFromNodeId(fromNodeId);
				sendNextProcess.setNextNodeId(toNodeId);
				sendNextProcess.setOldProcess(oldProcess);
				sendNextProcess.setChildWfFirstNode(childWfFirstNode);
				sendNextProcess.setPdfPath(path);
				sendNextProcess.setcType(doType);
				sendNextProcess.setIsMerge("0");
				sendNextProcess.setWfc_ctype(wfc_ctype);
				sendNextProcess.setTrueJson(commentJson);
				WfProcess pro = oldProcess;
				sendNextProcess.setpStepIndex(pro.getStepIndex());
				if(pro!=null){
					pro.setFinshTime(new Date());
					tableInfoService.updateProcess(pro);
				}
				//此步骤插入待办非常慢
				ToPdfThread toPdfThread = new ToPdfThread(htmlpath, combinepdf, "automatic", sendNextProcess,tableInfoService,flowService);
				toPdfThread.start();
			}
		}
	}
	

	/**
	 * @Title: getNextIsMerge
	 * @Description: 是否走公文交换平台
	 * @param 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public void getNextIsMerge() throws Exception {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		
		String oldProcessId = getRequest().getParameter("oldProcessId");
		
		WfProcess oldProcess = pendingService.getProcessByID(oldProcessId);
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (oldProcess.getStepIndex() == 1 && !("").equals(oldProcess.getDoType()) 
				&& ("1").equals(oldProcess.getIsChildWf())) {
			isFirstChildWf = "true";
		}
		// 点击的节点id
		String fromNodeId = getRequest().getParameter("nextNodeId");
		// 当前节点id
		String nodeId = getRequest().getParameter("nodeId");
		// 当前步骤的json
		String commentJson = getRequest().getParameter("json");
		commentJson = JSONReplaceUtil.replaceJson(commentJson);
		// 子流程第一步节点id
		String toNodeId = getRequest().getParameter("childNodeId");
		// 子流程id
		String childWorkflowId = getRequest().getParameter("newWorkFlowId");
		// 主办协办
		String doType = getRequest().getParameter("doType");
		// 获取子流程第一步节点
		WfNode childWfFirstNode = workflowBasicFlowService.findFirstNodeId(childWorkflowId);
		// 针对只有一个人处理--xtoName、xccName
		String userId = getRequest().getParameter("userId");
		// 是否合并子流程
		String isMerge = getRequest().getParameter("isMerge");

		// 标题用主流程的
		String vc_title = getTitle(oldProcess.getWfUid(), oldProcess.getFormId(), oldProcess.getWfInstanceUid()).split(";")[0];
		String newInstanceId = getRequest().getParameter("newInstanceId");
		String oldInstanceId = oldProcess.getWfInstanceUid();
		List<SendAttachments> list = attachmentService.findSendAttsByDocguid(oldInstanceId+"fj");
		List<SendAttachments> newlist = attachmentService.findSendAttsByDocguid(oldInstanceId+"newfj");
		List<SendAttachments> oldlist = attachmentService.findSendAttsByDocguid(oldInstanceId+"oldfj");
		// 页面回值--保存
		String value = this.saveForm(oldProcess.getFormId(), 1, oldInstanceId, oldProcess.getFormId(), fromNodeId, childWorkflowId,"",isFirstChildWf,userId);
		// 入步骤记录及待收库
		String newFormId = childWfFirstNode.getWfn_defaultform();
		//获取原先
		String pdfOldPath = "";
		WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(oldInstanceId);
		String path = "";
		if(pWfProcess!=null){
			path = pWfProcess.getPdfPath();
		}
		String[] pdfPaths = null; 
		if(path!=null){
			pdfPaths = path.split(",");
		}
		String pdfPath = "";
		String isLast = getRequest().getParameter("isLast");
		String htmlpath = "";
		String combinepdf = "";
		if(childWfFirstNode.getWfn_form_continue()!=null 
				&& ("1").equals(childWfFirstNode.getWfn_form_continue())){
			if(newlist!=null&&newlist.size()!=0){
				for(int i=0;i<newlist.size();i++){
					SendAttachments sendAttachments = newlist.get(i);
					SendAttachments newSendAttachments = new SendAttachments();
					newSendAttachments.setDocguid(newInstanceId+"oldfj");
					newSendAttachments.setFilename(sendAttachments.getFilename());
					newSendAttachments.setFiletype(sendAttachments.getFiletype());
					newSendAttachments.setFilesize(sendAttachments.getFilesize());
					newSendAttachments.setLocalation(sendAttachments.getLocalation());
					newSendAttachments.setFileindex(sendAttachments.getFileindex());
					newSendAttachments.setFiletime(sendAttachments.getFiletime());
					newSendAttachments.setEditer(sendAttachments.getEditer());
					newSendAttachments.setTitle(sendAttachments.getTitle());
					newSendAttachments.setType(sendAttachments.getType());
					attachmentService.addSendAtts(newSendAttachments);
					}
			}else{
				if(oldlist!=null&&oldlist.size()==1){
					for(int i=0;i<oldlist.size();i++){
						SendAttachments sendAttachments = oldlist.get(i);
						SendAttachments newSendAttachments = new SendAttachments();
						newSendAttachments.setDocguid(newInstanceId+"oldfj");
						newSendAttachments.setFilename(sendAttachments.getFilename());
						newSendAttachments.setFiletype(sendAttachments.getFiletype());
						newSendAttachments.setFilesize(sendAttachments.getFilesize());
						newSendAttachments.setLocalation(sendAttachments.getLocalation());
						newSendAttachments.setFileindex(sendAttachments.getFileindex());
						newSendAttachments.setFiletime(sendAttachments.getFiletime());
						newSendAttachments.setEditer(sendAttachments.getEditer());
						newSendAttachments.setTitle(sendAttachments.getTitle());
						newSendAttachments.setType(sendAttachments.getType());
						attachmentService.addSendAtts(newSendAttachments);
					}
				}
			}
			
			pdfOldPath = pdfPaths[0];
			//生成空的表单给子流程第一步html
			htmlpath = getHtmlToNewHtml(newFormId, toNodeId, "", childWfFirstNode.getWfn_defaultform(), false, true);
			//pdf
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			String pdfNewPath = pdfRoot+dstPath+ (htmlpath.substring(htmlpath.lastIndexOf("/")+1,htmlpath.length()-5)+"merge")+".pdf";
			//合并后的pdf地址
			String mergePath = "";
			if(pdfOldPath!=null && !pdfOldPath.equals("")){	
				 mergePath = pdfNewPath.substring(0, pdfNewPath.length() - 4) + "mergeNew" + ".pdf";
			}else{
				 mergePath = pdfNewPath;
			}
			pdfPath = mergePath + "," + mergePath;
			combinepdf = pdfOldPath;
		}else{
			if(list!=null && list.size()!=0){
				for(int i=0;i<list.size();i++){
					SendAttachments sendAttachments = list.get(i);
					SendAttachments newSendAttachments = new SendAttachments();
					newSendAttachments.setDocguid(newInstanceId+"fj");
					newSendAttachments.setFilename(sendAttachments.getFilename());
					newSendAttachments.setFiletype(sendAttachments.getFiletype());
					newSendAttachments.setFilesize(sendAttachments.getFilesize());
					newSendAttachments.setLocalation(sendAttachments.getLocalation());
					newSendAttachments.setFileindex(sendAttachments.getFileindex());
					newSendAttachments.setFiletime(sendAttachments.getFiletime());
					newSendAttachments.setEditer(sendAttachments.getEditer());
					newSendAttachments.setTitle(sendAttachments.getTitle());
					newSendAttachments.setType(sendAttachments.getType());
					attachmentService.addSendAtts(newSendAttachments);
				}
			}
			if(oldlist!=null&&oldlist.size()!=0){
				for(int i=0;i<oldlist.size();i++){
					SendAttachments sendAttachments = oldlist.get(i);
					SendAttachments newSendAttachments = new SendAttachments();
					newSendAttachments.setDocguid(newInstanceId+"oldfj");
					newSendAttachments.setFilename(sendAttachments.getFilename());
					newSendAttachments.setFiletype(sendAttachments.getFiletype());
					newSendAttachments.setFilesize(sendAttachments.getFilesize());
					newSendAttachments.setLocalation(sendAttachments.getLocalation());
					newSendAttachments.setFileindex(sendAttachments.getFileindex());
					newSendAttachments.setFiletime(sendAttachments.getFiletime());
					newSendAttachments.setEditer(sendAttachments.getEditer());
					newSendAttachments.setTitle(sendAttachments.getTitle());
					newSendAttachments.setType(sendAttachments.getType());
					attachmentService.addSendAtts(sendAttachments);
				}
			}
			pdfOldPath = pdfPaths[1];
		    htmlpath = getHtmlToNewHtml(newFormId, toNodeId, value, childWfFirstNode.getWfn_defaultform(), false, false);
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			String pdfOldPath1 = pdfRoot+dstPath+  (htmlpath.substring(htmlpath.lastIndexOf("/"),htmlpath.length()-5)+"merge")+".pdf";
			pdfPath = pdfOldPath+","+pdfOldPath;
		}
		
		if(isLast!=null&&isLast.equals("1")){
			if(newlist!=null&&newlist.size()!=0){
				for(int i=0;i<newlist.size();i++){
					SendAttachments sendAttachments = newlist.get(i);
					attachmentService.deleteAtts(sendAttachments.getId(), true);
				}
			}
		}
		
		Sw sw = new Sw();
		if(("1").equals(isMerge) || isMerge.equals("2")){
			sw = addSwOfFakeNode(oldProcess);
		}
		//插入的待办信息
		SendNextProcess sendNextProcess = new SendNextProcess();
		sendNextProcess.setTitle(vc_title);
		sendNextProcess.setM_userId(userId);
		sendNextProcess.setUserId(emp.getEmployeeGuid());
		sendNextProcess.setInstanceId(newInstanceId);
		sendNextProcess.setChildWorkflowId(childWorkflowId);
		sendNextProcess.setNodeId(nodeId);
		sendNextProcess.setFromNodeId(fromNodeId);
		sendNextProcess.setNextNodeId(toNodeId);
		sendNextProcess.setOldProcess(oldProcess);
		sendNextProcess.setChildWfFirstNode(childWfFirstNode);
		sendNextProcess.setIsMerge(isMerge);
		sendNextProcess.setTrueJson(commentJson);
		sendNextProcess.setPdfPath(pdfPath);
		sendNextProcess.setcType(doType);
		sendNextProcess.setSw(sw);
		WfProcess pro = oldProcess;
		if(pro!=null){
			pro.setAction_status(2);
			tableInfoService.updateProcess(pro);
		}
		//此步骤插入待办非常慢
		ToPdfThread toPdfThread = new ToPdfThread(htmlpath, combinepdf,
				"ffnext", sendNextProcess,tableInfoService,flowService);
		toPdfThread.start();
		
		try {
			getResponse().getWriter().print("success");
		} catch (IOException e) {
			getResponse().getWriter().print("fail");
		} finally {
			getResponse().getWriter().close();
		}
	}
	
	/**
	 * 
	 * @Title: addSwOfFakeNode 
	 * @Description: 入收文表
	 * @param @return    设定文件 
	 * @return Sw    返回类型 
	 * @throws
	 */
	public Sw addSwOfFakeNode(WfProcess oldProcess){
		Sw sw = new Sw();
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(oldProcess.getFormId());
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 非列表类型的存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() == null || ("").equals(ft.getListId())) {
				lists.add(ft);
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			//发送前先入库---取值用赋值字段
			if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
				tableNameList.add(lists.get(i).getAssignTableName());
			}
		}
		if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
			String tableName = tableNameList.get(0);
			//默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.findTableByFormId(tableName, oldProcess.getFormId(), oldProcess.getWfInstanceUid());
			if (mapList.size() != 0 && !("").equals(mapList) && mapList != null) {
				//查找对应关系,入库收文表
				for (FormTagMapColumn ft : tableNameAllLists) {
					if(("lwbt").equals(ft.getDocColumn())){
						sw.setLwbt(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}else if(("yfdw").equals(ft.getDocColumn())){
						sw.setYfdw(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}else if(("lwdw").equals(ft.getDocColumn())){
						sw.setLwdw(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}else if(("fs").equals(ft.getDocColumn())){
						sw.setFs(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}else if(("fwh").equals(ft.getDocColumn())){
						//sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == null ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
						sw.setLwh(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}else if(("gwlx").equals(ft.getDocColumn())){
						sw.setGwlx(mapList.get(0).get(ft.getFormtagname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getFormtagname().toUpperCase())+ "");
					}
				}
			}
		}
		return sw;
	}
	
	
	/**
	 * 
	 * 描述：判断该节点是否设置了固定人
	 * 1, 默认部门领导人
	 * 作者:蔡亚军
	 * 创建时间:2015-8-12 下午7:34:45
	 */
	public void isOnlyPerson() {
		// 流程Id
		String workFlowId = getRequest().getParameter("workFlowId");
		// 实例Id
		String instanceId = getRequest().getParameter("instanceId");
		// 下一步节点id
		String nextNodeId = getRequest().getParameter("nextNodeId");
		
		String processId = getRequest().getParameter("processId");
		
		String gdPerson = "";// 固定人员
		
		String zdPerson = "";// 指定节点包含的人员
		
//		String leaders ="";//	领导人
		String out2 = "";
		// 输出到页面上的是否是固定人的标志位
		String out = "";
		try {
			WfNode node = workflowBasicFlowService.getWfNode(nextNodeId);
			WfProcess process = tableInfoService.getProcessById(processId);
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = emp.getEmployeeGuid();
			//1, 如果 节点为回复节点，且 为其他流程发起的 交办 ，回复给 发起流程的 的人(不考虑)
			if(node.getNode_isReply() != null && node.getNode_isReply()==1 && process.getFjbProcessId() != null && !"".equals(process.getFjbProcessId())){
				WfProcess fProcess = tableInfoService.getProcessById(process.getFjbProcessId());
				gdPerson = fProcess.getUserUid();
			}else{
				//1、 部门领导人
				/*String leaderId = "";
				if(node!=null){
					String isdefdep = node.getWfn_isdefdep(); 		
					if(isdefdep!=null && isdefdep.equals("1")){		//默认部门
						//获取人员的id
						DepartmentLeader departmentLeader =employeeLeaderService.findDepartmentLeaderByEmpId(userId);
						if(departmentLeader!=null){
							leaderId = departmentLeader.getLeaderId();		//领导人Id
						}
					}
				}
				gdPerson = leaderId;
				// 节点固定人员Id
				if (node != null) {
					if(gdPerson==null || gdPerson.equals("")){
						gdPerson = node.getWfn_bd_user();
						if(gdPerson!=null && !gdPerson.equals("")){
							//用; 区分主办或者为协办
							String[] ids = gdPerson.split(";");
							String employeeId = "";
							if(ids!=null && ids.length==2){			//并行完全式
								String zsId = ids[0];		//主送
								Employee employee = employeeService.findEmployeeById(zsId);
								if(employee==null){		//主送不为用户
									List<DepartmentLeader> list = employeeLeaderService.findDepartmentLeaderByDepId(zsId);
									if(list!=null && list.size()>0){
										DepartmentLeader departmentLeader = list.get(0);
										employeeId = departmentLeader.getLeaderId();
									}
								}else{
									employeeId = employee.getEmployeeGuid();
								}
								if(employeeId!=null && !employeeId.equals("")){
									String csId = ids[1];
									String csEmployeeIds = "";
									String[] csids = csId.split(",");
									for(int i=0; i<csids.length; i++){
										Employee empl = employeeService.findEmployeeById(csids[i]);
										if(empl!=null){
											csEmployeeIds += empl.getEmployeeGuid()+",";
										}else{
											List<DepartmentLeader> list = employeeLeaderService.findDepartmentLeaderByDepId(csids[i]);
											DepartmentLeader departmentLeader = null;
											for(int j=0; j<list.size(); j++){
												departmentLeader = list.get(j);
												csEmployeeIds += departmentLeader.getLeaderId()+",";
											}
										}
									}
									if(csEmployeeIds!=null && !csEmployeeIds.equals("")){
										csEmployeeIds = csEmployeeIds.substring(0, csEmployeeIds.length()-1);
									}
									gdPerson = employeeId+";"+csEmployeeIds;
								}else{
									gdPerson ="";
								}
							}else{
								//只有抄送
								String csEmployeeIds = "";
								String[] csids = gdPerson.split(",");
								for(int i=0; i<csids.length; i++){
									Employee empl = employeeService.findEmployeeById(csids[i]);
									if(empl!=null){
										csEmployeeIds += empl.getEmployeeGuid()+",";
									}else{
										List<DepartmentLeader> list = employeeLeaderService.findDepartmentLeaderByDepId(csids[i]);
										DepartmentLeader departmentLeader = null;
										for(int j=0; j<list.size(); j++){
											departmentLeader = list.get(j);
											csEmployeeIds += departmentLeader.getLeaderId()+",";
										}
									}
								}
								if(csEmployeeIds!=null && !csEmployeeIds.equals("")){
									csEmployeeIds = csEmployeeIds.substring(0, csEmployeeIds.length()-1);
								}
								gdPerson = csEmployeeIds;
							}
						}
					}
				}*/
				// 2. 所谓的自动追溯
				List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, nextNodeId);
				if (wfbList != null && wfbList.size() != 0) {
					if ((nextNodeId).equals(wfbList.get(0).getFromNodeId())) {
						List<WfProcess> desPersons = tableInfoService.findProcesses(workFlowId, instanceId,wfbList.get(0).getToNodeId());
						boolean flag = true;
						if (desPersons.size() != 0 && desPersons != null && !("").equals(desPersons)) {
							String xtoname = "";// 主送
							String xccname = "";// 抄送
							for (WfProcess wfProcess : desPersons) {
								if (wfProcess.getIsMaster() == 1) {
//									String conditionSql = "";
//									String leaderId = "";
									String isdefdep = node.getWfn_isdefdep();
									String empType = node.getWfn_empType(); 		
									if(isdefdep!=null&&"1".equals(isdefdep)&&empType!=null && empType.equals("处长")){	
										/*conditionSql += " and t.emptype ='处长' ";
										//获取人员的id
										DepartmentLeader departmentLeader =employeeLeaderService.findChuzhangByEmpId(wfProcess.getUserUid(),conditionSql);
										if(departmentLeader!=null){
											leaderId = departmentLeader.getLeaderId();		//领导人Id
										}
										leaders = leaderId;*/
										flag = false;
									}else{
										xtoname = wfProcess.getUserUid();
									}
								} else {
									xccname += wfProcess.getUserUid() + ",";
								}
							}
							if (!("").equals(xccname) && xccname.length() > 1) {
								xccname = xccname.substring(0, xccname.length() - 1);
							}
							if(flag){
								zdPerson = xtoname + ";" + xccname;
							}
						}else{
							gdPerson = userId;		//自动追溯
							LOGGER.warn("自动追溯,居然未获取流程用户信息,默认发送给人员自身！ 用户名为"+emp.getEmployeeName());
							out2 = "nullUserId";
						}
					}
				}
			}
			gdPerson = gdPerson!=null?gdPerson:"";
			zdPerson = zdPerson!=null?zdPerson:"";
			if (gdPerson!=null && !("").equals(gdPerson) && ("").equals(zdPerson)) {
				if (gdPerson.contains(";")) {
					out = "bxwqs=" + gdPerson;
				} else {
					out = "gdPerson=" + gdPerson + ";";
				}
			} else if (("").equals(gdPerson) && !("").equals(zdPerson)) {
				out = "zdPerson=" + zdPerson;
			} else if(gdPerson!=null && !("").equals(gdPerson) && !("").equals(zdPerson)&&gdPerson.equals(zdPerson.subSequence(0, zdPerson.length()-1)) ){
				out = "gdPerson=" + gdPerson + ";";
			}else if (!("").equals(gdPerson) && !("").equals(zdPerson)) {
				out = "more";
			}
			/*else if(CommonUtil.stringNotNULL(leaders)){
				out = "leaderPerson="+leaders;
			}*/
			if ("nullUserId".equals(out2)){
				out = out2;
			}
			getResponse().getWriter().print(out);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 描述：流程中保存表单--发送下一步的操作
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-3-1 上午9:39:04
	 */
	public void sendNext() throws Exception {
		long startTime = System.currentTimeMillis();
		long endTime ;
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			String self_loop = getRequest().getParameter("self_loop");
			
			String processId = getRequest().getParameter("processId");
			//根据processId查询数据
			WfProcess lastProcess = pendingService.getProcessByID(processId); 
			if(lastProcess!=null){
				String isOver = lastProcess.getIsOver();
				if(isOver!=null && isOver.equals("OVER")){
					getResponse().getWriter().print("over");
					return;
				}
				lastProcess.setIsOver("OVER");
				tableInfoService.update(lastProcess);
			}
			
			//需要发短信的userId
			String sendMsgUserId = getRequest().getParameter("sendMsgId");
			// 主送人的Id
			String xtoUserId = getRequest().getParameter("xtoName");
			// 抄送人的Id
			String xccUserId = getRequest().getParameter("xccName");
			// 事项Id
			String itemId = getRequest().getParameter("itemId");
			// 子流程的实例类型-0:一个实例 1:多个实例
			String cType = getRequest().getParameter("cType");
			//设置下一个节点完成时间
			String wcsx = getRequest().getParameter("wcsx");
			// 是否从子流程进来
			String isChildWf = getRequest().getParameter("isChildWf");
			// 与父流程关系--0:异步 1:同步
			String relation = getRequest().getParameter("relation");
			// 父流程实例id
			String finstanceId = getRequest().getParameter("finstanceId");
			// 第一次进入子流程,入库数据表需要重新生成,这里获取的instanceId为了插步骤记录
			String newInstanceIdForChildWf = getRequest().getParameter("instanceId");
			// 第一步
			String isFirst = getRequest().getParameter("isFirst");
			String firstStep = getRequest().getParameter("firstStep");
			String isCy = getRequest().getParameter("isCy");
			// 是否有表单元素
			String isHaveFormjson = getRequest().getParameter("isHaveFormjson");
			// 获取当前登录用户
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String instanceId = getRequest().getParameter("instanceId");
			// 手写的意见
			String trueJson = getRequest().getParameter("json");
			Integer urgency = StringUtils.isNotBlank(getRequest().getParameter("urgency"))?Integer.parseInt(getRequest().getParameter("urgency")):null;
			// 替换字符串
			trueJson = JSONReplaceUtil.replaceJson(trueJson);
			
			//保存日志信息表
//			TrueJson entity = new TrueJson();
//			entity.setInstanceId(instanceId);
//			entity.setProcessId(processId);
//			entity.setSaveDate(new Date());
//			entity.setUserId(emp.getEmployeeGuid());
//			entity.setTrueJson(trueJson);
//			entity.setExcute("sendNext");
//			trueJsonService.saveTrueJson(entity);
			TrueJsonLogThread trueJsonLogThread = new TrueJsonLogThread(trueJsonService, instanceId, processId, emp.getEmployeeGuid(), trueJson, "sendNext");
			trueJsonLogThread.start(); 
			
			// 当前节点Id
			String nodeId = getRequest().getParameter("nodeId");
			
			String formPageJson = getRequest().getParameter("formPage");
			
			// 查找当前表单id(新表单id)
			WfNode wn = workflowBasicFlowService.findNodeById(nodeId);
			
			String formId = wn.getWfn_defaultform();
			// 流程Id
			String workFlowId = getRequest().getParameter("workFlowId");
			
			String mergepdf = "";
			if(lastProcess!=null && !lastProcess.equals("")){
				mergepdf = lastProcess.getMergePdf();
			}
			// 走子流程时的父流程processId
			String f_proceId = getRequest().getParameter("f_proceId");
			// 查找当前待办的Process实体
			WfProcess wfProcess = pendingService.getProcessByID(processId);
			WfItem wfItem = itemService.getItemById(itemId);
			String  isFlexibleForm = wfItem.getIsFlexibleForm();
			// 是否是子流程的第一步
			String isFirstChildWf = "";
			String oldformId = "";
			if(wfProcess!= null){
				oldformId = wfProcess.getOldFormId();
				if(oldformId==null || oldformId.equals("")){
					oldformId = wfProcess.getFormId();
				}
			}else{
				oldformId = getRequest().getParameter("oldFormId");
				//县主发县子时的第一步
				if(!("").equals(oldformId)){
					isFirstChildWf = "true
				}
			}
			if (("true").equals(isChildWf)) {
				instanceId = newInstanceIdForChildWf;
				processId = UuidGenerator.generate36UUID();
			}
			String value = "";
			// 无论pad端有没有数据，都是查询(pad端有数据，已经入库处理-saveElementForPad()，这里只需要查出来，如果没有数据，还是只需要查出来)
			if (("true").equals(isFirst) || !("").equals(isHaveFormjson) || ("true").equals(isChildWf)) { // web端填写表单,有表单数据就保存
				// 页面回值--保存
				value = this.saveForm(oldformId, 1, instanceId, formId, nodeId, workFlowId,finstanceId,isFirstChildWf,emp.getEmployeeGuid());
			} else {
				// 页面回值--查询
				value = this.saveForm(oldformId, 2, instanceId, formId, nodeId, workFlowId,finstanceId,isFirstChildWf,"");
			}
			// 标题的值
			String vc_title = "";
			if(("true").equals(isFirst) || ("true").equals(isChildWf) || ("").equals(isChildWf)){
				if(("true").equals(isChildWf) && formId.equals(oldformId)){
					vc_title = getTitle(workFlowId,formId,finstanceId).split(";")[0];
				}else{
					vc_title = getTitle(workFlowId,formId,instanceId).split(";")[0];
				}
			} else {
				vc_title = wfProcess.getProcessTitle();
			}
			if((vc_title==null || vc_title.equals("")) && wfProcess!=null){			//标题为空; 过程不为空
				vc_title =  wfProcess.getProcessTitle();
			}
			
			// 下一步节点Id(点击按钮时传过来的nodeId)(对于当前节点来说)
			String nextNodeId = getRequest().getParameter("nextNodeId");
			WfNode p_wfNode = tableInfoService.getWfNodeById(nextNodeId); // 获取节点属性
			Integer isExchange = 0;
			if (p_wfNode != null) {
				isExchange = p_wfNode.getIsExchange();
			}
			// 根据下一节点Id查找下下一节点Id(对于当前节点来说)
			List<WfNode> nodes = workflowBasicFlowService.showNode(workFlowId, nextNodeId, instanceId);
			// 判断下下一步的节点是否是结束
			boolean isEndProcess = false;
			if (nodes.size() == 0 && ("").equals(nodes)) {
				isEndProcess = true;
			}
			// 根据下一节点Id查找表单Id
			WfNode formNode = workflowBasicFlowService.findFormIdByNodeId(nextNodeId);
			// 查找对应的表单,并显示
			String formLocation = workflowBasicFlowService.findFormLocaltion(formNode.getWfn_defaultform());
			// 判断是否是传阅流程
			WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
			boolean isCyWF = false;
			if (item != null) {
				if(("2").equals(item.getVc_sxlx())) { // 传阅
					isCyWF = true;
				}
			}
			//获取该实例的第一个node属性
			WfNode wfNode2 = workflowBasicFlowService.findFirstNodeId(workFlowId);
			//获取对应父流程的pdf
			WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
			WfChild wfChild = null;
			if(null != pWfProcess){
				wfChild = workflowBasicFlowService.getWfChildByPidAndCid(workFlowId, pWfProcess.getWfUid());
			}
			// 不是保存再打开,更新json标志位
			trueJson = trueJson.replaceAll("\"isWrite\":1", "\"isWrite\":0").replaceAll("\"isSignWrite\":1", "\"isSignWrite\":0").replaceAll("\"isSignWrite\":\"1\"", "\"isSignWrite\":0");
			// 修改后正文,传标志位给前台，用于显示
			trueJson = trueJson.replace("\"resources\":[\"\"]", "\"resources\":[]");
			trueJson = trueJson.replace("\"newfile\":\"true\"", "\"newfile\":\"false\""); 
			String firstOverPdf = "";
			boolean flag2 = false;
			if(lastProcess!=null ){
				if(!lastProcess.getFormId().equals(lastProcess.getOldFormId())){
					flag2 = true;
				}
			}
			
			if(!formId.equals(formNode.getWfn_defaultform())||flag2){
				if(lastProcess!=null ){
					String wfn_form_continue = p_wfNode.getWfn_form_continue();
					boolean flag = true;
					if(wfn_form_continue==null || wfn_form_continue.equals("0")){
						if(wn.getWfn_form_continue()==null || wn.getWfn_form_continue().equals("0")){
							if(wfProcess!=null){
								if(wfProcess.getStepIndex() == 1 &&"1".equals(wfProcess.getIsBack())){
								}else{
									flag = false;
								}
							}else if(pWfProcess != null){	//为空
								flag = false;
							}
						}
					}
					if(flag2){
						flag = true;
					}
					if(flag){
						//获取当前节点
						String overhtml = getHtmlToNewHtml(formId, nodeId, value , instanceId, isCyWF, false);
						String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
						String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
						
						String overPdfPath = pdfRoot+dstPath+(overhtml.substring(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".true";
						String pdfpath = lastProcess.getPdfPath();
						if(pdfpath!=null){
							String[] pdfs = pdfpath.split(",");
							if(pdfs!=null&& pdfs.length>1){
								pdfpath = pdfs[0]+","+overPdfPath;
							}
						}
						lastProcess.setPdfPath(pdfpath);
						ToPdfThread toPdf = new ToPdfThread(overhtml, "",
								instanceId, attachmentService , "htmlToPdf",lastProcess,tableInfoService,trueJson,flowService);
						toPdf.start();
					}
				}else{
					String overhtml = getHtmlToNewHtml(formId, nodeId, value , instanceId, isCyWF, false);
					HtmlToPdf htp = new HtmlToPdf();
					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
					String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
					
					firstOverPdf = pdfRoot+dstPath+(overhtml.substring(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".pdf";
					htp.htmlToPdf(overhtml, firstOverPdf);
					// 转成true 
					firstOverPdf  = new PDFToTrue().pdfToTrue(firstOverPdf, trueJson);
				}
			}
			
			String oldPdfPath = "";
			
			//去session中获取pdfpath
			Object object= getRequest().getSession().getAttribute("pdfpath");
			Object pjsonObject = getRequest().getSession().getAttribute("pjson");
			String middlePdf = "";
			String closeframe = getRequest().getParameter("closeframe");
			if(object!=null){
				middlePdf = (String)object;
				oldPdfPath = middlePdf;
			}else{
				if(wfProcess!=null){
					String mergerPdf = wfProcess.getMergePdf();
					if(mergerPdf!=null && !mergerPdf.equals("")){
						oldPdfPath = mergerPdf;
					}
				}
			}
			getRequest().getSession().removeAttribute("pdfpath");
			getRequest().getSession().removeAttribute("pjson");
			if(oldPdfPath!=null && !oldPdfPath.equals("")){		//session中存在pdf
			}else{
				if(wfNode2!=null){
					String form_continue = wfNode2.getWfn_form_continue();	
					if(form_continue!=null && form_continue.equals("1")){	//延用
						if(pWfProcess!=null){
							String path = pWfProcess.getPdfPath();
							if(path!=null && path.length()>0){
								oldPdfPath =  path.split(",")[0];	//父流程的表单
							}
						}
					}
				}
			}
			if(mergepdf!=null && !mergepdf.equals("")){
				if(!lastProcess.getAllInstanceid().equals(instanceId)){
					if(oldPdfPath==null || oldPdfPath.equals("")){
						oldPdfPath = mergepdf ;
					}
				}
			}
			
			if(wfChild != null && ((StringUtils.isNotBlank(wfChild.getIsNeedFForm()) && wfChild.getIsNeedFForm().equals("0")) || StringUtils.isBlank(wfChild.getIsNeedFForm()))){
				oldPdfPath = "";
			}
			
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
					+ getRequest().getLocalPort() + getRequest().getContextPath();
			SendNextProcess	 sendNextProcess = new SendNextProcess(vc_title, xtoUserId, xccUserId, emp.getEmployeeGuid(), workFlowId,
					nodeId, f_proceId, processId, nextNodeId, instanceId, itemId, formId, oldformId , "", "", "",
					isChildWf, cType, relation, finstanceId, newInstanceIdForChildWf, "", middlePdf,wcsx, serverUrl);
			
			// 生成新的html并转成pdf
			String pdfPath = "";
			// 判断是否有修改过
			List<SendAttachmentsHistory> attHistoryList = attachmentService.findIsEditOfSendAttHistory(instanceId + ATT_SUFFIX_NAME);
			//htmlpath,htmlpath2 html表单(替换value后)
			String htmlpath = "";	
			String htmlpath2 = "";
			String pdfType = "0";
			if (("true").equals(isFirst)|| (("true").equals(firstStep) && ("true").equals(isCy))
					|| !("").equals(isHaveFormjson)|| wfProcess.getStepIndex() == 1 || attHistoryList.size() != 0) {
				String wfn_form_continue = p_wfNode.getWfn_form_continue();
				boolean flag = true;
				if(wfn_form_continue==null || wfn_form_continue.equals("0")){
					if(wn.getWfn_form_continue()==null || wn.getWfn_form_continue().equals("0")){
						if(wfProcess!=null){
							if(wfProcess.getStepIndex() == 1 &&"1".equals(wfProcess.getIsBack())){
							}else{
								pdfPath = wfProcess.getPdfPath();
								flag = false;
							}
						}else if(pWfProcess != null){	//为空
							pdfPath = pWfProcess.getPdfPath();
							flag = false;
						}
					}
				}
				pdfType = "1";
				if(StringUtils.isNotBlank(isFlexibleForm) && isFlexibleForm.equals("1")){//弹性表单不需要生成html
					//赋值，避免报错
					htmlpath = "1";
					htmlpath2 = "2";
				}else{
					if(flag){	//不延用表单
						pdfType = "2";
						if(formNode.getWfn_defaultform().equals(formId)){
							if(closeframe!=null && closeframe.equals("1")){
								htmlpath = getHtmlToNewHtml(formId, nextNodeId, "", instanceId, isCyWF, true);
							}else{
								htmlpath = getHtmlToNewHtml(formId, nextNodeId, value, instanceId, isCyWF, true);
							}
							htmlpath2 = getHtmlToNewHtml(formId, nextNodeId, value, instanceId, isCyWF, false);
						}else{
							if(closeframe!=null && closeframe.equals("1")){
								htmlpath = getHtmlToNewHtml(formNode.getWfn_defaultform(), nextNodeId, "", instanceId, isCyWF, true);
							}else{
								htmlpath = getHtmlToNewHtml(formNode.getWfn_defaultform(), nextNodeId, value, instanceId, isCyWF, true);
							}
							htmlpath2 = getHtmlToNewHtml(formNode.getWfn_defaultform(), nextNodeId, value, instanceId, isCyWF, true);
						}
						//步骤过程信息
						pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,oldPdfPath);
					}
					if (attHistoryList != null && attHistoryList.size() != 0) {
						// 更新编辑历史的标识位
						for (SendAttachmentsHistory sh : attHistoryList) {
							sh.setIsHaveEdit("0");
							attachmentService.updateSendAttHistory(sh);
						}
					}
				}
			} else {
				pdfPath = wfProcess.getPdfPath();
			}
			
			sendNextProcess.setPdfPath(pdfPath);
			sendNextProcess.setTrueJson(trueJson);
			
			String route_type = this.getWfLine(workFlowId, nodeId, nextNodeId); 
			
			//下面方法中调用线程存在延时,需要先根据条件,修改上一次的状态位(具体为not_over修改为over)
			WfProcess oldProcess = pendingService.getProcessByID(processId);  
			if (oldProcess != null && !("true").equals(isChildWf)){
				oldProcess.setIsOver(Constant.OVER); 
				tableInfoService.updateProcess(oldProcess);
			}
			//closeframe 是针对于会议管理处理(即：打开子流程立即执行分发过程),待办需要立即生成
			if(closeframe!=null && closeframe.equals("1")){
				ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,instanceId,oldPdfPath,"","ljsend",null,"",flowService,null,null,tableInfoService);
				topdf.start();
				//插入数据
				String wfPinstanceId = "";
				tableInfoService.sendProcess(vc_title, xtoUserId, xccUserId, emp.getEmployeeGuid(), workFlowId,
						nodeId, f_proceId, processId, nextNodeId, instanceId, itemId, formId, oldformId ,pdfPath, trueJson, 
						isChildWf, cType, relation, finstanceId, newInstanceIdForChildWf, "", middlePdf,wcsx,firstOverPdf, "", formPageJson, urgency,self_loop);
				// 待收列表
				if (isExchange != null && isExchange == 1) {
					// 主送
					if (xtoUserId != null && xtoUserId.length() > 0) {
						saveDoFileReceive(xtoUserId.split(","), 1, wfPinstanceId);
					}
					if (xccUserId != null && xccUserId.length() > 0) {
						saveDoFileReceive(xccUserId.split(","), 0, wfPinstanceId);
					}
				}
				if ("1".equals(route_type)){
					// 竞争，更新其他人步骤为OVER
					tableInfoService.updateOver(workFlowId, instanceId, nodeId);
				}
				// 父流程id
				String fInstanceId = "";
				if (wfProcess != null) {
					fInstanceId = wfProcess.getfInstancdUid();
				}
				// 是否当前步骤的其他人都办完
				boolean isOver = tableInfoService.isAllOver(workFlowId, instanceId,
						nodeId, fInstanceId);
				if (isOver == true && !("1").equals(cType)) {
					// 让下一步发送的待办显示
					updateNewProcess(instanceId, workFlowId, "", nextNodeId);
				}
				// 同步数据
				excuteProcedure(oldformId, 1, instanceId, formId, nodeId);
			}else{
				//在父表单上打开子流程; 更新父流程的最后一步信息;  (此处单处操作, 避免对sendProcess的调整)
//				WfProcess pwfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
//				if(pwfProcess!=null){	//子流程查询出父流程的instanceid，且update
//					if(pjsonObject!=null){	
//						String josn1 = (String)pjsonObject;
//						pwfProcess.setCommentJson(josn1);
//						tableInfoService.updateProcess(pwfProcess);
//					}
//				}
				//调用线程: 处理的事情如下, 1, 插入待办; 2,待收已收; 3,over竞争步骤; 4,下一步状态show改为1, 5,执行存储过程
				ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,
						instanceId,oldPdfPath,"","middle", sendNextProcess,isExchange,
						pdfType, tableInfoService,route_type, employeeService, departmentService,
						emp, wfProcess, workflowBasicFlowService,zwkjFormService, "",
						flowService,itemService, firstOverPdf, formPageJson, urgency,self_loop);
				topdf.start();
			}
			
			SimpleDateFormat datesend = new SimpleDateFormat("yyyy-MM-dd HH:mm");
			if(isChildWf!=null && isChildWf.equals("true")){	//子流程进入
				if(relation!=null && relation.equals("1")){ 	//同步
					if(finstanceId!=null && !finstanceId.equals("")){	//存在父id
						tableInfoService.updateWfProcessStatus(finstanceId);
					}
				}
			}
			
			//发短信
			String canSendMsg = getRequest().getParameter("canSendMsg");
			if((StringUtils.isNotBlank(canSendMsg) && canSendMsg.equals("1")) || (StringUtils.isNotBlank(sendMsgUserId)&&!"undefined".equals(sendMsgUserId))){
				String userIds = "";
				if(StringUtils.isNotBlank(canSendMsg) && canSendMsg.equals("1")){
					if(StringUtils.isNotBlank(sendMsgUserId)){
						userIds = sendMsgUserId;
					}else{
						userIds = xtoUserId + "," + xccUserId;
					}
				}else{
					if(StringUtils.isNotBlank(sendMsgUserId)){
						userIds = sendMsgUserId;
					}
				}
				List<Employee> empList = tableInfoService.findEmpsByUserIds(userIds);
				String numbers = "";
				if(null != empList && empList.size()>0){
					for (Employee employee : empList) {
						numbers += employee.getEmployeeMobile()+",";
					}
				}
				if(StringUtils.isNotBlank(numbers)){
					numbers = numbers.substring(0,numbers.length()-1);
				}
				SendMsgUtil msgUtil = new SendMsgUtil();
				Map<String, String> map = new HashMap<String, String>();
				map.put("itemName", item.getVc_sxmc());
				map.put("sendUserName", emp.getEmployeeName());
				map.put("title", vc_title);
				map.put("senderId", "");
				map.put("receiverName", "");
				msgUtil.sendMsg(numbers, "trueWorkflow", map);
			}
			
			getRequest().setAttribute("nodes", nodes);
			getRequest().setAttribute("formId", formId);
			getRequest().setAttribute("instanceId", instanceId);
			getRequest().setAttribute("nodeId", nextNodeId);
			getRequest().setAttribute("workFlowId", workFlowId);
			getRequest().setAttribute("processId", processId);
			getRequest().setAttribute("formLocation", formLocation);
			getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
			getRequest().setAttribute("isEndProcess", isEndProcess);
			getRequest().setAttribute("selects", formAction.selectDicValues(formId));
			getResponse().getWriter().print("yes");
			
			String modId = getRequest().getParameter("modId");//模块id
			String matchId = getRequest().getParameter("matchId");//匹配id
			String dicId = getRequest().getParameter("dicId");//数据字典id
			String dicValue = getRequest().getParameter("dicValue");//数据字典id
			HashMap<String,String> map = new HashMap<String,String>();
			map.put("modId", modId);
			map.put("matchId", matchId);
			map.put("dataDicId", dicId);
			map.put("dicValue", dicValue);
			map.put("isWriteBack", "1");
			if(CommonUtil.stringNotNULL(modId)&&CommonUtil.stringNotNULL(matchId)&&CommonUtil.stringNotNULL(dicId)){
				dataCenterService.writeBack(map);
			}
			
			//残联定制，阅文自动办结
			String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
			if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && StringUtils.isNotBlank(nextNodeId) && autoEndNodeId.indexOf(nextNodeId) != -1)){
//				List<WfProcess> nextwfps = tableInfoService.findWfProcessList(instanceId, wfProcess.getStepIndex()+1);
				List<WfProcess> nextwfps = tableInfoService.findWfProcessIdByInsIdAndStp(instanceId, wfProcess.getStepIndex()+1);
				if(null != nextwfps && nextwfps.size()>0){
					this.endAuto(emp, instanceId, workFlowId, oldformId, nextwfps.get(0).getWfProcessUid(), nextNodeId, trueJson);
				}else{
					this.endAuto(emp, instanceId, workFlowId, oldformId, processId, nextNodeId, trueJson);
				}
			}
		}
		endTime = System.currentTimeMillis();
		System.out.println("---------结束sendNext时间------："+((endTime-startTime)/1000.0));
	}
	
	/**
	 * 
	 * 描述：待办联合发文
	 * 作者:蔡亚军
	 * 创建时间:2015-2-28 下午3:05:03
	 */
	public void jointMandate() throws Exception{
		// processId
		String processId = getRequest().getParameter("processId");
		//根据processId查询数据
		WfProcess lastProcess = pendingService.getProcessByID(processId); 
		if(lastProcess!=null){
			String isOver = lastProcess.getIsOver();
			if(isOver!=null && isOver.equals("OVER")){
				getResponse().getWriter().print("over");
				return;
			}
		}
		// 主送人的Id
		String xtoUserId = getRequest().getParameter("xtoName");
		// 当前节点Id
		String nodeId = getRequest().getParameter("nodeId");
		String instanceId = getRequest().getParameter("instanceId");
		// 流程Id
		String workFlowId = getRequest().getParameter("workFlowId");
		
		String commentJson = getRequest().getParameter("json");
		// 替换字符串
		commentJson = JSONReplaceUtil.replaceJson(commentJson);
		// 查找当前表单id(新表单id)
		WfNode wn = workflowBasicFlowService.findFormIdByNodeId(nodeId);
				
		String formId = wn.getWfn_defaultform();
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String value = this.saveForm(formId, 1, instanceId, formId, nodeId, workFlowId,"", "",emp.getEmployeeGuid());	//保存的form值
		//String vc_title = wfProcess.getProcessTitle();		//标题
		wfProcess.setFinshTime(new Date());
		wfProcess.setIsOver("OVER");
		wfProcess.setCommentJson(commentJson);
		//生成附件,且
		String htmlpath = getHtmlToNewHtml(formId, nodeId, value, instanceId, false, true);
		String htmlpath2 = getHtmlToNewHtml(formId, nodeId, value, instanceId, false, false);
		String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,"");
		ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,instanceId,"",commentJson,"ljsend",null,"",flowService,null,null, tableInfoService);
		topdf.start();
		wfProcess.setPdfPath(pdfPath);
		tableInfoService.update(wfProcess);
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String pdfpath =pdfRoot+dstPath+  UuidGenerator.generate36UUID()+".true";
		//插入下一步的页面表单数据(包括解开意见)
		ToPdfThread thread = new ToPdfThread("tolhfw", wfProcess, attachmentService, 
					tableInfoService, emp, flowService, xtoUserId, pdfpath);
		thread.start();
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write("success");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	
	/**
	 * 
	 * 描述：获取联合发文list列表
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2015-2-28 下午4:16:24
	 */
	public String getLhfwList(){
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemid = getRequest().getParameter("itemid"); // 城管局定制 事项id
		String commitDept = getRequest().getParameter("commitDept");
		String commitUser = getRequest().getParameter("commitUser");
		String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
		String commitTimeTo = getRequest().getParameter("commitTimeTo");
		String searchCondition = getRequest().getParameter("searchCondition");
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = " and (p.action_status is null or p.action_status!=2) ";
		if (CommonUtil.stringNotNULL(searchCondition)) {
			getRequest().setAttribute("searchCondition", searchCondition);
			getRequest().setAttribute("commitTimeTo", "");
			getRequest().setAttribute("commitTimeFrom",  "");
			getRequest().setAttribute("commitDept", "");
			getRequest().setAttribute("commitUser", "");
			getRequest().setAttribute("wfTitle", "");
			getRequest().setAttribute("itemName", "");
		}else{
			getRequest().setAttribute("searchCondition", "0");
		}
		if ( CommonUtil.stringNotNULL(itemName)) {
			itemName = itemName.trim();
			conditionSql += " and i.vc_sxmc like '%" + itemName.trim() + "%' escape '\\'";
			getRequest().setAttribute("itemName", itemName);
		}
		
		if (CommonUtil.stringNotNULL(title)) {
			title = title.trim();
			conditionSql += " and p.process_title like '%" + title.trim()+ "%' escape '\\'";
			getRequest().setAttribute("wfTitle", title);
		}
		if (CommonUtil.stringNotNULL(commitUser)) {
			commitUser = commitUser.trim();
			conditionSql += " and (select e.employee_name from zwkj_employee e where e.employee_guid = p.fromuserid ) like  '%"+commitUser+"%' escape '\\' ";
			getRequest().setAttribute("commitUser", commitUser);
		}
		
		if (CommonUtil.stringNotNULL(commitDept)) {
			commitDept = commitDept.trim();
			conditionSql += " and d.DEPARTMENT_NAME = '"+commitDept+"' ";
			getRequest().setAttribute("commitDept", commitDept);
		}
		if (CommonUtil.stringNotNULL(commitTimeFrom)) {
			commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
			conditionSql +=" and p.APPLY_TIME >= to_date('"+commitTimeFrom+"','yyyy-mm-dd') ";	
			getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
		}
		if (CommonUtil.stringNotNULL(commitTimeTo)) {
			commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
			conditionSql +=" and p.APPLY_TIME <= to_date('"+commitTimeTo+"','yyyy-mm-dd') ";	
			getRequest().setAttribute("commitTimeTo", commitTimeTo);
		}
		
		String status = getRequest().getParameter("status");
		if(status != null && status.equals("3")){
	    	conditionSql +=" and p.jdqxdate <= sysdate ";
	    	getRequest().setAttribute("status", status);
		}
		if(CommonUtil.stringNotNULL(itemid)){	//根据itemid查询
			String[] itemIds = itemid.split(",");
			String pendingItemId = "";
			for(String itemId: itemIds){
				pendingItemId += "'"+itemId+"',";
			}
			if(pendingItemId!=null && pendingItemId.length()>0){
				pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
			}
			conditionSql +=" and p.wf_item_uid in ("+pendingItemId+")";
		}
		
		if(CommonUtil.stringNotNULL(status)){
			if(status.equals("1")){
				conditionSql +=" and p.is_over='OVER'";
			}else{
				conditionSql +=" and p.is_over='NOT_OVER'";
			}
		}
		else{
			conditionSql +=" and p.is_over='NOT_OVER'";
		}
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String depId = emp.getDepartmentGuid();
		//获取向上推的全部
		Collection<Department> depColl = departmentService.findAllChildDepList(depId);
		Iterator<Department> iterator = depColl.iterator();
		Department depar = null;
		String depIds = "";
		while(iterator.hasNext()){
			depar = iterator.next();
			depIds += "'"+depar.getDepartmentGuid()+"',";
		}
		if(depIds!=null && depIds.length()>0){
			depIds = depIds.substring(0, depIds.length()-1);
		}
		//查询待办中userId为之的待办
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));

		List<Pending> list;
		// 区分工作流的待办列表获取
		int count = pendingService.findLhfwCount(conditionSql,depIds);
		Paging.setPagingParams(getRequest(), pageSize, count);
		// 包含是否显示推送按钮
		list = pendingService.findLhfwpendingList(conditionSql,
				depIds, Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("status", status);
		if(getSession().getAttribute("myPendItems") == null){
			Department department=null;
			try {
				department = departmentService.queryDepartmentById(emp.getDepartmentGuid());
			} catch (Exception e) {
				e.printStackTrace();
			}
			//根据机构逆推
			boolean flag = true ;
			String depids = "";
			String depid = department.getDepartmentGuid();
			Department depart=null;
			while(flag){
				depart = departmentService.queryDepartmentById(depid);
				if(depart!=null){
					depids+= "'"+depid +"',";
					depid = depart.getSuperiorGuid();
					if(depid!=null && depid.equals("1")){
						flag = false;
					}
				}
			}
			if(depids!=null && depids.length()>0){
				depids = depids.substring(0,depids.length()-1);
			}
			List<WfItem> items = itemService.getItemListByDeptIds(depids,"");
			getRequest().setAttribute("myPendItems", items);
		}
		if(getSession().getAttribute("myPendDepts") == null){
			List<SimpleDeptVo> depts = departmentService.getDeptInfo();
			getRequest().setAttribute("myPendDepts", depts);
		}
		return "getLhfwList";
	}
	
	/**
	 * 根据某一过程的表单,生成过程信息的pdf
	 * @param htmlPath	待办表单
	 * @param htmlPath2	已办表单
	 * @param oldPdfPath 需要合并的旧表单
	 * @return wfpath 过程表中的pdfpath
	 */
	public String getWfProcessPdfPath(String htmlpath, String htmlpath2, String oldPdfPath){
		//pdfPath: html转换成pdf且与附件合并后的路径
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

		String wfPath = "";
		String pdfPath = pdfRoot+dstPath+ (htmlpath.substring(htmlpath.lastIndexOf("/"),htmlpath.length()-5)+"merge")+".true";
		String pdfPath2 = pdfRoot+dstPath+(htmlpath2.substring(htmlpath2.lastIndexOf("/"),htmlpath2.length()-5)+"merge")+".true";
		String mergePath  = "";
		String mergePath2  = "";
		if(oldPdfPath!=null && !oldPdfPath.equals("")){	
			mergePath = pdfPath.substring(0,pdfPath.length()-5)+"mergeNew"+".true";
			mergePath2 = pdfPath2.substring(0,pdfPath2.length()-5)+"mergeNew"+".true";
			wfPath = mergePath +","+ mergePath2;
		}else{
			wfPath = pdfPath +","+ pdfPath2 ;
		}
		return wfPath;
	}
	
	
	/**
	 * @throws IOException 
	 * @Title: sendDoc 
	 * @Description: 流程中点击发送按钮发送
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	@SuppressWarnings("unchecked")
	public void sendDoc() throws IOException{
		String instanceId = getRequest().getParameter("instanceId");
		String processId = getRequest().getParameter("processId");
		String formId = getRequest().getParameter("formId");
		String itemId = getRequest().getParameter("itemId");
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		if(itemId==null || itemId.equals("")){
			if(wfProcess!=null){
				itemId = wfProcess.getItemId();
			}
		}
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(formId);
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 非列表类型的存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() == null || ("").equals(ft.getListId())) {
				lists.add(ft);
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			//发送前先入库---取值用赋值字段
			if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
				tableNameList.add(lists.get(i).getAssignTableName());
			}
		}
		//主送/抄送字段名
		String xtoIdColumn = SystemParamConfigUtil.getParamValueByParam("xtoId");
		if(StringUtils.isBlank(xtoIdColumn)){
			xtoIdColumn = "zs";
		}
		String xccIdColumn = SystemParamConfigUtil.getParamValueByParam("xccId");
		if(StringUtils.isBlank(xccIdColumn)){
			xccIdColumn = "cs";
		}
		//主送抄送值
		String xtoId = "";
		String xccId = "";
		//入收文表
		Sw sw = new Sw();
		if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
			String tableName = tableNameList.get(0);
			//默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
			if (mapList.size() != 0 && !("").equals(mapList) && mapList != null) {
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
				if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
					for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
						// clob类型装换成String
						if (xtoIdColumn != null && !("").equals(xtoIdColumn)) {
							if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(xtoIdColumn.toLowerCase())) {
								if(Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3){// 此处已可以查出大字段内容
									xtoId = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
								}else{
									//遍历map
									for(int i=0; i<mapList.size(); i++){
										Map map = mapList.get(i);
										//遍历map
										Iterator<Map.Entry<String, String>> iterator =  map.entrySet().iterator();
									    while (iterator.hasNext()){
									        Map.Entry<String, String> entry = iterator.next();
									            String key = entry.getKey();
									            String value = entry.getValue();
									          
									          if(key.equalsIgnoreCase(xtoIdColumn)){
									        	  xtoId = value ;
									          }
									    }
									}
								}
							}
						}
						if (xccIdColumn != null && !("").equals(xccIdColumn)) {
							if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(xccIdColumn.toLowerCase())){
								if(Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3){// 此处已可以查出大字段内容
									xccId = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
								}else{
									//遍历map
									for(int i=0; i<mapList.size(); i++){
										Map map = mapList.get(i);
										//遍历map
										Iterator<Map.Entry<String, String>> iterator =  map.entrySet().iterator();
									    while (iterator.hasNext()){
									        Map.Entry<String, String> entry = iterator.next();
									            String key = entry.getKey();
									            String value = entry.getValue();
									          if(key.equalsIgnoreCase(xccIdColumn)){
									        	  xccId = value ;
									          }
									    }
									}
								}
							}
						}
					}
				}
				//查找对应关系,入库收文表
				for (FormTagMapColumn ft : tableNameAllLists) {
					if(("lwbt").equals(ft.getDocColumn())){
						sw.setLwbt(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("yfdw").equals(ft.getDocColumn())){
						sw.setYfdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwdw").equals(ft.getDocColumn())){
						sw.setLwdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fs").equals(ft.getDocColumn())){
						sw.setFs(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == null ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == null ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("gwlx").equals(ft.getDocColumn())){
						sw.setGwlx(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("zsdw").equals(ft.getDocColumn())){
						String zsdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						//截取name
						if(zsdw!=null && !zsdw.equals("")){
							if(("zsdw").equals(xtoIdColumn.toLowerCase())){
								sw.setZsdw(xtoId.split("[*]")[1]);
							}else{
								sw.setZsdw(zsdw.split("[*]")[1]);
							}
						}
					}else if(("csdw").equals(ft.getDocColumn())){
						String csdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						//截取name
						if(csdw!=null && !csdw.equals("") ){
							if(("csdw").equals(xccIdColumn.toLowerCase())){
								sw.setCsdw(xccId.split("[*]")[1]);
							}else{
								sw.setCsdw(csdw.split("[*]")[1]);
							}
						}
					}else if(("ztc").equals(ft.getDocColumn())){
						sw.setZtc(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("jjcd").equals(ft.getDocColumn())){
						sw.setJjcd(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}
				}
			}
		}
		String xtt_userIds = "";
		//String xtt_depNames = "";
		//xtoId的格式为 id*name
		if(xtoId != null && !("").equals(xtoId)){
			xtt_userIds = xtoId.split("[*]")[0];
			//xtt_depNames = xtoId.split("[*]")[1];
		}
		
		String xcc_userIds = "";
		//String xcc_depNames = "";
		if(xccId != null && !("").equals(xccId)){
			xcc_userIds= xccId.split("[*]")[0];
			//xcc_depNames = xccId.split("[*]")[1];
		}
		
		String nbUserId = "";
		String gwjh_mUserId = "";
		String gwjh_cUserId = "";
		String dyfs = "";
		if(xtt_userIds!=null && !xtt_userIds.equals("")){
			String[] xto = xtt_userIds.split(",");
			for(int i=0; i<xto.length; i++){
				String xtoUser = xto[i];
				int begin = xtoUser.indexOf("[");
				int end =  xtoUser.indexOf("]");
				if(begin==-1 && end==-1){
					continue;
				}
				String num = xtoUser.substring(begin+1, end);
				String user = xtoUser.replace("["+num+"]", "");
				List<DocXgDepartment> list = selectTreeService.getDocXgDeptById(user);
				DocXgDepartment dep = null;
				if(list!=null && list.size()>0){
					dep =  list.get(0);
				}
				
				if(dep==null){
					gwjh_mUserId += user+",";
				}else{
					nbUserId += user+",";
					dyfs += num+",";
				}
			}
		}
		if(xcc_userIds!=null && !xcc_userIds.equals("")){
			String[] xco = xcc_userIds.split(",");
			for(int i=0; i<xco.length; i++){
				String xcoUser = xco[i];
				int begin = xcoUser.indexOf("[");
				int end =  xcoUser.indexOf("]");
				if(begin==-1 && end==-1){
					continue;
				}
				String num = xcoUser.substring(begin+1, end);
				String user = xcoUser.replace("["+num+"]", "");
				List<DocXgDepartment> list = selectTreeService.getDocXgDeptById(user);
				DocXgDepartment dep = null;
				if(list!=null && list.size()>0){
					dep =  list.get(0);
				}				
				if(xtt_userIds.indexOf(user) != -1){
					continue;
				}
				if(dep==null){
					gwjh_cUserId += user+",";
				}else{
					nbUserId += user+",";
					dyfs += num+",";
				}
			}
		}
		boolean flag = false;
		//公文交换平台系统
		if(!gwjh_mUserId.equals("") || !gwjh_cUserId.equals("")){
			flag = true;
			if(gwjh_mUserId.length()>0){
				gwjh_mUserId = gwjh_mUserId.substring(0,gwjh_mUserId.length()-1);
			}
			if(gwjh_cUserId.length()>0){
				gwjh_cUserId = gwjh_cUserId.substring(0,gwjh_cUserId.length()-1);
			}
			checkSendDoc(gwjh_mUserId, gwjh_cUserId,itemId);
		}
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

		String pdfpath = pdfRoot +dstPath+ UuidGenerator.generate36UUID()+".true";
		JSONObject error = new JSONObject();		//返回的日志信息
		List<String> list = new ArrayList<String>();
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		//发送内部机构人员
		try {
			if(!("").equals(nbUserId)){
				String[] empId = nbUserId.split(",");
				
				//来文单位
				String bigDepId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
				//此处获取事项,从最小的部门开始递归,开始查询出第一个在docexchange_department存在
				if(bigDepId!=null && !bigDepId.equals("")){
					String[] depids = bigDepId.split(",");
					for(int i=0; depids!=null && i<depids.length; i++){
						String depid = depids[i];
						if(depid!=null && depid.length()>0){
							depid = depid.substring(1,depid.length()-1);
						}
						List<DocXgDepartment> deplist = tableInfoService.getDocXgDepartmentListByDepId(depid);
						if(deplist!=null && deplist.size()>0){
							sw.setLwdw(deplist.get(0).getName());
							break;
						}
					}
				}
				if(empId != null && empId.length > 0){
					for(int i=0; i<empId.length; i++){
						String newInstanceId= UuidGenerator.generate36UUID();
						list.add(newInstanceId);
					}
				}
				ToPdfThread toPdf = new ToPdfThread(wfProcess, nbUserId, emp,
						pdfpath, dyfs, tableInfoService, flowService, sw, list, "sendDoc");
				toPdf.start();
				error.put("result", "0");
			}else{
				if(!flag){
					error.put("result", "1");
					System.out.println("---------------未选择主送或者抄送--------------");
				}
			}
			// 处理 T_WF_CORE_RECEIVE 放在  线程里面 --toAndCombToPdf
			ToPdfThread toPdf = new ToPdfThread(wfProcess.getWfInstanceUid(), pdfpath,
					attachmentService,  "toAndCombToPdf",wfProcess,tableInfoService,list,emp,flowService,nbUserId,"");
			toPdf.start();
			
		} catch (Exception e) {
			e.printStackTrace();
			error.put("result", "2");		//异常处理
		}
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(error.toString());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	/**
	 * 保存待回收列表
	 * 
	 * @param ids
	 *            id的一维数组
	 * @param type
	 *            类型,主送1, 0,抄送
	 * @param process
	 *            过程信息
	 */
	public void saveDoFileReceive(String[] ids, Integer type,
			String fInstancdUid) {
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		DoFileReceive doFileReceive = null; // 待收办件
		for (int i = 0; ids != null && i < ids.length; i++) {
			Employee employee = employeeService.findEmployeeById(ids[i]);
			Department department = departmentService
					.findDepartmentById(employee.getDepartmentGuid());
			Integer exchange = 0;
			if (department != null) {
				exchange = department.getIsExchange();
			}
			if (exchange != null && exchange == 1) { // 需要通过公文处理平台同步数据:根据机构判断
				doFileReceive = new DoFileReceive();
				doFileReceive.setType(type); // 主送1; 抄送
				doFileReceive.setStatus(0); // 待接收
				doFileReceive.setApplyDate(new Date()); // 申请时间
				doFileReceive.setToUserId(employee.getEmployeeGuid()); // 接收人员
				doFileReceive.setFormUserId(emp.getEmployeeGuid()); // 发送人员
				// 获取processid, instanceid, pinstanceid
				if (fInstancdUid != null && !fInstancdUid.equals("")) {
					// 仅针对子流程
					WfProcess pwfProcess = tableInfoService.getWfProcessByColoum(fInstancdUid,
									employee.getEmployeeGuid()); // 获取该接收人员的过程对应信息
					/*List<WfProcess>  list = tableInfoService.getProcessList(fInstancdUid);
					String fprocessid = "";
					if(list!=null && list.size()>0){
						fprocessid = list.get(0).getWfProcessUid();
					}*/
					if (pwfProcess != null) {
						doFileReceive.setProcessId(pwfProcess.getWfProcessUid()); // 流程id
						doFileReceive.setpInstanceId(pwfProcess.getfInstancdUid()); // 父实例id
						doFileReceive.setInstanceId(pwfProcess.getWfInstanceUid()); // 父实例id
						//doFileReceive.setpInstanceId(fprocessid);
						// 保存待收数据
						tableInfoService.addDoFileReceive(doFileReceive);
						// 更新该process信息
						pwfProcess.setIsExchanging(1);
						tableInfoService.updateWfProcess(pwfProcess);
					}

				}
			}
		}
	}

	/**
	 * .append("p.jdqxDate as jdqxDate,") .append("p.zhqxDate as zhqxDate,")
	 * .append(" '' as delay_itemid,") .append(" '' as delay_lcid,")
	 * .append(" '' as isDelaying, ") 保存或更新或查询表单里的属性
	 */
	public String saveForm(String oldformId, int todo, String instanceId,
						   String formId, String nodeid, String workFlowId,String fInstanceId,String isFirstChildWf,String userId) {
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(formId);
		// ========================列表类型=============================//
		List<FormTagMapColumn> haveLists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameHaveList = new ArrayList<String>();
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 列表和非列表类型的分开存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() != null && !("").equals(ft.getListId())) {
				haveLists.add(ft);
			} else {
				lists.add(ft);
			}
		}
		// 读取两个list中的tableName(去重之后的)
		for (int i = 0, n = haveLists.size(); i < n; i++) { // 列表型
			if (!tableNameHaveList.contains(haveLists.get(i).getTablename())) {
				tableNameHaveList.add(haveLists.get(i).getTablename());
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			if(todo == 2){//查询
				//表单一样 取赋值表
				if (!tableNameList.contains(lists.get(i).getTablename())) {
					tableNameList.add(lists.get(i).getTablename());
				} 
				/*if(oldformId != null && formId != null && formId.equals(oldformId)){
					if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
						tableNameList.add(lists.get(i).getAssignTableName());
					} 
				}else{
					
				}*/
				
			}else if(todo == 1){//保存
				if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
					tableNameList.add(lists.get(i).getAssignTableName());
				}
			}
		}
		
		// ========================列表类型=============================//
		this.getListTypeForm(tableNameHaveList, oldformId, todo, instanceId, formId, isFirstChildWf);
		
		String value = "";// 页面回值
		// ========================非列表类型=============================//
		value = this.getNotListTypeForm(tableNameList, value, oldformId, todo, instanceId, formId, nodeid, workFlowId, fInstanceId, isFirstChildWf,userId);
	
		return value;
	}

	/**
	 * 
	 * @Title: getListTypeForm 
	 * @Description: 列表类型
	 * @param @return    设定文件 
	 * @return String    返回类型 
	 * @throws
	 */
	@SuppressWarnings("unchecked")
	public void getListTypeForm(List<String> tableNameHaveList,String oldformId, int todo, String instanceId, String formId, String isFirstChildWf){
		StringBuffer tagHaveName = new StringBuffer();
		if (tableNameHaveList.size() != 0 && !("").equals(tableNameHaveList) && tableNameHaveList != null) {
			List<Map> list = new ArrayList<Map>();// 存放查询出来的值
			for (String tableHaveName : tableNameHaveList) { // T_WF_OFFICE_PERSON,T_WF_OFFICE_WORKLIST
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableHaveName, todo, isFirstChildWf);
				// 取出表名
				String tabHaveName = ftmcList.get(0).getTablename();
				String columnHaveName = "";
				StringBuffer tagHaveNameValue = new StringBuffer();
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableHaveName);
				// 查询数据库已有的数据
				List<Map> mapList = zwkjFormService.findTableByFormId(tabHaveName, oldformId, instanceId);
				Map m1 = new HashMap();
				for (FormTagMapColumn ftmc : ftmcList) { // JL_GZSJ,JL_GZDD,JL_ZW,JL_XZ
					if (todo == 2) {
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList) && mapList != null) {
							String[] haveValue = new String[mapList.size()];// 定义数组的长度，即查出来的数据条数
							for (int i = 0, n = mapList.size(); i < n; i++) {
								String tagNameHaveValue = mapList.get(i).get(ftmc.getColumnname()) == null ? null 
												: mapList.get(i).get( ftmc.getColumnname())+ ""; // 列所对应的的值
								if (wfFieldInfoList != null&& wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
									for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
										// clob类型装换成String
										if (ftmc.getColumnname() != null && !("").equals(ftmc.getColumnname())) {
											if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(ftmc.getColumnname().toLowerCase())
													&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3) {
												// 此处已可以查出大字段内容
												tagNameHaveValue = tableInfoService.getClob(tabHaveName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
											}
										}
									}
								}
								if (("null").equals(tagNameHaveValue) || tagNameHaveValue == null) {
									tagNameHaveValue = "";
								}
								haveValue[i] = tagNameHaveValue;
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // ；列的属性名
							m1.put(ftmc.getColumnname().toLowerCase(), haveValue);
						}
					} else {
						// =================保存或更新和点“完成”时=================
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnHaveName += ftmc.getColumnname() + ","; // 列名
							// 表里的一类数据 格式：jl_gzsj=aaa,bbb,ccc,
							String tagHaveNameBak = "'" + (getRequest().getParameter(ftmc.getFormtagname()) == null ? ""
														 : getRequest().getParameter(ftmc.getFormtagname())) + "',";
							if (("undefined").equals(tagHaveNameBak)) {
								tagHaveNameBak = "";
							}
							if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(ftmc.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
										String thn = tagHaveNameBak.substring(0, tagHaveNameBak.length() - 1);
										if (thn.split(",").length > 1) {
											for (int i = 0, n = thn.split(",").length - 1; i < n; i++) {
												if (!("").equals(thn.split(",")[i])) {
													tagHaveNameBak += "to_date('" + thn.split(",")[i] + "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
												} else {
													tagHaveNameBak += "\"\",";// 为空，则加空字符串
												}
											}
										} else {
											tagHaveNameBak = "to_date('"+ tagHaveNameBak.substring(1,tagHaveNameBak.length() - 2) + "','yyyy-MM-dd'),"; // 列所对应的的值
										}
									}
								}
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // 列的属性名
							tagHaveNameValue.append(tagHaveNameBak); // 列所对应的的值 
						}
					}
				}
				if (todo != 2) {
					// 对多列循环入库
					String[] tagMany = tagHaveNameValue.substring(0, tagHaveNameValue.length() - 1).split(",");
					int cloumnSize = 0; // 一共有几行
					for (int i = 0, n = tagMany.length; i < n; i++) { // 格式：['a;1','a;2','a;3','a;4']
						String taVal = tagMany[i].substring(1, tagMany[i].length() - 1);
						String[] tgma = taVal.split(";");
						cloumnSize = tgma.length;
						break;
					}
					List<String[]> insertDataList = new ArrayList<String[]>();
					for (int i = 0, n = cloumnSize; i < n; i++) {
						StringBuffer saveValue = new StringBuffer();
						String cloumHaNa = columnHaveName; // 重新初始化
						StringBuffer isNull = new StringBuffer(); // 判断一行是否为空
						for (int j = 0, m = tagMany.length; j < m; j++) {
							String taVal = tagMany[j].substring(1, tagMany[j].length() - 1);
							isNull.append(taVal.split(";")[i]);
							saveValue.append("'" + taVal.split(";")[i] + "',"); // 取出每一行的值，拼接
						}
						if (!("").equals(isNull)) {
							for (WfFieldInfo wfColumn : wfFieldInfoList) {
								// 基础字段(换表单如果有新的表加入，需加上基础字段)
								if (wfColumn.getI_tableid() == null || ("").equals(wfColumn.getI_tableid())) {
									if (cloumHaNa.toLowerCase().indexOf(wfColumn.getVc_fieldname().toLowerCase()) < 0) {
										cloumHaNa += wfColumn.getVc_fieldname().toUpperCase() + ",";
										// 入库为新的formId
										if (("formid").equals(wfColumn.getVc_fieldname().toLowerCase())) {
											saveValue.append("'" + formId + "',");
										} else {
											saveValue.append("'" + getRequest().getParameter(wfColumn.getVc_fieldname()) + "',");
										}
									}
								}
							}
							// 用于往下一步发送，删除之前的数据，再循环插入新数据
							String[] dataList = new String[3];// 一个为表名，一个为列名，一个为列值
							dataList[0] = tabHaveName;
							dataList[1] = cloumHaNa;
							dataList[2] = saveValue.toString();
							insertDataList.add(dataList);
						}
					}
					if (todo != 0) {
						if (todo == 1) {
							// 更新--先删除再重新插库
							zwkjFormService.deleteForm(tableHaveName, formId, instanceId);
							if (tagHaveNameValue != null && !("").equals(tagHaveNameValue)) {
								for (String[] data : insertDataList) {
									zwkjFormService.saveForm(data[0],data[1].substring(0,data[1].length() - 1),
																	 data[2].substring(0,data[2].length() - 1));
								}
							}
						}
					}
				} else {
					list.add(m1); // 拼接数据放入map中格式化(查询数据)
				}
				getRequest().setAttribute("tagHaveName", tagHaveName.substring(0, tagHaveName.length() - 1));
			}
			String valueHaveList = new Gson().toJson(list);
			getRequest().getSession().setAttribute("listValues", valueHaveList);// 页面回值，存session
		}
	}

	/**
	 * 
	 * @Title: getNotListTypeForm 
	 * @Description: 非列表类型
	 * @param @return    设定文件 
	 * @return String    返回类型 
	 * @throws
	 */
	@SuppressWarnings("unchecked")
	private String getNotListTypeForm(List<String> tableNameList, String value, String oldformId, int todo,
									String instanceId, String formId, String nodeid, String workFlowId, String fInstanceId, String isFirstChildWf,String userId) {
		StringBuffer tagNameForm = new StringBuffer();// 标签属性名
		StringBuffer searchValue = new StringBuffer();
		boolean changed = false;
		if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
			List<FormTagMapColumn> ftmcList = new ArrayList<FormTagMapColumn>();
			for (String tableName : tableNameList) {
				// 取出表名
				if (todo == 2) {//查询
					ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableName, todo, isFirstChildWf);
//					if (ftmcList.size() == 0 && !("").equals(ftmcList)) {
//						ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableName);
//					}
				} else if (todo == 1) {//保存
					ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableName, todo, isFirstChildWf);
				}

				String tabName = tableName;
				// 取出带值的表
				for(int i =  0; i < ftmcList.size() ; i ++){
					if(ftmcList.get(i).getTablename()!= null &&!ftmcList.get(i).getTablename().equalsIgnoreCase(ftmcList.get(i).getAssignTableName())){
							tabName = ftmcList.get(i).getTablename();
					}
				}
				String columnName = "";
				StringBuffer tagName = new StringBuffer();
				List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
				boolean flag = false;
				if(mapList == null || mapList.size() == 0){
					if(fInstanceId != null && !fInstanceId.equals("")){
						flag = true;
						mapList = zwkjFormService.findTableByFormId(tableName, oldformId, fInstanceId);
					}
				}
				// 字典表
				Map<String, String> selects = formAction.selectDicValuesForMobile(formId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
				for (FormTagMapColumn ftmc : ftmcList) {
					//列名
					String columnnameAll = "";
					/*
						|-查询(2)/保存(1)----取-----赋----
						|----换表单---------1-----2-----
						|----不换表单--------2-----1-----
						|------------\||/-------------
					 */
					// 列所对应的的值--未换表单ftmcList.get(0).getTablename();
					if(oldformId!=null && oldformId.equals(formId)){
						if (todo == 2) {//查询
//							if(("is").equals(isFirstChildWf)){//子流程查询后面的赋值对应关系
								columnnameAll = ftmc.getAssignColumnName();
//							}else{
//								columnnameAll = ftmc.getColumnname();
//							}
						}else if (todo == 1) {//保存
							columnnameAll = ftmc.getAssignColumnName();
						}
					}else{
						// 列所对应的的值--换表单或者走子流程
						if (todo == 2) {//查询
							if(!("true").equals(isFirstChildWf)){
								columnnameAll = ftmc.getAssignColumnName();
							}else{
								columnnameAll = ftmc.getColumnname();
							}
						}else if (todo == 1) {//保存
//							if(!("true").equals(isFirstChildWf)){
//								columnnameAll = ftmc.getColumnname();
//							}else{
								columnnameAll = ftmc.getAssignColumnName();
//							}
						}
					}
					if (todo == 2) {
						//元素的值
						String tagNameValue = "";
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList) && mapList != null) {
							tagNameValue = mapList.get(0).get(columnnameAll) == null ? "" : mapList.get(0).get(columnnameAll) + "";
							if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// clob类型装换成String
									if (columnnameAll != null && !("").equals(columnnameAll)) {
										if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase())
												&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3) {
											// 此处已可以查出大字段内容
											//
											//ClobToString.clob2String((Object)tagNameValue);
											//value = ClobToString.clob2String((SerializableClob)()tagNameValue);
											if(flag){
												tagNameValue = tableInfoService.getClob(tableName, fInstanceId, wfFieldInfo.getVc_fieldname(),oldformId);
											}else{
												tagNameValue = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
												if(tagNameValue== null ||tagNameValue.equals("")){
													tagNameValue = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),oldformId);
												}
											}
											
										}
									}
								}
							}
							String djh = SystemParamConfigUtil.getParamValueByParam("djh");
							// 写死  编号取收文登记号+[2014]
							if(tagNameValue == null || "".equals(tagNameValue)){
								if(ftmc.getAssignColumnName() != null && ftmc.getColumnname() != null && !ftmc.getAssignColumnName().equalsIgnoreCase(ftmc.getColumnname())&&ftmc.getColumnname().equalsIgnoreCase(djh)){
									String nf = new SimpleDateFormat("yyyy").format(new Date(System.currentTimeMillis()));
									tagNameValue = "["+nf+"]"+(mapList.get(0).get(djh) == null ? "" : mapList.get(0).get(djh));
								}
							}
							for (String  key : selects.keySet()) {
								if (key.toLowerCase().equals(ftmc.getFormtagname().toLowerCase())) {
									String[] temp = selects.get(key).split("\\[--\\]");
									String[] val1 = temp[1].split(",");
									String defaultV = temp[2];
									if(StringUtils.isBlank(tagNameValue) && StringUtils.isNotBlank(defaultV) && !defaultV.equals("null")){
										tagNameValue = val1[Integer.parseInt(defaultV)-1];
									}
									break;
								}
							}
							searchValue.append(columnnameAll + ":" + (tagNameValue == null ?null:tagNameValue.replace("'", "‘").replace("\"", "“")) + ";");
							if (columnnameAll != null && !("").equals(columnnameAll)) {
								columnName += columnnameAll.toLowerCase()+ ","; // 列名
								String tagNameBak = mapList.get(0).get(columnnameAll) == null ? null: mapList.get(0).get(columnnameAll)+ ""; // 列所对应的的值
								if(tagNameValue != null && !tagNameValue.equals("")){
									tagNameBak = tagNameValue;
								}
								if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
									for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
										// 日期型
										if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase())
												&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
											if (wfFieldInfo.getVc_fieldname() != null && !("").equals(wfFieldInfo.getVc_fieldname())) {
												if (!("").equals(tagNameBak)&& tagNameBak != null) {
													if (tagNameBak.length() >= 10) {
														tagNameBak = tagNameBak.substring(0, 10); // 列所对应的的值(查询时截取，否则带时分秒里有"："影响)
														// tagNameBak =
														// "to_date('"+tagNameBak.substring(1,tagNameBak.length()-2)+"','yyyy-MM-dd'),";
														// //列所对应的的值
													}
												}
											}
										}
									}
								}
								tagName.append("'" + tagNameBak + "',"); // 列所对应的的值
								tagNameForm.append(ftmc.getFormtagname() + ",");
							}
						}
					} else {
						if(mapList == null || mapList.size() == 0){
							mapList = zwkjFormService.findTableByFormId(tabName, formId, instanceId);
							changed = true;
						}
						// =================保存或更新和点“完成”时=================
						if (columnnameAll != null && !("").equals(columnnameAll)) {
							columnName += columnnameAll + ","; // 列名
							// 表里的一类数据
							String columnValue = getRequest().getParameter(ftmc.getFormtagname()) == null ? ""
									: getRequest().getParameter(ftmc.getFormtagname()).toString();
							// 获取元素的权限
							if(userId != null && !userId.equals("")){
								String permit = formPermitService.findSingleFormPermitByUserId(workFlowId, nodeid, userId, ftmc.getFormtagname());
								if (!permit.equals("2") && columnValue.equals("") && mapList != null && mapList.size() > 0) {
									// 从maplist取值
									if (mapList.get(0).get(columnnameAll) != null) {
										// 没有换数据表 或者 换表单
										if(changed == false || !tableName.equalsIgnoreCase(ftmc.getTablename())){
											columnValue = mapList.get(0).get(columnnameAll).toString();
										}
										if(columnValue.indexOf("org.hibernate.lob.SerializableClob")>-1){
											columnValue = tableInfoService.getClob(tableName, instanceId, columnnameAll.toLowerCase(),formId);
										}
										if((columnValue == null || "".equals(columnValue))&&tableName.equalsIgnoreCase(ftmc.getTablename())){
										columnValue = mapList.get(0).get(columnnameAll).toString();
										}
									}
								}
							}
							// -----------------------------文号入库---------------start------------------
							if("docNum".equals(ftmc.getConstantValue())&&!"".equals(columnValue)){
								if(columnValue.split("\\*").length>1){
									columnValue = columnValue.split("\\*")[1];
									this.addDocNum(workFlowId,ftmc,instanceId,formId);
								}
							}
							// -----------------------------文号入库---------------end------------------
							for (String  key : selects.keySet()) {
								if (key.toLowerCase().equals(ftmc.getFormtagname().toLowerCase())) {
									String[] temp = selects.get(key).split("\\[--\\]");
									String[] val1 = temp[1].split(",");
									String defaultV = temp[2];
									if(StringUtils.isBlank(columnValue) && StringUtils.isNotBlank(defaultV) && !defaultV.equals("null")){
										columnValue = val1[Integer.parseInt(defaultV)-1];
									}
									break;
								}
							}
							
							value += columnnameAll + ":" + (columnValue == null ?null:columnValue.replace("'", "‘").replace("\"", "“")) + ";";
							String tempVal = getRequest().getParameter(ftmc.getFormtagname()) == null ? "" : getRequest().getParameter(ftmc.getFormtagname()).replace("'", "‘").replace("\"", "“");
							if("docNum".equals(ftmc.getConstantValue())&&!"".equals(tempVal)){
								if(tempVal.split("\\*").length>1){
									tempVal = tempVal.split("\\*")[1];
								}
							}
							String tagNameBak = "'" + (tempVal) + "',";
							// 类型是radio、checkbox时--undefined
							if (tagNameBak.equals("'',")) {
								tagNameBak = "'" + (columnValue == null ?null:columnValue.replace("'", "‘").replace("\"", "“")) + "',";
							}
							if ("'undefined'".equals(tagNameBak)) {
								tagNameBak = "";
							}
							if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase()) 
											&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
										tagNameBak = "to_date('" + tagNameBak.substring(1,tagNameBak.length() - 2) + "','yyyy-MM-dd'),"; // 列所对应的的值
									}
								}
							}
							tagName.append(tagNameBak); // 列所对应的的值
							tagNameForm.append(ftmc.getFormtagname() + ",");
						}
					}
				}
				for (WfFieldInfo wfColumn : wfFieldInfoList) {
					// 基础字段(换表单如果有新的表加入，需加上基础字段)
					if (wfColumn.getI_tableid() == null || ("").equals(wfColumn.getI_tableid())) {
						if (columnName.toLowerCase().indexOf(wfColumn.getVc_fieldname().toLowerCase()) < 0) {
							columnName += wfColumn.getVc_fieldname().toUpperCase() + ",";
							// 入库为新的formId
							if (("formid").equals(wfColumn.getVc_fieldname().toLowerCase())) {
								tagName.append("'" + formId + "',");
							} else {
								tagName.append("'" + getRequest().getParameter(wfColumn.getVc_fieldname()) + "',");
							}
						}
					}
				}
				if (todo != 0) {
					if (todo == 1) {
						//需要入库的表
						ZwkjForm zf = zwkjFormService.getOneFormById(formId);
						String saveTableName = zf.getInsert_table();
						if(!("").equals(saveTableName) && tableName.equals(saveTableName)){
							// 更新--先删除再重新插库
							zwkjFormService.deleteForm(tableName, formId, instanceId);
							zwkjFormService.saveForm(tableName, columnName.substring(0, columnName.length() - 1), tagName.substring(0, tagName.length() - 1));
							String newJBProcessIds = (String) getRequest().getAttribute("newJBProcessIds");
							if(newJBProcessIds != null && !newJBProcessIds.equals("")){
								String[] processList = newJBProcessIds.split(",");
								for(int k = 0; k < processList.length; k++){
									WfProcess wfProcess = tableInfoService.getProcessById(processList[k]);
									zwkjFormService.saveFormByOther(tableName, columnName.substring(0, columnName.length() - 1), tagName.substring(0, tagName.length() - 1),wfProcess);
								}
								getRequest().setAttribute("newJBProcessIds", "");
							}
						}
					}
				}
				if (!("").equals(searchValue.toString())) {
					value = searchValue.toString();
				}
			}
			String tnf = "";//临时变量
			if(!("").equals(tagNameForm+"")){
				tnf = tagNameForm.substring(0, tagNameForm.length() - 1);
			}else{
				tnf = tagNameForm + "";
			}
			getRequest().setAttribute("tagNameForm", tnf);
		}
		return value;
	}
	
	/**
	 * 
	 * @Title: addDocNum 
	 * @Description: 文号入库
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
    @SuppressWarnings("unchecked")
	public void addDocNum(String workFlowId,FormTagMapColumn ftmc,String instanceId,String formId){
		// 根据流程ID判断是发文还是办文确定序号
		WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
		if (item != null) {
			if (item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) { // 发文
			// -------need to do----------------//TODO
				String docNum = getRequest().getParameter(ftmc.getFormtagname()) == null ? "" 
								: getRequest().getParameter(ftmc.getFormtagname()).toString();
				DocNumberWhFw docNumberWhFw = docNumberService.findDocNumFw(instanceId);
				if (docNumberWhFw == null) {
					docNumberWhFw = new DocNumberWhFw();
				}
				docNumberWhFw.setFormId(formId);
				docNumberWhFw.setInstanceId(instanceId);
				docNumberWhFw.setWorkflowId(workFlowId);
				docNumberWhFw.setSiteId(item.getVc_ssbmid());
				docNumberWhFw = setDocNumberWhFw(docNumberWhFw, docNum);
				if (docNumberWhFw != null) {
					docNumberService.updateFw(docNumberWhFw);
				} else {
					docNumberService.addFw(docNumberWhFw);
				}
			} else if ((item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO) || ("2").equals(item.getVc_sxlx()))) { // 办文和传阅
				String docNum = getRequest().getParameter(ftmc.getFormtagname()) == null ? ""
								: getRequest().getParameter(ftmc.getFormtagname()).toString();
				DocNumberWhBw docNumberWhBw = docNumberService.findDocNumBw(instanceId);
				if (docNumberWhBw == null) {
					docNumberWhBw = new DocNumberWhBw();
					docNumberWhBw.setFormId(formId);
					docNumberWhBw.setInstanceId(instanceId);
					List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
					String webId = depIds.get(0);
					docNumberWhBw.setWorkflowId(workFlowId);
					docNumberWhBw.setSiteId(item.getVc_ssbmid());
					docNumberWhBw.setWebId(webId);
					// 办文的类型-----暂时设置为0,如有作废功能,需更新
					docNumberWhBw.setResult(0);
					docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
					docNumberService.addBw(docNumberWhBw);
				}else{
					docNumberWhBw.setResult(0);
					if(docNumberWhBw.getBwxh() == null||"".equals(docNumberWhBw.getBwxh())){
						docNumberWhBw.setFormId(formId);
						docNumberWhBw.setInstanceId(instanceId);
						List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
						String webId = depIds.get(0);
						docNumberWhBw.setWorkflowId(workFlowId);
						docNumberWhBw.setWebId(webId);
						docNumberWhBw.setSiteId(item.getVc_ssbmid());
					}
					docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
					docNumberService.updateBw(docNumberWhBw);
				}
			}
		}else{
			String itemId =getRequest().getParameter("itemId");
			// 子流程沿用父流程的 文号
			item =	itemService.getItemById(itemId);
			if (item != null) {
				if (item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) { // 发文
					// -------need to do----------------//TODO
					// 取出业务表里的文号，入库到文号表,这里需写活(取文号对应的字段的值)--写死了，需扩展
						if (ftmc.getFormtagname() != null && ("wh").equals(ftmc.getFormtagname().toLowerCase())) {
							String docNum = getRequest().getParameter(ftmc.getFormtagname()) == null ? "" 
											: getRequest().getParameter(ftmc.getFormtagname()).toString();
							DocNumberWhFw docNumberWhFw = docNumberService.findDocNumFw(instanceId);
							if (docNumberWhFw == null) {
								docNumberWhFw = new DocNumberWhFw();
							}
							docNumberWhFw.setFormId(formId);
							docNumberWhFw.setInstanceId(instanceId);
							docNumberWhFw.setWorkflowId(item.getLcid());
							docNumberWhFw.setSiteId(item.getVc_ssbmid());
							docNumberWhFw = setDocNumberWhFw(docNumberWhFw, docNum);
							if (docNumberWhFw != null) {
								docNumberService.updateFw(docNumberWhFw);
							} else {
								docNumberService.addFw(docNumberWhFw);
							}
						}
					} else if ((item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO) || ("2").equals(item.getVc_sxlx()))) { // 办文和传阅
						if (ftmc.getFormtagname() != null && ("wh").equals(ftmc.getFormtagname().toLowerCase())) {
							String docNum = getRequest().getParameter(ftmc.getFormtagname()) == null ? ""
											: getRequest().getParameter(ftmc.getFormtagname()).toString();
							DocNumberWhBw docNumberWhBw = docNumberService.findDocNumBw(instanceId);
							if (docNumberWhBw == null) {
								docNumberWhBw = new DocNumberWhBw();
								docNumberWhBw.setFormId(formId);
								docNumberWhBw.setInstanceId(instanceId);
								List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
								String webId = depIds.get(0);
								docNumberWhBw.setWorkflowId(item.getLcid());
								docNumberWhBw.setWebId(webId);
								docNumberWhBw.setSiteId(item.getVc_ssbmid());
								// 办文的类型-----暂时设置为0,如有作废功能,需更新
								docNumberWhBw.setResult(0);
								docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
								docNumberService.addBw(docNumberWhBw);
							}else{
								docNumberWhBw.setResult(0);
								if(docNumberWhBw.getBwxh() == null||"".equals(docNumberWhBw.getBwxh())){
									docNumberWhBw.setFormId(formId);
									docNumberWhBw.setInstanceId(instanceId);
									List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
									String webId = depIds.get(0);
									docNumberWhBw.setWorkflowId(item.getLcid());
									docNumberWhBw.setWebId(webId);
									docNumberWhBw.setSiteId(item.getVc_ssbmid());
								}
								docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
								docNumberService.updateBw(docNumberWhBw);
							}
						}
					}
			}
			
		}
    }
	
    /**
	 * 
	 * @Title: addDocNum 
	 * @Description: 文号入库
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addDocNumForMobile(String itemId, String workFlowId,FormTagMapColumn ftmc,String instanceId,String formId,String value,Employee emp){
		// 根据流程ID判断是发文还是办文确定序号
		WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
		if (item != null) {
			if (item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) { // 发文
			// -------need to do----------------//TODO
			// 取出业务表里的文号，入库到文号表,这里需写活(取文号对应的字段的值)--写死了，需扩展
					String docNum = value;
					DocNumberWhFw docNumberWhFw = docNumberService.findDocNumFw(instanceId);
					if (docNumberWhFw == null) {
						docNumberWhFw = new DocNumberWhFw();
					}
					docNumberWhFw.setFormId(formId);
					docNumberWhFw.setInstanceId(instanceId);
					docNumberWhFw.setWorkflowId(workFlowId);
					docNumberWhFw.setSiteId(item.getVc_ssbmid());
					docNumberWhFw = setDocNumberWhFw(docNumberWhFw, docNum);
					if (docNumberWhFw != null) {docNumberService.updateFw(docNumberWhFw);
					} else {
						docNumberService.addFw(docNumberWhFw);
					}
			} else if ((item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO) || ("2").equals(item.getVc_sxlx()))) { // 办文和传阅
					String docNum = value;
					DocNumberWhBw docNumberWhBw = docNumberService.findDocNumBw(instanceId);
					if (docNumberWhBw == null) {
						docNumberWhBw = new DocNumberWhBw();
						docNumberWhBw.setFormId(formId);
						docNumberWhBw.setInstanceId(instanceId);
						docNumberWhBw.setSiteId(item.getVc_ssbmid());
						String deptId = emp.getDepartmentGuid();
						docNumberWhBw.setWorkflowId(workFlowId);
						Department dept =	departmentService.findDepartmentById(deptId);
						docNumberWhBw.setWebId(dept.getSuperiorGuid());
						// 办文的类型-----暂时设置为0,如有作废功能,需更新
						docNumberWhBw.setResult(0);
						docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
						docNumberService.addBw(docNumberWhBw);
					}else{
						docNumberWhBw.setResult(0);
					
						if(docNumberWhBw.getBwxh() == null||"".equals(docNumberWhBw.getBwxh())){
							docNumberWhBw.setFormId(formId);
							docNumberWhBw.setInstanceId(instanceId);
							docNumberWhBw.setSiteId(item.getVc_ssbmid());
							String deptId = emp.getDepartmentGuid();
							docNumberWhBw.setWorkflowId(workFlowId);
							Department dept =	departmentService.findDepartmentById(deptId);
							docNumberWhBw.setWebId(dept.getSuperiorGuid());
						}
						docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
						docNumberService.updateBw(docNumberWhBw);
					}
			}
		}else{
			item =	itemService.getItemById(itemId);
			if (item != null) {
				if (item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) { // 发文
					// -------need to do----------------//TODO
					// 取出业务表里的文号，入库到文号表,这里需写活(取文号对应的字段的值)--写死了，需扩展
							String docNum = value;
							DocNumberWhFw docNumberWhFw = docNumberService.findDocNumFw(instanceId);
							if (docNumberWhFw == null) {
								docNumberWhFw = new DocNumberWhFw();
							}
							docNumberWhFw.setFormId(formId);
							docNumberWhFw.setInstanceId(instanceId);
							docNumberWhFw.setWorkflowId(item.getLcid());
							docNumberWhFw.setSiteId(item.getVc_ssbmid());
							docNumberWhFw = setDocNumberWhFw(docNumberWhFw, docNum);
							if (docNumberWhFw != null) {
								docNumberService.updateFw(docNumberWhFw);
							} else {
								docNumberService.addFw(docNumberWhFw);
							}
					} else if ((item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO) || ("2").equals(item.getVc_sxlx()))) { // 办文和传阅
							String docNum = value;
							DocNumberWhBw docNumberWhBw = docNumberService.findDocNumBw(instanceId);
							if (docNumberWhBw == null) {
								docNumberWhBw = new DocNumberWhBw();
								docNumberWhBw.setFormId(formId);
								docNumberWhBw.setInstanceId(instanceId);
								docNumberWhBw.setSiteId(item.getVc_ssbmid());
								String deptId = emp.getDepartmentGuid();
								docNumberWhBw.setWorkflowId(item.getLcid());
								Department dept =	departmentService.findDepartmentById(deptId);
								docNumberWhBw.setWebId(dept.getSuperiorGuid());
								// 办文的类型-----暂时设置为0,如有作废功能,需更新
								docNumberWhBw.setResult(0);
								docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
								docNumberService.addBw(docNumberWhBw);
							}else{
								docNumberWhBw.setResult(0);
								
								if(docNumberWhBw.getBwxh() == null||"".equals(docNumberWhBw.getBwxh())){
									docNumberWhBw.setFormId(formId);
									docNumberWhBw.setInstanceId(instanceId);
									
									String deptId = emp.getDepartmentGuid();
									docNumberWhBw.setWorkflowId(item.getLcid());
									Department dept =	departmentService.findDepartmentById(deptId);
									docNumberWhBw.setWebId(dept.getSuperiorGuid());
								}
								docNumberWhBw = setDocNumberWhBw(docNumberWhBw, docNum);
								docNumberService.updateBw(docNumberWhBw);
							}
					}
			}
			
		
		}
    }
	public void excuteProcedure(String oldformId, int todo, String instanceId,
			String formId, String nodeid) {
		if (CommonUtil.stringNotNULL(nodeid)) {
			WfNode node = workflowBasicFlowService.getWfNode(nodeid);
			if (node != null) {
				String procedureName = node.getWfn_procedure_name();
				if (CommonUtil.stringNotNULL(procedureName)) {
					// 输入、输出参数 目前只支持VARCHAR、INTEGER、DATE三种
					// 输入、输出参数类型 仅有in、out两种
					// Object[][] obj={
					// {"in", "VARCHAR","wh1234"},//1输入参数 2输入参数类型 3输入参数值
					// {"in", "VARCHAR","id1234"},
					// {"in", "DATE",Timestamp.valueOf("2013-01-01 15:25:33")},
					// {"out", "INTEGER","oldCount"},//1输出参数 2输出参数类型 3输出值map的key
					// {"out", "INTEGER","newCount"},
					// {"out", "DATE","cDate"}
					// };
					// 目前固定两个输入参数
					// Object[][] obj={
					// {"in", "VARCHAR",UuidGenerator.generate36UUID()},//1输入参数
					// 2输入参数类型 3输入参数值
					// {"in", "VARCHAR",instanceId},//1输入参数 2输入参数类型 3输入参数值
					// {"in", "VARCHAR",formId},
					// {"in", "VARCHAR",nodeid}
					// };
					// Map<String, Object>
					// map=zwkjFormService.excuteProcedure(obj, procedureName);

					Procedure param = new Procedure();
					param.setPname(procedureName);
					List<Procedure> pList = zwkjFormService
							.getProcedureByParam(param);
					String workflowid = null;
					try{
					workflowid = getSession().getAttribute(
							MyConstants.workflow_session_id) != null ? getSession()
							.getAttribute(MyConstants.workflow_session_id)
							.toString() : null;
					}catch (Exception e) {
						e.printStackTrace();
					}
					if (pList != null && pList.size() > 0) {
						Procedure p = pList.get(0);
						String[] paramname = p.getParamname() == null ? null
								: p.getParamname().split(",");
						String[] paramtype = p.getParamtype() == null ? null
								: p.getParamtype().split(",");
						String[] inoutparam = p.getInouttype() == null ? null
								: p.getInouttype().split(",");
						Object[][] obj = null;
						if (paramname != null) {
							obj = new Object[paramname.length][3];
							for (int i = 0; i < paramname.length; i++) {
								if (!paramname[i].equals("")) {
									Object[] o = new Object[3];
									o[0] = inoutparam[i];
									o[1] = paramtype[i];
									if (paramname[i].equals("uuid")) {
										o[2] = UuidGenerator.generate36UUID();
									} else if (paramname[i]
											.equals("workflow_id")) {
										o[2] = workflowid;
									} else if (paramname[i]
											.equals("workflow_instance_id")) {
										o[2] = instanceId;
									} else if (paramname[i].equals("form_id")) {
										o[2] = formId;
									} else if (paramname[i].equals("node_id")) {
										o[2] = nodeid;
									}
									obj[i] = o;
								}
							}
						}
						try {
							Map<String, Object> map = zwkjFormService
									.excuteProcedure(obj, procedureName);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}

	/**
	 * 文号拆分入库(发文)
	 * 
	 * @param dn
	 * @param docNum
	 */
	public DocNumberWhFw setDocNumberWhFw(DocNumberWhFw dn, String docNum) {
		if (CommonUtil.stringNotNULL(docNum)) {
		String[] docNums = docNum.split("\\*");
		String str1 = "";
		if (docNums.length > 1) {
			str1 = docNums[1];
		}
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
		Date date = new Date();
		String year = sdf.format(date);
		String str2 = docNums[0];
		String[] subStr = str2.split(";")[0].split(",");
		String[] subStr2 = str2.split(";")[1].split(",");
		for (int j = 0; j < subStr.length; j++) {
			String sub = subStr[j];
			if (sub.indexOf("$") > -1) {
				if (CommonUtil.stringNotNULL(sub) && sub.contains("chus")) {
					String chus = str1.substring(0, str1.indexOf(year) - 1);
					dn.setJgdz(dn.getJgdz() + "-" + chus);
					str1 = str1.replace(chus, "");
				} else {
					String[] _sub = sub.split("\\$");
					for (int i = 0; i < _sub.length; i++) {
						if (i != 1) {
							int idx = str1.indexOf(_sub[i]);
							if (idx > -1) {
								str1 = str1.replace(_sub[i], "");
							}
						} else {
							if (Character.isDigit(_sub[i].toCharArray()[0])) {
								if ("fwnh".equals(subStr2[j])) {
									dn.setFwnh(str1.substring(0,
											Integer.parseInt(_sub[i])));
								} else if ("fwxh".equals(subStr2[j])) {
									dn.setFwxh(str1.substring(0,
											Integer.parseInt(_sub[i])));
								}
								str1 = str1.substring(Integer
										.parseInt(_sub[i]));
							}
						}
					}
				}
			} else {
				dn.setJgdz(sub);
				str1 = str1.replace(sub, "");
			}
		}
		}
		return dn;
	}

	/**
	 * 文号拆分入库(办文)
	 * 
	 * @param dn
	 * @param docNum
	 */
	private DocNumberWhBw setDocNumberWhBw(DocNumberWhBw dn, String docNum) {
	    if(CommonUtil.stringNotNULL(docNum)){
		String[] docNums = docNum.split("\\*");
		String str1 = "";
		if(docNums.length > 1){
		    str1 = docNums[1];
		}
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
		Date date = new Date();
		String year = sdf.format(date);
		String str2 = docNums[0];
		String[] subStr = str2.split(";")[0].split(",");
		String[] subStr2 = str2.split(";")[1].split(",");
		for(int j=0; j<subStr.length; j++){
		    String sub = subStr[j];
		    if(sub.indexOf("$")>-1){
		    	if(CommonUtil.stringNotNULL(sub)&&sub.contains("chus")){
		    		String chus = str1.substring(0, str1.indexOf(year)-1);
		    		dn.setBwlx(dn.getBwlx()+"-"+chus);
		    		str1 = str1.replace(chus, "");
		    	}else{
					String[] _sub = sub.split("\\$");
					for(int i=0; i<_sub.length; i++){
					    if(i!=1){
						int idx = str1.indexOf(_sub[i]);
						if(idx > -1){
						    str1 = str1.replace(_sub[i], "");
						}
					    }else{
						if(Character.isDigit(_sub[i].toCharArray()[0])){
						    if("fwnh".equals(subStr2[j])){
							dn.setBwnh(str1.substring(0, Integer.parseInt(_sub[i])));
						    }else if("fwxh".equals(subStr2[j])){
							dn.setBwxh(str1.substring(0, Integer.parseInt(_sub[i])));
						    }
						    str1 = str1.substring(Integer.parseInt(_sub[i]));
						}
					    }
					}
		    	}
		    }else{
			dn.setBwlx(sub);
			str1 = str1.replace(sub, "");
		    }
		}
	    }
	    return dn;
	}

	/**
	 * 
	 * 描述：办件暂存、保存信息
	 * operate=1[待办保存，使用于并行完成、传阅等模式]; operate=0[待办进行暂存操作]
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-8-23 下午2:43:35
	 */
	public void onlySave() throws Exception {
		long startTime = System.currentTimeMillis();
		long endTime ;
		String formId = getRequest().getParameter("formId");
		String processId = getRequest().getParameter("processId");
		String nodeId = getRequest().getParameter("nodeId");// 当前节点
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String itemId = getRequest().getParameter("itemId");
		String operate = getRequest().getParameter("operate");// 0:保存流程(只保存表单)
		String cType = getRequest().getParameter("cType");
		WfItem wfitem = itemService.getItemById(itemId);
		String isFlexibleForm = "";
		if(null != wfitem){
			isFlexibleForm = wfitem.getIsFlexibleForm();
		}
		// 查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		String oldJson = "";
		String oldFormId = "";
		if(wfProcess!=null){
			wfProcess.getOldFormId();
			oldJson = wfProcess.getCommentJson();
		}
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if ( wfProcess !=null && wfProcess.getStepIndex() == 1 && !("").equals(wfProcess.getDoType()) 
					&& ("1").equals(wfProcess.getIsChildWf())) {
			isFirstChildWf = "true";
		}
		//获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		
		String trueJson = getRequest().getParameter("json");
		trueJson = JSONReplaceUtil.replaceJson(trueJson);
		System.out.println("1--onlySave:"+new Date().getTime());
		//保存日志信息表
		/*TrueJson entity = new TrueJson();
		entity.setInstanceId(instanceId);
		entity.setProcessId(processId);
		entity.setSaveDate(new Date());
		entity.setUserId(userId);
		entity.setTrueJson(trueJson);
		entity.setExcute("onlysave");
		trueJsonService.saveTrueJson(entity);*/
		
		TrueJsonLogThread trueJsonLogThread = new TrueJsonLogThread(trueJsonService, instanceId, processId, userId, trueJson, "onlysave");
		trueJsonLogThread.start();
		
		System.out.println("2--onlySave:"+new Date().getTime());
		// 第一步
		String isFirst = getRequest().getParameter("isFirst");
		if(oldFormId==null || "".equals(oldFormId)){
			oldFormId = formId ;
		}

		// 1,保存表单值
		String value = this.saveForm(oldFormId, 1, instanceId, formId, nodeId,workFlowId,"",isFirstChildWf,userId);
		if(StringUtils.isBlank(value)){
			value = this.saveForm(oldFormId, 2, instanceId, formId, nodeId, workFlowId, "", isFirstChildWf, userId);			
		}
		System.out.println("3--onlySave:"+new Date().getTime());
		// 标题
		String vc_title = getTitle(workFlowId, formId, instanceId).split(";")[0];
		if((vc_title==null || vc_title.equals("")) && wfProcess!=null){			//标题为空; 过程不为空
			vc_title =  wfProcess.getProcessTitle();
		}
		System.out.println("4--onlySave:"+new Date().getTime());
		WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
		boolean isCyWF = false;
		if (item != null) {
			if (("2").equals(item.getVc_sxlx())) { // 传阅
				isCyWF = true;
			}
		}
		
		//oldPdfPath: 为延用的父流程的表单
		String oldPdfPath = "";
		WfChild wfChild = null;
		if(wfProcess!=null){
			String fInstanceId = wfProcess.getfInstancdUid();
			WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(fInstanceId);
			if(fInstanceId!=null && !fInstanceId.equals("")){
				WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
				String form_continue = wfNode.getWfn_form_continue();	
				if(form_continue!=null && form_continue.equals("1")){	//不延用
					if(pWfProcess!=null){
						wfChild = workflowBasicFlowService.getWfChildByPidAndCid(workFlowId, pWfProcess.getWfUid());
						String path = pWfProcess.getPdfPath();
						if(path!=null && path.length()>0){
							oldPdfPath =  path.split(",")[0];	//父流程的表单
						}
					}
				}
			}
		}
		
		if(wfChild != null && ((StringUtils.isNotBlank(wfChild.getIsNeedFForm()) && wfChild.getIsNeedFForm().equals("0")) || StringUtils.isBlank(wfChild.getIsNeedFForm()))){
			oldPdfPath = "";
		}
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String pdfPath = "";
		//简单流程,将全部意见保存到主板之中
		WfProcess process = pendingService.getProcessByID(processId);
		// 3,保存意见
		Integer urgency = null;
		if (("true").equals(isFirst) && !isFirstChildWf.equals("true")){
			//流程第一步(非子流程), 暂存时使用html,不使用pdf (现在开始使用pdf)
			//紧急程度(高:1;中:2;低:3;)
			urgency = StringUtils.isNotBlank(getRequest().getParameter("urgency"))?Integer.parseInt(getRequest().getParameter("urgency")):null;			
			String htmlpath = getHtmlToNewHtml(formId, nodeId, value, instanceId, isCyWF, true);
			String htmlpath2 = getHtmlToNewHtml(formId, nodeId, value, instanceId, isCyWF, false);
			pdfPath = getWfProcessPdfPath(htmlpath, htmlpath2, oldPdfPath);
			ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,instanceId,oldPdfPath,
										trueJson,"middle",process,"",tableInfoService,flowService, urgency);
			topdf.start();
		} else {
			if(wfProcess!=null){
				WfNode node = workflowBasicFlowService.getWfNode(nodeId);
				String form_continue=  node.getWfn_form_continue();
				if(form_continue==null || form_continue.equals("0")){	//延用
					pdfPath =  wfProcess.getPdfPath();
				}else{
					String htmlpath = "";
					if(StringUtils.isNotBlank(isFlexibleForm) && isFlexibleForm.equals("1")){
						
					}else{
						String pdfpath = wfProcess.getPdfPath();
						String pdfPath1 = pdfpath.split(",")[0];	//暂存时,待办列表中使用的pdf不会发生改变
						htmlpath = getHtmlToNewHtml(formId, nodeId, value, instanceId,isCyWF, false);
						String pdfPath2 = pdfRoot+dstPath+ (htmlpath.substring(htmlpath.lastIndexOf("/"),
								htmlpath.length()-5)+"merge")+".true";
						if(oldPdfPath!=null && !oldPdfPath.equals("")){	
							pdfPath2 = pdfPath2.substring(0, pdfPath2.length() - 5) + "mergeNew" + ".true";
						}
						pdfPath = pdfPath1+","+pdfPath2;
					}
					if (Integer.parseInt(operate) == 1) {
						process.setIsOver("OVER");
						process.setFinshTime(new Date());
					}
					//调用线程
					ToPdfThread topdf = new ToPdfThread(htmlpath,attachmentService,instanceId,oldPdfPath,
							trueJson,"middle",process,"",flowService,null,null, tableInfoService);
					topdf.start();
				}
			}
		}
		if(process!=null){
//			Integer master = process.getIsMaster();
//			if (master != null && master == 0) {
//				WfProcess masterProcess = tableInfoService.getMasterProcess(wfProcess);
//				if (masterProcess != null) {
//					masterProcess.setCommentJson(trueJson);
//					tableInfoService.updateProcess(masterProcess);
//					List<WfProcess> list = tableInfoService.getNextProcess(wfProcess);
//					for (WfProcess process_ : list) {
//						process_.setCommentJson(trueJson);
//						tableInfoService.updateProcess(process_);
//					}
//				}
//			}
			
			//获取当前节点的节点类型、
			if (Integer.parseInt(operate) == 1) {
				
				
				WfNode  wfNode = workflowBasicFlowService.findNodeById(nodeId);
				if(wfNode!=null){
					String wfn_route_type = wfNode.getWfn_route_type();
					if(wfn_route_type!=null && wfn_route_type.equals("6")){//串行传阅式
//						List<WfProcess> list =  tableInfoService.findWfProcessList(workFlowId, instanceId, nodeId,wfProcess.getStepIndex());
						List<WfProcess> list =  tableInfoService.findWfProcessAnyInfo(workFlowId, instanceId, nodeId,wfProcess.getStepIndex());
						for(int i=0; i<list.size(); i++){
							if(list.get(i).getWfProcessUid().equals(processId)){
								if(i==list.size()-1){
									System.out.println("当前节点为并行传阅模式, 且传阅结束");
								}else{
									WfProcess wfp = list.get(i+1);
//									wfp.setIsShow(1);
									LOGGER.warn("将用户:"+wfp.getUserUid()+",待办'"+wfp.getProcessTitle()+"'展示出来");
//									tableInfoService.update(wfp);
									tableInfoService.updateIsShowByProcessId(wfp.getWfProcessUid());
									//sycnPendToChat(wfp, wfp.getUserUid());
									
									//消息往推送服务器中推送
									String push_type = "";
									if(wfitem!=null){
										String vc_sxlx = wfitem.getVc_sxlx();
										push_type = (vc_sxlx!=null && vc_sxlx.equals("1"))?"收文提醒: ":"发文提醒: ";
									}
									//webSocket.addBadge(wfp.getUserUid());
									//webSocket.apnsPush(push_type+wfp.getProcessTitle(), wfp.getUserUid(), "", "");
									break;
								}
							}
						}
					}
				}
			}
		}
		// 4,更新步骤
		tableInfoService.updateProcess(processId, operate, instanceId, nodeId, userId, vc_title, workFlowId, itemId, pdfPath, trueJson,oldFormId, urgency);
		// 5,更新主办信息: 主办在协办之前完成,完成协办时,更新下一步待办表单
		if (Integer.parseInt(operate) == 1) {
			RemoteLogin remote = new RemoteLogin();
			boolean checkUser = RemoteLogin.checkPassed;
			if(checkUser){
				remote.deleteThirdPend(process.getUserUid(), processId);
			}
			WfNode wfnode = workflowBasicFlowService.getWfNode(nodeId);	//获取当前node
			String route_type = "";
			if(wfnode!=null){
				route_type = wfnode.getWfn_route_type(); 
			}
			if(route_type!=null && route_type.equals("3")){		//并行结合
				Integer master = wfProcess.getIsMaster();
				if(master!= null && master==2){	//全部办结完成
					//获取该节点的
					List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
					WfNode nextNode = null;		//下一节点
					if(nodeList!=null && nodeList.size()>0){
						nextNode = nodeList.get(0);
					}
					sendNextProcess(nextNode, wfProcess, value, vc_title, trueJson,"", isCyWF,userId);
				}
				
			}else if(route_type!=null && (route_type.equals("4") || route_type.equals("6"))){		//并行传阅式样
				boolean isreplay = false;		//是否添加数据到待处理中
				if(item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO)){
					String formNodeId = wfProcess.getFromNodeid();
					WfNode node = workflowBasicFlowService.getWfNode(formNodeId);
					if(node!=null){
						if (node.getWfn_send_file()!= null && node.getWfn_send_file()==1) {
							isreplay = true;
						}
					}
				}
				if(isreplay){
					//查询上一步发送的人员id,userId相同
					WfProcess wfp = new WfProcess();
					wfp.setStepIndex(wfProcess.getStepIndex()-1);
					wfp.setNodeUid(wfProcess.getFromNodeid());
					wfp.setWfInstanceUid(wfProcess.getWfInstanceUid());
//					List<WfProcess> lastList = tableInfoService.findWfProcessList(wfp);
					List<WfProcess> lastList = tableInfoService.findWfProcessListByIsOver(wfp);
					WfProcess lastWfp = null;
					for(WfProcess wf:lastList){
						if(wf.getUserUid().equals(wfProcess.getFromUserId())){
							lastWfp = wf;
							break;
						}
					}
					if(lastWfp!=null){
						
						boolean b = compareCommentJson(oldJson, trueJson);
						if(!b){
							Replay replay = new Replay();
							replay.setProcessId(lastWfp.getWfProcessUid());
							replay.setReplayProcessid(processId);
							replay.setReplayTime(new Date());
							replay.setReplayUserid(wfProcess.getUserUid());
							replay.setStatus("0");
							replay.setTitle(wfProcess.getProcessTitle());
							replayService.saveReplay(replay);
							LOGGER.warn("领导批阅给出意见,录入待处理中!");
						}else{
							LOGGER.warn("领导批阅未给出意见,不录入待处理中!");
						}
					}
				}
				//检查该步骤信息是否已经被处理
				/*List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);
				int count = 0;
				for(int i=0; i<sameStepWfList.size(); i++){
					if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
						count ++;
						break;
					}
				}*/
				
				int count = 0;
				List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
				for(int i = 0; i < sameStepWfList.size(); i++){
					if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
						count ++;
						break;
					}
				}
				
				WfNode nowNode = workflowBasicFlowService.getWfNode(nodeId);	//获取当前node
				String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
				if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && autoEndNodeId.indexOf(nowNode.getWfn_id()) == -1)){
					if(count==0){	//	count=0时表示该节点已经办结完成
						List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
						WfNode nextNode = null;		//下一节点
						if(nodeList!=null && nodeList.size()>0){
							for(WfNode node : nodeList){
								String xtoUserId = node.getWfn_bd_user();
								if(StringUtils.isNotBlank(xtoUserId)){
									nextNode = node;
									break;
								}
							}
							if(null == nextNode){
								nextNode = nodeList.get(0);
							}
						}
						sendNextProcess(nextNode, wfProcess, value, vc_title, trueJson, "", isCyWF,userId);
					}
				}
				
			}else if(route_type!=null && route_type.equals("5")){		//并行办理:直接发送给下一步,下一步的人员,必须固定
				
				
//				List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);		//查看已被办理的个数
//				int count = 0 ;		//已经被办理的个数
//				for(int i=0; i<sameStepWfList.size(); i++){
//					if(sameStepWfList.get(i).getIsOver().equals("OVER")){	
//						count ++;
//					}
//				}
				int count = 0;
				List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
				for(int i = 0; i < sameStepWfList.size(); i++){
					if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
						count ++;
					}
				}
				
				if(count>1){		//更新下一步的信息数据
					//检查下一步骤是否已经被办理
//					Integer stepIndex = wfProcess.getStepIndex()+1;
//					List<WfProcess> list = tableInfoService.findWfProcessList(instanceId, stepIndex);
//					int num = 0;
//					WfProcess wfp = null;
//					for(int i=0; i<list.size(); i++){
//						wfp = list.get(i);
//						if(wfp.getIsOver()!=null && wfp.getIsOver().equals("OVER")){
//							num ++;
//						}
//					}
//					if(num==0){	
//						WfProcess wf = null;
//						for(int i=0; i<list.size(); i++){
//							wf = list.get(i);
//							wf.setCommentJson(trueJson);
//							tableInfoService.update(wf);
//						}
//					}else{	////办件已经进入办理之中
//						
//					}
				}else{		//插入下一步的数据
					List<WfNode> nodeList = workflowBasicFlowService
							.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
					WfNode nextNode = null;		//下一节点
					for(int i=0; i<nodeList.size(); i++){
						nextNode = nodeList.get(i);
						String xtoUserId = nextNode.getWfn_bd_user();
						if(xtoUserId!=null && !xtoUserId.equals("")){
							break;
						}
						List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, nextNode.getWfn_id());
						if(wfbList!=null && wfbList.size()>0){
							break;
						}
					}
					sendNextProcess(nextNode, wfProcess, value, vc_title, trueJson, "", isCyWF,userId);
				}
			}else{
				//获取主送发送到下一步的待办信息(主要是node信息)
				List<WfNode> nodes = workflowBasicFlowService.showNode(workFlowId,nodeId, instanceId);
				WfProcess nextProcess = null;
				WfNode node = null;
				boolean flag = false;
				for(WfNode wfNode : nodes){
					List<WfProcess> list2 = tableInfoService.getNodeProcess(workFlowId, 
							instanceId, wfNode.getWfn_id() ,wfProcess.getfInstancdUid());
					for(int i=0 ; list2!=null && i<list2.size();i++){
						nextProcess = list2.get(i);
						if(nextProcess.getIsOver().equals("NOT_OVER")){	
							node = wfNode;
							flag = true;
							break;
						}
					}
					if(flag){
						break;
					}
				}
				if(node!=null){
					//生成新的pdf
					String htmlpath = getHtmlToNewHtml(formId, node.getWfn_id(), value, instanceId, isCyWF, true);
					String htmlpath2 = getHtmlToNewHtml(formId, node.getWfn_id(), value, instanceId, isCyWF, false);
					pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,oldPdfPath);
					//调用线程
					ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,
							attachmentService,instanceId,oldPdfPath,"","middle",wfProcess,"",flowService, null,null, tableInfoService);
					topdf.start();
					nextProcess.setPdfPath(pdfPath);
					//更新newprocess
					tableInfoService.updateProcess(nextProcess);
				}
				boolean isOver = tableInfoService.isAllOver(workFlowId, instanceId,nodeId, wfProcess.getfInstancdUid());
				if (isOver == true && !("1").equals(cType)) {
					// 让下一步发送的待办显示
					updateNewProcess(instanceId, workFlowId, nodeId, "");
				}
			}
		//获取当前节点的节点类型       
		if (Integer.parseInt(operate) == 1) {		//执行保存操作      
			wfProcess.setFinshTime(new Date());
			wfProcess.setIsOver(Constant.OVER);
			tableInfoService.updateProcess(wfProcess);
			if(route_type!=null && route_type.equals("2")){		//并行完全式                                                                               	
				//检查该步骤信息是否已经被处理                                                                                                                      	
				List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);                                                       	
				int count = 0;                                                                                                                        	
				for(int i=0; i<sameStepWfList.size(); i++){                                                                                           	
					if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){                                                                         	
						count ++;                                                                                                                     	
						break;                                                                                                                        	
					}                                                                                                                                 	
				}                                                                                                                                     	
				if(count==0){		//发送接口消息                                                                                                          	
					String serverUrl = "http://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();	
					List<WfProcess> nextList = tableInfoService.findWfProcessList(instanceId, wfProcess.getStepIndex()+1);                            	
					sycnPendToChat( process, userId);                                                                     	
				}                                                                                                                                     	
			}                                                                                                                                         	
		}                                                                                                                                             	
	    // 6,同步数据
		excuteProcedure(oldFormId, 1, instanceId, oldFormId, nodeId);
		}
		
		endTime = System.currentTimeMillis();
		System.out.println("---------结束onlysave时间------："+((endTime-startTime)/1000.0));

		getResponse().getWriter().print(value);
		
	}
	
	
	
	/**
	 * 
	 * 描述：将提交的json内容跟老的json内容作出
	 * @param newTrueJson
	 * @param oldJson
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-8-22 下午3:17:25
	 */
	public String combineTrueJson(String newTrueJson, String oldJson){
		Map<Integer, JSONArray>  jsonmap1 = getTrueJson(newTrueJson);		//提交的意见
		Map<Integer, JSONArray>  jsonmap2 = getTrueJson(oldJson);			//后台的意见
		boolean is_not_new = false;
		for(Integer key: jsonmap2.keySet()){
			JSONArray array = jsonmap2.get(key);
			if(jsonmap1!=null && jsonmap1.size()>0){
				JSONArray array1 =  jsonmap1.get(key);				
				if(array!=null && array.size()> array1.size()){			//后台意见>前台的意见
					is_not_new = true;
					break;
				}else if(array!=null && array.size()== array1.size()){	//比较意见内容
					for(int i=0; i<array.size(); i++){
						String userId = array.getJSONObject(i).get("userId")!=null ?array.getJSONObject(i).get("userId").toString():"";
						if(userId!=null && !userId.equals("")){
							boolean cont_user = false;
							for(int j=0; j<array1.size(); j++){
								String userId2 = array1.getJSONObject(i).get("userId")!=null ?array1.getJSONObject(i).get("userId").toString():"";
								if(userId.equals(userId2)){
									cont_user = true;
									break;
								}
							}
							if(!cont_user){		//表示意见已经出现了丢失
								is_not_new = true;
								break;
							}
						}
					}
				}else{
					
				}
			}
		}
		if(is_not_new){		//将后台的意见添加到原先的意见中
			/*for(Integer key: jsonmap2.keySet()){
				net.sf.json.JSONArray array = jsonmap2.get(key);
				if(jsonmap1!=null && jsonmap1.size()>0){
				}
			}*/
			return "1";
		}else{		//如果提交的>后台的,返回空,表示可以自动提交
			return "0";
		}
	}
	
	
	public Map<Integer, JSONArray> getTrueJson(String newTrueJson){
		// 1.意见为空
		if (newTrueJson == null || newTrueJson.equals("")
				|| newTrueJson.equals("{}") || newTrueJson.equals("[]")) {
			return null;
		}
		// 解析意见
		JSONArray js;
		Map<Integer, JSONArray>  map = new HashMap<Integer, JSONArray>();
		try {
			net.sf.json.JSONObject obj = net.sf.json.JSONObject.fromObject(newTrueJson);
			if (obj.containsKey("pages")) {
				js = obj.getJSONArray("pages");
				int size = js.size();
				for (int i = 0; i < size; i++) {
					net.sf.json.JSONObject jsonObject = (net.sf.json.JSONObject) js	.get(i);
					JSONArray arr = null;
					JSONArray arr2 = null;
					Integer pageCount = null;
					try {
						pageCount = jsonObject.getInt("page");			//意见所在页码
						arr = jsonObject.getJSONArray("processes");		//意见内容
						arr2 = jsonObject.getJSONArray("stamps");
					} catch (Exception e) {
					}
					if (arr != null && arr.size() > 0) {
						String processId = arr.getJSONObject(i).get("processId").toString();
						map.put(pageCount, arr);				//指定页码、指定步骤，意见内容
					}
				}
			}
			return map;
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			return map;
		}
	}
	
	
	/**
	 * 
	 * 描述：获取当前步骤签批的意见内容
	 * @param json
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2015-7-8 上午11:01:10
	 */
	public String findTrueJsonContentList(String json, String processId){
		if(json==null || json.equals("")||json.equals("{}") || json.equals("[]")){
			return null;
		}
		String logContent = "";
		List<String[]> list = new ArrayList<String[]>();
		//解析意见
		JSONArray js;
		JSONObject obj = JSONObject.fromObject(json);
		if(obj.containsKey("pages")){
			js	= obj.getJSONArray("pages");
			int size = js.size();
			for(int i = 0; i<size; i++){
				JSONObject jsonObject = js.getJSONObject(i);
				int pa = jsonObject.getInt("page");
				JSONArray arr = null;
				try{
					arr = jsonObject.getJSONArray("processes");
				}catch (Exception e) {
					
				}
				//意见处理这个模块发送变化(ios端传输的意见格式有误)
				if((arr!=null && arr.size()>0)){
					for(int j=0; j<arr.size(); j++){
						JSONObject ob = (JSONObject)arr.get(j);
						String step_processId =  ob.get("processId")!=null?ob.get("processId").toString():"";
						if(step_processId!=null && step_processId.equals(processId)){
							Object object = ob.get("datas");
							Object username = ob.get("username");
							if(object!=null){
								JSONArray data = (JSONArray)object;
								String[] str = null;
								for(int m=0; m<data.size(); m++){
									try{
										str = new String[3];
										Object obj_text = ((JSONObject) data.get(m)).get("text");
										str[0] = obj_text!=null?obj_text.toString():"";
										Object obj_time = ((JSONObject) data.get(m)).get("time");
										str[1] = obj_time!=null?obj_time.toString():"";
										str[2] = username!=null?username.toString():"";
										list.add(str);
									}catch (Exception e) {
										System.out.println("----解析意见出现问题-----");
									}
								}
							}
						}
					}
				}
			}
			String[] data = null;
			for(int i=0; i<list.size(); i++){
				data = list.get(i);
				logContent += data[2]+"("+data[1]+"):"+data[0]+";</br>" ;
			}
			return logContent;
		}else{
			logContent = "未签批意见内容！";
			return logContent;
		}
	}
	
	/**
	 * 
	 * 描述：比较意见格式
	 * @param oldJson
	 * @param trueJson
	 * @return boolean   true:相同,  false不相同;
	 * 作者:蔡亚军
	 * 创建时间:2015-7-30 下午8:36:28
	 */
	public boolean compareCommentJson(String oldJson, String trueJson){
		if(trueJson==null || trueJson.equals("")){		//不存在新的意见
			return false;
		}
		if(oldJson!=null && (trueJson.equals(oldJson))){
			return true;
		}
		
		try{
			JSONObject old_obj = JSONObject.fromObject(oldJson);
			JSONObject new_obj = JSONObject.fromObject(trueJson);
			JSONArray old_arr = old_obj.getJSONArray("pages");
			JSONArray new_arr = new_obj.getJSONArray("pages");
			if(old_arr!=null && new_arr!=null && old_arr.size() != new_arr.size()){
				return false;
			}
			JSONObject oldObj = null;
			boolean b = true;
			for(int i=0; i<old_arr.size(); i++){
				oldObj = old_arr.getJSONObject(i);
				Integer page = Integer.parseInt(oldObj.get("page").toString());
				JSONObject newObj = null;
				for(int j=0; j<new_arr.size(); j++){
					newObj = new_arr.getJSONObject(j);
					Integer page2 = Integer.parseInt(newObj.get("page").toString());
					if(page==page2){		//页面相同,内容不同
						if(oldObj!=newObj){		//内容不同
							b = false;
							break;
						}
					}
				}
			}
			return b;
		}catch(Exception e){
			return false;
		}
	}
	/**
	 * 
	 * 描述：插入下一节点数据
	 * 作者:蔡亚军
	 * 创建时间:2014-8-22 下午4:57:57
	 */
	public void sendNextProcess(WfNode nextNode, WfProcess wfprocess, 
				String value , String vc_title, String trueJson, String formPage,
				boolean isCyWF,String userId){
		String xtoUserId = "";	//发送的人员
		if(nextNode!=null){
			xtoUserId = nextNode.getWfn_bd_user();
		}
		String workFlowId = wfprocess.getWfUid();
		String instanceId = wfprocess.getWfInstanceUid();
		String nextNodeId = nextNode.getWfn_id();
		String formId = nextNode.getWfn_defaultform();
		String title = wfprocess.getProcessTitle();
		if(xtoUserId==null || xtoUserId.equals("")){
			//检查下是否存在自动追溯
			List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, nextNodeId);
			if (wfbList != null && wfbList.size() != 0) {
				if ((nextNodeId).equals(wfbList.get(0).getFromNodeId())) {
					List<WfProcess> desPersons = tableInfoService.findProcesses(workFlowId, instanceId,wfbList.get(0).getToNodeId());
					if (desPersons.size() != 0 && desPersons != null
							&& !("").equals(desPersons)) {
						String xtoname = "";// 主送
						String xccname = "";// 抄送
						for (WfProcess wfProcess : desPersons) {
							if (wfProcess.getIsMaster() == 1) {
								xtoname = wfProcess.getUserUid();
							} else {
								xccname += wfProcess.getUserUid() + ",";
							}
						}
						if (!("").equals(xccname) && xccname.length() > 1) {
							xccname = xccname.substring(0, xccname.length() - 1);
						}
						LOGGER.warn("办件："+title+",处于并行传阅节点模式,自动追溯的人员为："+xtoname+",抄送人员暂时给予过滤！");
						xtoUserId = xtoname;
					}
				}
			}
		}
		try {
			
			WfNode node = workflowBasicFlowService.getWfNode(nextNodeId);
			String form_continue=  node.getWfn_form_continue();
			String truePath = "";
			if(form_continue==null || form_continue.equals("0")){	//延用
				truePath =  wfprocess.getPdfPath();
				tableInfoService.sendNextProcess(title, xtoUserId, userId,trueJson, truePath, wfprocess, nextNodeId);
			}else{
				String	htmlpath = getHtmlToNewHtml(formId, nextNodeId, value, instanceId, isCyWF, true);
				String  htmlpath2 = getHtmlToNewHtml(formId, nextNodeId, value, instanceId, isCyWF, false);
				ToPdfThread toPdfThread = new ToPdfThread(vc_title, xtoUserId,userId, 
						trueJson, htmlpath+","+htmlpath2, wfprocess
						, nextNodeId, tableInfoService,attachmentService, "nextSend");
				toPdfThread.start();
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	/**
	 * 只点“套打”按钮--保存表单
	 * 
	 * @return
	 * @throws IOException
	 */
	public void onlySaveOfPrint() throws IOException {
		/*String formId = getRequest().getParameter("formId");
		String oldFormId = getRequest().getParameter("oldFormId");
		String nodeId = getRequest().getParameter("nodeId");// 当前节点
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		// 获取当前登录用户
		String value = "";
		value = this.saveForm(oldFormId, 1, instanceId, formId, nodeId, workFlowId,"","");*/
		getResponse().getWriter().print("msg");
	}

	/**
	 * html to pdf
	 */
	public void htmlToPdf() {
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Runtime run = Runtime.getRuntime();
		Process process = null;
		try {
			// 执行cmd命令
			process = run
					.exec("C:/Program Files/wkhtmltopdf/wkhtmltopdf.exe http://192.168.5.55:8083/trueWorkFlowV2.1_GT/table_frameForm.do?formLocation=5cf4ee08-1753-478e-8994-18aa7a96f836.jsp&workFlowId=D7148E14-F185-4807-A044-09FD741227AB&formId=F83EA553-A3D3-40B7-809C-881EE764C80D&processId=337DC890-2D1A-445D-B537-1BF04AC7FF18&instanceId=7D96CCC2-4587-4C80-ACB7-62FB5FE6E686&att_comment_id=0176B39E-3DEA-4874-987F-DAF6D80D0EB9&value=&nodeId=09040B61-4C19-4AEC-B23A-61EF9C01C313&isFirst=true&deptId={BFA811EA-0000-0000-4557-98D600000881}&userId={BFA811EA-0000-0000-4554-7F8B000002CB} d:/aaa.pdf");
			// process =
			// run.exec("C:/Program Files/wkhtmltopdf/wkhtmltopdf.exe http://192.168.5.55:8083/trueWorkFlowV1.1/item_getItemList.do?itemName=工作流&column=1  d:/aaa.pdf");
			// process =
			// run.exec("c:/Program Files (x86)/wkhtmltopdf/wkhtmltopdf.exe http://zhidao.baidu.com/question/573957166.html?push=asking d:/aaa.pdf");
			process.waitFor();
		} catch (Exception e) {
			System.out.println("Error executing wkhtmltopdf.");
		} finally {
			if (process != null) {
				process.destroy();
				process = null;
			}
		}
	}

	/**
	 * 得到流程的标题和所对应的字段
	 */
	public String getTitle(String workFlowId, String formId, String instanceId) {
		WfMain wf_main = workflowBasicFlowService.getWfMainById(workFlowId);
		String title = getTitle(wf_main, instanceId);// {标题}test---找到手动输入的值
		String name = tableInfoService.getTableAndColumnName(wf_main.getWfm_title_column());// tableName;columnName#tableName;columnName
		// String tableName = "";
		// 查找列名,用于页面判断
		String columnName = "";
		// String columnValue = "";
		String[] names = name.split("#");
		for (String str : names) {
			// tableName = str.split(";")[0];
			columnName += str.split(";")[1] + ",";
			// String cloumn = str.split(";")[1];
			// 查询列值并拼接
			// columnValue +=
			// workflowBasicFlowService.findValue(tableName,cloumn,formId,workFlowId,instanceId);
		}
		if (!("").equals(columnName) && columnName.length() > 0) {
			columnName = columnName.substring(0, columnName.length() - 1);
		}
		// String vc_title = columnValue;
		return title + ";" + columnName;
	}
	
	//检查步骤是否存在
	public void checkProcessExist() throws Exception{
		String processId = getRequest().getParameter("processId");
		WfProcess oldProcess = pendingService.getProcessByID(processId); 
		String info = oldProcess==null?"0":"1";
		try{
			getResponse().getWriter().print(info);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			getResponse().getWriter().close();
		}
	}
	
	/**
	 * 
	 * 描述：Pc端办结流程
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午3:12:08
	 */
	public void end() throws Exception{
		long startTime = System.currentTimeMillis();
		long endTime ;
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			try {
				//--1、获取参数、将数据保存如何，办结本身流程数据
				String isWriteNewValue = getRequest().getParameter("isWriteNewValue");
				String instanceId = getRequest().getParameter("instanceId");
				String workFlowId = getRequest().getParameter("workFlowId");
				String formId = getRequest().getParameter("formId");
				String processId = getRequest().getParameter("processId");
				String beforeProcessId = getRequest().getParameter("oldProcessId");
				String currentItemId = getRequest().getParameter("itemId");
				String nodeId = getRequest().getParameter("nodeId");// 当前节点
				// 手写的意见
				String trueJson = getRequest().getParameter("json");
				trueJson = JSONReplaceUtil.replaceJson(trueJson);
				// 获取当前登录用户
				Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				String userId = emp.getEmployeeGuid();
				
				//保存日志信息表
				/*TrueJson entity = new TrueJson();
				entity.setInstanceId(instanceId);
				entity.setProcessId(processId);
				entity.setSaveDate(new Date());
				entity.setUserId(userId);
				entity.setTrueJson(trueJson);
				entity.setExcute("end");
				trueJsonService.saveTrueJson(entity);*/
				TrueJsonLogThread trueJsonLogThread = new TrueJsonLogThread(trueJsonService, instanceId, processId, userId, trueJson, "end");
				trueJsonLogThread.start();
				
				endTime = System.currentTimeMillis();
				System.out.println("---------end断点3------："+((endTime-startTime)/1000.0));
				
				// 入库
				String value1 = "";
				WfProcess wfp = tableInfoService.getProcessById(processId);
				//是否是子流程第一步就办结--县子
				value1 = this.saveForm(formId, 1, instanceId, formId, nodeId, workFlowId,"","",userId);
				if(value1==null || value1.equals("")){
					if(wfp!=null && wfp.getDoType() != null && !("").equals(wfp.getDoType())){
						value1 = this.saveForm(formId, 2, wfp.getfInstancdUid(), formId, nodeId, workFlowId,"","",userId);
					}
				}
				// 标题的值
				String title = getTitle(workFlowId, formId, instanceId);
				String vc_title = title.split(";")[0];
				if((vc_title==null || vc_title.equals(""))){
					vc_title = wfp.getProcessTitle();
				}
				//县主到县子办结发送后给没有业务数据的表单增加父表单的业务数据
				if((vc_title==null || vc_title.equals(""))){
					if(wfp!=null && wfp.getDoType() != null && !("").equals(wfp.getDoType())){
						String value2 = this.saveForm(formId, 2, wfp.getfInstancdUid(), formId, nodeId, workFlowId,"","",userId);
						value1 = CommonUtil.formatStr(value2);
					}
				}
				
				// 父流程实例id
				String f_instanceId = getRequest().getParameter("finstanceId");
				endTime = System.currentTimeMillis();
				System.out.println("---------end断点1------："+((endTime-startTime)/1000.0));
				WfProcess p_WfProcess = tableInfoService.getParentProcessByInstanceid(f_instanceId);			//查询父流程的实例
				endTime = System.currentTimeMillis();
				System.out.println("---------end断点2------："+((endTime-startTime)/1000.0));
				String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
				String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
				String oldPdfPath = "";
//				String nextNodePdfPath = "";
				boolean outparwf = false;
				WfProcess process = pendingService.getProcessByID(processId);
				String wfc_return_pend = "";
				String ifFw = "0";
				if(process!=null){
					if(p_WfProcess!=null){
						String f_wfUId = p_WfProcess.getWfUid();
						String wfUId = process.getWfUid();
						WfChild wfChild = workflowBasicFlowService.getWfChildByPidAndCid(wfUId, f_wfUId);
						if(wfChild!=null){
							wfc_return_pend = wfChild.getWfc_return_pend();
							ifFw = wfChild.getWfc_isSend();
						}
						outparwf = wfChild.getWfc_outparwf()!=null && wfChild.getWfc_outparwf().equals("1")?true:false;
					}
				}
				WfChild wfChild = null;
				if(p_WfProcess!=null && !outparwf){
					String path = p_WfProcess.getPdfPath();
					if(path!=null && path.length()>0){
						oldPdfPath =  path.split(",")[0];
					}
					//以下是针对会议管理定制的
					String p_wf_uid = p_WfProcess.getWfUid();
					if(wfp!=null){
						String c_wf_uid = wfp.getWfUid();
						wfChild = workflowBasicFlowService.getWfChildByPidAndCid(c_wf_uid, p_wf_uid);
						if(wfChild!=null){
							String c_type = wfChild.getWfc_ctype();
							if(c_type==null || c_type.equals("0")){
								String commonJson = p_WfProcess.getCommentJson();
								commonJson = JSONReplaceUtil.replaceJson(commonJson);
								String parPdf =pdfRoot+ dstPath+oldPdfPath.substring(oldPdfPath.lastIndexOf("/")+1,oldPdfPath.length()-5)+"gene.pdf";
								ToPdfThread util = new ToPdfThread("createFile", oldPdfPath, parPdf, commonJson);
								util.start();
								oldPdfPath = parPdf ;
							}
						}
					}
				}
				
				if(wfChild != null && ((StringUtils.isNotBlank(wfChild.getIsNeedFForm()) && wfChild.getIsNeedFForm().equals("0")) || StringUtils.isBlank(wfChild.getIsNeedFForm()))){
					oldPdfPath = "";
				}			
				
				String pdfPath = ""; 
				//获取html地址
				String htmlpath = getHtmlToNewHtml(formId, "", value1, instanceId, false, true);
				String htmlpdfPath = pdfRoot+dstPath+ (htmlpath.substring(htmlpath.lastIndexOf("/"),htmlpath.length()-5)+"merge")+".true";
				//合并意见pdf
				String newPdfPath = htmlpdfPath.substring(0,htmlpdfPath.length()-5)+"new" + ".true";
				//与父表单合并的pdf
				String mergePath = "";
				if(oldPdfPath!=null && !oldPdfPath.equals("")){
					mergePath = newPdfPath.substring(0, newPdfPath.length() - 5) + "mergeNew" + ".true";
				}else{
					mergePath = newPdfPath;
				}
				WfProcess oldProcess = pendingService.getProcessByID(processId);
				//调用线程生成对应的pdf文件
				String newProcessId = UuidGenerator.generate36UUID();
				
				if(oldProcess != null &&  oldProcess.getTempHtmlPath()!= null && !"".equals(oldProcess.getTempHtmlPath())){
					htmlpath = oldProcess.getTempHtmlPath();
				}
				WfNode node = workflowBasicFlowService.getWfNode(nodeId);
				String form_continue = node.getWfn_form_continue();
				if(form_continue==null || form_continue.equals("0")){
					pdfPath = oldProcess.getPdfPath();
				}else{
					ToPdfThread toPdfThread = new ToPdfThread(htmlpath,attachmentService,instanceId,oldPdfPath,trueJson,"end",oldProcess,mergePath,newPdfPath,flowService,processId,newProcessId);
					toPdfThread.start();
					pdfPath = mergePath+","+newPdfPath;
				}
				
				endTime = System.currentTimeMillis();
				System.out.println("---------end断点5------："+((endTime-startTime)/1000.0));
				
				// 更新步骤(办结插一条数据) 这个是一般办结 加子流程第一步办结
				if(oldProcess ==null && (beforeProcessId == null||beforeProcessId.equals(""))){
					tableInfoService.updateInstanceFirstStepOver(workFlowId, instanceId,nodeId, userId, vc_title, formId, trueJson, pdfPath, currentItemId, processId);
				}else{
					tableInfoService.updateInstanceOver(workFlowId, instanceId, beforeProcessId,processId, nodeId, userId, vc_title, formId ,trueJson, pdfPath, isWriteNewValue,newProcessId);
					WebSocketUtil webSocket = new WebSocketUtil();
					webSocket.delBadge(userId, "", "");
				}

				endTime = System.currentTimeMillis();
				System.out.println("---------end断点4------："+((endTime-startTime)/1000.0));
				
				List<WfNode> nodes =workflowBasicFlowService.getNodesByPid(workFlowId);
				WfNode nextNode = null;
				for(int i = 0; i <nodes.size() ; i++){
					if(nodes.get(i).getWfn_type()!= null && "end".equals(nodes.get(i).getWfn_type())){
						nextNode = nodes.get(i);
						break;
					}
				}
				
				String meetingPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingPassNode");
				String meetingNotPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingNotPassNode");
				if(nextNode != null && meetingPassNodeIds != null && meetingPassNodeIds.indexOf(nextNode.getWfn_id())>-1){
					meetingInfoService.updateState(instanceId,"1");
				}else if(nextNode != null  && meetingNotPassNodeIds != null && meetingNotPassNodeIds.indexOf(nextNode.getWfn_id())>-1){
					meetingInfoService.updateState(instanceId,"0");
				}
				//---针对于父流程的办结操作
				if(outparwf){		//脱离父流程
					if(wfc_return_pend!=null && wfc_return_pend.equals("1")){		//是否需要回到待办
						String fInstanceId = oldProcess.getfInstancdUid();
						//获取节点发送的步骤
						WfProcess sendWfp = tableInfoService.findSendWfProcess(instanceId);			//分发子流程的那步骤的信息
						List<WfProcess> wfpList = tableInfoService.getProcessList(fInstanceId);
						Integer maxStepIndex = wfpList.get(0).getStepIndex();
						if(sendWfp!=null){
							sendWfp.setFromUserId(userId);
							//比办结时间多1秒--历程不会乱
							sendWfp.setApplyTime(new Date(System.currentTimeMillis()+2000));
							sendWfp.setFinshTime(null);
							sendWfp.setWfProcessUid(UuidGenerator.generate36UUID());
							sendWfp.setCommentJson(trueJson);
							sendWfp.setStepIndex(maxStepIndex+1);
							sendWfp.setIsOver("NOT_OVER");
							sendWfp.setAction_status(0);
							sendWfp.setJssj(null);
							sendWfp.setIsShow(1);
							tableInfoService.addProcess(sendWfp);
						}
					}
				}else{		//父流程关联子流程进行办理
					if(process != null){
						String waitingProcessId = tableInfoService.getWaitingProcessId(process);
						//判断子流程的所有实例是否都办结--更新父流程状态--如果子流程后面有节点则不更新
						WfNode wfNode = tableInfoService.updateMainStatus(process);
						oldProcess = pendingService.getProcessByID(processId);		//子流程,办件结束,重新回到主流程
						WfProcess firstWfProcess = tableInfoService.isGetTs(oldProcess.getWfInstanceUid());
						Integer doType = null;
						if(firstWfProcess!=null){
							doType =  firstWfProcess.getDoType();	//办理类型--1：主办、2：协办、3:中间流程
						}else{
							doType =  oldProcess.getDoType();
						}
						
						if(wfNode!=null){	//依申请公开模式：父-子-父
							
						}else{	
							//该待办(已办)为父流程的主办信息,需要将其pdf添加到父流程的正文附件中
							if(doType!=null && doType==1){	
								String finstanceId = oldProcess.getfInstancdUid();
								String fTureInstanceId = "";   //真实的父instanceId(针对子流程与父流程之间存在的中间instanceId(临时的假的))
								if(finstanceId!=null && !finstanceId.equals("")){
									WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
									int count = tableInfoService.getStepIndexByInstanceId(finstanceId);
									if(count>1){	//不是中间步骤
										fTureInstanceId = pWfProcess.getWfInstanceUid();
									}else{
										if(pWfProcess!=null){
											if(firstWfProcess!=null && firstWfProcess.getIsManyInstance()!=null
													&& firstWfProcess.getIsManyInstance().equals("0")){
												fTureInstanceId = pWfProcess.getWfInstanceUid();
											}else{
												fTureInstanceId = pWfProcess.getfInstancdUid();
											}
											Integer pDoType = pWfProcess.getDoType();
											while(pDoType!=null && pDoType==3){	//表示该流程为中间流程
												finstanceId = pWfProcess.getfInstancdUid();
												if(finstanceId==null || finstanceId.equals("")){	//自动分发
													if(pWfProcess!=null && pWfProcess.getIsManyInstance()!=null
															&& pWfProcess.getIsManyInstance().equals("0")){
														fTureInstanceId = pWfProcess.getWfInstanceUid();
													}else{
														fTureInstanceId = pWfProcess.getWfInstanceUid();
													}
													pDoType = null;
												}else{
													pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
													if(pWfProcess!=null){
														pDoType = pWfProcess.getDoType();
														fTureInstanceId = pWfProcess.getWfInstanceUid();
													}else{
														pDoType = null;
													}
												}
											}
										}
									}
								}
								//以下针对于如果子流程(主办),采用的是延用父流程的表单,默认认为父子表单是一致，只需将主办子流程的表单意见同步到父流程中,无需携带附件
								boolean isfileNeed = true;
//								WfProcess waitingWfProcess = tableInfoService.getProcessById(waitingProcessId);
								WfNode childWfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
								String formContinue = childWfNode.getWfn_form_continue();
								//表单延用：表示合并意见到父流程actionstatus中
								if(formContinue!=null && formContinue.equals("0")){	
									isfileNeed = false;
//									String	updateJson = trueJson;
//									//获取需要更新的步骤信息
//									if(waitingWfProcess!=null){
//										waitingWfProcess.setCommentJson(updateJson);
//										tableInfoService.update(waitingWfProcess);
//									}
								}
								
								if(fTureInstanceId != null && !("null").equals(fTureInstanceId) && !("").equals(fTureInstanceId) && isfileNeed){
									WfProcess endProcess = new WfProcess();			//办结节点pdf
									String path = pdfPath.split(",")[1];
									String parPdf = path.substring(0, path.length()-5)+"toParfj.pdf";
									endProcess.setPdfPath(pdfPath.split(",")[0]+","+parPdf);
									endProcess.setFormId(formId);
									this.addDirectAtt(endProcess, fTureInstanceId, emp);
									
									//添加一个模块
									if(ifFw!=null && ifFw.equals("1")){		//流程为发文流程
										if(wfp!=null){
											String fInstanceId = wfp.getfInstancdUid();
											ToPdfThread pdfThread = new ToPdfThread(fInstanceId,parPdf,tableInfoService, "toSend");
											pdfThread.start();
										}
									}
								}
							}
						}
					}
				}
				
				//--3、按照存储过程
				excuteProcedure("", 1, instanceId, formId, nodeId);
				
				//--4、按照子流程上绑定的父流程节点自动分发
				saveNextWfProcess(instanceId, processId, userId);
				
				WfItem item = itemService.getItemById(currentItemId);
				toStartNewInstanceId(node.getWfn_iscountersign()+"", node.getWfn_isoverfirststep()+"", formId, instanceId, trueJson, wfp, userId, item.getRelatedItemId());
				//调用档案系统web service进行归档操作
				String isChildWf = "";
				if(wfp != null){
					wfp.getIsChildWf();
				}
				String callArchiveFlag = SystemParamConfigUtil.getParamValueByParam("callArchiveFlag");
				//主流程办结进行归档操作
				if(!"1".equals(isChildWf) && "YES".equals(callArchiveFlag)){
					if(item != null){
						String sxlx = item.getVc_sxlx();
						CallWebServiceThread callWebServiceThread = new CallWebServiceThread(sxlx, instanceId, archiveWebService);
						callWebServiceThread.start();
					}
				}
				
				getResponse().getWriter().print("yes");
				
				//--5,生成办件对应的pdf文件存流入库
				if(null != wfp && wfp.getAllInstanceid().equals(instanceId)){//主流程办结才生成pdf文件
					String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_GD_FILE_PATH);
					DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
					Map<String, Object> param = null ; 
					if(doFile != null){
						
						param = getPDFPathByEnd(processId, pdfRoot+gdPath+wfp.getProcessTitle()+".pdf","");
						String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
						param.put("serverUrl", serverUrl);
						param.put("doFile", doFile);
						param.put("emp", emp);
					}
					
					PushDataToPdfThread pushDataToPdfThread = new PushDataToPdfThread(thirdpartyInterfaceLogService,tableInfoExtendService,attachmentService,tableInfoService,trueJsonService,zwkjFormService,this,item, instanceId, wfp.getProcessTitle(), param); 
					pushDataToPdfThread.start();
				}
				
			/*	String gdPdfPath = "";
				if(null != wfp && wfp.getAllInstanceid().equals(instanceId)){//主流程办结才生成pdf文件
					String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_GD_FILE_PATH);
					DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
					if(doFile != null){
						gdPdfPath = getPDFPath(processId, pdfRoot+gdPath+wfp.getProcessTitle()+".pdf","");
						if(StringUtils.isNotBlank(gdPdfPath)){
							File file = new File(gdPdfPath);
							if(file.exists()){
								doFile.setPdfPath(gdPdfPath);
								doFile.setPdfData(Hibernate.createBlob(new FileInputStream(file)));
								tableInfoService.updateDoFile(doFile);
							}
						}
					}
				
					//--6,向第三方推送数据
					String fileUrl = "";
					if(StringUtils.isNotBlank(gdPdfPath)){
						File file = new File(gdPdfPath);
						if(file.exists()){
							String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
							if(gdPdfPath.startsWith(pdfRoot)){
								fileUrl = serverUrl+ "/form/html/workflow/"+gdPdfPath.substring(pdfRoot.length());
							}
						}
					}
					PushDataToPdfThread pushDataToPdfThread = new PushDataToPdfThread(thirdpartyInterfaceLogService, tableInfoExtendService, item, instanceId, wfp.getProcessTitle(), fileUrl); 
					pushDataToPdfThread.start();
					endTime = System.currentTimeMillis();
					System.out.println("---------结束end时间------："+((endTime-startTime)/1000.0));
				}*/
				endTime = System.currentTimeMillis();
				System.out.println("---------结束end时间------："+((endTime-startTime)/1000.0));
				
			} catch (IOException e) {
				getResponse().getWriter().print("no");
			}
		}
	}
	
	
	/**
	 * 
	 * 描述：自动发送到下一节点
	 * @param instanceId void
	 * 作者:蔡亚军
	 * 创建时间:2016-6-6 下午5:11:58
	 */
	public void saveNextWfProcess(String instanceId, String processId, String userid){
		WfProcess wfprocess = tableInfoService.getProcessById(processId);
		boolean isJybw = false;
		String auto_nodeId = "";
		if(wfprocess!=null){
			String wfUId = wfprocess.getWfUid();
			//节点中设置了自动跳转的节点
			if(wfprocess!=null){
				String f_instanceId = wfprocess.getfInstancdUid();
				if(f_instanceId!=null && !f_instanceId.equals("")){
					WfProcess wfp = tableInfoService.findFakeWfProcess(f_instanceId);
					if(wfp!=null){
						 WfChild child = workflowBasicFlowService.getWfChildByPidAndCid(wfUId, wfp.getWfUid());
						 if(child!=null){
							 auto_nodeId =  child.getWfc_nodeName();
						 }
					}
				}
				if(auto_nodeId!=null && !auto_nodeId.equals("")){
					isJybw = true;
				}
			}
		}
		if(!isJybw){
			return;
		}
		if(wfprocess!=null){
			String fromNodeId = wfprocess.getFromNodeid();	//来自的node信息
			String f_instanceId = wfprocess.getfInstancdUid();
			if(f_instanceId!=null && !f_instanceId.equals("")){
				//1、检查子流程是否已经办结完成
				List<WfProcess> wfplist = tableInfoService.getWfProcessList(f_instanceId);
				boolean isCHildOver = true;
				for(WfProcess wfp : wfplist){
					String isOver = wfp.getIsOver();
					if(isOver!=null && isOver.equals("NOT_OVER")){
						isCHildOver = false;
						break;
					}
				}
				if(!isCHildOver){		//子流程未能全部完成
					return;
				}
				//2、检查父流程 (挺领导传阅步骤是否已经结束);
				List<WfProcess> wfprocesslist = tableInfoService.getProcessList(f_instanceId);
				WfProcess wfp = tableInfoService.findFakeWfProcess(f_instanceId);
				boolean isOtherOver = true;
				if(wfp!=null){
					for(WfProcess wf: wfprocesslist){
						if(wf.getStepIndex().intValue()==wfp.getStepIndex().intValue() && 
								wf.getIsOver().equals("NOT_OVER") && !wf.getWfProcessUid().equals(wfp.getWfProcessUid())){
							isOtherOver = false;
							break;
						}
					}
				}
				if(!isOtherOver){		//子流程未能全部完成
					return;
				}
				if(wfp!=null){
					//获取人员信息
					String nodeId = wfp.getNodeUid();	//节点id
					String wfUId = wfp.getWfUid();
					//查找办件信息
					List<WfProcess> wfpList = tableInfoService.getNodeProcess(wfUId, f_instanceId, fromNodeId, "");
					List<WfNode> list = workflowBasicFlowService.showNextNodeList(wfUId, nodeId);
					WfNode nextNode = null;
					if(auto_nodeId!=null && !auto_nodeId.equals("")){
						nextNode = workflowBasicFlowService.getWfNode(auto_nodeId);
					}else{
						if(list!=null && list.size()>0){
							nextNode = list.get(0);
						}
					}
					if(nextNode!=null){
						String nextNodeId = nextNode.getWfn_id();
						//查看节点中有无固定人员
						String bd_user = nextNode.getWfn_bd_user();	//固定人员
						String userId = "";
						String route_type =  "";
						if(bd_user!=null && !bd_user.equals("")){
							userId = bd_user;
						}else{		//查找自动追溯的人员
							route_type = nextNode.getWfn_route_type();
							List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(wfUId, nextNodeId);
							if (wfbList != null && wfbList.size() != 0) {
								if ((nextNodeId).equals(wfbList.get(0).getFromNodeId())) {
									List<WfProcess> desPersons = tableInfoService.findProcesses(wfUId, f_instanceId,wfbList.get(0).getToNodeId());
									if (desPersons.size() != 0 && desPersons != null && !("").equals(desPersons)) {
										String xtoname = "";// 主送
										String xccname = "";// 抄送
										for (WfProcess wfProcess : desPersons) {
											if (wfProcess.getIsMaster() == 1) {
												xtoname = wfProcess.getUserUid();
											} else {
												xccname += wfProcess.getUserUid() + ",";
											}
										}
										if (!("").equals(xccname) && xccname.length() > 1) {
											xccname = xccname.substring(0,xccname.length() - 1);
										}
										userId = xtoname;
									} else {
									}
								}
							}
						}
						if(userId!=null && !userId.equals("")){
							
							String todo_Path = "";
							String overPdfPath = "";
							if(wfp!=null){		//假节点步骤
								String oldformId = nextNode.getWfn_defaultform();
								String value = this.saveForm(oldformId, 2, wfp.getfInstancdUid(), oldformId, wfp.getNodeUid(), wfp.getWfUid(),wfp.getWfInstanceUid(),"",userid);
								try {
									String htmlPath = getHtmlToNewHtml(wfp.getFormId(), nextNodeId, value, wfp.getWfInstanceUid(), false, true);
									//获取当前节点
									String overhtml = getHtmlToNewHtml(wfprocess.getFormId(), wfprocess.getNodeUid(), value , instanceId, false, false);
									String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
									String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
									todo_Path = pdfRoot+dstPath+ (htmlPath.substring
												(htmlPath.lastIndexOf("/"),htmlPath.length()-5)+"merge")+".true";
									overPdfPath = pdfRoot+dstPath+ (overhtml.substring
											(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".true";
									System.out.println("todo_Path="+todo_Path);
									ToPdfThread toPdf = new ToPdfThread(htmlPath+","+overhtml, "",
												f_instanceId, attachmentService , "htmlToPdf", wfp, tableInfoService, wfp.getCommentJson(),flowService);
									toPdf.start();
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
							
							String[] ids = userId.split(",");
							WfProcess nextProcess = null;
							for(int i=0; i<ids.length; i++){
								nextProcess = new WfProcess();
								nextProcess= wfp ;
								nextProcess.setAction_status(0);
								nextProcess.setWfProcessUid(UuidGenerator.generate36UUID());
								nextProcess.setNodeUid(nextNode.getWfn_id());
								nextProcess.setDoType(null);
								nextProcess.setApplyTime(new Date());
								nextProcess.setFinshTime(null);
								nextProcess.setStepIndex(wfp.getStepIndex()+1);
								nextProcess.setFromNodeid(wfp.getNodeUid());
								nextProcess.setFromUserId(wfp.getUserUid());
								nextProcess.setUserUid(ids[i]);
								nextProcess.setIsOver("NOT_OVER");
								nextProcess.setCommentJson(wfprocess.getCommentJson());
								nextProcess.setPdfPath(todo_Path+","+overPdfPath);
								tableInfoService.save(nextProcess);
							}
						}
					}
					//将办件的上一步进行办理掉
					WfProcess stayWfProcess = null;
					for(int i=0; i<wfpList.size(); i++){
						stayWfProcess = wfpList.get(i);
						String isOver = stayWfProcess.getIsOver();
						if(isOver!=null && isOver.equals("NOT_OVER")){
							stayWfProcess.setIsOver("OVER");
							stayWfProcess.setFinshTime(wfp.getApplyTime());
							tableInfoService.update(stayWfProcess);
						}
					}
				}
			}
		}
	}
	
	/**
	 * 
	 * @Title: addAllAtt 
	 * @Description: 换表单时添加公共附件
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addDirectAtt(WfProcess process,String instanceId,Employee emp){
		//旧的pdf地址
		String oldPdfPath = process.getPdfPath().split(",")[1];
		//---------作为附件的每个表单的名字要不一样------------
		ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
		String filename = zf.getForm_caption()+".pdf";
		File attFile = new File(oldPdfPath); // 要上传的文件
		
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path"); // 得到上传文件在服务器上的基路径
		String dstPath = FileUploadUtils.getRealFilePath(filename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		/*List<SendAttachments> sendAttList = attachmentService.findAllSendAtts(instanceId+"fj");
		//是否已经存在
		for (SendAttachments sa : sendAttList) {
			if(sa.getFilename().equals(filename)){
				attachmentService.deleteAtts(sa);
			}
		}*/
		SendAttachments att = new SendAttachments();
		att.setDocguid(instanceId+"fj");	//绑定到instanceId
		att.setFileindex(0L);
		att.setFilename(filename);// 设置文件名属性
		att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
		att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
		att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
		att.setType("正文材料");	// 设置上传附件所属类别
		att.setTitle(filename);	// 设置上传附件标题
		att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
		att.setFilefrom(1);
		File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
		try{
			if(attFile.exists() && attFile.length()>0){//文件已存在,新增数据库,且上传文件	
				att.setFilesize(attFile.length());// 设置文件大小的属性
				attachmentService.addSendAtts(att);
				FileUploadUtils.copy(attFile,dstFile);	
			}else{	//文件暂时还未生成,线程等文件生成后,在删除文件
				FileUploadThread  upload = new FileUploadThread(flowService,attFile, dstFile, att ,attachmentService,"add");
				upload.start();
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 将相关内容写到word中,并且添加数据到oa_doc_attachments中
	 * @param content
	 * @param instanceId
	 * @param filename
	 */
	public void addAttFromContent(String userId,String content,String instanceId, String filename){
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if(emp == null ){
			emp = employeeService.findEmployeeById(userId);
		}
		String year = new SimpleDateFormat("yyyy").format(new Date());
		String month = new SimpleDateFormat("MM").format(new Date());
		String day = new SimpleDateFormat("dd").format(new Date());
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");

		String dstFolder = "attachments/" + year + "/" + month + "/" + day;
		//String filename = "政府信息依申请公开反馈单.doc";
		String filetype = filename.substring(filename.lastIndexOf("."));
		String saveFileName = UuidGenerator.generate36UUID() + filetype;
		String imagePath = basePath + dstFolder + "/" + saveFileName;
		String dstPath = dstFolder+"/"+saveFileName;	//附件路径
		try {
			CreateSimpleWord.createDocContext("政府信息公开申请答复书", content, imagePath);
		} catch (com.lowagie.text.DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		SendAttachments att = new SendAttachments();
		att.setDocguid(instanceId+"fj");	//绑定到instanceId
		att.setFileindex(0L);
		att.setFilename(filename);// 设置文件名属性
		att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
		File attFile = new File(imagePath); // 要上传的文件
		att.setFilesize(attFile.length());// 设置文件大小的属性
		att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
		att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
		att.setType("正文材料");// 设置上传附件所属类别
		att.setTitle(filename);// 设置上传附件标题
		att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
		//att.setFilefrom(1);
		attachmentService.addSendAtts(att);
	}
	
	/**
	 * 
	 * @Title: addAllAtt 
	 * @Description: 换表单时添加公共附件
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addAllAtt(WfProcess process,String allInstanceId,Employee emp){
		//旧的pdf地址
		String pdfPath = process.getPdfPath();
		String oldPdfPath = "";
		if(StringUtils.isNotBlank(pdfPath)){
			if(pdfPath.split(",").length>1){
				oldPdfPath = process.getPdfPath().split(",")[1];
			}
		}
		//---------作为附件的每个表单的名字要不一样------------
		ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
		String filename = zf.getForm_caption()+".pdf";
		File attFile = new File(oldPdfPath); // 要上传的文件
		
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		String dstPath = FileUploadUtils.getRealFilePath(filename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		List<SendAttachments> sendAttList = attachmentService.findAllSendAtts(allInstanceId+"newfj",null);
		//是否已经存在
		boolean isExistAtt = false;
		for (SendAttachments sa : sendAttList) {
			if(sa.getFilename().equals(filename)){
				isExistAtt = true;
				break;
			}
		}
		if(!isExistAtt){
			SendAttachments att = new SendAttachments();
				att.setDocguid(allInstanceId+"newfj");
				att.setFileindex(0L);
				att.setFilename(filename);// 设置文件名属性
				att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
				att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
				att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
				att.setType("正文材料");// 设置上传附件所属类别
				att.setTitle(filename);// 设置上传附件标题
				att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
				File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
				att.setFilesize(attFile.length());// 设置文件大小的属性
				attachmentService.addSendAtts(att);				
			try{
				if(attFile.exists()){//文件已存在,新增数据库,且上传文件	
					FileUploadUtils.copy(attFile,dstFile);	
				}else{	//文件暂时还未生成,线程等文件生成后,在删除文件
					FileUploadThread  upload = new FileUploadThread(flowService,attFile, dstFile, att ,attachmentService,"update");
					upload.start();
				}
			}catch (Exception e) {
				e.printStackTrace();
				attachmentService.deleteAtts(att.getId(), false);
			}
		}
	}
	
	
	/**
	 * 
	 * @Title: addAllAtt 
	 * @Description: 换表单时添加公共附件
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addReturnParFj(WfProcess process,String allInstanceId,Employee emp){
		//旧的pdf地址
		String oldPdfPath = process.getPdfPath().split(",")[1];
		//---------作为附件的每个表单的名字要不一样------------
		ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
		String filename = zf.getForm_caption()+".pdf";
		File attFile = new File(oldPdfPath); // 要上传的文件
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		String dstPath = FileUploadUtils.getRealFilePath(filename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		//是否已经存在
		boolean isExistAtt = false;
		if(!isExistAtt){
			SendAttachments att = new SendAttachments();
			att.setDocguid(allInstanceId+"fj");
			att.setFileindex(0L);
			att.setFilename(filename);// 设置文件名属性
			att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
			att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
			att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
			att.setType("正文材料");// 设置上传附件所属类别
			att.setTitle(filename);// 设置上传附件标题
			att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
			File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
			try{
				if(attFile.exists()){
					att.setFilesize(attFile.length());
				}
				if(attFile.exists() && att.getFilesize()>0){//文件已存在,新增数据库,且上传文件	
					attachmentService.addSendAtts(att);
					FileUploadUtils.copy(attFile,dstFile);	
				}else{	//文件暂时还未生成,线程等文件生成后,在删除文件
					FileUploadThread  upload = new FileUploadThread(flowService,attFile, dstFile, att ,attachmentService,"add");
					upload.start();
				}
			}catch (Exception e) {
				e.printStackTrace();
				attachmentService.deleteAtts(att.getId(), false);
			}
		}
	}
	
	/**
	 * 
	 * @Title: addAllAtt 
	 * @Description: 换表单时添加公共附件
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addAllAtt2(WfProcess process,String allInstanceId,Employee emp){
		//旧的pdf地址
		String oldPdfPath = process.getPdfPath().split(",")[1];
		//---------作为附件的每个表单的名字要不一样------------
		ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
		String filename = zf.getForm_caption()+".pdf";
		File attFile = new File(oldPdfPath); // 要上传的文件
		
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");// 得到上传文件在服务器上的基路径
		String dstPath = FileUploadUtils.getRealFilePath(filename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		List<SendAttachments> sendAttList = attachmentService.findAllSendAtts(allInstanceId+"oldfj",null);
		//是否已经存在
		boolean isExistAtt = false;
		for (SendAttachments sa : sendAttList) {
			if(sa.getFilename().equals(filename)){
				isExistAtt = true;
				break;
			}
		}
		if(!isExistAtt){
			SendAttachments att = new SendAttachments();
				att.setDocguid(allInstanceId+"oldfj");
				att.setFileindex(0L);
				att.setFilename(filename);// 设置文件名属性
				att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
				att.setFilesize(attFile.length());// 设置文件大小的属性
				att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
				att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
				att.setType("正文材料");// 设置上传附件所属类别
				att.setTitle(filename);// 设置上传附件标题
				att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
			File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
			SendAttachments savedAtt = attachmentService.addSendAtts(att);
			
			try{
				if(attFile.exists()){
					FileUploadUtils.copy(attFile,dstFile);		//文件迁移
				}else{
					FileUploadThread  upload = new FileUploadThread(flowService,attFile, dstFile,savedAtt,attachmentService,"update");
					upload.start();
				}
			}catch (Exception e) {
				e.printStackTrace();
				attachmentService.deleteAtts(att.getId(), false);
			}
		}
	}
	/**
	 * 
	 * @Title: addAllAtt 
	 * @Description: 换表单时添加公共附件
	 * @param     设定文件 
	 * @return void    返回类型 
	 * @throws
	 */
	public void addAllAtt1(WfProcess process,String allInstanceId,Employee emp){
		//旧的pdf地址
		String oldPdfPath = process.getPdfPath().split(",")[0];
		//---------作为附件的每个表单的名字要不一样------------
		ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
		String filename = zf.getForm_caption()+".pdf";
		File attFile = new File(oldPdfPath); // 要上传的文件
		String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path"); // 得到上传文件在服务器上的基路径
		String dstPath = FileUploadUtils.getRealFilePath(filename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

		List<SendAttachments> sendAttList = attachmentService.findAllSendAtts(allInstanceId+"newfj",null);
		//是否已经存在
		boolean isExistAtt = false;
		for (SendAttachments sa : sendAttList) {
			if(sa.getFilename().equals(filename)){
				isExistAtt = true;
				break;
			}
		}
		if(!isExistAtt){
			SendAttachments att = new SendAttachments();
				att.setDocguid(allInstanceId+"newfj");
				att.setFileindex(0L);
				att.setFilename(filename);// 设置文件名属性
				att.setFiletype(FileUploadUtils.getExtension(filename));// 设置文件类型(后缀名)的属性
				att.setFilesize(attFile.length());// 设置文件大小的属性
				att.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
				att.setFiletime(new Timestamp(new Date().getTime()));// 设置上传时间属性
				att.setType("正文材料");// 设置上传附件所属类别
				att.setTitle(filename);// 设置上传附件标题
				att.setEditer(emp.getEmployeeGuid()+";"+emp.getEmployeeName());
			File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
			attachmentService.addSendAtts(att);
			
			try{
				FileUploadUtils.copy(attFile, dstFile);// 完成上传文件，就是将本地文件复制到服务器上
			}catch (Exception e) {
				e.printStackTrace();
				attachmentService.deleteAtts(att.getId(), false);
			}
		}
	}
	
	
	/**
	 * 办件作废(删除待办,修改待办状态位)
	 * @throws IOException
	 */
	public void invalid() throws IOException {
		try {
			String instanceId = getRequest().getParameter("instanceId");
			String workFlowId = getRequest().getParameter("workFlowId");
			String allInstanceId = getRequest().getParameter("allInstanceId");
			//删除待办信息
			if(allInstanceId==null || allInstanceId.equals("")){
				allInstanceId  = instanceId;
			}
			tableInfoService.deleteWfProcessByAllInstanceId(allInstanceId);
			
			// 办件列表更新为"作废"状态
			DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
			if (doFile != null) {
				doFile.setDoFile_result(3);
				doFile.setDo_time(new Date());
				tableInfoService.updateDoFile(doFile);
			}
			// 删除发文号
			tableInfoService.deleteFwByElements(workFlowId, instanceId);
			// 删除办文号
			tableInfoService.deleteBwByElements(workFlowId, instanceId);

			getResponse().getWriter().print("yes");
		} catch (IOException e) {
			getResponse().getWriter().print("no");
		}
	}

	/**
	 * 根据当前节点，更新下一节点所有暂存的步骤记录状态
	 * 
	 * @param nodeId
	 * @return
	 */
	public void updateNewProcess(String instanceId, String workFlowId,
			String nodeId, String nextNodeId) {
		if (nodeId != null && !("").equals(nodeId)) {
			// 根据当前节点Id查找下一节点Id
			List<WfNode> nodes = workflowBasicFlowService.showNode(workFlowId,nodeId, instanceId);
			for (WfNode wfNode : nodes) {
				tableInfoService.updateProcessShow(workFlowId, instanceId,wfNode.getWfn_id());
			}
		} else if (nextNodeId != null && !("").equals(nextNodeId)) {
			tableInfoService.updateProcessShow(workFlowId, instanceId,nextNodeId);
		}
	}

	/**
	 * 并行，竞争(验证单人模式时，是否人员组只有一个人)
	 * 
	 * @throws IOException
	 */
	public void modelIsOrNot() throws IOException {
		// 主送人
		String xtoName = getRequest().getParameter("xtoName");
		// 抄送人
		String xccName = getRequest().getParameter("xccName");
		// 当前节点Id
		String nodeId = getRequest().getParameter("nodeId");
		// 流程Id
		String workFlowId = getRequest().getParameter("workFlowId");
		// 下一步节点Id(点击按钮时传过来的nodeId)(对于当前节点来说)
		String nextNodeId = getRequest().getParameter("nextNodeId");
		// 得到路由类型
		String wfl_route_type = this.getWfLine(workFlowId, nextNodeId, nodeId);
		// 重定向时的类型
		if (wfl_route_type == null || ("").equals(wfl_route_type)
				|| ("null").equals(wfl_route_type)) {
			wfl_route_type = "0";
		}
		if (Integer.parseInt(wfl_route_type) == 0) {// 单人式
			String[] names = xccName.split(",");
			if (names.length > 1) {
				getResponse().getWriter().print("no");
			} else {
				getResponse().getWriter().print("yes");
			}
		} else if (Integer.parseInt(wfl_route_type) == 1 || Integer.parseInt(wfl_route_type) == 3
				|| Integer.parseInt(wfl_route_type) == 4 || Integer.parseInt(wfl_route_type) == 5
				|| Integer.parseInt(wfl_route_type) == 6) {// 竞争
			String[] names = xccName.split(",");
			if (names.length == 0) {
				getResponse().getWriter().print("no");
			} else {
				getResponse().getWriter().print("yes");
			}
		} else if (Integer.parseInt(wfl_route_type) == 2) {// 并行
			String[] allnames = (xtoName + "," + xccName).split(",");
			if (allnames.length > 0) {
				getResponse().getWriter().print("yes");
			} else {
				getResponse().getWriter().print("no");
			}
		}
	}

	/**
	 * 得到点击按钮时 指向那个按钮的流向（线）的路由类型信息
	 * 
	 * @return
	 */
	public String getWfLine(String workFlowId, String nextNodeId, String nodeId) {
		// 点击按钮时 得到当前指向按钮这个节点的流向(也就是那条线的属性)---从后面的节点往前查
		// WfLine wfLine =
		// workflowBasicFlowService.findWfLineByNodeId(workFlowId,nextNodeId,nodeId);
		// 得到这条线的路由类型
		String wfl_route_type = "";
		// if(wfLine!=null && !("").equals(wfLine)){
		// wfl_route_type = wfLine.getWfl_route_type();
		// }
		WfNode wfNode = workflowBasicFlowService.getWfNode(nextNodeId);
		if (wfNode != null && !("").equals(wfNode)) {
			wfl_route_type = wfNode.getWfn_route_type();
		}

		return wfl_route_type;
	}

	/**
	 * 得到用户权限
	 * 
	 * @param processId
	 */
	@SuppressWarnings("unchecked")
	public String getLimitValue(String nodeId, String workflowid,
			String processId) {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = getRequest().getParameter("userId");
		if (("").equals(userId) || userId == null || ("null").equals(userId)) {
			userId = emp.getEmployeeGuid();
		}
		List<String> depIds = (List<String>) getSession().getAttribute(
				MyConstants.DEPARMENT_IDS);
		String webId = getRequest().getParameter("deptId");
		if (("").equals(webId) || webId == null || ("null").equals(webId)) {
			webId = depIds.get(0);
		}
		WfProcess process = tableInfoService.getProcessById(processId);
		if (process != null
				&& CommonUtil.stringNotNULL(process.getEntrustUserId())) { // 如果有委托，权限使用委托人的权限，传入委托人id
			userId = process.getEntrustUserId();
		}
		// 用户权限
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(
				userId, webId, nodeId, workflowid);
		String limitValue = "";
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---
																			// VC_SQR:0,text
				limitValue += entry.getKey() + ":" + entry.getValue() + ";";
			}
			if (limitValue.length() > 0) {
				limitValue = limitValue.substring(0, limitValue.length() - 1);
			}
		}
		return limitValue;
	}

	/**
	 * 判断意见必填
	 * 
	 * @throws IOException
	 */
	public void isOrNotWriteComment() throws IOException {
		String workFlowId = getRequest().getParameter("workFlowId");
		String nodeId = getRequest().getParameter("nodeId");
		String instanceId = getRequest().getParameter("instanceId");
		String processId = getRequest().getParameter("processId");
		String formId = getRequest().getParameter("formId");
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String deptId = emp.getDepartmentGuid();
		// 用户权限
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(
				userId, deptId, nodeId, workFlowId);
		List<String> limitValue = new ArrayList<String>();
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---
																			// VC_SQR:0,text
				// 取出意见类型
				if (entry.getValue().indexOf("comment") > 0) {
					String limit = entry.getValue().split(",")[0];
					String type = entry.getKey();
					limitValue.add(type + ";" + limit);
				}
			}
		}
		// 循环意见类型 并查看为1(即读写)的意见
		String outComment = "";
		for (String lv : limitValue) {
			if (("2").equals(lv.split(";")[1])) {
				String cloumnname = lv.split(";")[0];
				String tagId = instanceId + cloumnname.toLowerCase();
				// 查询是否已填写
				int count = commentService.findCommentCount(tagId, processId,
						userId);
				if (count < 1) {
					// 查询意见的中文名
					String columnCname = zwkjFormService
							.getColumnCnameByFormId(formId, cloumnname);
					if (!("").equals(columnCname)) {
						outComment += columnCname + ";"; // 说明当前该意见未填写
					}
				}
			}
		}
		if (outComment.length() > 0) {
			outComment = outComment.substring(0, outComment.length() - 1);
		}
		getResponse().getWriter().print(outComment);
	}

	/**
	 * 得到点击按钮时 指向那个按钮的流向（线）的路由类型信息----页面上的判断
	 * 
	 * @return
	 * @throws IOException
	 */
	public void getWfLineOfType() throws IOException {
		String nextNodeId = getRequest().getParameter("nextNodeId");
		WfNode wfNode = workflowBasicFlowService.getWfNode(nextNodeId);
		getResponse().getWriter().print(wfNode.getWfn_route_type()+","+wfNode.getIsExchange());
	}

	/**
	 * 得到待办列表 create by zhuxc 2013-4-16 下午9:48:33
	 * 
	 * @return
	 */
	public String getPendingList() {
		String isCheck = getRequest().getParameter("isCheck");
		//点击菜单进入不传laterSearch，点击搜索才传
		String laterSearch = getRequest().getParameter("laterSearch");
		if(StringUtils.isNotBlank(laterSearch)){
			getRequest().setAttribute("laterSearch", laterSearch);
		}
		if("1".equals(isCheck)){
			Paging.setPagingParams(getRequest(), 10, 0);
			toPage("success");
		}else{
			String title = getRequest().getParameter("wfTitle");
			String itemName = getRequest().getParameter("itemName");
			String itemid = getRequest().getParameter("itemid"); // 城管局定制 事项id
			String commitDept = getRequest().getParameter("commitDept");
			String commitUser = getRequest().getParameter("commitUser");
			String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
			String commitTimeTo = getRequest().getParameter("commitTimeTo");
			String itemType = getRequest().getParameter("itemType");
			String pagesize = getRequest().getParameter("pageSize");
			String siteId = getRequest().getParameter("siteId");
			String isShowWH = getRequest().getParameter("isShowWH");
			if ( CommonUtil.stringNotNULL(isShowWH)) {
				getRequest().setAttribute("isShowWH", isShowWH);
			}
			
			//高级搜索选项
			String title2 = getRequest().getParameter("wfTitle2");
			String commitTimeFrom3 = getRequest().getParameter("commitTimeFrom2");
			String commitTimeTo3 = getRequest().getParameter("commitTimeTo2");
			String itemType2 = getRequest().getParameter("itemType2");
			
			String oneHandNodeId = getRequest().getParameter("oneHandNodeId");
			
			title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
					"\\'\\'") : "";
			itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
					"'", "\\'\\'") : "";
			String conditionSql = " and (p.action_status is null or p.action_status!=2) ";
			//排除传阅办件
			conditionSql += " and (not exists (select dcv.instanceid from document_circulation_view dcv where p.wf_instance_uid = dcv.instanceid ) or n.wfn_onekeyhandle != 1)";
			
			if ( CommonUtil.stringNotNULL(itemName)) {
				itemName = itemName.trim();
				conditionSql += " and i.vc_sxmc like '%" + itemName.trim() + "%' escape '\\'";
				getRequest().setAttribute("itemName", itemName);
			}
			
			if(StringUtils.isNotBlank(title2)){
				title2 = title2.trim();
				conditionSql += " and p.process_title like '%" + title2.trim()+ "%' escape '\\'";
				getRequest().setAttribute("wfTitle2", title2);
			}else{
				if (CommonUtil.stringNotNULL(title)) {
					title = title.trim();
					conditionSql += " and p.process_title like '%" + title.trim()+ "%' escape '\\'";
					getRequest().setAttribute("wfTitle", title);
				}
			}
			if (CommonUtil.stringNotNULL(commitUser)) {
				commitUser = commitUser.trim();
				conditionSql += " and (select e.employee_name from zwkj_employee e where e.employee_guid = p.fromuserid ) like  '%"+commitUser+"%' escape '\\' ";
				getRequest().setAttribute("commitUser", commitUser);
			}
			
			if (CommonUtil.stringNotNULL(commitDept)) {
				commitDept = commitDept.trim();
				conditionSql += " and d.DEPARTMENT_NAME = '"+commitDept+"' ";
				getRequest().setAttribute("commitDept", commitDept);
			}
			if(StringUtils.isNotBlank(commitTimeFrom3)){
				commitTimeFrom3 = commitTimeFrom3.trim().replaceAll("'","\\'\\'");
				String commitTimeFrom4 = commitTimeFrom3 + " 00:00:00";
				conditionSql +=" and p.APPLY_TIME >= to_date('"+commitTimeFrom4+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeFrom", commitTimeFrom3);
			}else{
				if (CommonUtil.stringNotNULL(commitTimeFrom)) {
					commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
					String commitTimeFrom2 = commitTimeFrom + " 00:00:00";
					conditionSql +=" and p.APPLY_TIME >= to_date('"+commitTimeFrom2+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
				}
			}
			if(StringUtils.isNotBlank(commitTimeTo3)){
				commitTimeTo3 = commitTimeTo3.trim().replaceAll("'","\\'\\'");
				String commitTimeTo4 = commitTimeTo3 + " 23:59:59";
				conditionSql +=" and p.APPLY_TIME <= to_date('"+commitTimeTo4+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeTo", commitTimeTo3);
			}else{
				if (CommonUtil.stringNotNULL(commitTimeTo)) {
					commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
					String commitTimeTo2 = commitTimeTo + " 23:59:59";
					conditionSql +=" and p.APPLY_TIME <= to_date('"+commitTimeTo2+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeTo", commitTimeTo);
				}
			}
					
			if(StringUtils.isNotBlank(itemType2)){
				conditionSql +=" and i.vc_sxlx = '"+itemType2+"' ";
				getRequest().setAttribute("itemType2", itemType2);
			}else{
				if(StringUtils.isNotBlank(itemType)){
					conditionSql +=" and i.vc_sxlx = '"+itemType+"' ";
				}
			}
			
			//视图字段
			String wh = getRequest().getParameter("wh");
			String lwdw = getRequest().getParameter("lwdw");
			wh = CommonUtil.stringNotNULL(wh) ? wh.replaceAll("'",
					"\\'\\'") : "";
			lwdw = CommonUtil.stringNotNULL(lwdw) ? lwdw.replaceAll("'",
					"\\'\\'") : "";
			
			if (CommonUtil.stringNotNULL(wh)) {
				wh = wh.trim();
				conditionSql += " and v.wh like '%" + wh.trim()+ "%' escape '\\'";
			}
			getRequest().setAttribute("wh", wh);
			if (CommonUtil.stringNotNULL(lwdw)) {
				lwdw = lwdw.trim();
				conditionSql += " and v.lwdw like '%" + lwdw.trim()+ "%' escape '\\'";
				getRequest().setAttribute("lwdw", lwdw);
			}
			
			String status = getRequest().getParameter("status");
			if(status != null && status.equals("3")){
				conditionSql +=" and p.jdqxdate <= sysdate ";
				getRequest().setAttribute("status", status);
			}
					
					
			String itemids = "";
			if(StringUtils.isNotBlank(siteId)){
				if(StringUtils.isNotBlank(itemid)){//去取两个itemId的交集
					itemids = this.getIntersectItemId(itemid, siteId);
				}else{
					itemids = itemService.getItemIdsBydeptId(siteId);
				}
			}else{
				itemids = itemid;
			}
			
			String pendingItemId = "";
			if(CommonUtil.stringNotNULL(itemids)){	//根据itemid查询
				String[] itemIds = itemids.split(",");
				for(String itemId: itemIds){
					pendingItemId += "'"+itemId+"',";
				}
				if(pendingItemId!=null && pendingItemId.length()>0){
					pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
				}
				conditionSql +=" and p.wf_item_uid in ("+pendingItemId+")";
			}
			
			String pendingNodeId = "";
			if(CommonUtil.stringNotNULL(oneHandNodeId)){	//根据nodeid查询
				String[] oneHandNodeIds = oneHandNodeId.split(",");
				for(String oneHandNode: oneHandNodeIds){
					WfNode node = tableInfoService.getWfNodeById(oneHandNode);
					if(node!=null && node.getWfn_oneKeyHandle()!=null && node.getWfn_oneKeyHandle()==1){
						pendingNodeId += "'"+oneHandNode+"',";
					}
				}
				if(pendingNodeId!=null && pendingNodeId.length()>0){
					pendingNodeId = pendingNodeId.substring(0, pendingNodeId.length()-1);
					conditionSql +=" and p.wf_node_uid in ("+pendingNodeId+")";
				}else{
					getRequest().setAttribute("oneHandOperate", false);
				}
				getRequest().setAttribute("oneHandNodeId", oneHandNodeId);
			}
			
			// 删除 process title 为空的数据
			tableInfoService.deleteErrorProcess();
			// 获取当前登录用户
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			int pageSize = Integer.parseInt(StringUtils.isNotBlank(pagesize)?pagesize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
			
			String containsMail = SystemParamConfigUtil.getParamValueByParam("containsMail");
			if(containsMail!=null && containsMail.equals("1")){
				List<TodoMessage> list;
				int count = integrateService.findTodoMessageCount(conditionSql, emp.getEmployeeGuid());
				Paging.setPagingParams(getRequest(), pageSize, count);
				list = integrateService.findTodoMessage(conditionSql,emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize, "");
				
				getRequest().setAttribute("list", list);
				getRequest().setAttribute("containsMail", containsMail);
			}else{
				List<Pending> list;
				int count = pendingService.getCountOfPending(conditionSql,emp.getEmployeeGuid(), "");
				Paging.setPagingParams(getRequest(), pageSize, count);
				// 包含是否显示推送按钮
				list = pendingService.getPendingList(conditionSql, emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize);
				// 区分工作流的待办列表获取
				/*pendingService.initRemainTime(list);// 设定节点期限
				pendingService.initDelayItem(list);*/
				getRequest().setAttribute("list", list);
			}
			
			String depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
			WfItem item = new WfItem();
			if(StringUtils.isNotBlank(siteId)){
				item.setVc_ssbmid("'"+siteId+"'");
				getRequest().setAttribute("siteId", siteId);
			}else{
				item.setVc_ssbmid(depId);
			}
			List<WfItem> items = itemService.getItemListForPage("", "", item, null, null);
			getRequest().setAttribute("myPendItems", items);
			String state = getRequest().getParameter("state");
			getRequest().setAttribute("state", state);
			getRequest().setAttribute("itemid", itemid);
			getRequest().setAttribute("itemType", itemType);
			if(oneHandNodeId!=null){
				return "oneHandPendingList";
			}
		}
		return "pendingList";
	}
	
	
	/**
	 * 获取等办办件列表
	 * 
	 * @return
	 */
	public String getWaitPendingList() {
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemid = getRequest().getParameter("itemid"); // 城管局定制 事项id
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = " and p.action_status = 2 and p.process_title is not null";
		if (CommonUtil.stringNotNULL(title)
				|| CommonUtil.stringNotNULL(itemName)) {
			conditionSql += " and p.process_title like '%" + title
					+ "%' and i.vc_sxmc like '%" + itemName + "%'";
		}
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = pendingService.getCountOfPending(conditionSql,
				emp.getEmployeeGuid(), "");
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<Pending> list = pendingService.getPendingList(conditionSql,
				emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize);
		pendingService.initRemainTime(list);
		pendingService.initDelayItem(list);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("wfTitle", title);
		getRequest().setAttribute("itemName", itemName);
		getRequest().setAttribute("itemid", itemid);
		return "waitPendingList";
	}

	/**
	 * 打开待办不关闭页面
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String openPendingNoCloseForm() {
		// 从待办点进来--标志位
		String isDb = getRequest().getParameter("isDb");
		String processId = getRequest().getParameter("processId");
		String itemId = getRequest().getParameter("itemId");
		//查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		String instanceId = wfProcess.getWfInstanceUid();
		String nodeId = wfProcess.getNodeUid();
		if(wfProcess!=null&&wfProcess.getJssj()==null){
			wfProcess.setJssj(new Date(System.currentTimeMillis()));
			tableInfoService.update(wfProcess);
			getRequest().setAttribute("sfqp", wfProcess.getSfqp());
		}
		// 查询步骤记录里的表单Id和当前节点的formId是否一样(即换表单)
//		String oldFormId = getRequest().getParameter("formId");
		String oldFormId = wfProcess.getOldFormId();
		//判断当前instanceId是否属于协办主办
		List<WfProcess> wpList = tableInfoService.getProcessList(wfProcess.getWfInstanceUid());
		// 是否显示推送按钮
		String isCanPush = "0";
		//判断当前是不是主办
		String isZBPush = "0";
		if(wpList.size() > 0 && wpList != null){
			for (WfProcess wp : wpList) {
				if(wp.getDoType() != null && wp.getDoType() == 2){
					isCanPush = "1";
					break;
				}else if(wp.getDoType() != null && wp.getDoType() == 1){
					isZBPush = "1";
					break;
				}
			}
		}
		String allInstanceId = wfProcess.getAllInstanceid();
		
		String finstanceId = wfProcess.getfInstancdUid();
		
		getRequest().setAttribute("finstanceId", finstanceId);
		
		
		String isFirst = "";
		if (wfProcess.getStepIndex() == 1 && !("1").equals(wfProcess.getIsManyInstance())) {
			isFirst = "true";
		}
		String workFlowId = wfProcess.getWfUid();
		// 根据当前节点Id查找下一节点Id
		List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
		// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
		List<WfChild> childs = workflowBasicFlowService.showChildOfWf(workFlowId, wfProcess.getNodeUid());
		// 判断下一步的节点是否是结束
		boolean isEndProcess = false;
		// 判断是发文还是办文还是传阅(要显示传阅名单)
		boolean isSend = false; // 办文为false,发文为true
		boolean isCy = false;
		WfItem item = itemService.getItemById(itemId);
		if (item != null && item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) {
			isSend = true;
		} else if (item != null && ("2").equals(item.getVc_sxlx())) {
			isCy = true;
		}
		if(!isSend){			//不为发送流程
			List<WfProcess> fList = tableInfoService.getProcessList(finstanceId);
			String workflowId = wfProcess.getWfUid();
			if(fList!=null && fList.size()>0){
				String fWfUid = fList.get(0).getWfUid();
			    WfChild wfChild = workflowBasicFlowService.getWfChildByPidAndCid(workflowId, fWfUid);
			    if(wfChild!=null){
			    	String wfc_isSend = wfChild.getWfc_isSend();
			    	if(wfc_isSend!=null && wfc_isSend.equals("1")){
			    		isSend = true;
			    	}
			    }
			}
		}
		// 记录最后一个节点
		// String endNodeId = "";
		//子流程后面是否有节点
		boolean childWfAfterNode = false;
		boolean isEndReply = false;
		// 重新遍历下一节点,去除最后一个办结节点
		List<WfNode> nodes_last = new ArrayList<WfNode>();
		List<WfNode> nodes = new ArrayList<WfNode>();
		WfNode wfNode = tableInfoService.getWfNodeById(wfProcess.getNodeUid());
		//当前节点的排序号
		Integer wfn_sortNumber = wfNode.getWfn_sortNumber();
				
				
		for (WfNode wfn : nodeList) {
			if (("end").equals(wfn.getWfn_type())||(wfn.getNode_isReply() != null && wfn.getNode_isReply()==1)) {
				// String endNodeId = wfNode.getWfn_id();
				isEndProcess = true;
				if(wfn.getNode_isReply() != null && wfn.getNode_isReply()==1){
					isEndReply = true;
				}
				// getRequest().setAttribute("endNodeId", endNodeId);
				//判断当前是否是子流程------------作用：子流程后面有节点，显示下一节点而不显示办结------------
				if(wfProcess.getIsChildWf() != null && ("1").equals(wfProcess.getIsChildWf())){
					//获取子流程后面是否有节点
					String child_workflowId = wfProcess.getWfUid();
					WfChild wfChild = workflowBasicFlowService.getWfChildByCid(child_workflowId);
					//获取子流程位置Id
					String child_module = wfChild.getWfc_moduleId();
					//是否有父流程等办的那一步
					List<WfProcess> proList =  tableInfoService.getProcessList(finstanceId);	
					//中间那步
					if(proList != null && proList.size() == 1 && proList.get(0).getDoType() ==3){
						 proList =  tableInfoService.getProcessList(proList.get(0).getfInstancdUid());	
					}
					//父流程id
					String f_workflowId = "";
					if(proList.size() > 0){
						f_workflowId = proList.get(0).getWfUid();
					}
					List<WfNode> nextNodeList = workflowBasicFlowService.getNextNodeByChildWf(f_workflowId,child_module);
					//子流程的下一步一般只会有一个节点--入库
					if(nextNodeList.size()>0){
						childWfAfterNode = true;
						getRequest().setAttribute("childWfNextNodeName", nextNodeList.get(0).getWfn_name());
					}
				}
				continue;
			}
			
			Integer sortNum = wfn.getWfn_sortNumber();
			if(null != sortNum && sortNum < wfn_sortNumber){
				wfn.setIsBigNum("0");
				nodes_last.add(wfn);
			}else{
				wfn.setIsBigNum("1");
				nodes.add(wfn);
			}
		}
		// 判断是否为主送和抄送(单人、竞争都只为主送)
		if (wfProcess.getIsMaster() == 1) {
			getRequest().setAttribute("send", 1);
		} else if (wfProcess.getIsMaster() == 0) {
			getRequest().setAttribute("send", 0);
		}
		
		
		String route_type = "";
		String self_loop = "";//是否自循环
		if(wfNode!=null){
			route_type = wfNode.getWfn_route_type();	//流程组类型(3,为并行结合式)
			self_loop = wfNode.getWfn_self_loop();//自循环
			if(route_type!=null ){
				if(route_type.equals("3") || route_type.equals("4") || route_type.equals("5")){
					getRequest().setAttribute("send", 0);
					if(CommonUtil.stringNotNULL(self_loop)
							&& "1".equals(self_loop)){
						//自循环显示当前节点
						getRequest().setAttribute("self_loop", "1");
						getRequest().setAttribute("self_node", wfNode);
						}
					}
			}
		}
		
		// 当前节点所绑定的表单Id
		String formId = wfNode.getWfn_defaultform();

		// 当前打开待办是不是第一次打开
		boolean firstStep = true;
		if (("start").equals(wfNode.getWfn_type())) {
			firstStep = false;
		}
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (wfProcess.getStepIndex() == 1 && !("").equals(wfProcess.getDoType()) && ("1").equals(wfProcess.getIsChildWf())) {
			isFirstChildWf = "true";
		}
		
		// 查询表单的值
		if(oldFormId ==null || oldFormId.equals("")){
			oldFormId = formId ;
		}
		String attPdfField = "";
		// 权限
		// 查找对应的表单
		String formLocation = workflowBasicFlowService.findFormLocaltion(formId);
		// 标题的字段---用于页面中判断必填
		String title_column = getTitle(workFlowId, formId, wfProcess.getWfInstanceUid()).split(";")[1];
		// webId(存的是部门id)
		List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
		String webId = depIds.get(0);
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String deptId = "";
		if (emp != null && !("").equals(emp)) {
			deptId = emp.getDepartmentGuid();
		}
		if (deptId == null || ("").equals(deptId)) {
			emp = tableInfoService.findEmpByUserId(userId);
			deptId = emp.getDepartmentGuid();
		}
		
		String invalid = "0";
		if(wfProcess.getOwner()!=null && wfProcess.getOwner().equals(userId)){
			invalid = "1" ;
		}
		getRequest().setAttribute("invalid", invalid);
		
		// 永远获取最新一步的json数据
		TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
		String commentJson = "";
		if (trueJson != null) {
			commentJson = trueJson.getTrueJson();
		} else {
			Integer master = wfProcess.getIsMaster(); // 主办
			if (master != null && master == 0) { // 协办人员
				WfProcess masterProcess = tableInfoService
						.getMasterProcess(wfProcess);
				commentJson = masterProcess.getCommentJson();
			} else {
				commentJson = wfProcess.getCommentJson();
			}
		}
		commentJson = commentJson == null ? null : commentJson.replace("'", "’");
		commentJson = tableInfoService.editCommentWriteRole(commentJson,processId, instanceId, nodeId, userId);
		// 将日志信息保存入库：
		TrueJsonLog log = new TrueJsonLog();
		log.setInstanceId(instanceId);
		log.setProcessId(processId);
		log.setReadOrWriteDate(new Date());
		log.setReadOrWrite("0");
		log.setUserId(emp.getEmployeeGuid());
		log.setTrueJson(commentJson);
		log.setExcute("openPendingNoCloseForm");
		trueJsonService.saveTrueJsonLog(log);

		getRequest().setAttribute("commentJson", commentJson);
		String pages = findCommonPageList(commentJson);
		getRequest().setAttribute("pages", pages);
				
		// 生成的pdf地址
		String pdfPath = "";
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		int imageCount  =1;
		if(wfProcess.getPdfPath()!=null && wfProcess.getPdfPath().length()>0){
			pdfPath =  wfProcess.getPdfPath().split(",")[0];
		}
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		if (pdfPath != null && !"".equals(pdfPath)) {
			try {
				imageCount = PdfPage.getPdfPage(pdfPath);
				if(imageCount==0){
					replenishFileByPath(instanceId, processId, pdfPath, "0");
					imageCount = PdfPage.getPdfPage(pdfPath);
				}
			} catch (Exception e) {
				replenishFileByPath(instanceId, processId, pdfPath, "0");
				imageCount = PdfPage.getPdfPage(pdfPath);
			}
			String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
		    if(pdfPath.startsWith(oldpdfRoot)){
			    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }else if(pdfPath.startsWith(newPdfRoot)){
		    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		    }else{
		    	pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }
		}
		String userName = tableInfoService.findNameByEmpId(userId);
		// ------------------------------个人常用语------------start-------------------
		List<PersonalComment> personalComments = commentService.getPersonalComments(userId);
		String personComs = "";// '{"datas":[{"text":"同意"},{"text":"请批示"},{"text":"请速办"},{"text":"送传阅"}]}';
		if (personalComments != null && personalComments.size() != 0) {
			for (PersonalComment pc : personalComments) {
				personComs += pc.getContent() + ",";
			}
	    	if(!("").equals(personComs) && personComs.length()>0){
	    		personComs = personComs.substring(0,personComs.length()-1);
	    	}
	    }
	    getRequest().setAttribute("userId", userId);
	    getSession().setAttribute("userName", userName);
	    getSession().setAttribute("loginname", emp.getEmployeeLoginname());
	    getSession().setAttribute("personalComments", personComs);
		// ------------------------------个人常用语--------------end-----------------
	    //-------------------------------发文过来的待办打开第一步--------------end----------------
	    // 获取正文附件地址 doc,ceb
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + "oldfj",null);
		getRequest().setAttribute("attSize", sattList.size() + sattExtList.size()+ oldExtList.size());
		getRequest().setAttribute("nodes_last", nodes_last);
		getRequest().setAttribute("nodes", nodes);
		getRequest().setAttribute("childs", childs);
		getRequest().setAttribute("isEndProcess", isEndProcess);
		getRequest().setAttribute("isEndReply", isEndReply);
		getRequest().setAttribute("isSend", isSend);
		getRequest().setAttribute("itemId", wfProcess.getItemId());
		// getRequest().setAttribute("endNodeId", endNodeId);
		getSession().setAttribute("workFlowId", workFlowId);
		getSession().setAttribute("webId", webId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("oldFormId", oldFormId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("isseal", wfNode.getWfn_isseal());
		getRequest().setAttribute("isUploadAttach", wfNode.getWfn_isUploadAttach());		//是否必须上传附件
		getRequest().setAttribute("title_column", title_column);
		getRequest().setAttribute("isDb", isDb);
		getRequest().setAttribute("firstStep", firstStep);
		getRequest().setAttribute("isCy", isCy);
		getRequest().setAttribute("stepIndex", wfProcess.getStepIndex() + "");
		getRequest().setAttribute("doType", wfProcess.getDoType());//协办才可以推送
		getRequest().setAttribute("isFirst", isFirst);
		getRequest().setAttribute("isPortal", getRequest().getParameter("isPortal"));
		getRequest().setAttribute("cType", wfProcess.getIsManyInstance());
		getRequest().setAttribute("isCanPush", isCanPush);
		getRequest().setAttribute("isZBPush", isZBPush);
		getRequest().setAttribute("allInstanceId", allInstanceId);
		getRequest().setAttribute("dqNodeName", wfNode.getWfn_name());
		getRequest().setAttribute("isPrint", wfNode.getWfn_allowprint());
		getRequest().setAttribute("iszf", wfNode.getWfn_iszf());
		getRequest().setAttribute("iswcsx", wfNode.getWfn_iswcsx());
		getRequest().setAttribute("childWfAfterNode", childWfAfterNode);
		getRequest().setAttribute("wfNode", wfNode);
		getRequest().setAttribute("appty_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(wfProcess.getApplyTime()));
		getRequest().setAttribute("pdfPath", pdfPath);
		JSONArray jArr = new JSONArray();
		JSONObject jObj = new JSONObject();
		jObj.put("id", "form");
		jObj.put("name", "form");
		jObj.put("pdfUrl", pdfPath);
		jObj.put("isSeal", "0");
		jObj.put("pageCount", "1");
		jArr.add(jObj);
		imageCount = 1;//不合成表单必须为1
		if(imageCount==1){
			//取出所有的附件的PDFPATH
			sattExtList.addAll(oldExtList);
			sattList.addAll(sattExtList);
			for (SendAttachments sendAttachments : sattList) {
				if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
					imageCount += sendAttachments.getPagecount();
				}else{
					Integer pageCount = PdfPage.getPdfPage(sendAttachments.getTopdfpath());
					sendAttachments.setPagecount(pageCount);
					attachmentService.updateSendAtt(sendAttachments);
					imageCount += pageCount;
				}
				JSONObject obj = new JSONObject();
				obj.put("id", sendAttachments.getId());
				obj.put("name", sendAttachments.getFilename());
				String attPdfPath = serverUrl+ "/form/html/workflow/"+sendAttachments.getTopdfpath().substring(newPdfRoot.length());
				obj.put("pdfUrl", attPdfPath);
				obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
				obj.put("pageCount", sendAttachments.getPagecount());
				jArr.add(obj);
			}
		}
		getRequest().setAttribute("allPdfPath", jArr.toString());
		getRequest().setAttribute("imageCount", imageCount);
		// 添加部门id
		getRequest().setAttribute("deptId", deptId);
		// 附件
		List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		
		//根据流程id，节点id，表单ID获取改节点有几个字段必填,第一个字段为编码，第二个字段为中文名称
		List<Object[]> list=tableInfoService.getIsBt(workFlowId,wfNode.getWfn_id(),formId,"1");
		StringBuffer sb = new StringBuffer();
		if(list!=null){
			for(int i=0;i<list.size();i++){
				Object[] obj = list.get(i);
				if(i!=0){
					sb.append(";");
				}
				sb.append((String)obj[0]).append(":").append((String)obj[1]);
			}
		}
		getRequest().setAttribute("isbt", sb.toString());
		//看看数据库中有没有新的没看过的数据
		int count = tableInfoService.getCountMessage(wfProcess,emp.getEmployeeGuid());
		getRequest().setAttribute("count", count);
		getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));		
		String type = getRequest().getParameter("type");
		if(type!=null && type.equals("db")){
			return "showOverForm";
		}
		getRequest().setAttribute("deptName", emp.getDepartmentName());
		getSession().setAttribute("zsdw", SystemParamConfigUtil.getParamValueByParam("xtoId"));
		getSession().setAttribute("csdw", SystemParamConfigUtil.getParamValueByParam("xccid"));
		getSession().setAttribute("yffs", SystemParamConfigUtil.getParamValueByParam("fs"));
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		getSession().setAttribute("socketUrl", SystemParamConfigUtil.getParamValueByParam("socketUrl"));
		// 待办
		getRequest().setAttribute("isOver", "0");
		
		// ++ by yuxl 处理节点为交办类型
		if(wfNode!=null && wfNode.getNode_startJb() != null){
			String jbWorkFlowId = wfNode.getNode_startJb();
			// 获取流程的第一个节点
			WfNode firstJbNode = workflowBasicFlowService.findFirstNodeId(jbWorkFlowId);
			getRequest().setAttribute("firstJbNode", firstJbNode);
		}
		
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceive(wfProcess.getWfInstanceUid());
		String receiveId = "";
		String receiveTitle = "";
		if(doFileReceive!=null){
			receiveId = doFileReceive.getId();
			receiveTitle = wfProcess.getProcessTitle();
		}
		getRequest().setAttribute("receiveId", receiveId);
		getRequest().setAttribute("receiveTitle", receiveTitle);
		getSycnToTzggRight(emp, item,isSend,isEndProcess);
		//获取页面风格相关参数
  		Map<String, String> map = new HashMap<String, String>();
  		List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
  		if(formStylelist != null && formStylelist.size() > 0){
  			FormStyle formStyle = formStylelist.get(0);
  			if(formStyle != null){
  				getRequest().setAttribute("fontSize", formStyle.getFontSize());
  				getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());
  				getRequest().setAttribute("dateFormat", formStyle.getDateFormat());
  				getRequest().setAttribute("font", formStyle.getFont());
  			} 
  		}
		return "pagesdomeNoClose";
	}
	
	
	/**
	 * 
	 * 描述：打开待办办件
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-2-3 下午3:09:40
	 * @throws Exception 
	 */
	@SuppressWarnings("unchecked")
	public String openPendingForm() throws Exception {
		long startTime = System.currentTimeMillis();
		long endTime ;
		System.out.println("---------进入openPendingForm---------");
		String isCheck = getRequest().getParameter("isCheck");	
		if("1".equals(isCheck)){
			toPage("success");
			return "pagesdome";
		}else{
			Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = employee.getEmployeeGuid();
			String closeWay =  getRequest().getParameter("closeWay");			//重新定义接口规则
			String isDb = getRequest().getParameter("isDb");
			String processId = getRequest().getParameter("processId");
			String itemId = getRequest().getParameter("itemId");
			String favourite = getRequest().getParameter("favourite");
			//查找当前待办的Process实体
			WfProcess wfProcess = pendingService.getProcessByID(processId);
			String allInstanceId = wfProcess.getAllInstanceid();
			if(StringUtils.isBlank(allInstanceId)){
				allInstanceId = wfProcess.getWfInstanceUid();
			}
			String nodeId = wfProcess.getNodeUid();
			//查找
			String instanceId = wfProcess.getWfInstanceUid();
			if(wfProcess!=null&&wfProcess.getJssj()==null){
				wfProcess.setJssj(new Date(System.currentTimeMillis()));
				tableInfoService.update(wfProcess);
				getRequest().setAttribute("sfqp", wfProcess.getSfqp());
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点10时间------："+((endTime-startTime)/1000.0));			
			// 查询步骤记录里的表单Id和当前节点的formId是否一样(即换表单)
			String oldFormId = wfProcess.getOldFormId();
			String finstanceId = wfProcess.getfInstancdUid();
			getRequest().setAttribute("finstanceId", finstanceId);
			String isFirst = "";
			if (wfProcess.getStepIndex() == 1 && !("1").equals(wfProcess.getIsManyInstance())) {
				isFirst = "true";
			}
			String workFlowId = wfProcess.getWfUid();
			// 根据当前节点Id查找下一节点Id
			Integer stepIndex = wfProcess.getStepIndex();
			List<WfNode> nodeList = new ArrayList<WfNode>();
			if(stepIndex!=null && stepIndex==1){	//办件被暂存
				WfNode wfNode = tableInfoService.getWfNodeById(wfProcess.getNodeUid());
				Object[] list =   workflowBasicFlowService.showNextNode(workFlowId, wfNode.getWfn_id());
				if(list!=null && list.length==2){
					if(list[0]!=null){
						nodeList = (List<WfNode>)list[0];
						int k = list[1]==null?0:Integer.parseInt(list[1].toString());
						if(k>0){		//存在配置着条件的节点
							WfMain wfMain = workflowBasicFlowService.getWfMainById(workFlowId);
							if(wfMain!=null){		//获取设定的默认的节点名称
								String nodeName = wfMain.getWfm_nodeName();
								if(nodeName==null || nodeName.equals("")){
									nodeName = "提交";
								}
								getRequest().setAttribute("nodeName", nodeName);
							}
						}
					}
				}
			}else{
				nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), wfProcess.getWfInstanceUid());
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点1时间------："+((endTime-startTime)/1000.0));			
			// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			List<WfChild> childs = workflowBasicFlowService.showChildOfWf(workFlowId, wfProcess.getNodeUid());
			// 判断下一步的节点是否是结束
			boolean isEndProcess = false;
			// 判断是发文还是办文还是传阅(要显示传阅名单)
			boolean isSend = false; // 办文为false,发文为true
			boolean isCy = false;
			boolean isFw = false;
			WfItem item = itemService.getItemById(itemId);
			WfNode wfNode = tableInfoService.getWfNodeById(wfProcess.getNodeUid());
			if (item != null && item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) {
				if(wfNode.getIsExchange()!=null&&wfNode.getIsExchange().equals(1)){
					isSend = true;
				}
			} else if (item != null && ("2").equals(item.getVc_sxlx())) {
				isCy = true;
			}
			if (item != null) {
				if (item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO)) {
					WfNode node = workflowBasicFlowService.getWfNode(wfProcess.getNodeUid());
					if(node.getWfn_send_file()!= null && node.getWfn_send_file()==1) {
						isFw = true;
					}
				}
				getRequest().setAttribute("siteId", item.getVc_ssbmid());
			}
			if(wfNode!=null && wfNode.getWfn_oneKeyHandle()!=null && wfNode.getWfn_oneKeyHandle()==1 &&
					((wfNode.getWfn_autoNoname()==null) || (wfNode.getWfn_autoNoname()!=null && wfNode.getWfn_autoNoname()==0))){
				getRequest().setAttribute("readFileWrite", true);
			}
			
			getRequest().setAttribute("isFw", isFw);
			
			if(!isSend){			//不为发送流程
				List<WfProcess> fList = tableInfoService.getProcessList(finstanceId);
				String workflowId = wfProcess.getWfUid();
				if(fList!=null && fList.size()>0){
					String fWfUid = fList.get(0).getWfUid();
					WfChild wfChild = workflowBasicFlowService.getWfChildByPidAndCid(workflowId, fWfUid);
					if(wfChild!=null){
						String wfc_isSend = wfChild.getWfc_isSend();
						if(wfc_isSend!=null && wfc_isSend.equals("1")){
							isSend = true;
						}
					}
				}
			}
			int isNeedGwjh = wfNode.getIsExchange();
			getRequest().setAttribute("isNeedGwjh", isNeedGwjh==1);

			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点2时间------："+((endTime-startTime)/1000.0));			
			// 记录最后一个节点
			// String endNodeId = "";
			//子流程后面是否有节点
			boolean childWfAfterNode = false;
			boolean isEndReply = false;
			// 重新遍历下一节点,去除最后一个办结节点
			List<WfNode> nodes_last = new ArrayList<WfNode>();
			List<WfNode> nodes = new ArrayList<WfNode>();
			//允许附件上传
			String allowUpload = "false";
			String zwTemSel = "false";//是否选择正文模板
			if(wfNode != null){
				if("1".equals(wfNode.getNode_allowUpload())){
					allowUpload = "true";
				}
				if("1".equals(wfNode.getWfn_zwTemSel())){
					zwTemSel = "true";
				}
			}
			getRequest().setAttribute("allowUpload", allowUpload);
			getRequest().setAttribute("zwTemSel", zwTemSel);
			boolean sfqg = false;	//是否清稿
			if(wfNode!=null){
				Integer allowfair = wfNode.getWfn_allowfair();
				if(allowfair!=null && allowfair==1){
					sfqg = true;
				}
			}
			getRequest().setAttribute("sfqg", sfqg);
			//当前节点的排序号
			Integer wfn_sortNumber = wfNode.getWfn_sortNumber();
			Integer skipNextnodes = wfNode.getWfn_skipNextnodes();
			if(null != wfn_sortNumber && wfn_sortNumber.equals(1)){
				isFirst = "true";
			}
			Integer wfn_isautoclosewin = wfNode.getWfn_isautoclosewin();
			getRequest().setAttribute("isautoclosewin", wfn_isautoclosewin);
			//获取该节点是否需要意见排序
			String wfn_comment_sort = wfNode.getWfn_comment_sort();
			/*if(wfn_comment_sort!=null && wfn_comment_sort.equals("1")){*/
				/*String wfn_child_nodeIds = wfNode.getWfn_child_nodeIds();
				String nodeIds = "'"+wfProcess.getNodeUid()+"',";
				if(wfn_child_nodeIds!=null && !wfn_child_nodeIds.equals("")){
					String[] ids = wfn_child_nodeIds.split(",");
					for(int i=0; i<ids.length; i++){
						nodeIds += "'"+ids[i]+"',";
					}
				}
				if(nodeIds!=null && !nodeIds.equals("")){
					nodeIds = nodeIds.substring(0, nodeIds.length()-1);
				}*/
			List<WfNode> listNode =  workflowBasicFlowService.getSortNodeId(workFlowId);
//			List<WfNode> listNode =  workflowBasicFlowService.getSortNode(workFlowId);
			String nodeIds ="";
			if(null != listNode && listNode.size()>0){
				for(WfNode n : listNode){
					nodeIds += "'"+n.getWfn_id()+"',";
				}
				if(nodeIds!=null && !nodeIds.equals("")){
					nodeIds = nodeIds.substring(0, nodeIds.length()-1);
				
					//1、查询相关节点中的全部人员
					List<Employee> emplist = tableInfoService.findToSortEmployeeList(allInstanceId, nodeIds);
					
					List<EmployeeSort> list1 = new ArrayList<EmployeeSort>();
					EmployeeSort sort = null;
					for(Employee emp: emplist ){
						sort = new EmployeeSort();
						sort.setUserId(emp.getEmployeeGuid());
						sort.setUserName(emp.getEmployeeName());
						sort.setSort(emp.getTabindex());
						list1.add(sort);
					}
					String employeeSort = JSONArray.fromObject(list1).toString();
					getRequest().setAttribute("employeeSort", employeeSort);
				}
			}
			
			/*}*/
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点3时间------："+((endTime-startTime)/1000.0));			
			for (WfNode wfn : nodeList) {
				if (("end").equals(wfn.getWfn_type())||(wfn.getNode_isReply() != null && wfn.getNode_isReply()==1)) {
					// String endNodeId = wfNode.getWfn_id();
					isEndProcess = true;
					if(wfn.getNode_isReply() != null && wfn.getNode_isReply()==1){
						isEndReply = true;
					}
					// getRequest().setAttribute("endNodeId", endNodeId);
					//判断当前是否是子流程------------作用：子流程后面有节点，显示下一节点而不显示办结------------
					if(wfProcess.getIsChildWf() != null && ("1").equals(wfProcess.getIsChildWf())){
						//获取子流程后面是否有节点
						String child_workflowId = wfProcess.getWfUid();
						WfChild wfChild = workflowBasicFlowService.getWfChildByCid(child_workflowId);
						//获取子流程位置Id
						String child_module = wfChild.getWfc_moduleId();
						//是否有父流程等办的那一步
						List<WfProcess> proList =  tableInfoService.getProcessList(finstanceId);	
						//中间那步
						if(proList != null && proList.size() == 1 && proList.get(0).getDoType() ==3){
							proList =  tableInfoService.getProcessList(proList.get(0).getfInstancdUid());	
						}
						//父流程id
						String f_workflowId = "";
						if(proList.size() > 0){
							f_workflowId = proList.get(0).getWfUid();
						}
						List<WfNode> nextNodeList = workflowBasicFlowService.getNextNodeByChildWf(f_workflowId,child_module);
						//子流程的下一步一般只会有一个节点--入库
						if(nextNodeList.size()>0){
							childWfAfterNode = true;
							getRequest().setAttribute("childWfNextNodeName", nextNodeList.get(0).getWfn_name());
						}
					}
					continue;
				}
				
			
				wfn.setIsBigNum("1");
				nodes.add(wfn);
				
				if(null != skipNextnodes && skipNextnodes.equals(1)){
					nodes = tableInfoExtendService.skipNextNodes(nodes, userId);
				}
				
			}
			// 判断是否为主送和抄送(单人、竞争都只为主送)
			if (wfProcess.getIsMaster() == 1) {
				getRequest().setAttribute("send", 1);
			} else if (wfProcess.getIsMaster() == 0) {
				getRequest().setAttribute("send", 0);
			}
			
			String route_type = "";
			String self_loop = "";//是否自循环
			if(wfNode!=null){
				route_type = wfNode.getWfn_route_type();	//流程组类型(3,为并行结合式)
				self_loop = wfNode.getWfn_self_loop();//自循环
				if(route_type!=null ){
					if(route_type.equals("3") || route_type.equals("4") || route_type.equals("5")){
						getRequest().setAttribute("send", 0);
						if(CommonUtil.stringNotNULL(self_loop)
								&& "1".equals(self_loop)){
							//自循环显示当前节点
							getRequest().setAttribute("self_loop", "1");
							getRequest().setAttribute("self_node", wfNode);
						}
					}
				}
				if(wfNode.getWfn_isUseNewInput()!=null&&wfNode.getWfn_isUseNewInput().equals(1)){
					String neewNewInputUsers = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
					String notWriteFormSiteId = SystemParamConfigUtil.getParamValueByParam("notWriteFormSiteId");
					if(neewNewInputUsers.contains(userId)){
						if(CommonUtil.stringNotNULL(notWriteFormSiteId)&&notWriteFormSiteId.contains(employee.getSiteId())){
							getRequest().setAttribute("notWriteForm", true);
						}else{
							getRequest().setAttribute("notWriteForm", false);
						}
						getRequest().setAttribute("needNewInput", true);
						
					}
				}
			}
						
			//传阅节点最后一步自动办结
			if(wfNode!=null){
				String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
				if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && autoEndNodeId.indexOf(wfNode.getWfn_id()) == -1)){
					route_type = wfNode.getWfn_route_type();	//流程组类型(3,为并行结合式; 4, 并行传阅式， 5，并行办理式)
					if(route_type!=null ){
						if(route_type.equals("3") || route_type.equals("4") || route_type.equals("5") || route_type.equals("6")){
							getRequest().setAttribute("send", 0);
							int count = 0;
							List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
							for(int i = 0; i < sameStepWfList.size(); i++){
								if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
									count ++;
								}
							}
							if((count == 1) && isEndProcess){
								String showEndBtn = "true";
								getRequest().setAttribute("showEndBtn", showEndBtn);
							}
						}
					}
				}
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点4时间------："+((endTime-startTime)/1000.0));			
						
			// 当前节点所绑定的表单Id
			String formId = wfNode.getWfn_defaultform();
			// 当前打开待办是不是第一次打开
			boolean firstStep = true;
			if (("start").equals(wfNode.getWfn_type())) {
				firstStep = false;
			}
			// 查询表单的值
			if(oldFormId ==null || oldFormId.equals("")){
				oldFormId = formId ;
			}
			// 查找对应的表单
			String formLocation = workflowBasicFlowService.findFormLocaltion(formId);
			// 标题的字段---用于页面中判断必填
			String title_column = getTitle(workFlowId, formId, wfProcess.getWfInstanceUid()).split(";")[1];
			// webId(存的是部门id)
			List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
			String webId = depIds.get(0);
			String deptId = "";
			if (employee != null && !("").equals(employee)) {
				deptId = employee.getDepartmentGuid();
			}
			if (deptId == null || ("").equals(deptId)) {
				employee = tableInfoService.findEmpByUserId(userId);
				deptId = employee.getDepartmentGuid();
			}
			
			String invalid = "0";
			if(wfProcess.getOwner()!=null && wfProcess.getOwner().equals(userId)){
				invalid = "1" ;
			}
			getRequest().setAttribute("invalid", invalid);
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点8时间------："+((endTime-startTime)/1000.0));			
			//永远获取第一步的json数据
//			TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
			TrueJson trueJson = trueJsonService.findNewestTrueJsonByInstanceId(instanceId);
			String commentJson = "";
			if(trueJson!=null){
				commentJson = trueJson.getTrueJson();
			}else{		//针对于历史老办件、仍然获取原先的数据
				Integer master = wfProcess.getIsMaster();	//主办
				if(master!=null && master==0){	//协办人员
					WfProcess masterProcess = tableInfoService.getMasterProcess(wfProcess);
					commentJson = masterProcess.getCommentJson();
				}else{
					commentJson = wfProcess.getCommentJson();
				}
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点9时间------："+((endTime-startTime)/1000.0));			
			commentJson = commentJson==null ?null:commentJson.replace("'", "’");
			commentJson = tableInfoService.editCommentWriteRole(commentJson, processId, instanceId, nodeId, userId);
			
			//将日志信息保存入库：
			TrueJsonLog log = new TrueJsonLog();
			log.setInstanceId(instanceId);
			log.setProcessId(processId);
			log.setReadOrWriteDate(new Date());
			log.setReadOrWrite("0");
			log.setUserId(employee.getEmployeeGuid());
			log.setTrueJson(commentJson);
			log.setExcute("openpending");
			trueJsonService.saveTrueJsonLog(log);
			
			getRequest().setAttribute("commentJson", commentJson);
			String pages = findCommonPageList(commentJson);
			getRequest().setAttribute("pages", pages);
			// 生成的pdf地址
			String pdfPath = "";
			if(CommonUtil.stringNotNULL(wfProcess.getPdfPath())){
				String[] pdfPaths = wfProcess.getPdfPath().split(",");
				if(pdfPaths != null && pdfPaths.length > 0){
					pdfPath =  wfProcess.getPdfPath().split(",")[0];
				}
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点5时间------："+((endTime-startTime)/1000.0));			
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
			WfItem wfitem = itemService.getItemById(itemId);
			int imageCount  =1;
			String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			Integer fontSize = 0;
			if(wfitem!=null){
				String isFlexibleForm = wfitem.getIsFlexibleForm();
				ZwkjForm form = zwkjFormService.getFrom(workFlowId, formId, instanceId);
				fontSize = form.getFontSize();
				getRequest().setAttribute("isFlexibleForm", isFlexibleForm!=null?isFlexibleForm:"0");		//是否使用弹性表单
				if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
					String formPageJson = form.getFormPageJson();					//表单转换为true的内容
					getRequest().setAttribute("formPageJson", formPageJson);
					
				}else{
					if (CommonUtil.stringNotNULL(pdfPath)) {
						// 判断文件是否存在  因为 文件可能为同步过来的 流文件 所以判断 文件是否存在 
						try {
							imageCount = PdfPage.getPdfPage(pdfPath);
							if(imageCount==0){
								replenishFileByPath(instanceId, processId, pdfPath, "0");
								imageCount = PdfPage.getPdfPage(pdfPath);
							}
						} catch (Exception e) {
							replenishFileByPath(instanceId, processId, pdfPath, "0");
							imageCount = PdfPage.getPdfPage(pdfPath);
						}
						if(pdfPath.startsWith(newPdfRoot)){
							pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
						}else{
							pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
						}
					}
				}
			}
			// ------------------------------个人常用语------------start-------------------
			List<PersonalComment> personalComments = commentService.getPersonalComments(userId);
			String personComs = "";// '{"datas":[{"text":"同意"},{"text":"请批示"},{"text":"请速办"},{"text":"送传阅"}]}';
			if (personalComments != null && personalComments.size() != 0) {
				for (PersonalComment pc : personalComments) {
					personComs += pc.getContent() + ",";
				}
				if(!("").equals(personComs) && personComs.length()>0){
					personComs = personComs.substring(0,personComs.length()-1);
				}
			}
			getRequest().setAttribute("userId", userId);
			getSession().setAttribute("userName", employee.getEmployeeName());
			getSession().setAttribute("loginname", employee.getEmployeeLoginname());
			getSession().setAttribute("personalComments", personComs);
			// ------------------------------个人常用语--------------end-----------------
			// 获取正文附件地址 doc,ceb
			List<SendAttachments> sattList1 = attachmentService.findAllSendAtts(allInstanceId + ATT_SUFFIX_NAME,null);
			List<SendAttachments> sattExtList1 = attachmentService.findAllSendAtts(allInstanceId + ATT_FJSUFFIX_NAME,null);
			List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(allInstanceId + "oldfj",null);
			for (SendAttachments sendAttachments : sattList1) {
				sendAttachments.setFileSize(getFormateFileSize(sendAttachments.getFilesize()));
			}
			for (SendAttachments sendAttachments : sattExtList1) {
				sendAttachments.setFileSize(getFormateFileSize(sendAttachments.getFilesize()));
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点6时间------："+((endTime-startTime)/1000.0));			
			getRequest().setAttribute("zwAtts", sattList1);
			getRequest().setAttribute("fjAtts", sattExtList1);
			getRequest().setAttribute("attSize", sattExtList1.size());
			getRequest().setAttribute("nodes_last", nodes_last);
			getRequest().setAttribute("nodes", nodes);
			getRequest().setAttribute("childs", childs);
			getRequest().setAttribute("isEndProcess", isEndProcess);
			getRequest().setAttribute("isEndReply", isEndReply);
			getRequest().setAttribute("isSend", isSend);
			getRequest().setAttribute("itemId", wfProcess.getItemId());
			getSession().setAttribute("workFlowId", workFlowId);
			getSession().setAttribute("webId", webId);
			getRequest().setAttribute("formLocation", formLocation);
			getRequest().setAttribute("processId", processId);
			getRequest().setAttribute("formId", formId);
			getRequest().setAttribute("oldFormId", oldFormId);
			getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
			if(StringUtils.isNotBlank(wfProcess.getfInstancdUid())){
				getRequest().setAttribute("docguid", wfProcess.getAllInstanceid());
			}else{
				getRequest().setAttribute("docguid", wfProcess.getWfInstanceUid());
			}
			getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
			getRequest().setAttribute("isseal", wfNode.getWfn_isseal());
			getRequest().setAttribute("isfollow", wfNode.getWfn_isfollow());
			getRequest().setAttribute("isUploadAttach", wfNode.getWfn_isUploadAttach());		//是否必须上传附件
			getRequest().setAttribute("title_column", title_column);
			getRequest().setAttribute("isDb", isDb);
			getRequest().setAttribute("firstStep", firstStep);
			getRequest().setAttribute("isCy", isCy);
			getRequest().setAttribute("stepIndex", wfProcess.getStepIndex() + "");
			getRequest().setAttribute("doType", wfProcess.getDoType());//协办才可以推送
			getRequest().setAttribute("isFirst", isFirst);
			getRequest().setAttribute("isPortal", getRequest().getParameter("isPortal"));
			getRequest().setAttribute("cType", wfProcess.getIsManyInstance());
			getRequest().setAttribute("allInstanceId", allInstanceId);
			getRequest().setAttribute("dqNodeName", wfNode.getWfn_name());
			getRequest().setAttribute("isPrint", wfNode.getWfn_allowprint());
			getRequest().setAttribute("iszf", wfNode.getWfn_iszf());
			getRequest().setAttribute("iswcsx", wfNode.getWfn_iswcsx());
			getRequest().setAttribute("childWfAfterNode", childWfAfterNode);
			getRequest().setAttribute("isSendAgain", wfNode.getWfn_isSendAgain());
			getRequest().setAttribute("isSendBack", wfNode.getWfn_isSendBack());
			getRequest().setAttribute("wfNode", wfNode);
			getRequest().setAttribute("appty_time", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(wfProcess.getApplyTime()));
			getRequest().setAttribute("deptId", deptId);
			getRequest().setAttribute("pdfPath", pdfPath);
			
			DoFile doFile = tableInfoService.getDoFileByElements(workFlowId,instanceId);
			getRequest().setAttribute("dofileId", doFile.getDoFile_id());
			if(CommonUtil.stringIsNULL(favourite)){
				DofileFavourite fav = tableInfoService.getDofileFavouriteById(doFile.getDoFile_id(), userId);
				if(fav!=null){
					favourite="1";
				}
			}
			getRequest().setAttribute("favourite", favourite);
			String filePages = getCatalog(allInstanceId);
			getRequest().setAttribute("filePages", filePages);
			JSONArray jArr = new JSONArray();
			JSONObject jObj = new JSONObject();
			String isFlexibleForm = wfitem.getIsFlexibleForm();
			if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
				imageCount = 1;
			}else{
				DoFile d = tableInfoService.getDoFileByElements(workFlowId,instanceId);
				jObj.put("id", "form");
				jObj.put("name", "form");
				jObj.put("pdfUrl", pdfPath);
				jObj.put("isSeal", "0");
				jObj.put("pageCount", "1");
				jArr.add(jObj);
				if(d.getCopyNumber()!=null&&d.getCopyNumber()>0){
					WfProcess p = pendingService.getRecentProcess(instanceId);
					if(p.getPdfPath()!=null && p.getPdfPath().length()>0){
						pdfPath =  p.getPdfPath().split(",")[1];
					}
					if(pdfPath.startsWith(newPdfRoot)){
						pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
					}else{
						pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
					}
					for(int i=0;i<d.getCopyNumber();i++){
						jObj.put("id", "form"+i);
						jObj.put("name", "form"+i);
						jObj.put("pdfUrl", pdfPath);
						jObj.put("isSeal", "0");
						jObj.put("pageCount", "1");
						jArr.add(jObj);
					}
				}
				imageCount = jArr.size();//不合成表单必须为1
			}
			getRequest().setAttribute("wendanSize", jArr.size());
			ToPdfUtil pdfUtil = new ToPdfUtil();
			//if(imageCount==1){
			//取出所有的附件的PDFPATH
			List<SendAttachments> sattList = attachmentService.findAllSendAtts(allInstanceId + ATT_SUFFIX_NAME,null);
			List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(allInstanceId + ATT_FJSUFFIX_NAME,null);
			
			sattExtList.addAll(oldExtList);
			sattList.addAll(sattExtList);
			String realId = SystemParamConfigUtil.getParamValueByParam("readIp");
			String[] realIds = realId.split("##");
			for (SendAttachments sendAttachments : sattList) {
				String skipFileType = "rar,zip,cebx";
				if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
					FileUtils.byteArrayToFile(sendAttachments,attachmentService);
					if(pdfUtil.isCebAndHaveSaveName(sattList,sendAttachments)){
						String path = sendAttachments.getTopdfpath();
						if(StringUtils.isBlank(path)){
							ToPdfUtil toPdfUtil = new ToPdfUtil();
							path = toPdfUtil.fileToPdf(sendAttachments,attachmentService);
							sendAttachments.setTopdfpath(path);
							attachmentService.updateSendAtt(sendAttachments);
						}
						if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
							imageCount += sendAttachments.getPagecount();
						}else{
							Integer pageCount = PdfPage.getPdfPage(sendAttachments.getTopdfpath());
							sendAttachments.setPagecount(pageCount);
							attachmentService.updateSendAtt(sendAttachments);
							imageCount += pageCount;
						}
						JSONObject obj = new JSONObject();
						obj.put("id", sendAttachments.getId());
						obj.put("name", sendAttachments.getFilename());
						String attPdfPath = serverUrl+ "/form/html/workflow/"+path.substring(newPdfRoot.length());
						if(attPdfPath.indexOf(realIds[1]) != -1){
							attPdfPath = attPdfPath.replace(realIds[1], realIds[0]);
						}
						obj.put("pdfUrl", attPdfPath);
						obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
						obj.put("pageCount", sendAttachments.getPagecount());
						obj.put("filesize", sendAttachments.getFilesize());
						obj.put("downloadUrl", serverUrl + "/attachment_download4OCX.do?attId="+sendAttachments.getId());
						
						List<CutPages> cutList = attachmentService.findCutPagesListByDocId(sendAttachments.getId());
						if(cutList!=null && cutList.size()>0){
							JSONArray array = new JSONArray();
							JSONObject entity = null;
							CutPages cut = null;
							for(int i=0; i<cutList.size(); i++){
								cut = cutList.get(i);
								FileUtils.byteArrayToFile(cut);
								entity = new JSONObject();
								entity.put("id", cut.getId());
								entity.put("pageCount", cut.getPageCount());
								String pdfUrl = cut.getFilepath();
								String attUrl = serverUrl+ "/form/html/workflow/"+pdfUrl;
								if(attUrl.indexOf(realIds[1]) != -1){
									attUrl = attUrl.replace(realIds[1], realIds[0]);
								}
								entity.put("pdfUrl", attUrl);
								entity.put("sort", cut.getSort());
								entity.put("startPage", cut.getStartPage());
								entity.put("endPage", cut.getEndPage());
								entity.put("curFilesize", cut.getFileSize());
								entity.put("downloadUrl", serverUrl + "/attachment_download4OCX.do?attId="+cut.getId());
								array.add(entity);
							}
							obj.put("files", array.toString());
						}
						jArr.add(obj);
					}
				}
			}
			endTime = System.currentTimeMillis();
			System.out.println("---------openPendingForm断点7时间------："+((endTime-startTime)/1000.0));			
			//}
			getRequest().setAttribute("allPdfPath", jArr.toString());
			getRequest().setAttribute("imageCount", imageCount);
			// 附件
			List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
			if(null == atts){
				atts = new ArrayList<String>();
				atts.add(ATT_SUFFIX_NAME);
				atts.add(ATT_FJSUFFIX_NAME);
			}else if(atts != null && atts.size()==0){
				atts.add(ATT_SUFFIX_NAME);
				atts.add(ATT_FJSUFFIX_NAME);
			}
					
			//根据流程id，节点id，表单ID获取改节点有几个字段必填,第一个字段为编码，第二个字段为中文名称
			List<Object[]> list=tableInfoService.getIsBt(workFlowId,wfNode.getWfn_id(),formId,"1");
			StringBuffer sb = new StringBuffer();
			if(list!=null){
				for(int i=0;i<list.size();i++){
					Object[] obj = list.get(i);
					if(i!=0){
						sb.append(";");
					}
					sb.append((String)obj[0]).append(":").append((String)obj[1]);
				}
			}
			getRequest().setAttribute("isbt", sb.toString());
			//看看数据库中有没有新的没看过的数据
			int count = tableInfoService.getCountMessage(wfProcess,employee.getEmployeeGuid());
			getRequest().setAttribute("count", count);
			getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));		
			String type = getRequest().getParameter("type");
			if(type!=null && type.equals("db")){
				return "showOverForm";
			}
			String isHaveChild = getRequest().getParameter("isHaveChild");
			getRequest().setAttribute("isHaveChild", isHaveChild);
			getRequest().setAttribute("deptName", employee.getDepartmentName());
			getSession().setAttribute("zsdw", SystemParamConfigUtil.getParamValueByParam("xtoId"));
			getSession().setAttribute("csdw", SystemParamConfigUtil.getParamValueByParam("xccid"));
			getSession().setAttribute("yffs", SystemParamConfigUtil.getParamValueByParam("fs"));
			getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
			getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
			getSession().setAttribute("socketUrl", SystemParamConfigUtil.getParamValueByParam("socketUrl"));
			// 待办
			getRequest().setAttribute("isOver", "0");
			if(wfNode!=null && wfNode.getNode_startJb() != null){
				String jbWorkFlowId = wfNode.getNode_startJb();
				// 获取流程的第一个节点
				WfNode firstJbNode = workflowBasicFlowService.findFirstNodeId(jbWorkFlowId);
				getRequest().setAttribute("firstJbNode", firstJbNode);
			}
			getSycnToTzggRight(employee, item,isSend,isEndProcess);
			String socketIp = SystemParamConfigUtil.getParamValueByParam("sockIp");
			getRequest().setAttribute("socketIp", socketIp);
			getRequest().setAttribute("closeWay", closeWay);
			getRequest().setAttribute("isFlexible", item.getIsFlexibleForm());
			getRequest().setAttribute("itemType", item.getVc_sxlx());
			//方正电子公章系统地址
			String founderSealUrl = SystemParamConfigUtil.getParamValueByParam("founderSealUrl");
			getRequest().setAttribute("founderSealUrl", founderSealUrl);
			
			Integer wfn_doubleScreen = wfNode.getWfn_doubleScreen();
			if(wfn_doubleScreen!=null && wfn_doubleScreen==1){
				List<String> typelist = new ArrayList<String>();
				typelist.add("doc");
				typelist.add("docx");
				List<SendAttachments> attlist = attachmentService.findSendAttachmentList(instanceId, typelist);
				if(attlist!=null && attlist.size()>0){
					getRequest().setAttribute("attlist", attlist);
				}else{
					wfn_doubleScreen=0;
				}
			}
			
			String trueOAUrl = SystemParamConfigUtil.getParamValueByParam("trueOAUrl");
			getRequest().setAttribute("trueOAUrl", trueOAUrl);
			//获取页面风格相关参数
			Map<String, String> map = new HashMap<String, String>();
			List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
			if(null != fontSize && fontSize != 0){
				getRequest().setAttribute("fontSize", fontSize);
			}else{
				if(formStylelist != null && formStylelist.size() > 0){
					FormStyle formStyle = formStylelist.get(0);
					if(formStyle != null){
						getRequest().setAttribute("fontSize", formStyle.getFontSize());
					} 
				}
			}
			
			if(formStylelist != null && formStylelist.size() > 0){
				FormStyle formStyle = formStylelist.get(0);
				if(formStyle != null){
					getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());
					getRequest().setAttribute("dateFormat", formStyle.getDateFormat());
					getRequest().setAttribute("font", formStyle.getFont());
				} 
			}
			this.getCatalog("", allInstanceId);
			String title = wfProcess.getProcessTitle();
			if(CommonUtil.stringNotNULL(title)){
				if(title.contains("*")&&title.indexOf("*")==36){
					title = title.substring(37);
				}
			}
			getRequest().setAttribute("title", StringUtils.isNotBlank(title) ? title.replace("\r\n", "").replace("\r", "").replace("\n", "") : title);
			String downloadUrl = FILE_DOWNLOAD_URL;
			if(downloadUrl.indexOf(realIds[1]) != -1){
				downloadUrl = downloadUrl.replace(realIds[1], realIds[0]);
			}
			getRequest().setAttribute("downloadUrl", FILE_DOWNLOAD_URL);
			
			String serverurl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			if(serverurl.indexOf(realIds[1]) != -1){
				serverurl = serverurl.replace(realIds[1], realIds[0]);
			}
			getRequest().setAttribute("serverurl", serverurl);

			String leaderIds = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
			
			String hideOpt_siteId = SystemParamConfigUtil.getParamValueByParam("hideOpt_siteId");
			if(CommonUtil.stringNotNULL(hideOpt_siteId) && hideOpt_siteId.contains(employee.getSiteId())){
				if(CommonUtil.stringNotNULL(leaderIds) && leaderIds.contains(employee.getEmployeeGuid())){
					getRequest().setAttribute("needHideOperate", false);
				}else{
					getRequest().setAttribute("needHideOperate", true);
				}
			}else{
				getRequest().setAttribute("needHideOperate", false);
			}
			
//			boolean fgwDownload = false;
//			List<String> jzDeptIds = tableInfoService.queryMultDeptByEmpId(employee.getEmployeeGuid());
//			for(String s : jzDeptIds){
//				if(hideOpt_siteId.contains(s)){
//					fgwDownload = true;
//				}
//			}
//			if(hideOpt_siteId.contains(employee.getSiteId())){
//				fgwDownload = true;
//			}
			
			boolean fgwDownload = false;
			List<String> jzDeptIds = tableInfoService.queryMultDeptByEmpId(employee.getEmployeeGuid());
			for(String s : jzDeptIds){
				String jzSiteId = tableInfoService.querySiteIdByDeptId(s);
				if(hideOpt_siteId.contains(jzSiteId)){
					fgwDownload = true;
					break;
				}
			}
			if(hideOpt_siteId.contains(employee.getSiteId())){
				fgwDownload = true;
			}
			getRequest().setAttribute("fgwDownload", fgwDownload);
			
			endTime = System.currentTimeMillis();
			System.out.println("---------结束openPendingForm时间------："+((endTime-startTime)/1000.0));
			
			if(wfn_doubleScreen!=null && wfn_doubleScreen==1){
				return "pagesdome_word";
			}else{
				String isPortal = getRequest().getParameter("isPortal");
				if(StringUtils.isNotBlank(isPortal) && isPortal.equals("1")){
					return "pagesdome";
				}else{
					return "pagesdome";
				}
			}
		}
	}
	
	/**
	 * 描述：重现根据数据补充文件
	 * @param instanceId
	 * @param processId
	 * @param filePath
	 * @param isOver void
	 * 作者:蔡亚军
	 * 创建时间:2016-4-25 上午9:55:41
	 */
	public void replenishFileByPath(String instanceId, String processId, String filePath, String isOver){
		String htmlPath = "";		//html的地址路径
		if(filePath!=null && !filePath.equals("")){
			htmlPath = filePath.substring(filePath.lastIndexOf("/")+1, filePath.lastIndexOf("/")+14);
		}
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_HTML_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String newHtmlPath =  pdfRoot +dstPath +htmlPath+ ".html";
		File file = new File(newHtmlPath);
		if(!file.exists()){		//如果html文件不存在
			String path = filePath.substring(0, filePath.lastIndexOf("/"));
			newHtmlPath = path+htmlPath+ ".html";
			newHtmlPath = newHtmlPath.replace(Constant.GENE_FILE_PATH, Constant.GENE_HTML_FILE_PATH);
			file = new File(newHtmlPath);
		}
		//如果html文件被误删、或者前服务器
		if(!file.exists()){
			WfProcess wfp = tableInfoService.getProcessById(processId);
			if(wfp!=null){
				String nodeId = wfp.getNodeUid();
				String workFlowId = wfp.getWfUid();
				String finstanceId = wfp.getfInstancdUid();
				String oldformId = wfp.getOldFormId();
				String formId = wfp.getFormId();
				String value = this.saveForm(oldformId, 2, instanceId, formId, nodeId, workFlowId,finstanceId, "", "");
				try {
					boolean isHidden = true;
					if(isOver!=null && isOver.equals("1")){
						isHidden = false;
					}
					newHtmlPath = getHtmlToNewHtml(formId, nodeId, value , instanceId, false, isHidden);
					htmlPath =  newHtmlPath.substring(newHtmlPath.lastIndexOf("/")+1, newHtmlPath.lastIndexOf("/")+14);
					file = new File(newHtmlPath);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		if(file.exists()){		//附件存在:目前只处理html存在的情况
			String pdfPath = pdfRoot + FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH)+ htmlPath+".pdf";
			//如果pdf转换失败,在重新转换一下
			File pdf = new File(pdfPath);
			if(pdf.exists()){
			}else{
				LOGGER.warn("----html转换的pdf文件不存在,系统自动重新转换---");
				HtmlToPdf htp = new HtmlToPdf();
				htp.htmlToPdf(newHtmlPath, pdfPath);
			}
			WfProcess wfp = tableInfoService.getProcessById(processId);
			String trueJson = wfp.getCommentJson();
			if(instanceId==null || instanceId.equals("")){
				instanceId = wfp.getWfInstanceUid();
			}
			String[] path = attachmentService.mergerAttToPdf(pdfPath, trueJson, instanceId, filePath, 0);
			if(path!=null && path.length==2){
				LOGGER.warn("----replenishPdfFileByPath(重新发布文件)---"+path);
			}
		}else{
			
		}
	}
	
	/**
	 * 将信息同步给通知公告;
	 * @param emp
	 * @param item
	 * @param isSend
	 * @param isEndProcess
	 */
	public void getSycnToTzggRight(Employee emp, WfItem item, boolean isSend, boolean isEndProcess){
		String sycnToTzggUser = SystemParamConfigUtil.getParamValueByParam("sycnToTzggUser");
		String userId = emp.getEmployeeLoginname();
		boolean isSycn = false;
		String sxlx = "";
		if(item!=null){
			sxlx =  item.getVc_sxlx();
		}
		if(sxlx!=null && sxlx.equals("0") && isSend && isEndProcess){			//发文
			if(sycnToTzggUser!=null){
				String[] userIds = sycnToTzggUser.split(",");
				for(int i=0; i<userIds.length; i++){
					if(userId.equals(userIds[i])){
						isSycn = true;
						break;
					}
				}
			}
		}
		getRequest().setAttribute("isSycn", isSycn);
	}
	
	
	/**
	 * 描述：打开联合发文表单页面
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2015-3-2 上午10:33:56
	 */
	public String openLhfwForm(){
		String processId = getRequest().getParameter("processId");
		String status = getRequest().getParameter("status");
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		getRequest().setAttribute("deptName", emp.getDepartmentName());
		// 查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		if(wfProcess!=null && wfProcess.getJssj()==null){
			wfProcess.setJssj(new Date(System.currentTimeMillis()));
			tableInfoService.update(wfProcess);
		}
		
		String workFlowId = wfProcess.getWfUid();
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(wfProcess.getNodeUid());
		// 当前节点所绑定的表单Id
		String formId = wfNode.getWfn_defaultform();
		// 查询表单的值
		String value = this.saveForm(formId, 2, wfProcess.getWfInstanceUid(), "", null, workFlowId,wfProcess.getfInstancdUid(),"","");// TODO
		// 查找对应的表单
		String formLocation = workflowBasicFlowService.findFormLocaltion(formId);
		// 查找意见的tagid
		String tagIds = tableInfoService.getCommentTagIds(wfProcess
				.getWfInstanceUid());
		String[] pdfPaths=wfProcess.getPdfPath().split(",");
		String pdfPath = null;
		if(pdfPaths.length==1){
			pdfPath=pdfPaths[0];
		}else{
			pdfPath=pdfPaths[1];
		}
		// 生成的pdf地址
		if(wfProcess.getIsEnd()!=null && wfProcess.getIsEnd() ==1){
			pdfPath =  wfProcess.getPdfPath().split(",")[0];
		}
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		if (pdfPath != null && !"".equals(pdfPath)) {
			int imageCount  =1;
			// 判断文件是否存在  因为 文件可能为同步过来的 流文件 所以判断 文件是否存在 
			File file = new File(pdfPath);
			try {
				imageCount = PdfPage.getPdfPage(pdfPath);
			} catch (Exception e) {
				
			}
			getRequest().setAttribute("imageCount", imageCount);
			
			String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
		    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		    if(pdfPath.startsWith(oldpdfRoot)){
			    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }else if(pdfPath.startsWith(newPdfRoot)){
		    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		    }else{
		    	pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }
		}
		getRequest().setAttribute("luruTagIds", tagIds);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("status", status);
		String isds = getRequest().getParameter("isds");
		if(isds==null||!"1".equals(isds)){
			isds="0";
		}
		getRequest().setAttribute("isds",isds);
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("pdfPath", pdfPath);
		//是否为办结步骤
		String commentJson = wfProcess.getCommentJson();
		String oldFormId = wfProcess.getOldFormId();
		//node_form_continue
		// 删除 &&(wfProcess.getIsEnd()!=null && wfProcess.getIsEnd() == 0)  崇川不合并意见
		if((oldFormId.equals(formId)||(wfNode!=null&&(wfNode.getWfn_form_continue()==null ||wfNode.getWfn_form_continue().equals("0"))))){	
				getRequest().setAttribute("commentJson", commentJson==null ?null:commentJson.replace("'", "’"));
		}
		
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + "oldfj",null);
		getRequest().setAttribute("attSize", sattList.size() + sattExtList.size()+ oldExtList.size());
		//是否为办结步骤
		getRequest().setAttribute("allInstanceId", wfProcess.getAllInstanceid());
		List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));		
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		// 待办
		getRequest().setAttribute("isOver", "1");
		
		String userId = emp.getEmployeeGuid();
		String userName = tableInfoService.findNameByEmpId(userId);
		List<PersonalComment> personalComments = commentService.getPersonalComments(userId);
		String personComs = "";// '{"datas":[{"text":"同意"},{"text":"请批示"},{"text":"请速办"},{"text":"送传阅"}]}';
		if (personalComments != null && personalComments.size() != 0) {
			for (PersonalComment pc : personalComments) {
				personComs += pc.getContent() + ",";
			}
			if(!("").equals(personComs) && personComs.length()>0){
			    personComs = personComs.substring(0,personComs.length()-1);
			}
		}
		getRequest().setAttribute("userId", userId);
		getSession().setAttribute("userName", userName);
		getSession().setAttribute("personalComments", personComs);
		
		//获取页面风格相关参数
  		Map<String, String> map = new HashMap<String, String>();
  		List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
  		if(formStylelist != null && formStylelist.size() > 0){
  			FormStyle formStyle = formStylelist.get(0);
  			if(formStyle != null){
  				getRequest().setAttribute("fontSize", formStyle.getFontSize());
  				getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());
  				getRequest().setAttribute("dateFormat", formStyle.getDateFormat());
  				getRequest().setAttribute("font", formStyle.getFont());
  			} 
  		}
		
		return "showLhfwForm";
	}
	
	/**
	 * 
	 * 描述：联合发文(用于保存数据)
	 * 作者:蔡亚军
	 * 创建时间:2015-2-28 下午5:49:06
	 */
	public void operateForm(){
		String processId = getRequest().getParameter("processId");
		String commentJson = getRequest().getParameter("json");
		// 替换字符串
		commentJson = JSONReplaceUtil.replaceJson(commentJson);
		WfProcess wfp = tableInfoService.getProcessById(processId);
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		if(wfp!=null){	//检查相同步骤是否已被办理完成
			String instanceId = wfp.getWfInstanceUid();
			String nodeId = wfp.getNodeUid();
			//结束该步骤信息
			wfp.setFinshTime(new Date());
			wfp.setIsOver("OVER");
			wfp.setCommentJson(commentJson);
			tableInfoService.update(wfp);
			Integer stepIndex = wfp.getStepIndex();
			WfProcess current = new WfProcess();
			current.setStepIndex(stepIndex);
			//current.setIsOver("OVER");
			current.setWfInstanceUid(instanceId);
			current.setNodeUid(nodeId);
			//获取该stepIndex全部信息
			List<WfProcess> list = tableInfoService.getWfProcessByEntity(current);
			for(WfProcess wfprocess:list){
				wfprocess.setCommentJson(commentJson);
				tableInfoService.update(wfprocess);
			}
			WfProcess wfprocess = null;
			boolean isOtherEnd = true;
			for(int i=0; i<list.size(); i++){
				wfprocess = list.get(i);
				String isBack = wfprocess.getIsBack();
				if(!wfprocess.getWfProcessUid().equals(processId) 
						&& wfprocess.getIsOver().equals("NOT_OVER") && (isBack== null || !isBack.equals("2"))){
					isOtherEnd = false;
					break;
				}
			}
			if(isOtherEnd){		//已办理完成
				WfProcess wfProcess = new WfProcess();
				wfProcess.setStepIndex(stepIndex-1);
				wfProcess.setIsOver("OVER");
				wfProcess.setWfInstanceUid(instanceId);
				//wfProcess.setNodeUid(wfp.getFromNodeid());
				List<WfProcess>  wfpList = tableInfoService.getWfProcessByEntity(wfProcess);
				WfProcess lastWfp = null;
				if(wfpList!=null && wfpList.size()>0){
					lastWfp = wfpList.get(0);
					String lastPdfPath = lastWfp.getPdfPath().split(",")[0];
					String thisPdfPath  = wfp.getPdfPath().split(",")[0];
					Integer imageCount = 0;
					try {
						imageCount = PdfPage.getPdfPage(lastPdfPath)-PdfPage.getPdfPage(thisPdfPath);
					} catch (Exception e) {
						
					}
					String oldJSON = lastWfp.getCommentJson();
					/*String wfProcessId = "";
					String stepJson = "";
					for(int i=0; i<list.size(); i++){
						wfProcessId = list.get(i).getWfProcessUid();
						stepJson = list.get(i).getCommentJson();
						if(stepJson!=null && !stepJson.equals("")){
							//1, 替换掉手写或者拉得签批意见
							JSONArray ja = JSONReplaceUtil.getJSONByProcessId(stepJson, wfProcessId);
							if(ja != null && !ja.isEmpty()){
								oldJSON = JSONReplaceUtil.setJSON(oldJSON, ja, imageCount);
							}
							//2. 替换章等内容
							Map<Integer,JSONObject> map = JSONReplaceUtil.getSealJson(stepJson);
							if(map!=null && map.size()>0){
								oldJSON = JSONReplaceUtil.setSealJSON(oldJSON, map, imageCount);
								
							}
						}
					}*/
					String wfProcessId = list.get(0).getWfProcessUid();
					String stepJson = list.get(0).getCommentJson();
					if(stepJson!=null && !stepJson.equals("")){
						//1, 替换掉手写或者拉得签批意见
						JSONArray ja = JSONReplaceUtil.getJSONByProcessId(stepJson, wfProcessId);
						if(ja != null && !ja.isEmpty()){
							oldJSON = JSONReplaceUtil.setJSON(oldJSON, ja, imageCount);
						}
						//2. 替换章等内容
						Map<Integer,JSONObject> map = JSONReplaceUtil.getSealJson(stepJson);
						if(map!=null && map.size()>0){
							oldJSON = JSONReplaceUtil.setSealJSON(oldJSON, map, imageCount);
						}
					}
					//返回到待办上一步
					WfProcess nextWfp = null;
					if(lastWfp!=null){
						String toUserId = wfp.getFromUserId();
						nextWfp = lastWfp;
						nextWfp.setWfProcessUid(UuidGenerator.generate36UUID());
						nextWfp.setIsOver("NOT_OVER");
						nextWfp.setFinshTime(null);
						nextWfp.setApplyTime(new Date());
						nextWfp.setUserUid(toUserId);
						nextWfp.setFromUserId(userId);
						nextWfp.setCommentJson(oldJSON);
						nextWfp.setStepIndex(stepIndex+1);
						nextWfp.setJssj(null);
						tableInfoService.save(nextWfp);
					}
					//插入新的待办步骤
				}
			}
		}
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write("success");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * @throws IOException
	 * 
	 * @Title: pushDb
	 * @Description: 推送待办-s-用于用户组内人员互相发送
	 * @param 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public void pushDb() throws IOException {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		// 被推送的人--暂时支持只推送一个人
		String xtoName = getRequest().getParameter("xtoName");
		String fijd = getRequest().getParameter("fijd");
		String isZBPush = getRequest().getParameter("isZBPush");
		String processId = getRequest().getParameter("processId");
		String pushMessage = getRequest().getParameter("pushMessage");
		try {
			// 获取当前待办的父instanceId
			WfProcess wfProcess = pendingService.getProcessByID(processId);
			if (!("").equals(xtoName)) {
				String instancdid= "";
				if(isZBPush!=null&&"1".equals(isZBPush)){
					// 事项 id 为会议的 
					String outMeetingItem = SystemParamConfigUtil.getParamValueByParam("outMeetingItem");
					if(outMeetingItem != null && wfProcess.getItemId().equals(outMeetingItem)){
						instancdid = wfProcess.getfInstancdUid();
					}else{
						instancdid = pendingService.getfinstancdidByInstancdid(wfProcess.getfInstancdUid());
					}
				}else{
					//获取同等级里所有的协办人员
					List<WfProcess> wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"1");
					instancdid=wfProcessList.get(0).getWfInstanceUid();
				}
				String[] userIds = xtoName.split(",");
				for (String userId : userIds) {
					//验证当前页面是不是部门并且如果是部门验证部门下有没有被人收取过去
					Department oldDepartment =departmentService.findDepartmentById(userId);
					if(oldDepartment!=null){
						userId = pendingService.getUserIdByInstancdid(instancdid,userId);
					}
					PushMessage pm = new PushMessage();
					pm.setInstanceId(instancdid);
					pm.setMessage(pushMessage);
					pm.setFjid(fijd);
					pm.setPushEmpId(emp.getEmployeeGuid());
					pm.setFinstanceid(wfProcess.getWfInstanceUid());
					pm.setPushEmpName(emp.getEmployeeName());
					Department department =departmentService.findDepartmentById(emp.getDepartmentGuid());
					pm.setPushKs(department.getDepartmentName());
					pm.setPushedEmpId(userId);
					pm.setPushTime(new Date());
					tableInfoService.savePushMessage(pm);
					// 插入一条被推送的记录
					tableInfoService.saveNewWfProcess(wfProcess,
							emp.getEmployeeGuid(), userId);
				}
			}
			getResponse().getWriter().print("success");
		} catch (IOException e) {
			getResponse().getWriter().print("fail");
		} finally {
			getResponse().getWriter().close();
		}
	}

	/**
	 * 
	 * @Title: getPushMessage
	 * @Description: 获取推送消息
	 * @param 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public String getPushMessage() {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String processId = getRequest().getParameter("processId");
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		List<PushMessage> pushMessageList = new ArrayList<PushMessage>();
		if(wfProcess!=null){
			//获取所有的主办协办
			//获取同等级里所有的主办人员
			List<WfProcess> wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"1");
			List<WfProcess> wfProcessList1 = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"2");
			boolean iszb=false;
			boolean isxb=false;
			if(wfProcessList!=null){
				for(int i=0;i<wfProcessList.size();i++){
					WfProcess wfProcess2 = wfProcessList.get(i);
					if(wfProcess2.getUserUid().equals(emp.getEmployeeGuid())){
						iszb=true;
						break;
					}
				}
			}
			if(wfProcessList1!=null){
				for(int i=0;i<wfProcessList1.size();i++){
					WfProcess wfProcess2 = wfProcessList1.get(i);
					if(wfProcess2.getUserUid().equals(emp.getEmployeeGuid())){
						isxb=true;
						break;
					}
				}
			}
			//获取人家推送给他的信息
			List<String> users = new	ArrayList<String>();
			// 获取被推送的消息--可能会多条--先只做一条处理,若需要,需修改
			List<PushMessage> pmList = tableInfoService.getPushMessageList(emp.getEmployeeGuid(),wfProcess.getWfInstanceUid());
			if(pmList.size() > 0){
				for(int j=0;j<pmList.size();j++){
					PushMessage pM = pmList.get(j);
					users.add(pM.getPushEmpId());
					List<SendAttachments> attList = attachmentService .findSendAttsByIdAndUserName(pM.getFjid(), pM.getPushEmpId());
					pM.setAttList(attList);
					pushMessageList.add(pM);
				}
			}
			//获取他这个流程发给别人的推送信息
			List<PushMessage> pmList1 = tableInfoService.getPushMessage(emp.getEmployeeGuid(),wfProcess.getWfInstanceUid());
			if(pmList1!=null&&pmList1.size()>0){
				for(int j=0;j<pmList1.size();j++){
					PushMessage pM = pmList1.get(j);
					List<SendAttachments> attList = attachmentService .findSendAttsByIdAndUserName(pM.getFjid(), pM.getPushEmpId());
					pM.setAttList(attList);
					pushMessageList.add(pM);
				}
			}else{
				if(iszb||isxb){
					PushMessage pushMe = new PushMessage();
					pushMe.setPushEmpId(emp.getEmployeeGuid());
					Employee employee = tableInfoService.findEmpByUserId(emp.getEmployeeGuid());
					if(employee!=null){
						pushMe.setPushEmpName(employee.getEmployeeName());
					}
					Department department =departmentService.findDepartmentById(employee==null?emp.getEmployeeGuid():employee.getDepartmentGuid());
					pushMe.setPushKs(department.getDepartmentName());
					pushMessageList.add(pushMe);
				}
			}
			//如果是主办
			if(iszb){
				//获取同等级里所有的协办人员
				wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"2");
				if(wfProcessList!=null){
					for(int i=0;i<wfProcessList.size();i++){
						WfProcess wfProcess2 = wfProcessList.get(i);
						//验证有没有已经获取过值
						boolean flag=false;
						for(int j=0;j<users.size();j++){
							if(users.get(j).equals(wfProcess2.getUserUid())){
								flag=true;
							}
						}
						if(!flag){
							PushMessage pushMe = new PushMessage();
							pushMe.setPushEmpId(wfProcess2.getUserUid());
							Employee employee = tableInfoService.findEmpByUserId(wfProcess2.getUserUid());
							if(employee!=null){
								pushMe.setPushEmpName(employee.getEmployeeName());
							}
							Department department =departmentService.findDepartmentById(employee==null?wfProcess2.getUserUid():employee.getDepartmentGuid());
							pushMe.setPushKs(department.getDepartmentName());
							pushMessageList.add(pushMe);
						}
					}
				}
			}
			//获取子流程的值
			wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getWfInstanceUid(),"1");
			if(wfProcessList!=null){
				for(int i=0;i<wfProcessList.size();i++){
					WfProcess wfProcess2 = wfProcessList.get(i);
					//验证有没有已经获取过值
					boolean flag=false;
					for(int j=0;j<users.size();j++){
						if(users.get(j).equals(wfProcess2.getUserUid())){
							flag=true;
						}
					}
					if(!flag){
						PushMessage pushMe = new PushMessage();
						pushMe.setPushEmpId(wfProcess2.getUserUid());
						Employee employee = tableInfoService.findEmpByUserId(wfProcess2.getUserUid());
						if(employee!=null){
							pushMe.setPushEmpName(employee.getEmployeeName());
						}
						Department department =departmentService.findDepartmentById(employee==null?wfProcess2.getUserUid():employee.getDepartmentGuid());
						pushMe.setPushKs(department.getDepartmentName());
						pushMessageList.add(pushMe);
					}
				}
			}
		}
		tableInfoService.updatePushMessageZt(emp.getEmployeeGuid(),wfProcess);
		String fileDownloadUrl = SystemParamConfigUtil.getParamValueByParam("filedownloadurl");
		getRequest().setAttribute("pmList", pushMessageList);
		getRequest().setAttribute("fileDownloadUrl", fileDownloadUrl);
		return "getPushMessage";
	}

	/**
	 * 待收收取公文,生成相应的pdf
	 * 
	 * @throws Exception
	 */
	public void receiveToPdf() throws Exception {
		// 查询步骤记录里的表单Id和当前节点的formId是否一样(即换表单)
		String formId = getRequest().getParameter("formId");
		String processId = getRequest().getParameter("processId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String instanceId = getRequest().getParameter("instanceId");
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		String nodeId = "";
		if(wfProcess!=null){
			nodeId = wfProcess.getNodeUid();
		}
		// 判断是否是传阅流程
		WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
		boolean isCyWF = false;
		if (item != null) {
			if (("2").equals(item.getVc_sxlx())) { // 传阅
				isCyWF = true;
			}
		}
		// 查询表单的值
		String value = this.saveForm("", 2, instanceId, formId, null, workFlowId,"","","");
		// 生成的pdf地址
		String path = getHtmlToNewOfPath(formId, nodeId, value, instanceId, isCyWF, true);
		String path2 = getHtmlToNewOfPath(formId, nodeId, value, instanceId, isCyWF, false);
		
		//pdf转true
		String truePath = new PDFToTrue().pdfToTrue(path, null);
		String truePath2 = new PDFToTrue().pdfToTrue(path2, null);
		String pdfPath = truePath +","+truePath2;
		
		//附件合成的pdf
//		String attachPath = "";
//		attachPath = getAttToNewOfPath(instanceId);
	
		//更新过程信息中的pdf
		try {
			if (wfProcess != null){
				wfProcess.setPdfPath(pdfPath);
//				wfProcess.setAttachPath(attachPath);
				tableInfoService.updateWfProcess(wfProcess);
				getResponse().getWriter().print("yes");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 上级已收转待办
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:季振华
	 * 创建时间:2017-5-16 下午3:54:48
	 */
	public void innerPendingOfMobile(){
 		String userId = getRequest().getParameter("userId");
		String itemId = getRequest().getParameter("itemId");
		String docguid = getRequest().getParameter("docguid");//上级已收docId
		String workFlowId = "";
		String message = "";
		String message_return = "";
		
		WfItem wfItem = new WfItem();
		wfItem = itemService.getItemById(itemId);
		if(null!=wfItem){
			workFlowId = wfItem.getLcid();
		}
		try {
			//上级已收
				
			message = toRecDocAction.innerPendingOfMobile(workFlowId, itemId, docguid,userId);
			
			Todos todo = new Todos();
			if(message.split(";")[0].equals("success")){
				String formId = message.split(";")[1];
				String instanceId = message.split(";")[2];
				String processId = message.split(";")[3];
				
				WfProcess wfProcess = pendingService.getProcessByID(processId);
				String nodeId = "";
				if(wfProcess!=null){
					nodeId = wfProcess.getNodeUid();
				}
				// 判断是否是传阅流程
				WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
				boolean isCyWF = false;
				if (item != null) {
					if (("2").equals(item.getVc_sxlx())) { // 传阅
						isCyWF = true;
					}
				}
				if(wfProcess!=null){
					nodeId = wfProcess.getNodeUid();
				}
				// 查询表单的值
				String value = this.saveForm("", 2, instanceId, formId, null, workFlowId,"","","");
				// 生成的pdf地址
				String path = getHtmlToNewOfPath(formId, nodeId, value, instanceId, isCyWF, true);
				String path2 = getHtmlToNewOfPath(formId, nodeId, value, instanceId, isCyWF, false);
				
				//pdf转true
				String truePath = new PDFToTrue().pdfToTrue(path, null);
				String truePath2 = new PDFToTrue().pdfToTrue(path2, null);
				String pdfPath = truePath +","+truePath2;
				
				//更新过程信息中的pdf
				if (wfProcess != null){
					wfProcess.setPdfPath(pdfPath);
					tableInfoService.updateWfProcess(wfProcess);
					message_return = "success"+";"+wfProcess.getWfProcessUid();
				}
				todo.setProcessId(wfProcess.getWfProcessUid());
				todo.setInstanceId(wfProcess.getWfInstanceUid());
				todo.setItemId(wfProcess.getItemId());
				todo.setWorkFlowId(wfProcess.getWfUid());
				todo.setFormId(wfProcess.getFormId());
				todo.setNodeId(wfProcess.getNodeUid());
				todo.setTitle(wfProcess.getProcessTitle());
				todo.setAllInstanceId(wfProcess.getAllInstanceid());
				todo.setIsMaster(wfProcess.getIsMaster()==null?"1":wfProcess.getIsMaster().toString());
				message_return = JSONObject.fromObject(todo).toString();
			}else{
				message_return = "fail";
			}
			getResponse().getWriter().print(message_return);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	

	/**
	 * 跟踪(即步骤记录)
	 */
	public String getProcess() {
		String localMac = getRequest().getParameter("localMac");
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		// 跟踪
		List<GetProcess> processList = new ArrayList<GetProcess>();
		List<GetProcess> proList = tableInfoService.findProcessList(instanceId);
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		getRequest().setAttribute("userId", emp.getEmployeeGuid());
		if (proList != null && proList.size() != 0) {
			//判断当前list里面是否有假节点,如果有,+号显示在假节点后面
			boolean isHaveFakeNode = false;
			//假节点的id
			String fakeNodeProcessId = "";
			for (GetProcess getProcess : proList) {
				String formNodeId = getProcess.getFromNodeId();
				String toNodeId = getProcess.getToNodeId();
				if(formNodeId==null || ("null").equals(formNodeId)){
					formNodeId = "";
				}
				if(toNodeId==null || ("null").equals(toNodeId)){
					toNodeId = "";
				}
				if (Integer.parseInt(getProcess.getIsEnd()) == 1) {
					getProcess.setNodeName("办结");// 最后一步设置为办结
				}
				// 获取当前步骤,当前人所填的意见
				List<Comment> commentList = commentService.findCommentsByElements(getProcess.getUserId(),
								getProcess.getWfInstanceUid(), getProcess.getWfProcessUid());
				getProcess.setCommentList(commentList);
				getRequest().setAttribute("commentCount", commentList.size());
				if (getProcess.getIs_merge() != null && !("null").equals(getProcess.getIs_merge())) {
					if (Integer.parseInt(getProcess.getIs_merge()) == 2) {
						getProcess.setNodeName("推送");// 是否被推送
					}
				}
			}
			if(isHaveFakeNode == true){
				for (GetProcess getProcess : proList) {
					if(fakeNodeProcessId.indexOf(getProcess.getWfProcessUid())==-1){
						getProcess.setIsHaveChild("0");
					}
				}
			}
			processList = proList;
		}
		//验证是主办还是协办或者是主流程
		List<WfProcess> list=pendingService.findProcessListById(instanceId);
		//当前流程输入主办协办主流程的区分,0.主流程,1主办,2协办
		String doType="0";
		//循环验证该历程是不是主板或者协办
		if(list!=null){
			for(WfProcess wfProcess:list){
				if(wfProcess.getDoType()!=null&&1==wfProcess.getDoType()){
					doType="1";
					break;
				}
				if(wfProcess.getDoType()!=null&&2==wfProcess.getDoType()){
					doType="2";
					break;
				}
			}
		}
		
		getRequest().setAttribute("doType", doType);
		getRequest().setAttribute("processList", processList);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("localMac", localMac);
		return "getProcess";
	}

	/**
	 * 跟踪(即步骤记录)(主办、协办)
	 */
	@SuppressWarnings("unchecked")
	public String getZxProcess() {
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String doType = getRequest().getParameter("doType");
		if(Utils.isNotNullOrEmpty(doType)&&"1".equals(doType)){
			doType="2";
		}else if(Utils.isNotNullOrEmpty(doType)&&"2".equals(doType)){
			doType="1";
		}
		String[] instanceIds= tableInfoService.getIntanceIdByZxIntanceId(instanceId,doType);

		Map map = new HashMap();
		Map map2 = new HashMap();
		List<List<GetProcess>> processList = new ArrayList<List<GetProcess>>();
		if(instanceIds!=null){
			for(int i=0;i<instanceIds.length;i++){
				// 跟踪
				List<GetProcess> proList = tableInfoService.findProcessList(instanceIds[i]);
				
				if (proList != null && proList.size() != 0) {
					//判断当前list里面是否有假节点,如果有,+号显示在假节点后面
					boolean isHaveFakeNode = false;
					//假节点的id
					String fakeNodeProcessId = "";
					for (GetProcess getProcess : proList) {
						String formNodeId = getProcess.getFromNodeId();
						String toNodeId = getProcess.getToNodeId();
						if(formNodeId==null || ("null").equals(formNodeId)){
							formNodeId = "";
						}
						if(toNodeId==null || ("null").equals(toNodeId)){
							toNodeId = "";
						}
						List<GetProcess> getProcessList = tableInfoService
								.getChildWfProcessList(getProcess.getWfInstanceUid(),getProcess.getWfProcessUid());
						if(getProcessList!=null&&getProcessList.size()!=0){
							isHaveFakeNode = true;
							fakeNodeProcessId += getProcess.getWfProcessUid()+",";
						}
						// //查询当前节点下是否有子流程
						// String f_instanceId = getProcess.getF_instanceId();
						// //查询当前发送出的节点
						// String toNodeId = getProcess.getToNodeId();
						// List<GetProcess> proceList =
						// tableInfoService.findProcessList(f_instanceId,toNodeId);
						if (Integer.parseInt(getProcess.getIsEnd()) == 1) {
							getProcess.setNodeName("办结");// 最后一步设置为办结
						}
						
						// 获取当前步骤,当前人所填的意见
						List<Comment> commentList = commentService.findCommentsByElements(getProcess.getUserId(),
										getProcess.getWfInstanceUid(), getProcess.getWfProcessUid());
						getProcess.setCommentList(commentList);
						getRequest().setAttribute("commentCount", commentList.size());

						String stepIndex = getProcess.getStepIndex();
						GetProcess process = tableInfoService.findGetProcessByPInstanceID(instanceIds[i], stepIndex);
						if (process != null) {
							map.put(stepIndex, process);
							// 获取子流程的若干实例
							String pinstanceId = process.getWfInstanceUid();
							List list = tableInfoService.findProcess(pinstanceId);
							map2.put(stepIndex, list);
						}
						if (getProcess.getIs_merge() != null && !("null").equals(getProcess.getIs_merge())) {
							if (Integer.parseInt(getProcess.getIs_merge()) == 2) {
								getProcess.setNodeName("推送");// 是否被推送
							}
						}
					}
					//更新非假节点的isHaveChild为0
					if(isHaveFakeNode == true){
						for (GetProcess getProcess : proList) {
							if(fakeNodeProcessId.indexOf(getProcess.getWfProcessUid())==-1){
								getProcess.setIsHaveChild("0");
							}
						}
					}
					
					processList.add(proList);
				}
			}
			
		}
		
		getRequest().setAttribute("processList", processList);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("map", map);
		getRequest().setAttribute("map2", map2);
		return "getZxProcess";
	}
	
	/**
	 * @throws IOException
	 * 
	 * @Title: openChildProcess
	 * @Description: 步骤记录中打开子流程步骤
	 * @param 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public void openChildProcess() throws IOException {
		String processId = getRequest().getParameter("processId");
		String instanceId = getRequest().getParameter("instanceId");
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = getRequest().getParameter("userId");
		if(userId != null && !"".equals(userId)){
			emp = employeeService.findEmployeeById(userId);
		}
		List<GetProcess> getProcessList = tableInfoService.getChildWfProcessList(instanceId,processId);
		if (getProcessList != null && getProcessList.size() != 0) {
			//判断当前list里面是否有假节点,如果有,+号显示在假节点后面
			boolean isHaveFakeNode = false;
			//假节点的id
			String fakeNodeProcessId = "";
			TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
			for (GetProcess getProcess : getProcessList) {
				String formNodeId = getProcess.getFromNodeId();
				String toNodeId = getProcess.getToNodeId();
				if(formNodeId==null || ("null").equals(formNodeId)){
					formNodeId = "";
				}
				if(toNodeId==null || ("null").equals(toNodeId)){
					toNodeId = "";
				}
				List<GetProcess> getProcessList2 = tableInfoService
						.getChildWfProcessList(getProcess.getWfInstanceUid(),getProcess.getWfProcessUid());
				if(getProcessList2!=null&&getProcessList2.size()!=0){
					isHaveFakeNode = true;
					fakeNodeProcessId += getProcess.getWfProcessUid()+",";
				}else{ 
					if(emp.getIsShowAllProcess() != null && "1".equals(emp.getIsShowAllProcess())){
						getProcessList2 =  tableInfoService.getJBProcessList(getProcess.getWfInstanceUid(),getProcess.getWfProcessUid());
						if(getProcessList2!=null&&getProcessList2.size()!=0){
							isHaveFakeNode = true;
							getProcess.setIsHaveChild("1");
							fakeNodeProcessId += getProcess.getWfProcessUid()+",";
						}
					}
				}
				
				String commentText = tableInfoExtendService.getTextValue(trueJson.getTrueJson(), getProcess.getWfProcessUid());
				getProcess.setCommentText(commentText);
			}
			//更新非假节点的isHaveChild为0
			if(isHaveFakeNode == true){
				for (GetProcess getProcess : getProcessList) {
					if(fakeNodeProcessId.indexOf(getProcess.getWfProcessUid())==-1){
						getProcess.setIsHaveChild("0");
					}
				}
			}
		}
		try {
			JsonConfig jsonConfig = new JsonConfig();
			jsonConfig.registerJsonValueProcessor(Date.class,
					new JsonDateValueProcessor());

			JSONArray jo = JSONArray.fromObject(getProcessList, jsonConfig);
			getResponse().getWriter().print(jo.toString());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			getResponse().getWriter().close();
		}
	}

	public String showProcess() {
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");

		// 根据instanceid
		DoFile doFile = tableInfoService.getDoFileByElements(workFlowId,
				instanceId);
		String doFile_title = "";
		if (doFile != null) {
			doFile_title = doFile.getDoFile_title();
		}

		getRequest().setAttribute("doFile_title", doFile_title);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("workFlowId", workFlowId);
		return "showprocess";
	}

	
	/**
	 * 
	 * 描述：已办事项列表;  status为状态位  2:已办结; 4:已办未结
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午3:35:20
	 */
	public String getOverList() {
		String isCheck = getRequest().getParameter("isCheck");
		//点击菜单进入不传laterSearch，点击搜索才传
		String laterSearch = getRequest().getParameter("laterSearch");
		if(StringUtils.isNotBlank(laterSearch)){
			getRequest().setAttribute("laterSearch", laterSearch);
		}
		if("1".equals(isCheck)){
			Paging.setPagingParams(getRequest(), 10, 0);
			toPage("success");
		}else{
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String statustype = getRequest().getParameter("statustype");
			String itemid = getRequest().getParameter("itemid");
			String owner = getRequest().getParameter("owner");
			String title = getRequest().getParameter("wfTitle");
			String itemName = getRequest().getParameter("itemName");
			String status = getRequest().getParameter("status") == null ? "" : getRequest().getParameter("status");
			String itemType = getRequest().getParameter("itemType");
			title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'","\\'\\'") : "";
			itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll("'", "\\'\\'") : "";
			String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
			String commitTimeTo = getRequest().getParameter("commitTimeTo");
			String pagesize = getRequest().getParameter("pageSize");
			String siteId = getRequest().getParameter("siteId");
			String isShowReadFile = getRequest().getParameter("isShowReadFile");
			String isShowWH = getRequest().getParameter("isShowWH");
			if(StringUtils.isNotBlank(isShowWH)){
				getRequest().setAttribute("isShowWH", isShowWH);
			}
			
			//高级搜索选项
			String title2 = getRequest().getParameter("wfTitle2");
			title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'","\\'\\'") : "";
			String commitTimeFrom3 = getRequest().getParameter("commitTimeFrom2");
			String commitTimeTo3 = getRequest().getParameter("commitTimeTo2");
			String itemType2 = getRequest().getParameter("itemType2");
			String conditionSql = "";
			if(StringUtils.isNotBlank(isShowReadFile) && isShowReadFile.equals("1")){
				getRequest().setAttribute("isShowReadFile", isShowReadFile);
			}else{
				conditionSql = "  and ((select count(dcv.instanceid) from document_circulation_view dcv where dcv.instanceid = p.wf_instance_uid)=0 or t.wfn_onekeyhandle != 1) ";
			}
			if(StringUtils.isNotBlank(title2)){
				conditionSql += "and p.process_title like '%" + title2 + "%'";
				getRequest().setAttribute("wfTitle2", title2);
			}else{
				if(StringUtils.isNotBlank(title)){
					conditionSql += "and p.process_title like '%" + title + "%'";
				}
			}
			
			if (CommonUtil.stringNotNULL(itemName)|| CommonUtil.stringNotNULL(status)) {
				conditionSql += "and i.vc_sxmc like '%" + itemName+ "%'";
			}
			
			if(CommonUtil.stringNotNULL(owner)&&"1".equals(owner)){
				conditionSql += "and p.owner = '"+emp.getEmployeeGuid()+"'";
			}
			
			if(StringUtils.isNotBlank(commitTimeFrom3)){
				commitTimeFrom3 = commitTimeFrom3.trim().replaceAll("'","\\'\\'");
				String commitTimeFrom4 = commitTimeFrom3 + " 00:00:00";
				conditionSql +=" and p.FINSH_TIME >= to_date('"+commitTimeFrom4+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeFrom2", commitTimeFrom3);
			}else{
				if (CommonUtil.stringNotNULL(commitTimeFrom)) {
					commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
					String commitTimeFrom2 = commitTimeFrom + " 00:00:00";
					conditionSql +=" and p.FINSH_TIME >= to_date('"+commitTimeFrom2+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
				}
			}
			if(StringUtils.isNotBlank(commitTimeTo3)){
				commitTimeTo3 = commitTimeTo3.trim().replaceAll("'","\\'\\'");
				String commitTimeTo4 = commitTimeTo3 + " 23:59:59";
				conditionSql +=" and p.FINSH_TIME <= to_date('"+commitTimeTo4+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeTo2", commitTimeTo3);
			}else{
				if (CommonUtil.stringNotNULL(commitTimeTo)) {
					commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
					String commitTimeTo2 = commitTimeTo + " 23:59:59";
					conditionSql +=" and p.FINSH_TIME <= to_date('"+commitTimeTo2+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeTo", commitTimeTo);
				}
			}
			
			if(StringUtils.isNotBlank(itemType2)){
				conditionSql +=" and i.vc_sxlx = '"+itemType2+"' ";
				getRequest().setAttribute("itemType2", itemType2);
			}else{
				if(StringUtils.isNotBlank(itemType)){
					conditionSql +=" and i.vc_sxlx = '"+itemType+"' ";
				}
			}
			
			//视图字段
			String wh = getRequest().getParameter("wh");
			String lwdw = getRequest().getParameter("lwdw");
			wh = CommonUtil.stringNotNULL(wh) ? wh.replaceAll("'",
					"\\'\\'") : "";
			lwdw = CommonUtil.stringNotNULL(lwdw) ? lwdw.replaceAll("'",
					"\\'\\'") : "";
			
			if (CommonUtil.stringNotNULL(wh)) {
				wh = wh.trim();
				conditionSql += " and v.wh like '%" + wh.trim()+ "%' escape '\\'";
			}
			getRequest().setAttribute("wh", wh);
			if (CommonUtil.stringNotNULL(lwdw)) {
				lwdw = lwdw.trim();
				conditionSql += " and v.lwdw like '%" + lwdw.trim()+ "%' escape '\\'";
				getRequest().setAttribute("lwdw", lwdw);
			}
			
			String itemids = "";
			if(StringUtils.isNotBlank(siteId)){
				if(StringUtils.isNotBlank(itemid)){//去取两个itemId的交集
					itemids = this.getIntersectItemId(itemid, siteId);
				}else{
					itemids = itemService.getItemIdsBydeptId(siteId);
				}
			}else{
				itemids = itemid;
			}
			
			String pendingItemId = "";
			if(CommonUtil.stringNotNULL(itemids)){
				String[] itemIds = itemids.split(",");
				for(String itemId: itemIds){
					pendingItemId += "'"+itemId+"',";
				}
				if(pendingItemId!=null && pendingItemId.length()>0){
					pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
				}
				conditionSql += " and i.id  in ("+pendingItemId+")";
			}
			int pageSize = Integer.parseInt(StringUtils.isNotBlank(pagesize)?pagesize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
			List<Pending> list;
			// 分为办理和已办结 加上 流程名
			int count = tableInfoService.getCountOfOver(conditionSql,emp.getEmployeeGuid(),status);
			Paging.setPagingParams(getRequest(), pageSize, count);
			list = tableInfoService.getOverList(conditionSql,emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize,status);
			pendingService.setBackStatus(list, emp.getIsAdmin(), emp.getEmployeeGuid());
			getRequest().setAttribute("list", list);
			getRequest().setAttribute("wfTitle", title);
			getRequest().setAttribute("itemName", itemName);
			getRequest().setAttribute("statustype", statustype);
			getRequest().setAttribute("itemid", itemid);
			getRequest().setAttribute("status", status);
			getRequest().setAttribute("itemType", itemType);
			//事项列表
			String depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
			WfItem item = new WfItem();
			if(StringUtils.isNotBlank(siteId)){
				item.setVc_ssbmid("'"+siteId+"'");
				getRequest().setAttribute("siteId", siteId);
			}else{
				item.setVc_ssbmid(depId);
			}
			List<WfItem> items = itemService.getItemListForPage("", "", item, null, null);
			getRequest().setAttribute("myPendItems", items);
		}
		return "overList";
	}
	

	/**
	 * 描述：打开已办表单
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午3:37:42
	 */
	public String openOverForm(){
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		long startTime = System.currentTimeMillis();
		long endTime ;
		String nowprocessId = getRequest().getParameter("nowprocessId");
		String processId = getRequest().getParameter("processId");
		String instanceId = getRequest().getParameter("instanceId");
		String isShowRelDoFile = getRequest().getParameter("isShowRelDoFile");
		String favourite = getRequest().getParameter("favourite");
		String isps = getRequest().getParameter("isps");
		String status = getRequest().getParameter("status"); 
		getRequest().setAttribute("status", status);
		
		getRequest().setAttribute("deptName", emp.getDepartmentName());
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		String allInstanceId = "";
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		if(wfp!=null){
			allInstanceId = wfp.getAllInstanceid();
			DoFile doFile = tableInfoService.getDoFileByElements("", wfp.getWfInstanceUid());
			if(null != doFile){
				getRequest().setAttribute("urgency", doFile.getUrgency());
			}
			instanceId = wfp.getWfInstanceUid();
			//wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
			Object[] tempData = tableInfoService.getNewsProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
			for(int i=0;i<tempData.length;i++){
				if(tempData[i]==null){
					tempData[i]="";
				}
			}
			if(tempData!=null){
				wfProcess = new WfProcess();
				wfProcess.setWfProcessUid(tempData[0]+"");
				wfProcess.setWfUid(tempData[1]+"");
				wfProcess.setNodeUid(tempData[2]+"");
				wfProcess.setWfInstanceUid(tempData[3]+"");
				wfProcess.setPdfPath(tempData[4]+"");
				wfProcess.setIsEnd(Integer.parseInt(tempData[5]+""));
				wfProcess.setItemId(tempData[6]+"");
				wfProcess.setAllInstanceid(tempData[7]+"");
			}
			//获取下个节点的id,补发选人的时候用的
//			List<WfProcess> nextProcesses = tableInfoService.findWfProcessByInstanceIdAndStepIndex(wfp.getWfInstanceUid(), wfp.getStepIndex()+1);
			List<WfProcess> nextProcesses = tableInfoService.findWfProcessByInsAndIndex(wfp.getWfInstanceUid(), wfp.getStepIndex()+1);
			if(null != nextProcesses && nextProcesses.size()>0){
				getRequest().setAttribute("nextNodeid", nextProcesses.get(0).getNodeUid());
			}
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		
		if(StringUtils.isBlank(allInstanceId)){
			allInstanceId = instanceId;
		}
		if(isps!=null && isps.equals("1")){	//当前意见为批示意见
			ReadedEndPending entity  = new ReadedEndPending();
			entity.setInstanceId(wfProcess.getWfInstanceUid());
			entity.setUserId(emp.getEmployeeGuid());
			entity.setStatus("1");
			integrateService.saveReadedEndPending(entity);
			getRequest().setAttribute("isps", isps);
		}
		String workFlowId = wfProcess.getWfUid();
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(wfProcess.getNodeUid());
		
		//获取该节点是否需要意见排序
		/*String wfn_comment_sort = wfNode.getWfn_comment_sort();
		if(wfn_comment_sort!=null && wfn_comment_sort.equals("1")){*/
		
			/*String wfn_child_nodeIds = wfNode.getWfn_child_nodeIds();

			String nodeIds = "'"+wfProcess.getNodeUid()+"',";
			if(wfn_child_nodeIds!=null && !wfn_child_nodeIds.equals("")){
				String[] ids = wfn_child_nodeIds.split(",");
				for(int i=0; i<ids.length; i++){
					nodeIds += "'"+ids[i]+"',";
				}
			}
			if(nodeIds!=null && !nodeIds.equals("")){
				nodeIds = nodeIds.substring(0, nodeIds.length()-1);
			}*/
		try {
			List<WfNode> listNode =  workflowBasicFlowService.getSortNodeId(workFlowId);
			String nodeIds ="";
			for(WfNode n : listNode){
				nodeIds += "'"+n.getWfn_id()+"',";
			}
			if(nodeIds!=null && !nodeIds.equals("")){
				nodeIds = nodeIds.substring(0, nodeIds.length()-1);
				//1、查询相关节点中的全部人员
				List<Employee> emplist = tableInfoService.findToSortEmployeeList(allInstanceId, nodeIds);
				if(null != listNode && listNode.size()>0){
					List<EmployeeSort> list = new ArrayList<EmployeeSort>();
					EmployeeSort sort = null;
					for(Employee emps: emplist ){
						sort = new EmployeeSort();
						sort.setUserId(emps.getEmployeeGuid());
						sort.setUserName(emps.getEmployeeName());
						sort.setSort(emps.getTabindex());
						list.add(sort);
					}
					String employeeSort = JSONArray.fromObject(list).toString();
					getRequest().setAttribute("employeeSort", employeeSort);
				}
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		/*}*/
		
		// 当前节点所绑定的表单Id
		String formId = wfNode.getWfn_defaultform();
		// 查询表单的值
//		String value = this.saveForm(formId, 2, wfProcess.getWfInstanceUid(), "", null, workFlowId,wfProcess.getfInstancdUid(),"","");// TODO
		String value = "";

		String formLocation = workflowBasicFlowService.findFormLocaltion(formId);
		// 查找意见的tagid
		String tagIds = tableInfoService.getCommentTagIds(wfProcess.getWfInstanceUid());
		String pdfPath = null;
		if(StringUtils.isNotBlank(wfProcess.getPdfPath())){
			String[] pdfPaths=wfProcess.getPdfPath().split(",");
			if(pdfPaths.length==1){
				pdfPath=pdfPaths[0];
			}else if(pdfPaths.length>1){
				pdfPath=pdfPaths[1];
			}
		}
		if(wfProcess.getIsEnd()!=null && wfProcess.getIsEnd() ==1){
			if(StringUtils.isNotBlank(wfProcess.getPdfPath())){
				pdfPath =  wfProcess.getPdfPath().split(",")[0];
			}
		}
		
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
		String itemId = wfProcess.getItemId();
		WfItem wfitem = itemService.getItemById(itemId);
		int imageCount  =1;
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		String isFlexibleForm = "";
		Integer fontSize = 0;
		if(wfitem!=null){
			isFlexibleForm = wfitem.getIsFlexibleForm();
			getRequest().setAttribute("itemType", wfitem.getVc_sxlx());
			ZwkjForm form = zwkjFormService.getFrom(workFlowId, formId, instanceId);
			fontSize = form.getFontSize();
			getRequest().setAttribute("isFlexibleForm", isFlexibleForm!=null?isFlexibleForm:"0");		//是否使用弹性表单
			if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
				String formPageJson = form.getFormPageJson();					//表单转换为true的内容
				getRequest().setAttribute("formPageJson", formPageJson);	
			}else{
				if (CommonUtil.stringNotNULL(pdfPath)) {
					try {
						imageCount = PdfPage.getPdfPage(pdfPath);
						if(imageCount==0){
							replenishFileByPath(instanceId, processId, pdfPath, "1");
							imageCount = PdfPage.getPdfPage(pdfPath);
						}
					} catch (Exception e) {  //当附件不存在时,在去生成下具体的附件内容
						replenishFileByPath(instanceId, processId, pdfPath, "1");
						imageCount = PdfPage.getPdfPage(pdfPath);
					}
				    if(pdfPath.startsWith(newPdfRoot)){
				    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
				    }
				}
			}
			getRequest().setAttribute("siteId", wfitem.getVc_ssbmid());
		}
		// 获取正文附件地址 doc,ceb
	    List<SendAttachments> sattList1 = attachmentService.findAllSendAtts(allInstanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList1 = attachmentService.findAllSendAtts(allInstanceId + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(allInstanceId + "oldfj",null);
		for (SendAttachments sendAttachments : sattList1) {
			sendAttachments.setFileSize(getFormateFileSize(sendAttachments.getFilesize()));
		}
		for (SendAttachments sendAttachments : sattExtList1) {
			sendAttachments.setFileSize(getFormateFileSize(sendAttachments.getFilesize()));
		}
		getRequest().setAttribute("zwAtts", sattList1);
		getRequest().setAttribute("fjAtts", sattExtList1);
		getRequest().setAttribute("attSize", sattExtList1.size());
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		DoFile doFile = tableInfoService.getDoFileByElements(workFlowId, allInstanceId);
		getRequest().setAttribute("dofileId", doFile.getDoFile_id());
		if(StringUtils.isNotBlank(wfProcess.getfInstancdUid())){
			getRequest().setAttribute("docguid", wfProcess.getAllInstanceid());
		}else{
			getRequest().setAttribute("docguid", wfProcess.getWfInstanceUid());
		}
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("favourite", favourite);
		getRequest().setAttribute("isShowRelDoFile", isShowRelDoFile);
		String isds = getRequest().getParameter("isds");
		if(isds==null||!"1".equals(isds)){
			isds="0";
		}
		String isHaveChild = getRequest().getParameter("isHaveChild");
		getRequest().setAttribute("isHaveChild",isHaveChild);
		getRequest().setAttribute("isds",isds);
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("pdfPath", pdfPath);
		String filePages = getCatalog(allInstanceId);
		getRequest().setAttribute("filePages", filePages);
		JSONArray jArr = new JSONArray();
		JSONObject jObj = new JSONObject();
		if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
		}else{
			DoFile d = tableInfoService.getDoFileByElements(workFlowId,instanceId);
			jObj.put("id", "form");
			jObj.put("name", "form");
			jObj.put("pdfUrl", pdfPath);
			jObj.put("isSeal", "0");
			jObj.put("pageCount", "1");
			jArr.add(jObj);
			if(d.getCopyNumber()!=null&&d.getCopyNumber()>0){
				WfProcess p = pendingService.getRecentProcess(instanceId);
				if(p.getPdfPath()!=null && p.getPdfPath().length()>0){
					pdfPath =  p.getPdfPath().split(",")[1];
				}
				if(pdfPath.startsWith(newPdfRoot)){
			    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
			    }else{
			    	 pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
			    }
				for(int i=0;i<d.getCopyNumber();i++){
					jObj.put("id", "form"+i);
					jObj.put("name", "form"+i);
					jObj.put("pdfUrl", pdfPath);
					jObj.put("isSeal", "0");
					jObj.put("pageCount", "1");
					jArr.add(jObj);
				}
			}
		}
		getRequest().setAttribute("wendanSize", jArr.size());
		imageCount = jArr.size();//不合成表单必须为1
		if(imageCount<1){
			imageCount = 1;
		}
		//if(imageCount==1){
		String realId = SystemParamConfigUtil.getParamValueByParam("readIp");
		String[] realIds = realId.split("##");
			//取出所有的附件的PDFPATH
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(allInstanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(allInstanceId + ATT_FJSUFFIX_NAME,null);
			sattExtList.addAll(oldExtList);
			sattList.addAll(sattExtList);
			for (SendAttachments sendAttachments : sattList) {
				String skipFileType = "rar,zip,cebx";
				if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
					FileUtils.byteArrayToFile(sendAttachments,attachmentService);
					if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
						imageCount += sendAttachments.getPagecount();
					}else{
						Integer pageCount = PdfPage.getPdfPage(sendAttachments.getTopdfpath());
						sendAttachments.setPagecount(pageCount);
						attachmentService.updateSendAtt(sendAttachments);
						imageCount += pageCount;
					}
					JSONObject obj = new JSONObject();
					obj.put("id", sendAttachments.getId());
					obj.put("name", sendAttachments.getFilename());
					String attPdfPath = serverUrl+ "/form/html/workflow/"+sendAttachments.getTopdfpath().substring(newPdfRoot.length());
					if(attPdfPath.indexOf(realIds[1]) != -1){
						attPdfPath = attPdfPath.replace(realIds[1], realIds[0]);
					}
					obj.put("pdfUrl", attPdfPath);
					obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
					obj.put("pageCount", sendAttachments.getPagecount());
					obj.put("filesize", sendAttachments.getFilesize());
					obj.put("downloadUrl", serverUrl + "/attachment_download4OCX.do?attId="+sendAttachments.getId());
					List<CutPages> cutList = attachmentService.findCutPagesListByDocId(sendAttachments.getId());
					if(cutList!=null && cutList.size()>0){
						JSONArray array = new JSONArray();
						JSONObject entity = null;
						CutPages cut = null;
						for(int i=0; i<cutList.size(); i++){
							cut = cutList.get(i);
							entity = new JSONObject();
							entity.put("id", cut.getId());
							entity.put("pageCount", cut.getPageCount());
							String pdfUrl = cut.getFilepath();
							String attUrl = serverUrl+ "/form/html/workflow/"+pdfUrl;
							if(attUrl.indexOf(realIds[1]) != -1){
								attUrl = attUrl.replace(realIds[1], realIds[0]);
							}
							entity.put("pdfUrl", attUrl);
							entity.put("sort", cut.getSort());
							entity.put("startPage", cut.getStartPage());
							entity.put("endPage", cut.getEndPage());
							entity.put("curFilesize", cut.getFileSize());
							entity.put("downloadUrl", serverUrl + "/attachment_download4OCX.do?attId="+cut.getId());
							array.add(entity);
						}
						obj.put("files", array.toString());
					}
					jArr.add(obj);
				}
			}
		//}
		getRequest().setAttribute("allPdfPath", jArr.toString());
		getRequest().setAttribute("imageCount", imageCount);
		
		//永远获取第一步的json数据
//		TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
		TrueJson trueJson = trueJsonService.findNewestTrueJsonByInstanceId(instanceId);
		String commentJson = "";
		if(trueJson!=null){
			commentJson = trueJson.getTrueJson();
		}else{		//针对于历史老办件、仍然获取原先的数据
			Integer master = wfProcess.getIsMaster();	//主办
			if(master!=null && master==0){	//协办人员
				WfProcess masterProcess = tableInfoService.getMasterProcess(wfProcess);
				commentJson = masterProcess.getCommentJson();
			}else{
				commentJson = wfProcess.getCommentJson();
			}
		}

		getRequest().setAttribute("commentJson", commentJson==null ?null:commentJson.replace("'", "’"));
		String pages = findCommonPageList(commentJson);
		getRequest().setAttribute("pages", pages);
		
		String checkProcessId = "";
		if(StringUtils.isNotBlank(nowprocessId)){
			checkProcessId = nowprocessId;
		}else{
			checkProcessId = processId;
		}
		
		WfProcess checwfp = tableInfoService.getProcessById(checkProcessId);
		WfNode node = workflowBasicFlowService.findFormIdByNodeId(checwfp.getNodeUid());
		if(node != null){
			Integer isReissue = node.getWfn_isreissue();
			if(isReissue != null && isReissue.equals(1)){
				boolean flag = checkCanReissue(checwfp);
				if(flag){
					getRequest().setAttribute("canReissue", "1");
				}else{
					getRequest().setAttribute("canReissue", "0");
				}
			}else{
				getRequest().setAttribute("canReissue", "0");
			}
		}
		
		//是否为办结步骤
		getRequest().setAttribute("allInstanceId", wfProcess.getAllInstanceid());
		List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));		
		getRequest().setAttribute("isOver", "1");
		getRequest().setAttribute("disfavourite", getRequest().getParameter("disfavourite"));
		String replyId = getRequest().getParameter("replyId");
		getRequest().setAttribute("replyId", replyId);
		String userId = emp.getEmployeeGuid();
		String userName = emp.getEmployeeName();
		getRequest().setAttribute("userId", userId);
	    getSession().setAttribute("userName", userName);
	    getSession().setAttribute("loginname", emp.getEmployeeLoginname());
	    
  		String title = wfp.getProcessTitle();
  		if(CommonUtil.stringNotNULL(title)){
			if(title.contains("*")&&title.indexOf("*")==36){
				title = title.substring(37);
			}
		}
  		getRequest().setAttribute("title", StringUtils.isNotBlank(title)?title.replace("\r\n", "").replace("\r", "").replace("\n", ""):title);
	      		
		//获取页面风格相关参数
  		Map<String, String> map = new HashMap<String, String>();
  		List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
  		if(null != fontSize && fontSize != 0){
			getRequest().setAttribute("fontSize", fontSize);
		}else{
			if(formStylelist != null && formStylelist.size() > 0){
				FormStyle formStyle = formStylelist.get(0);
				if(formStyle != null){
					getRequest().setAttribute("fontSize", formStyle.getFontSize());
				} 
			}
		}
  		if(formStylelist != null && formStylelist.size() > 0){
  			FormStyle formStyle = formStylelist.get(0);
  			if(formStyle != null){
  				getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());
  				getRequest().setAttribute("dateFormat", formStyle.getDateFormat());
  				getRequest().setAttribute("font", formStyle.getFont());
  			} 
  		}
  		
  		String downloadUrl = FILE_DOWNLOAD_URL;
		if(downloadUrl.indexOf(realIds[1]) != -1){
			downloadUrl = downloadUrl.replace(realIds[1], realIds[0]);
		}
		getRequest().setAttribute("downloadUrl", downloadUrl);
		
		String hideOpt_siteId = SystemParamConfigUtil.getParamValueByParam("hideOpt_siteId");
		boolean fgwDownload = false;
		List<String> jzDeptIds = tableInfoService.queryMultDeptByEmpId(emp.getEmployeeGuid());
		for(String s : jzDeptIds){
			String jzSiteId = tableInfoService.querySiteIdByDeptId(s);
			if(hideOpt_siteId.contains(jzSiteId)){
				fgwDownload = true;
				break;
			}
		}
		if(hideOpt_siteId.contains(emp.getSiteId())){
			fgwDownload = true;
		}
		getRequest().setAttribute("fgwDownload", fgwDownload);
  		
  		String isPortal = getRequest().getParameter("isPortal");
		endTime = System.currentTimeMillis();
		System.out.println("---------结束openOverForm时间------："+((endTime-startTime)/1000.0));
  		if(StringUtils.isNotBlank(isPortal) && isPortal.equals("1")){
//  			return "showOverForm_portal";
  			return "showOverForm";
  		}else{
  			return "showOverForm";
		}
	}

	/**
	 * 打开已办结批示的未阅
	 * @return
	 */
	public String openToDoRead(){
		String processId = getRequest().getParameter("processId");
		// 查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		//子流程
		List<WfProcess> wfProcessList = pendingService.findProcessListByFId(wfProcess.getWfInstanceUid());
		//是否包含中间流程
		int isContain = 0;
		String middleWf = "";
		if(wfProcessList!=null&&wfProcessList.size()!=0){
			for (WfProcess wp : wfProcessList) {
				if(("3").equals(wp.getDoType())){
					isContain++ ;
					middleWf = wp.getWfInstanceUid();
					break;
				}
			}
		}
		//如果包含，重置list
		if(isContain > 0){
			wfProcessList = pendingService.findProcessListByFId(middleWf);
		}
		// 生成的pdf地址
				String pdfPath = wfProcess.getPdfPath().split(",")[1];
				// TODO ------------外网ip
				// String serverUrl =
				// "http://"+getRequest().getLocalAddr()+":"+getRequest().getLocalPort()
				// +getRequest().getContextPath();
				String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
						+ getRequest().getLocalPort() + getRequest().getContextPath();
				// String serverUrl = "http://61.155.85.77:"+getRequest().getLocalPort()
				// +getRequest().getContextPath();
				if (pdfPath != null && !"".equals(pdfPath)) {
					
					String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
				    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
				    if(pdfPath.startsWith(oldpdfRoot)){
					    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
				    }else if(pdfPath.startsWith(newPdfRoot)){
				    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
				    }else{
				    	pdfPath = serverUrl+ "/form/html/"+ pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
				    }
					
				}
		String commentJson = tableInfoService.getClobOfWfProcess(
				"T_WF_PROCESS", processId, "commentjson");
		if(wfProcessList!=null&&wfProcessList.size()!=0){
			for (WfProcess wfp : wfProcessList) {
				//取主办部门的意见
				if(("1").equals(wfp.getDoType())){
					pdfPath = wfp.getPdfPath();
					commentJson = wfp.getCommentJson();
				}
			}
		}
		// 查找意见的tagid
		String tagIds = tableInfoService.getCommentTagIds(wfProcess
						.getWfInstanceUid());// 查询表单的值
		// 查找对应的表单
		String formLocation = workflowBasicFlowService
						.findFormLocaltion(wfProcess.getFormId());
		String value = this.saveForm(wfProcess.getFormId(), 2, wfProcess.getWfInstanceUid(),
						"", null, wfProcess.getWfUid(),wfProcess.getfInstancdUid(),"","");// TODO
		getRequest().setAttribute("commentJson", commentJson.replace("'", "’"));
		getRequest().setAttribute("formId", wfProcess.getFormId());
		getRequest().setAttribute("luruTagIds", tagIds);
		getRequest().setAttribute("workFlowId", wfProcess.getWfUid());
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("pdfPath", pdfPath);
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		return "openToDoRead";
	}
	
	/**
	 * 打开跟踪表单
	 * 
	 * @return
	 */
	public String openProcessForm() {
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		getRequest().setAttribute("deptName", emp.getDepartmentName());
		String processId = getRequest().getParameter("processId");
		// 查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		String workFlowId = wfProcess.getWfUid();
		String instanceId = wfProcess.getWfInstanceUid();
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(wfProcess
				.getNodeUid());
		// 当前节点所绑定的表单Id
		String formId = wfNode.getWfn_defaultform();
		// 查询表单的值
		String value = this.saveForm(formId, 2, wfProcess.getWfInstanceUid(), "", null, workFlowId, wfProcess.getfInstancdUid(),"","");// TODO
		// 权限
		String limitValue = getLimitValue(wfProcess.getNodeUid(), workFlowId,processId);
		// 查找对应的表单
		String formLocation = workflowBasicFlowService
				.findFormLocaltion(formId);
		// 生成的pdf地址
		String pdfPath = wfProcess.getPdfPath();
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
		if (pdfPath != null && !"".equals(pdfPath)) {
			if(wfProcess.getIsEnd()!=null && wfProcess.getIsEnd()==1){
				pdfPath = pdfPath.split(",")[0];				
			}else{
				pdfPath = pdfPath.split(",")[1];
			}
			int imageCount  =1;
			try {
				imageCount = PdfPage.getPdfPage(pdfPath);
				if(imageCount==0){
					replenishFileByPath(instanceId, processId, pdfPath, "0");
					imageCount = PdfPage.getPdfPage(pdfPath);
				}
			} catch (Exception e) {
				//当附件不存在时,在去生成下具体的附件内容
				replenishFileByPath(instanceId, processId, pdfPath, "0");
				imageCount = PdfPage.getPdfPage(pdfPath);
			}
			getRequest().setAttribute("imageCount", imageCount);
		    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		    if(pdfPath.startsWith(newPdfRoot)){
		    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		    }else{
			    pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }
		}
		
		if(wfProcess!=null&&(wfProcess.getDoType()==null||wfProcess.getDoType()!=3||(wfProcess.getDoType()==3&&wfProcess.getfInstancdUid()==null))){
			// 意见的Json数据  分发不添加意见
			String commentJson = tableInfoService.getClobOfWfProcess("T_WF_PROCESS", processId, "commentjson");
			getRequest().setAttribute("commentJson", commentJson.replace("'", "’"));
		}
		
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("limitValue", limitValue);
		getRequest().setAttribute("pdfPath", pdfPath);
		// 附件
		List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		return "showProcessForm";
	}
	
	/**
	 * 
	 * 描述：通用下载方法
	 *
	 * @return String
	 *
	 * 作者:WangXF<br>
	 * 创建时间:2011-11-30 下午05:54:58
	 * @throws IOException 
	 */
	public void downloadTure() throws IOException{
		String receiveId = getRequest().getParameter("receiveId");
		String name = getRequest().getParameter("name");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(doFileReceive.getpInstanceId() + "fj",null);
		List<SendAttachments> attzwList = attachmentService.findAllSendAtts(doFileReceive.getpInstanceId() + "attzw",null);
		String path=SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+receiveId;
		File file1 = new File(path);
		if(!file1.exists()){
			file1.mkdirs();
		}
		if(sattList!=null&&sattList.size()>0){
			for(int i=0;i<sattList.size();i++){
				String basePath = SystemParamConfigUtil.getParamValueByParam("filePath")+sattList.get(i).getLocalation();
				File oldFile = new File(basePath);
				if(!oldFile.exists()){
					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
					oldFile = new File(pdfRoot+sattList.get(i).getLocalation());
				}
				File newFile = new File(file1, sattList.get(i).getFilename());
				FileUploadUtils.copy(oldFile, newFile);// 完成上传文件，就是将本地文件复制到服务器上
			}
		}
		if(attzwList!=null&&attzwList.size()>0){
			for(int i=0;i<attzwList.size();i++){
				String basePath = SystemParamConfigUtil.getParamValueByParam("filePath")+attzwList.get(i).getLocalation();
				File oldFile = new File(basePath);
				if(!oldFile.exists()){
					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
					oldFile = new File(pdfRoot+attzwList.get(i).getLocalation());
					
				}
				File newFile = new File(file1, attzwList.get(i).getFilename());
				FileUploadUtils.copy(oldFile, newFile);// 完成上传文件，就是将本地文件复制到服务器上
			}
		}
		FileInputStream fileinputstream =null;
		File file =null;
		try {
			ZipUtil util = new ZipUtil();
			String zipPath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/";
			zipPath= zipPath.replace("/", "\\");
			String dir = SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+receiveId+"/";
			dir= dir.replace("/", "\\");
			String zipFileName = name+".zip";
			try
			{
				util.zip(dir, zipPath, zipFileName);
			} 
			catch (Exception e){
				e.printStackTrace();
			}
			file= new File(SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+name+".zip");
			fileinputstream = new FileInputStream(file);
			long l = file.length();
			int k = 0;
			byte abyte0[] = new byte[65000];
			getResponse().setContentType("application/x-msdownload");
			getResponse().setContentLength((int) l);
			name = URLEncoder.encode(name, "UTF-8");
			//name = URLDecoder.decode(name, "ISO8859-1");*
			getResponse().setHeader("Content-Disposition", "attachment; filename="+ name+".zip");
			while ((long) k < l) {
				int j;
				j = fileinputstream.read(abyte0, 0, 65000);
				k += j;
				getResponse().getOutputStream().write(abyte0, 0, j);
			}
		} catch (IOException e) {
			//LOGGER.error("下载失败,文件路径为："+SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+name+".zip", e);
			//e.printStackTrace();
		} catch (Exception e) {
			//e.printStackTrace();
		}finally{
			if(null!=fileinputstream){
				fileinputstream.close();
			}
			file.delete();
			FileUploadUtils.delFiles(file1);
		}
	}
	
	/**
	 * 
	 * 描述：待收已收打开查看页面
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-6-27 上午11:50:09
	 */
	public String openReceiveForm(){
		String receiveId = getRequest().getParameter("receiveId");
		String status = getRequest().getParameter("status");
		String jrdb = getRequest().getParameter("jrdb");	//是否进入待办()
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		// 获取类型 走公文交换的  还是发文流程
		String receiveType = doFileReceive.getReceiveType()== null?"0":doFileReceive.getReceiveType();
		String instanceId = doFileReceive.getInstanceId();
		String pdfPath = doFileReceive.getPdfpath();
		String trueJson =	doFileReceive.getTrueJson();
		List<WfProcess> list = tableInfoService.getProcessList(instanceId);
		WfProcess wfProcess = null;
		if(list!=null && list.size()>0){
			wfProcess = list.get(0);
		}
		if(wfProcess == null){
			System.out.println("wfProcess为空,请检查！");
		}
		String processId = wfProcess.getWfProcessUid();
		String workFlowId = wfProcess.getWfUid();
		String formId = "";
		String value = "";
		String tagIds ="";
		String formLocation= "";
		String limitValue = "";
		if(workFlowId != null){
			WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(wfProcess.getNodeUid());
			// 当前节点所绑定的表单Id
			formId = wfNode.getWfn_defaultform();
			// 查询表单的值
			value = this.saveForm(formId, 2, wfProcess.getWfInstanceUid(), "", null, workFlowId, wfProcess.getfInstancdUid(),"","");// TODO
			// 权限
			limitValue = getLimitValue(wfProcess.getNodeUid(), workFlowId,
					processId);
			// 查找对应的表单
			formLocation = workflowBasicFlowService.findFormLocaltion(formId);
			// 查找意见的tagid
			tagIds = tableInfoService.getCommentTagIds(wfProcess.getWfInstanceUid());
		}
		
		// 生成的pdf地址
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + "oldfj",null);
		for (SendAttachments sendAttachments : sattList) {
			if(sendAttachments.getFileSize()==null){
				File file = new File(sendAttachments.getTopdfpath());
				sendAttachments.setFilesize(file.length());
			}
		}
		for (SendAttachments sendAttachments : sattExtList) {
			if(sendAttachments.getFileSize()==null){
				File file = new File(sendAttachments.getTopdfpath());
				sendAttachments.setFilesize(file.length());
			}
		}		
		getRequest().setAttribute("attSize",sattExtList.size()+ oldExtList.size());
		getRequest().setAttribute("zwAtts", sattList);
		getRequest().setAttribute("fjAtts", sattExtList);
		List<SendAttachments> attList = attachmentService.findSendAttachmentListByInstanceId(wfProcess.getWfInstanceUid());
		
		getRequest().setAttribute("commentJson", trueJson == null ?trueJson : trueJson.replace("'", "’"));
		getRequest().setAttribute("path", getRequest().getParameter("path"));
		getRequest().setAttribute("filedownloadUrl",  SystemParamConfigUtil.getParamValueByParam("filedownloadUrl"));
		// getRequest().setAttribute("nodes", nodes);
		getRequest().setAttribute("luruTagIds", tagIds);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", wfProcess.getWfInstanceUid());
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("nodeId", wfProcess.getNodeUid());
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("limitValue", limitValue);
		
		JSONArray jArr = new JSONArray();
		Integer imageCount = 0;
		//取出所有的附件的PDFPATH
		/*sattExtList.addAll(oldExtList);
		sattList.addAll(sattExtList);*/
		for (SendAttachments sendAttachments : attList) {
			String toPdfPath = sendAttachments.getTopdfpath();
			if(CommonUtil.stringIsNULL(toPdfPath)){
				if("pdf".equalsIgnoreCase(sendAttachments.getFiletype())){
					toPdfPath = newPdfRoot + sendAttachments.getLocalation();
				}
			}
			if(CommonUtil.stringNotNULL(toPdfPath)){
				if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
					imageCount += sendAttachments.getPagecount();
				}else{
					Integer pageCount = PdfPage.getPdfPage(toPdfPath);
					sendAttachments.setPagecount(pageCount);
					attachmentService.updateSendAtt(sendAttachments);
					imageCount += pageCount;
				}
				JSONObject obj = new JSONObject();
				obj.put("id", sendAttachments.getId());
				obj.put("name", sendAttachments.getFilename());
				String attPdfPath = toPdfPath.replace(newPdfRoot, serverUrl+ "/form/html/workflow/");;
				obj.put("pdfUrl", attPdfPath);
				obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
				obj.put("pageCount", sendAttachments.getPagecount());
				jArr.add(obj);
			}
		}
		getRequest().setAttribute("allPdfPath", jArr.toString());
		getRequest().setAttribute("imageCount", imageCount);
		
		String title = "";
		if(wfProcess.getProcessTitle()!=null && !wfProcess.getProcessTitle().equals("")){
			title = wfProcess.getProcessTitle().replace("'", "‘").replace("\"", "“").replace("\r\n", "");
		}else{
			title ="默认标题";
		}
		getRequest().setAttribute("title", title);
		getRequest().setAttribute("receiveId", doFileReceive.getId());
		// 附件
		//List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		//getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		getRequest().setAttribute("status", status);
		getRequest().setAttribute("jrdb", jrdb);
		getRequest().setAttribute("receiveType", receiveType);
		getRequest().setAttribute("itemType", 0);
		Integer dyfs = doFileReceive.getDyfs();
		Integer ydyfs = doFileReceive.getYdyfs();
		getRequest().setAttribute("dyfs", dyfs);
		getRequest().setAttribute("ydyfs", ydyfs);
		String isWeb = getRequest().getParameter("isWeb");
		if(isWeb!=null && isWeb.equals("1")){		//isWeb=1时,表示是为系统网页弹出
			
		}else{
			//其他页面查看
			int isInvalid = doFileReceive.getIsInvalid()==null?0:doFileReceive.getIsInvalid();
			int isJrdb = doFileReceive.getJrdb()==null?0:doFileReceive.getJrdb();
			String isReceiveType = doFileReceive.getReceiveType();
			String zfbDepId = SystemParamConfigUtil.getParamValueByParam("zfbDepId");
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
			getRequest().setAttribute("deptName", dep.getDepartmentName());
			String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
			boolean is_jrdb = false;
			/*if(zfbDepId!=null && (zfbDepId.equals(dep.getDepartmentGuid())
					|| zfbDepId.equals(departId))){
				is_jrdb = true;
			}else {
				is_jrdb = false;
			}*/
			is_jrdb = true;
			if((isInvalid==1 || isJrdb ==0) &&  is_jrdb && (isReceiveType==null || !isReceiveType.equals("2"))){
				List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
				getRequest().setAttribute("itemList", itemList);
				getRequest().setAttribute("showItemList", "1");
			}
			
			getRequest().setAttribute("receiveId", receiveId);
			getRequest().setAttribute("processId", processId);
		}
		//获取页面风格相关参数
  		Map<String, String> map = new HashMap<String, String>();
  		List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
  		if(formStylelist != null && formStylelist.size() > 0){
  			FormStyle formStyle = formStylelist.get(0);
  			if(formStyle != null){
  				getRequest().setAttribute("fontSize", formStyle.getFontSize());
  				getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());
  				getRequest().setAttribute("dateFormat", formStyle.getDateFormat());
  				getRequest().setAttribute("font", formStyle.getFont());
  			} 
  		}
  		getRequest().setAttribute("instanceId", instanceId);
  		String founderSealUrl = SystemParamConfigUtil.getParamValueByParam("founderSealUrl");
		getRequest().setAttribute("founderSealUrl", founderSealUrl);
		return "showReceiveForm";
		
	}
	
	public  String  showRebackerForm(){
		String receiveId = getRequest().getParameter("receiveId");
		String status = getRequest().getParameter("status");
		String jrdb = getRequest().getParameter("jrdb");	//是否进入待办()
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		// 获取类型 走公文交换的  还是发文流程
		String receiveType = doFileReceive.getReceiveType()== null?"0":doFileReceive.getReceiveType();
		if(doFileReceive.getfProcessId()!= null ){
			WfProcess oldProcess = tableInfoService.getProcessById(doFileReceive.getfProcessId());
			if(oldProcess != null){
				doFileReceive.setTitle(oldProcess.getProcessTitle());
			}
		}

		getRequest().setAttribute("itemType", 0);
		String instanceId = doFileReceive.getInstanceId();
		String pdfPath = doFileReceive.getPdfpath();
		String trueJson =	doFileReceive.getTrueJson();
		
		// 生成的pdf地址
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		if (pdfPath != null && !"".equals(pdfPath)) {
			int imageCount  = 1;
			try {
				imageCount = PdfPage.getPdfPage(pdfPath);
			} catch (Exception e) {
				
			}
			getRequest().setAttribute("imageCount", imageCount);
			
			getRequest().setAttribute("path", pdfPath);
			
			String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
		    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		    if(pdfPath.startsWith(oldpdfRoot)){
			    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }else if(pdfPath.startsWith(newPdfRoot)){
		    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		    }else{
			    pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }
		}
		getRequest().setAttribute("commentJson", trueJson.replace("'", "’"));
		
		getRequest().setAttribute("filedownloadUrl",  SystemParamConfigUtil.getParamValueByParam("filedownloadUrl"));
		// getRequest().setAttribute("nodes", nodes);
		getRequest().setAttribute("luruTagIds", "");
		getRequest().setAttribute("workFlowId", "");
		getRequest().setAttribute("processId", doFileReceive.getProcessId());
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("formId", doFileReceive.getFormId());
		getRequest().setAttribute("nodeId", "");
		getRequest().setAttribute("value", "");
		getRequest().setAttribute("limitValue", "");
		getRequest().setAttribute("pdfPath", pdfPath);
		getRequest().setAttribute("title", doFileReceive.getTitle() == null ? "" :doFileReceive.getTitle().replace("'", "’").replace("\"", "“").replace("\r\n", ""));

		getRequest().setAttribute("receiveId", doFileReceive.getId());
		// 附件
		//List<String> atts = tableInfoService.getAttachmentTagByForm(formId);
		//getRequest().setAttribute("atts", JSONArray.fromObject(atts).toString().replace("\"", ",;|"));
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		
		getRequest().setAttribute("status", status);
		getRequest().setAttribute("jrdb", jrdb);
		getRequest().setAttribute("receiveType", receiveType);
		return "showRebackerForm";
	}

	/**
	 * 设置打印份数
	 */
	public void setDyfs() {
		String receiveId = getRequest().getParameter("receiveId");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		String dyfs = getRequest().getParameter("dyfs");
		if(Utils.isNotNullOrEmpty(dyfs)){
			int fs = Integer.valueOf(dyfs);
			Integer ydyfs=doFileReceive.getYdyfs();
			if(ydyfs==null){
				ydyfs = fs;
			}else{
				ydyfs =fs+ydyfs;
			}
			doFileReceive.setYdyfs(ydyfs);
			tableInfoService.updateDoFileReceive(doFileReceive);
		}
	}
	/**
	 * 设置打印份数
	 */
	public void getDyfs() {
		String receiveId = getRequest().getParameter("receiveId");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		Integer dyfs=doFileReceive.getDyfs();
		Integer ydyfs=doFileReceive.getYdyfs();
		String dyfss="0";
		if(dyfs!=null){
			if(ydyfs!=null){
				dyfss =(dyfs.intValue()-ydyfs.intValue())+"";
			}else{
				dyfss =dyfs.intValue()+"";
			}
		}
		try {
			getResponse().getWriter().print(dyfss);
			getResponse().getWriter().close();
		} catch (IOException e) {
			e.getMessage();
		}
	}
	/**
	 * 
	 * 描述： 政府办的作废已收： 即删除相应的待办信息
	 * 作者:蔡亚军
	 * 创建时间:2014-6-27 下午2:01:45
	 */
	public void invalidReceive(){
		//获得ReceiveID
		String id  = getRequest().getParameter("id");
		
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		
		String instanceId = doFileReceive.getInstanceId();
		
		List<WfProcess> wfList = tableInfoService.getProcessList(instanceId);
		
		WfProcess firstWf = null;
		for(WfProcess wf: wfList){
			if(wf.getStepIndex()!=null && wf.getStepIndex()==1){
				firstWf = wf;
				break;
			}
		}
		String wfUid = firstWf.getWfUid();
		
		//删除socket人员数据
		List<WfProcess> list = tableInfoService.getProcessList(instanceId);
		WebSocketUtil webSocket = new WebSocketUtil();
		for(WfProcess wfp: list){
			String is_over = wfp.getIsOver();
			Integer is_show = wfp.getIsShow();
			String isBack = wfp.getIsBack();
			if(is_over!=null && is_over.equals("NOT_OVER")
					&& is_show!=null && is_show==1 && (isBack==null || !isBack.equals("2"))){
				try {
					webSocket.delBadge(wfp.getUserUid(), "", "");
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		}
		//删除原先流程
		tableInfoService.deleteWfProcess(wfUid, instanceId);
		
		String fprocessId = doFileReceive.getfProcessId();
		WfProcess wf = tableInfoService.getProcessById(fprocessId);
		if(wf!=null){
			//插入下一步
			WfProcess newProcess = new WfProcess();
				newProcess.setWfProcessUid(doFileReceive.getProcessId());
				newProcess.setfInstancdUid("");
				newProcess.setWfInstanceUid(doFileReceive.getInstanceId());
				newProcess.setWfUid("");
				newProcess.setFinshTime(firstWf.getFinshTime());
				newProcess.setApplyTime(firstWf.getApplyTime());
				newProcess.setProcessTitle(wf.getProcessTitle());
				newProcess.setIsOver(Constant.NOT_OVER);
				newProcess.setFromNodeid("");
				newProcess.setToNodeid("");
				newProcess.setPdfPath(wf.getPdfPath());
				newProcess.setCommentJson(wf.getCommentJson());
				newProcess.setNodeUid(wf.getNodeUid());
				newProcess.setItemId(wf.getItemId());
				newProcess.setFormId(wf.getFormId());
				newProcess.setOldFormId("");
				newProcess.setFromUserId(wf.getFromUserId());
				newProcess.setOwner(wf.getOwner());
				newProcess.setIsEnd(0);
				newProcess.setIsShow(1);
				newProcess.setStepIndex(1);    
				newProcess.setStatus("0");
				newProcess.setAction_status(0);
				newProcess.setAllInstanceid(doFileReceive.getInstanceId());
				newProcess.setIsExchanging(0);
				newProcess.setUserUid(doFileReceive.getToDepartId());
				newProcess.setIsMaster(1);
				newProcess.setIsBack("0");
				newProcess.setUserDeptId(wf.getUserDeptId());
			tableInfoService.save(newProcess);
		}
		
		//更新receive表
		doFileReceive.setIsInvalid(1);
		tableInfoService.updateDoFileReceive(doFileReceive);
		try {
			getResponse().getWriter().print("success");
			getResponse().getWriter().close();
		} catch (IOException e) {
			e.getMessage();
		}
	}
	
	/**
	 * 
	 * 描述：重新进入待办以后,是否作废中改回原来的状态
	 * 作者:蔡亚军
	 * 创建时间:2014-6-27 下午3:19:53
	 */
	public void updateInvalid(){
		String id  = getRequest().getParameter("id");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		doFileReceive.setIsInvalid(0);
		tableInfoService.updateDoFileReceive(doFileReceive);
		try {
			getResponse().getWriter().print("success");
			getResponse().getWriter().close();
		} catch (IOException e) {
			e.getMessage();
		}
	}
	
	

	public String getPendingCount() {
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String conditionSql = "and (p.action_status is null or p.action_status!=2) ";
			int pendingcount = pendingService.getCountOfPending(conditionSql,emp.getEmployeeGuid(), "");
			List<Pending> list = pendingService.getPendingList(conditionSql,emp.getEmployeeGuid(), null, null);
			int warncount = 0;
			int passedcount = 0;
			for (Pending pending : list) {
				if ("1".equals(pending.getWarnType())
						|| "2".equals(pending.getWarnType())) {
					warncount++;
				}
				if ("0".equals(pending.getWarnType())) {
					passedcount++;
				}
			}
			try {
				// getResponse().getWriter().print("{'pendingCount':'"+pendingcount+"','warnCount':'"+warncount+"'}");
				String count = pendingcount + ";" + warncount + ";" + passedcount;
				getResponse().getWriter().print(count);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	
	/**
	 * 
	 * 描述：办件列表  favourite=1:收藏夹； 
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-2-29 下午3:21:41
	 */
	public String getDoFileList() {
		//点击菜单进入不传laterSearch，点击搜索才传
		String laterSearch = getRequest().getParameter("laterSearch");
		if(StringUtils.isNotBlank(laterSearch)){
			getRequest().setAttribute("laterSearch", laterSearch);
		}
		String redirect = getRequest().getParameter("redirect");
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemid = getRequest().getParameter("itemid");
		String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
		String commitTimeTo = getRequest().getParameter("commitTimeTo");
		String favourite = getRequest().getParameter("favourite");
		String isShowTestDept = getRequest().getParameter("isShowTestDept");
		getRequest().setAttribute("isAdmin",  getRequest().getParameter("isAdmin"));
		String pagesize = getRequest().getParameter("pageSize");
		String isShowExp = getRequest().getParameter("isShowExp");
		String siteId = getRequest().getParameter("siteId");
		String departId = getRequest().getParameter("departId");
		String isFgw = getRequest().getParameter("isFgw");
		
		String jjcd = getRequest().getParameter("jjcd");//紧急程度
		
		String isShowJjcd = getRequest().getParameter("isShowJjcd");//是否展示紧急程度搜索

		String pdfNameToWh = getRequest().getParameter("pdfNameToWh"); 
		
		String excelSpecial = getRequest().getParameter("excelSpecial");  //机关事务局定制Excel导出
		
		// 办件删除列表新增了 参数 type = del
		String type = getRequest().getParameter("type");
		getRequest().setAttribute("type",  type);
		
		//新增标题是否展示文号字段
		String isShowWH = getRequest().getParameter("isShowWH");
		
		//高级搜索选项
		String title2 = getRequest().getParameter("wfTitle2");
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'","\\'\\'") : "";
		String commitTimeFrom3 = getRequest().getParameter("commitTimeFrom2");
		String commitTimeTo3 = getRequest().getParameter("commitTimeTo2");
		String itemType2 = getRequest().getParameter("itemType2");
		String status = getRequest().getParameter("status");
		
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = "";// 查询条件
		if(StringUtils.isNotBlank(title2)){
			conditionSql = " and t.dofile_title like '%" + title2.trim() + "%' ";
			getRequest().setAttribute("wfTitle2", title2);
		}else{
			if (CommonUtil.stringNotNULL(title)) {
				conditionSql = " and t.dofile_title like '%" + title.trim() + "%' ";
			}
		}
		if (CommonUtil.stringNotNULL(itemName)) {
			conditionSql += " and i.vc_sxmc = '" + itemName + "' ";
		}

		if(StringUtils.isNotBlank(commitTimeFrom3)){
			commitTimeFrom3 = commitTimeFrom3.trim().replaceAll("'","\\'\\'");
			String commitTimeFrom4 = commitTimeFrom3 + " 00:00:00";
			conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom4+"','yyyy-mm-dd hh24:mi:ss') ";	
			getRequest().setAttribute("commitTimeFrom2", commitTimeFrom3);
		}else{
			if (CommonUtil.stringNotNULL(commitTimeFrom)) {
				commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
				String commitTimeFrom2 = commitTimeFrom + " 00:00:00";
				conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom2+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
			}
		}
		if(StringUtils.isNotBlank(commitTimeTo3)){
			commitTimeTo3 = commitTimeTo3.trim().replaceAll("'","\\'\\'");
			String commitTimeTo4 = commitTimeTo3 + " 23:59:59";
			conditionSql +=" and t.dotime <= to_date('"+commitTimeTo4+"','yyyy-mm-dd hh24:mi:ss') ";	
			getRequest().setAttribute("commitTimeTo2", commitTimeTo3);
		}else{
			if (CommonUtil.stringNotNULL(commitTimeTo)) {
				commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
				String commitTimeTo2 = commitTimeTo + " 23:59:59";
				conditionSql +=" and t.dotime <= to_date('"+commitTimeTo2+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeTo", commitTimeTo);
			}
		}
		
		String itemType = getRequest().getParameter("itemType");
		getRequest().setAttribute("itemType", itemType);
		
		if(StringUtils.isNotBlank(itemType2)){
			conditionSql +=" and i.vc_sxlx = '"+itemType2+"' ";
			getRequest().setAttribute("itemType2", itemType2);
		}else{
			if(StringUtils.isNotBlank(itemType)){
				//收文
				conditionSql +=" and i.vc_sxlx = '"+itemType+"' ";
			}
		}
		
		//在办办结
		if(StringUtils.isNotBlank(status)){
			if(status.equals("4")){//在办
				conditionSql += " and t.instanceid not in (select e.instanceid from t_wf_core_end_instanceid e)";
			}else if(status.equals("2")){//办结
				conditionSql += " and t.instanceid in (select e.instanceid from t_wf_core_end_instanceid e)";
			}
			getRequest().setAttribute("status", status);
		}
		
		//更具部门id查询
		if(StringUtils.isNotBlank(departId)){
			conditionSql += " and p.user_uid in (select e.employee_guid from zwkj_employee e where e.department_guid = '" + departId + "')";
			getRequest().setAttribute("departId", departId);
		}

		//视图字段
		String wh = getRequest().getParameter("wh");
		String lwdw = getRequest().getParameter("lwdw");
		wh = CommonUtil.stringNotNULL(wh) ? wh.replaceAll("'",
				"\\'\\'") : "";
		lwdw = CommonUtil.stringNotNULL(lwdw) ? lwdw.replaceAll("'",
				"\\'\\'") : "";

		if (CommonUtil.stringNotNULL(wh)) {
			wh = wh.trim();
			conditionSql += " and v.wh like '%" + wh.trim()+ "%' escape '\\'";
		}
		getRequest().setAttribute("wh", wh);
		if (CommonUtil.stringNotNULL(lwdw)) {
			lwdw = lwdw.trim();
			conditionSql += " and v.lwdw like '%" + lwdw.trim()+ "%' escape '\\'";
			getRequest().setAttribute("lwdw", lwdw);
		}
		
		if (CommonUtil.stringNotNULL(jjcd)) {
			jjcd = jjcd.trim();
			if(jjcd.equals("一般")){
				conditionSql += " and (v.jjcd ='"+jjcd+"' or v.jjcd ='' or v.jjcd=' ' or v.jjcd is null) ";
			}else{
				conditionSql += " and v.jjcd ='"+jjcd+"' ";
			}
			getRequest().setAttribute("jjcd", jjcd);
		}
		
		String itemids = "";
		if(StringUtils.isNotBlank(siteId)){
			if(StringUtils.isNotBlank(itemid)){//去取两个itemId的交集
				itemids = this.getIntersectItemId(itemid, siteId);
			}else{
				itemids = itemService.getItemIdsBydeptId(siteId);
			}
		}else{
			itemids = itemid;
		}
		
		String pendingItemId = "";
		if(CommonUtil.stringNotNULL(itemids)){
			String[] itemIds = itemids.split(",");
			for(String itemId: itemIds){
				pendingItemId += "'"+itemId+"',";
			}
			if(pendingItemId!=null && pendingItemId.length()>0){
				pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
			}
			conditionSql += " and i.id  in ("+pendingItemId+")";
		}

		//favourite=1 查询已被收藏的办件
		String bigDepId= null;
		String deptIds = (String) getSession().getAttribute(MyConstants.DEPARMENT_ID);
		int pageSize = Integer.parseInt(StringUtils.isNotBlank(pagesize)?pagesize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
		int count = 0;
		List<DoFile> doFileList = null;
		if(StringUtils.isNotBlank(siteId)){
			bigDepId = siteId;
		}
		Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		
		if(StringUtils.isBlank(bigDepId)){
			if(StringUtils.isNotBlank(deptIds)){
				Department dept = departmentService.findSiteDept(deptIds);
				if(null != dept){
					bigDepId = dept.getDepartmentGuid();
				}
			}
			if(employee != null && StringUtils.isBlank(bigDepId)){
				String deptId = employee.getDepartmentGuid();
				Department dep = departmentService.findDepartmentById(deptId);
				if(dep != null){
					String superDeptId = dep.getSuperiorGuid();
					bigDepId = superDeptId;
				}else{
					System.out.println("获取部门失败！");
				}
			}else{
				if(employee == null){
					System.out.println("session中人员信息为空！");
				}
			}
		}
		if(CommonUtil.stringNotNULL(favourite)){
			String userId  =  employee.getEmployeeGuid();
			count = tableInfoService.getCountOfDoFileFavourites(bigDepId, conditionSql, userId);
			Paging.setPagingParams(getRequest(), pageSize, count);
			doFileList = tableInfoService.getDoFileFavouriteList(bigDepId, conditionSql, userId, Paging.pageIndex, Paging.pageSize);
		}else{
			if(StringUtils.isNotBlank(isShowTestDept) && isShowTestDept.equals("1")){
			}else{
				String testDeptId = SystemParamConfigUtil.getParamValueByParam("testDeptId");
				conditionSql += " and dep.department_guid != '" + testDeptId + "' ";
			}
			//conditionSql += " and p.user_uid='"+employee.getEmployeeGuid()+"' ";
			
			count = tableInfoService.getCountDoFiles(bigDepId, conditionSql);
			Paging.setPagingParams(getRequest(), pageSize, count);
			
			doFileList = tableInfoService.getDoFileList(bigDepId,conditionSql, Paging.pageIndex, Paging.pageSize);
			
		}
		
		if(doFileList!=null){
			for (DoFile doFile : doFileList) {
				//如果要显示文号，就到视图里查询
				if(("1").equals(isShowWH)){
					doFile.setWh(tableInfoService.findWh(doFile.getInstanceId()));
					getRequest().setAttribute("isShowWH", isShowWH);
				}
				
				if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
					WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
					if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
						 WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
						 doFile.setNodeName(node.getWfn_name());
					}
				}
				Integer myFileCount = tableInfoService.countMyProcess(doFile.getInstanceId(), employee.getEmployeeGuid());
				if(myFileCount>0){
					doFile.setIsCanRead("1");
				}else{
					doFile.setIsCanRead("0");
				}
				
				DofileFavourite fav = tableInfoService.getDofileFavouriteById(doFile.getDoFile_id(),employee.getEmployeeGuid());
				if(null != fav){
					doFile.setFavourite("1");
				}else{
					doFile.setFavourite("0");
				}
				
				doFile.setUrgency(tableInfoService.findJjcd(doFile.getInstanceId()));
			}
		}
		//if(StringUtils.isNotBlank(isShowExp) && "1".equals(isShowExp) && StringUtils.isNotBlank(isFgw) && "1".equals(isFgw)){
			tableInfoService.setDoFileApplyTime(doFileList);
			//Collections.sort(doFileList);
		//}
		getRequest().setAttribute("doFileList", doFileList);
		getRequest().setAttribute("wfTitle", title);
		getRequest().setAttribute("itemName", itemName);
		getRequest().setAttribute("itemid", itemid);
		getRequest().setAttribute("redirect", redirect);
		getRequest().setAttribute("favourite", favourite);
		//事项列表
		String depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
		WfItem item = new WfItem();
		if(StringUtils.isNotBlank(siteId)){
			item.setVc_ssbmid("'"+siteId+"'");
		}else{
			item.setVc_ssbmid(depId);
		}
		List<WfItem> items = itemService.getItemListForPage("", "", item, null, null);
		getRequest().setAttribute("myPendItems", items);
		
//		if(StringUtils.isNotBlank(isShowExp) && isShowExp.equals("1")){
			List<Department> depts = departmentService.queryDepartmentsBySuperdepIds("'"+bigDepId+"'");
			getRequest().setAttribute("depts", depts);
//		}
		String fgw_fw_item = SystemParamConfigUtil.getParamValueByParam("fgw_fw_item");
		String fgw_special_dept = SystemParamConfigUtil.getParamValueByParam("fgw_special_dept");
		if(StringUtils.isNotBlank(isFgw) && isFgw.equals("1")){
			List<Department> fgwDepts = departmentService.queryDepartmentsBySuperdepIds("'"+fgw_special_dept+"'");
			getRequest().setAttribute("fgwDepts", fgwDepts);
		}
		getRequest().setAttribute("fgw_fw_item", fgw_fw_item);
		getRequest().setAttribute("siteId", siteId);
		getRequest().setAttribute("pdfNameToWh", pdfNameToWh);
		
		getRequest().setAttribute("isShowExp", isShowExp);
		getRequest().setAttribute("isShowJjcd", isShowJjcd);
		getRequest().setAttribute("excelSpecial", excelSpecial);
		if(StringUtils.isNotBlank(isFgw) && "1".equals(isFgw)){
			getRequest().setAttribute("isFgw", isFgw);
		}
		
		if(type != null && "del".equals(type) ){
			return "getDoFileDelList";		//回收站
		}else{
			return "getDoFileList";			//
		}
	}
	
	/**
	 * 
	 * 描述：督办办件列表； 
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-2-29 下午3:21:41
	 */
	public String getDuBanList() {
		String redirect = getRequest().getParameter("redirect");
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemid = getRequest().getParameter("itemid");
		String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
		String commitTimeTo = getRequest().getParameter("commitTimeTo");
		String favourite = getRequest().getParameter("favourite");
		String isShowTestDept = getRequest().getParameter("isShowTestDept");
		getRequest().setAttribute("isAdmin",  getRequest().getParameter("isAdmin"));
		String pagesize = getRequest().getParameter("pageSize");
		String isShowExp = getRequest().getParameter("isShowExp");
		String siteId = getRequest().getParameter("siteId");
		String departId = getRequest().getParameter("departId");
		String isAdmin = getRequest().getParameter("isAdmin");
		
		// 办件删除列表新增了 参数 type = del
		String type = getRequest().getParameter("type");
		getRequest().setAttribute("type",  type);
		
		//新增标题是否展示文号字段
		String isShowWH = getRequest().getParameter("isShowWH");
		
		//高级搜索选项
		String title2 = getRequest().getParameter("wfTitle2");
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'","\\'\\'") : "";
		String commitTimeFrom3 = getRequest().getParameter("commitTimeFrom2");
		String commitTimeTo3 = getRequest().getParameter("commitTimeTo2");
		String itemType2 = getRequest().getParameter("itemType2");
		String status = getRequest().getParameter("status");

		String dubanType = getRequest().getParameter("dubanType");
		if(CommonUtil.stringNotNULL(dubanType)&&"1".equals(dubanType)){
			getRequest().setAttribute("dubanType", dubanType);
		}
		
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
				String conditionSql = "";// 查询条件
				if(StringUtils.isNotBlank(title2)){
					conditionSql = " and t.dofile_title like '%" + title2.trim() + "%' ";
					getRequest().setAttribute("wfTitle2", title2);
				}else{
					if (CommonUtil.stringNotNULL(title)) {
						conditionSql = " and t.dofile_title like '%" + title.trim() + "%' ";
					}
				}
				if (CommonUtil.stringNotNULL(itemName)) {
					conditionSql += " and i.vc_sxmc = '" + itemName + "' ";
				}
				
				if(StringUtils.isNotBlank(commitTimeFrom3)){
					commitTimeFrom3 = commitTimeFrom3.trim().replaceAll("'","\\'\\'");
					String commitTimeFrom4 = commitTimeFrom3 + " 00:00:00";
					conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom4+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeFrom2", commitTimeFrom3);
				}else{
					if (CommonUtil.stringNotNULL(commitTimeFrom)) {
						commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
						String commitTimeFrom2 = commitTimeFrom + " 00:00:00";
						conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom2+"','yyyy-mm-dd hh24:mi:ss') ";	
						getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
					}
				}
				if(StringUtils.isNotBlank(commitTimeTo3)){
					commitTimeTo3 = commitTimeTo3.trim().replaceAll("'","\\'\\'");
					String commitTimeTo4 = commitTimeTo3 + " 23:59:59";
					conditionSql +=" and t.dotime <= to_date('"+commitTimeTo4+"','yyyy-mm-dd hh24:mi:ss') ";	
					getRequest().setAttribute("commitTimeTo2", commitTimeTo3);
				}else{
					if (CommonUtil.stringNotNULL(commitTimeTo)) {
						commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
						String commitTimeTo2 = commitTimeTo + " 23:59:59";
						conditionSql +=" and t.dotime <= to_date('"+commitTimeTo2+"','yyyy-mm-dd hh24:mi:ss') ";	
						getRequest().setAttribute("commitTimeTo", commitTimeTo);
					}
				}
				
				String itemType = getRequest().getParameter("itemType");
				getRequest().setAttribute("itemType", itemType);
				
				if(StringUtils.isNotBlank(itemType2)){
					conditionSql +=" and i.vc_sxlx = '"+itemType2+"' ";
					getRequest().setAttribute("itemType2", itemType2);
				}else{
					if(StringUtils.isNotBlank(itemType)){
						//收文
						conditionSql +=" and i.vc_sxlx = '"+itemType+"' ";
					}
				}
				
				//在办办结
				if(StringUtils.isNotBlank(status)){
					if(status.equals("4")){//在办
						conditionSql += " and t.instanceid not in (select e.instanceid from t_wf_core_end_instanceid e)";
					}else if(status.equals("2")){//办结
						conditionSql += " and t.instanceid in (select e.instanceid from t_wf_core_end_instanceid e)";
					}
					getRequest().setAttribute("status", status);
				}
				
				//更具部门id查询
				if(StringUtils.isNotBlank(departId)){
					conditionSql += " and p.user_uid in (select e.employee_guid from zwkj_employee e where e.department_guid = '" + departId + "')";
					getRequest().setAttribute("departId", departId);
				}
				
				//视图字段
				String wh = getRequest().getParameter("wh");
				String lwdw = getRequest().getParameter("lwdw");
				wh = CommonUtil.stringNotNULL(wh) ? wh.replaceAll("'",
						"\\'\\'") : "";
				lwdw = CommonUtil.stringNotNULL(lwdw) ? lwdw.replaceAll("'",
						"\\'\\'") : "";
				
				
				if (CommonUtil.stringNotNULL(dubanType)) {
					conditionSql += " and qr.dblx='"+dubanType+"' ";
					getRequest().setAttribute("dubanType", dubanType);
				}
				
				
				if (CommonUtil.stringNotNULL(wh)) {
					wh = wh.trim();
					conditionSql += " and v.wh like '%" + wh.trim()+ "%' escape '\\'";
				}
				getRequest().setAttribute("wh", wh);
				if (CommonUtil.stringNotNULL(lwdw)) {
					lwdw = lwdw.trim();
					conditionSql += " and v.lwdw like '%" + lwdw.trim()+ "%' escape '\\'";
					getRequest().setAttribute("lwdw", lwdw);
				}
				
				String itemids = "";
				if(StringUtils.isNotBlank(siteId)){
					if(StringUtils.isNotBlank(itemid)){//去取两个itemId的交集
						itemids = this.getIntersectItemId(itemid, siteId);
					}else{
						itemids = itemService.getItemIdsBydeptId(siteId);
					}
				}else{
					itemids = itemid;
				}
				
				String pendingItemId = "";
				if(CommonUtil.stringNotNULL(itemids)){
					String[] itemIds = itemids.split(",");
					for(String itemId: itemIds){
						pendingItemId += "'"+itemId+"',";
					}
					if(pendingItemId!=null && pendingItemId.length()>0){
						pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
					}
					conditionSql += " and i.id  in ("+pendingItemId+")";
				}
				
				//favourite=1 查询已被收藏的办件
				String bigDepId= null;
				String deptIds = (String) getSession().getAttribute(MyConstants.DEPARMENT_ID);
				int pageSize = Integer.parseInt(StringUtils.isNotBlank(pagesize)?pagesize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
				int count = 0;
				List<DoFile> doFileList = null;
				if(StringUtils.isNotBlank(siteId)){
					bigDepId = siteId;
				}
				Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				if(StringUtils.isBlank(bigDepId)){
					if(StringUtils.isNotBlank(deptIds)){
						Department dept = departmentService.findSiteDept(deptIds);
						if(null != dept){
							bigDepId = dept.getDepartmentGuid();
						}
					}
					if(employee != null && StringUtils.isBlank(bigDepId)){
						String deptId = employee.getDepartmentGuid();
						Department dep = departmentService.findDepartmentById(deptId);
						if(dep != null){
							String superDeptId = dep.getSuperiorGuid();
							bigDepId = superDeptId;
						}else{
							System.out.println("获取部门失败！");
						}
					}else{
						if(employee == null){
							System.out.println("session中人员信息为空！");
						}
					}
				}
				
				conditionSql += " and t.instanceid in (select INSTANCEID from t_wf_core_duban_log) ";
				
				
				if(StringUtils.isNotBlank(isShowTestDept) && isShowTestDept.equals("1")){
				}else{
					String testDeptId = SystemParamConfigUtil.getParamValueByParam("testDeptId");
					conditionSql += " and dep.department_guid != '" + testDeptId + "' ";
				}
				
				if(CommonUtil.stringNotNULL(isAdmin)&&"1".equals(isAdmin)){
					
				}else{
					conditionSql += " and p.user_uid='"+employee.getEmployeeGuid()+"' ";
				}
				getRequest().setAttribute("isAdmin", isAdmin);
				count = tableInfoService.getCountDoFiles(bigDepId, conditionSql);
				Paging.setPagingParams(getRequest(), pageSize, count);
				doFileList = tableInfoService.getDoFileList(bigDepId,conditionSql, Paging.pageIndex, Paging.pageSize);
				
				if(doFileList!=null){
					for (DoFile doFile : doFileList) {
						//如果要显示文号，就到视图里查询
						if(("1").equals(isShowWH)){
							doFile.setWh(tableInfoService.findWh(doFile.getInstanceId()));
							getRequest().setAttribute("isShowWH", isShowWH);
						}
						
						if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
							WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
							if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
								WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
								doFile.setNodeName(node.getWfn_name());
							}
						}
						Integer myFileCount = tableInfoService.countMyProcess(doFile.getInstanceId(), employee.getEmployeeGuid());
						if(myFileCount>0){
							doFile.setIsCanRead("1");
						}else{
							doFile.setIsCanRead("0");
						}
						
						DofileFavourite fav = tableInfoService.getDofileFavouriteById(doFile.getDoFile_id(),employee.getEmployeeGuid());
						if(null != fav){
							doFile.setFavourite("1");
						}else{
							doFile.setFavourite("0");
						}
						
						String duban = tableInfoService.findDuBanListByInsId(doFile.getInstanceId());
						if(CommonUtil.stringNotNULL(duban)){
							doFile.setDubanType(duban);
						}
						String dubanTime = tableInfoService.findDuBanTimeByInsId(doFile.getInstanceId());
						if("null".equals(dubanTime)){
							dubanTime = "";
						}
						doFile.setDubanTime(dubanTime);
						
					}
				}
				
				getRequest().setAttribute("doFileList", doFileList);
				getRequest().setAttribute("wfTitle", title);
				getRequest().setAttribute("itemName", itemName);
				getRequest().setAttribute("itemid", itemid);
				getRequest().setAttribute("redirect", redirect);
				getRequest().setAttribute("favourite", favourite);
				//事项列表
				String depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
				WfItem item = new WfItem();
				if(StringUtils.isNotBlank(siteId)){
					item.setVc_ssbmid("'"+siteId+"'");
				}else{
					item.setVc_ssbmid(depId);
				}
				List<WfItem> items = itemService.getItemListForPage("", "", item, null, null);
				getRequest().setAttribute("myPendItems", items);
				
				if(StringUtils.isNotBlank(isShowExp) && isShowExp.equals("1")){
					List<Department> depts = departmentService.queryDepartmentsBySuperdepIds("'"+bigDepId+"'");
					getRequest().setAttribute("depts", depts);
				}
				getRequest().setAttribute("isShowExp", isShowExp);
				
				String isFgw = getRequest().getParameter("isFgw");
				if(StringUtils.isNotBlank(isFgw) && "1".equals(isFgw)){
					getRequest().setAttribute("isFgw", isFgw);
				}
				
				if(type != null && "del".equals(type) ){
					return "getDoFileDelList";		//回收站
				}else{
					return "getDuBanList";			//
				}
	}
	
	/**
	 * 打开办件详细,步骤记录中打开以前的表单
	 * 
	 * @return
	 */
	public String getDoFileDetail() {
		String workFlowId = getRequest().getParameter("workflowid");
		String instanceid = getRequest().getParameter("instanceid");
		String nodeId = getRequest().getParameter("nodeId");
		String processId = getRequest().getParameter("processId");
		String oldFormId = getRequest().getParameter("formId");
		// 打开办件详细标志位
		boolean dofile = true;
		// 第一步节点 (如果中途换表单，需修改)
		// WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
		// 当前节点所绑定的表单Id
		String formId = getRequest().getParameter("formId");
		// 读取所存储的对应字段关系
		List<FormTagMapColumn> tableNameLists = zwkjFormService
				.getTableNameByFormId(formId);
		// ========================列表类型=============================//
		List<FormTagMapColumn> haveLists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameHaveList = new ArrayList<String>();
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 列表和非列表类型的分开存入list中
		for (FormTagMapColumn ft : tableNameLists) {
			if (ft.getListId() != null && !("").equals(ft.getListId())) {
				haveLists.add(ft);
			} else {
				lists.add(ft);
			}
		}
		// 读取两个list中的tableName(去重之后的)
		for (int i = 0, n = haveLists.size(); i < n; i++) { // 列表型
			if (!tableNameHaveList.contains(haveLists.get(i).getTablename())) {
				tableNameHaveList.add(haveLists.get(i).getTablename());
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			if (!tableNameList.contains(lists.get(i).getTablename())) {
				tableNameList.add(lists.get(i).getTablename());
			}
		}
		// 标签属性名
		StringBuffer tagNameForm = new StringBuffer();
		if (tableNameList.size() != 0 && !("").equals(tableNameList)
				&& tableNameList != null) {
			for (String tableName : tableNameList) {
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService
						.getFormTagMapColumnByFormId(oldFormId, formId, tableName, 2,"");
				// 取出标签属性名
				for (FormTagMapColumn ftmc : ftmcList) {
					tagNameForm.append(ftmc.getFormtagname() + ",");
				}
			}
		}
		// 查询表单的值
		String value = this.saveForm(formId, 2, instanceid, "", nodeId,
				workFlowId,"","","");
		String tagIds = tableInfoService.getCommentTagIds(instanceid);
		// getRequest().setAttribute("nodes", nodes);
		getRequest().setAttribute("luruTagIds", tagIds);
		// 查找对应的表单
		String formLocation = workflowBasicFlowService
				.findFormLocaltion(formId);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("formLocation", formLocation);
		getRequest().setAttribute("instanceId", instanceid);
		getRequest().setAttribute("value", value.replace("'", "‘").replace("\"", "“").replace("\r\n", ""));
		getRequest().setAttribute("dofile", dofile);
		getRequest().setAttribute("tagName",
				tagNameForm.substring(0, tagNameForm.length() - 1));
		return "doFileDetail";
	}

	/**
	 * 重定向
	 */
	@SuppressWarnings("unchecked")
	public String getAllnodes() {
		String workFlowId = getRequest().getParameter("workFlowId");
		List<WfNode> nodes = workflowBasicFlowService.getWfNodeList(workFlowId);
		// getRequest().setAttribute("nodes", nodes);
		// return "redirect";
		// ajax 返回结果
		List<Map> list = new ArrayList<Map>();
		for (WfNode node : nodes) {
			Map map = new HashMap();
			map.put("wfn_id", node.getWfn_id());
			map.put("wfn_name", node.getWfn_name());
			list.add(map);
		}
		try {
			getResponse().getWriter().print(JSONArray.fromObject(list));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public String toAssist() {
		String type = getRequest().getParameter("type");
		if (CommonUtil.stringNotNULL(type)) {
			getRequest().setAttribute("type", type);
		}
		return "assist";
	}

	/**
	 * 辅助功能展示人员树
	 * 
	 * @return
	 */
	public String showAssistTree() {
		String type = getRequest().getParameter("type");
		if (CommonUtil.stringNotNULL(type)) {
			getRequest().setAttribute("type", type);
		}
		// TODO 返回已选人员

		return "departmentTree";
	}

	
	public String showDeptTree(){
		return "departmentTree1";
	}
	/**
	 * 保存辅助功能所选人员，添加相关数据
	 * 
	 * @return
	 */
	public String saveAssistUser() {
		String type = getRequest().getParameter("type");
		String msg = getRequest().getParameter("msg");
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String processId = getRequest().getParameter("processId");

		// String inneruserid=getRequest().getParameter("id");

		// 先删除原先关联数据
		// groupService.deleteByInnerUserId(inneruserid);

		// 新增新关联数据
		String employeeinfo = getRequest().getParameter("employeeinfo");
		if (CommonUtil.stringNotNULL(employeeinfo)) {
			String[] employeeinfos = employeeinfo.split("#");
			if (employeeinfos != null) {
				for (int i = 0; i < employeeinfos.length; i++) {
					String[] strs = employeeinfos[i].split("\\|");
					if (strs != null && strs.length == 3) {
						if ("xs".equals(type)) {
							// 协商
							WfConsult consult = new WfConsult();
							consult.setFromUserId(emp.getEmployeeGuid());
							consult.setFromUserName(emp.getEmployeeName());
							consult.setToUserId(strs[0]);
							consult.setToUserName(strs[1]);
							consult.setIsRead("false");
							consult.setIsReplied("false");
							consult.setIsShow("true");
							consult.setMessage(msg);
							consult.setRelateId(null);
							consult.setSendTime(new Date());

							tableInfoService.saveConsult(consult);
						} else if ("cs".equals(type)) {
							// 抄送
							if (CommonUtil.stringNotNULL(processId)) {
								WfProcess process = tableInfoService
										.getProcessById(processId);
								WfProcess dupProcess = new WfProcess();
								dupProcess.setWfProcessUid(UuidGenerator
										.generate36UUID());
								dupProcess.setWfInstanceUid(process
										.getWfInstanceUid());
								dupProcess.setNodeUid(process.getNodeUid());
								dupProcess.setProcessTitle(process
										.getProcessTitle());
								dupProcess.setItemId(process.getItemId());
								dupProcess.setFormId(process.getFormId());
								dupProcess.setFromUserId(emp.getEmployeeGuid());
								dupProcess.setUserUid(strs[0]);
								dupProcess.setOwner(process.getOwner());
								dupProcess.setApplyTime(new Date());
								dupProcess.setIsOver(Constant.OVER);
								dupProcess.setIsEnd(process.getIsEnd());
								dupProcess.setWfUid(process.getWfUid());
								dupProcess.setIsShow(1);
								dupProcess.setStepIndex(process.getStepIndex());
								dupProcess.setIsDuplicate("true"); // 抄送标识
								if (!tableInfoService.isDuplicated(dupProcess)) {// 是否已抄送过
									tableInfoService.saveProcess(dupProcess);
								} else {
									System.out.println(strs[1] + " 已抄送过，跳过。。。");
								}

							}
						} else if ("wt".equals(type)) {
							// 委托
							if (CommonUtil.stringNotNULL(processId)) {
								WfProcess process = tableInfoService
										.getProcessById(processId);
								WfProcess dupProcess = new WfProcess();
								dupProcess.setWfProcessUid(UuidGenerator
										.generate36UUID());
								dupProcess.setWfInstanceUid(process
										.getWfInstanceUid());
								dupProcess.setNodeUid(process.getNodeUid());
								dupProcess.setProcessTitle(process
										.getProcessTitle());
								dupProcess.setItemId(process.getItemId());
								dupProcess.setFormId(process.getFormId());
								dupProcess.setFromUserId(process
										.getFromUserId());
								dupProcess.setUserUid(strs[0]);
								dupProcess.setOwner(process.getOwner());
								dupProcess.setApplyTime(new Date());
								dupProcess.setIsOver(Constant.NOT_OVER); //
								dupProcess.setIsEnd(process.getIsEnd());
								dupProcess.setIsMaster(process.getIsMaster());
								dupProcess.setWfUid(process.getWfUid());
								dupProcess.setIsShow(1);
								dupProcess.setStepIndex(process.getStepIndex());
								dupProcess.setEntrustUserId(emp
										.getEmployeeGuid()); // 委托人
								if (!tableInfoService.hasEntrust(dupProcess)) {// 是否已委托过
									tableInfoService.saveProcess(dupProcess);
								} else {
									System.out.println(strs[1] + " 已委托过。。。");
								}

							}
						}
					}
				}
			}
		}

		return null;
	}

	/**
	 * 辅助功能--抄送事项列表
	 * 
	 * @return
	 */
	public String getDuplicateList() {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);

		// 查询条件
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = "";
		if (CommonUtil.stringNotNULL(title)
				|| CommonUtil.stringNotNULL(itemName)) {
			conditionSql = "and p.process_title like '%" + title
					+ "%' and i.vc_sxmc like '%" + itemName + "%'";
		}
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getCountOfDuplicate(conditionSql,
				emp.getEmployeeGuid());
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<Pending> list = tableInfoService.getDuplicateList(conditionSql,
				emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("list", list);

		return "duplicateList";
	}

	/**
	 * 删除抄送(假删除)
	 * 
	 * @return
	 */
	public String deleteDuplicate() {
		String ids = getRequest().getParameter("ids");
		if (CommonUtil.stringNotNULL(ids)) {
			ids = "'" + ids + "'";
			ids = ids.replaceAll(",", "','");
			tableInfoService.deleteDuplicate(ids);
		}
		return getDuplicateList();
	}

	/***************************** 协商 begin ***************************/
	/**
	 * 得到协商信息列表
	 * 
	 * @return
	 */
	public String getConsultList() {
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String msg = getRequest().getParameter("message");
		if (CommonUtil.stringNotNULL(msg)) {
			msg = msg.replaceAll("'", "\\'\\'");
		}
		String condition = "";
		if (CommonUtil.stringNotNULL(msg)) {
			condition += " and message like '%" + msg + "%' ";
		}
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getCountConsults(userId, condition);
		Paging.setPagingParams(getRequest(), pageSize, count);

		List<WfConsult> list = tableInfoService.getConsultList(userId,
				condition, Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("consultList", list);
		return "consultList";
	}

	/**
	 * 得到未读协商信息列表
	 * 
	 * @return
	 */
	public String getNotReadConsultList() {
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String condition = " and isRead='false' ";
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getCountConsults(userId, condition);
		Paging.setPagingParams(getRequest(), pageSize, count);

		List<WfConsult> list = tableInfoService.getConsultList(userId,
				condition, Paging.pageIndex, Paging.pageSize);
		try {
			getResponse().getWriter().print(JSONArray.fromObject(list));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 阅读协商信息
	 * 
	 * @return
	 */
	public String readConsult() {
		String id = getRequest().getParameter("id");
		// 更新为已读
		tableInfoService.updateConsultRead(id);
		WfConsult consult = tableInfoService.getConsultById(id);
		getRequest().setAttribute("consultInfo", consult);

		return "consultInfo";
	}

	/**
	 * “我知道了” 按钮
	 * 
	 * @return
	 */
	public String setRead() {
		String id = getRequest().getParameter("id");
		// 更新为已读
		tableInfoService.updateConsultRead(id);

		return null;
	}

	/**
	 * 打开回复协商信息页面
	 * 
	 * @return
	 */
	public String replyConsult() {
		String id = getRequest().getParameter("id");
		// 更新为已读
		tableInfoService.updateConsultRead(id);
		WfConsult consult = tableInfoService.getConsultById(id);
		getRequest().setAttribute("consultInfo", consult);

		return "consultReply";
	}

	/**
	 * 发送回复信息
	 * 
	 * @return
	 */
	public String sendReply() {
		String relateId = getRequest().getParameter("relateId");
		String message = getRequest().getParameter("msg");
		String userId = getRequest().getParameter("userId");
		String userName = getRequest().getParameter("userName");
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		// 更新为已回复
		tableInfoService.updateConsultReplied(relateId);

		// 新增回复消息
		WfConsult consult = new WfConsult();
		consult.setFromUserId(emp.getEmployeeGuid());
		consult.setFromUserName(emp.getEmployeeName());
		consult.setToUserId(userId);
		consult.setToUserName(userName);
		consult.setIsRead("false");
		consult.setIsReplied("false");
		consult.setIsShow("true");
		consult.setMessage(message);
		consult.setRelateId(relateId);
		consult.setSendTime(new Date());
		tableInfoService.saveConsult(consult);

		return null;
	}

	public String deleteConsult() {
		String ids = getRequest().getParameter("ids");
		if (CommonUtil.stringNotNULL(ids)) {
			ids = "'" + ids + "'";
			ids = ids.replaceAll(",", "','");
			tableInfoService.deleteConsult(ids);
		}

		return getConsultList();
	}

	/***************************** 协商 end ***************************/

	public String toDepartmentJsp1() {
		String routType = getRequest().getParameter("routType");
		String nodeId = getRequest().getParameter("nodeId");
		String exchange = getRequest().getParameter("exchange");
		String isTreeAll = getRequest().getParameter("isTreeAll");
		
		String mc = getRequest().getParameter("mc");
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("mc", mc);
		getRequest().setAttribute("routType", routType);
		getRequest().setAttribute("exchange", exchange);
		if(nodeId == null || "".equals(nodeId)){
			getRequest().setAttribute("type", "dept");
		}else{
			getRequest().setAttribute("type", "");
		}
			
		if ("1".equals(isTreeAll)) 
		{
			return "treeJsp";
		}
		
		return "toDepartmentJsp1";
	}

	
	public String toDepartmentJsp2() {
		String ids = getRequest().getParameter("ids");
		List<Employee> employees = employeeService.getEmployeeList("'"+ids.replace(",", "','")+"'");
		String employeesString = "";
		String employeesName="";
		for(int i=0;i<employees.size();i++){
			if(Utils.isNotNullOrEmpty(employeesString)){
				employeesString +="&";
			}
			if(Utils.isNotNullOrEmpty(employeesName)){
				employeesName +="&";
			}
			Employee employee = employees.get(i);
			employeesString+=(employee.getEmployeeGuid()+"|"+employee.getEmployeeName()+"|"+employee.getDepartmentDn());
			employeesName +=(employee.getEmployeeName()+"{"+employee.getDepartmentDn()+"}");
		}
		getRequest().setAttribute("employees", employeesString);
		getRequest().setAttribute("employeeName", employeesName);
		return "toDepartmentJsp2";
	}
	public String toDepartmentJsp() {
		String routType = getRequest().getParameter("routType");
		String userList = getRequest().getParameter("userList");
		getRequest().setAttribute("userList", userList);
		getRequest().setAttribute("routType", routType);
		String mc = getRequest().getParameter("mc");
		getRequest().setAttribute("mc", mc);
		
		return "toDepartmentJsp";
	}

	/**
	 * 个人信息
	 * 
	 * @return
	 */
	public String personMessage() {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userName = emp.getEmployeeName();
		String deptName = tableInfoService.findDeptNameByEmpId(emp);
		Date login_date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm");
		// 事项列表
		List<WfItem> itemList = tableInfoService.findItemList();
		// 临时存储类,所属权限下的事项(节点所包含的人员组里有当前用户)
		List<ItemXccEmp> iteList = new ArrayList<ItemXccEmp>();
		String userId = "";
		for (WfItem item : itemList) {
			int already = 0;// 标志位，如果节点的某一个组里有当前用户(already!=0)，即跳出节点循环，查找下一个事项（每次执行需初始化）
			List<WfNode> nodes = workflowBasicFlowService.getWfNodeList(item
					.getLcid());
			for (WfNode wfNode : nodes) {
				if (already == 0) {// 如果组内没有当前人，或第一次循环
					if (!("").equals(wfNode) && wfNode != null) {
						// 获取人员组的id
						String wfnEmpGroup = wfNode.getWfn_staff();
						// 获取人员组的人员信息
						List<InnerUserMapEmployee> innerUserList = groupService.getListByInnerUserId(wfnEmpGroup,null,"");
						for (InnerUserMapEmployee innerUserId : innerUserList) {
							userId = innerUserId.getEmployee_id();// 组内的人员
							if (userId.equals(emp.getEmployeeGuid())) {
								ItemXccEmp itemXccEmp = new ItemXccEmp();
								itemXccEmp.setWfItem(item);
								// 获取权限下已经设置的人员
								PersonMessage pm = tableInfoService
										.findXccNamesByItemId(item.getId(),
												emp.getEmployeeGuid());
								if (pm != null) {
									itemXccEmp.setEmpName(pm.getXccempName());
								} else {
									itemXccEmp.setEmpName("");
								}
								iteList.add(itemXccEmp);
								already++;
								break;
							}
						}
					}
				} else {
					break;
				}
			}
		}
		getRequest().setAttribute("userName", userName);
		getRequest().setAttribute("deptName", deptName);
		getRequest().setAttribute("login_date", sdf.format(login_date));
		getRequest().setAttribute("iteList", iteList);
		return "personMessage";
	}

	/**
	 * 辅助功能展示人员树
	 * 
	 * @return
	 */
	public String showPersonMessTree() {
		return "showPersonMessTree";
	}

	/**
	 * 保存个人信息中抄送所选人员，添加相关数据
	 * 
	 * @return
	 * @throws Exception
	 */
	public void saveXccUserOfPerMes() throws Exception {
		// 当前人员
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		// 所选抄送人员id
		String employeeinfo = getRequest().getParameter("employeeinfo");
		// 事项id
		String itemId = getRequest().getParameter("itemId");
		String[] employeeinfos = employeeinfo.split("#");
		String xccEmpIds = "";
		String xccEmpNames = "";
		if (employeeinfos != null) {
			for (int i = 0; i < employeeinfos.length; i++) {
				String[] strs = employeeinfos[i].split("\\|");
				if (strs != null && strs.length == 3) {
					xccEmpIds += strs[0] + ",";
					xccEmpNames += strs[1] + ",";
				}
			}
			// 获取权限下已经设置的人员
			PersonMessage pm = tableInfoService.findXccNamesByItemId(itemId,
					emp.getEmployeeGuid());
			if (pm != null) {// 已经存在
				pm.setEmployeeId(emp.getEmployeeGuid());
				if(xccEmpIds!=null && !xccEmpIds.equals("")){
					pm.setXccempId(xccEmpIds.substring(0, xccEmpIds.length() - 1));
					pm.setXccempName(xccEmpNames.substring(0, xccEmpNames.length() - 1));
					pm.setItemId(itemId);
					tableInfoService.updatePerMes(pm);
				}else{
					tableInfoService.deletePerMes(pm.getPer_mess_id());
				}
				try {
					getResponse().getWriter().print("yes");
				} catch (Exception e) {
					getResponse().getWriter().print("no");
				}
			} else {// 第一次设置
				pm = new PersonMessage();
				pm.setEmployeeId(emp.getEmployeeGuid());
				pm.setXccempId(xccEmpIds.substring(0, xccEmpIds.length() - 1));
				pm.setXccempName(xccEmpNames.substring(0,
						xccEmpNames.length() - 1));
				pm.setItemId(itemId);
				try {
					tableInfoService.savePerMes(pm);
					getResponse().getWriter().print("yes");
				} catch (Exception e) {
					getResponse().getWriter().print("no");
				}
			}
		}
	}

	/**
	 * 历程中查看手写签批意见
	 * 
	 */
	public String showHandWrite() {
		String tagId = getRequest().getParameter("tagId");
		String instanceId = getRequest().getParameter("instanceId");
		String processId = getRequest().getParameter("processId");
		getRequest().setAttribute("tagId", tagId);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("processId", processId);
		return "showHandWrite";
	}

	/**
	 * 添加传阅人员
	 */
	public void addPersonName() {
		String instanceId = getRequest().getParameter("instanceId");
		String itemId = getRequest().getParameter("itemId");
		// 查找是否已经设置名单
		List<WfCyName> wcnPersonNameList = tableInfoService
				.findWfCyPersonNameByInstanceId(instanceId);
		// 传阅人员名单
		String cyPersonName = getRequest().getParameter("cyPersonName");
		try {
			if (wcnPersonNameList != null && wcnPersonNameList.size() != 0) {
				// 先删后增
				for (WfCyName wfCyName : wcnPersonNameList) {
					tableInfoService
							.delelteWfCyPersonName(wfCyName, instanceId);
				}
			}
			String personNamestoJsp = "";
			if (CommonUtil.stringNotNULL(cyPersonName)) {
				String[] cyPersonNames = cyPersonName.split("#");
				if (cyPersonNames != null) {
					for (int i = 0, n = cyPersonNames.length; i < n; i++) {
						String[] strs = cyPersonNames[i].split("\\|");
						if (strs != null && strs.length == 3) {
							WfCyName wfCyName = new WfCyName();
							wfCyName.setInstanceId(instanceId);
							wfCyName.setItemId(itemId);
							wfCyName.setPersonName(cyPersonName);
							wfCyName.setEmployeeId(strs[0]);
							wfCyName.setEmployeeName(strs[1]);
							wfCyName.setEmployeeShortDn(strs[2]);
							wfCyName.setSort((i + 1) + "");
							tableInfoService.saveWfCyName(wfCyName);
							personNamestoJsp += strs[1] + ",";
						}
					}
				}
			}
			if (personNamestoJsp.length() > 0) {
				personNamestoJsp = personNamestoJsp.substring(0,
						personNamestoJsp.length() - 1);
			}
			getResponse().getWriter().print(personNamestoJsp);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 添加传阅处室
	 */
	public void addOfficeName() {
		String instanceId = getRequest().getParameter("instanceId");
		String itemId = getRequest().getParameter("itemId");
		// 查找是否已经设置名单
		List<WfCyName> wcnOfficeNameList = tableInfoService
				.findWfCyOfficeNameByInstanceId(instanceId);
		// 传阅处室名单
		String cyOfficeName = getRequest().getParameter("cyOfficeName");
		try {
			if (wcnOfficeNameList != null && wcnOfficeNameList.size() != 0) {
				// 先删后增
				for (WfCyName wfCyName : wcnOfficeNameList) {
					tableInfoService
							.delelteWfCyOfficeName(wfCyName, instanceId);
				}
			}
			String officeNamestoJsp = "";
			if (CommonUtil.stringNotNULL(cyOfficeName)) {
				String[] cyOfficeNames = cyOfficeName.split("#");
				if (cyOfficeNames != null) {
					for (int i = 0, n = cyOfficeNames.length; i < n; i++) {
						String[] strs = cyOfficeNames[i].split("\\|");
						WfCyName wfCyName = new WfCyName();
						wfCyName.setInstanceId(instanceId);
						wfCyName.setItemId(itemId);
						wfCyName.setOfficeName(cyOfficeName);
						wfCyName.setDeptId(strs[0]);
						wfCyName.setDeptName(strs[1]);
						wfCyName.setSort((i + 1) + "");
						tableInfoService.saveWfCyName(wfCyName);
						officeNamestoJsp += strs[1] + ",";
					}
				}
			}
			if (officeNamestoJsp.length() > 0) {
				officeNamestoJsp = officeNamestoJsp.substring(0,
						officeNamestoJsp.length() - 1);
			}
			getResponse().getWriter().print(officeNamestoJsp);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 读取传阅人员列表
	 * 
	 * @return
	 */
	public String cyPersonNameList() {
		String instanceId = getRequest().getParameter("instanceId");
		// 传阅人员名单
		List<WfCyName> wcnList = tableInfoService
				.findWfCyPersonNameByInstanceId(instanceId);
		// 人员数组
		List<WfCyName> personNameList = new ArrayList<WfCyName>();
		if (wcnList != null && wcnList.size() != 0) {
			for (WfCyName wcn : wcnList) {
				if (wcn.getPersonName() != null
						&& !("").equals(wcn.getPersonName())) {
					personNameList.add(wcn);
				}
			}
		}
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("personNameList", personNameList);

		return "cyPersonNameList";
	}

	/**
	 * 读取传阅处室列表
	 * 
	 * @return
	 */
	public String cyOfficeNameList() {
		String instanceId = getRequest().getParameter("instanceId");
		// 传阅处室名单
		List<WfCyName> wcnList = tableInfoService
				.findWfCyOfficeNameByInstanceId(instanceId);
		// 处室数组
		List<WfCyName> officeNameList = new ArrayList<WfCyName>();
		if (wcnList != null && wcnList.size() != 0) {
			for (WfCyName wcn : wcnList) {
				if (wcn.getOfficeName() != null
						&& !("").equals(wcn.getOfficeName())) {
					officeNameList.add(wcn);
				}
			}
		}
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("officeNameList", officeNameList);

		return "cyOfficeNameList";
	}

	/**
	 * 打开待办时,显示传阅名单
	 */
	public void getCyName() {
		String instanceId = getRequest().getParameter("instanceId");
		// 传阅人员名单
		List<WfCyName> wcnPersonList = tableInfoService
				.findWfCyPersonNameByInstanceId(instanceId);
		// 传阅处室名单
		List<WfCyName> wcnOfficeList = tableInfoService
				.findWfCyOfficeNameByInstanceId(instanceId);
		String personNames = "";
		String officeNames = "";
		try {
			// 传阅的所有人员
			if (wcnPersonList != null && wcnPersonList.size() != 0) {
				for (WfCyName wcn : wcnPersonList) {
					personNames += wcn.getEmployeeName() + ",";
				}
			}
			if (personNames.length() > 0) {
				personNames = personNames
						.substring(0, personNames.length() - 1);
			}
			// 传阅的所有处室
			if (wcnOfficeList != null && wcnOfficeList.size() != 0) {
				for (WfCyName wcn : wcnOfficeList) {
					officeNames += wcn.getDeptName() + ",";
				}
			}
			if (officeNames.length() > 0) {
				officeNames = officeNames
						.substring(0, officeNames.length() - 1);
			}
			getResponse().getWriter().print(personNames + ";" + officeNames);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 返回指定的节点
	 * 
	 * @return
	 */
	public String backOneNode() {
		String workflowId = getSession().getAttribute(
				MyConstants.workflow_session_id) != null ? getSession()
				.getAttribute(MyConstants.workflow_session_id).toString()
				: null;
		// 查找当前流程 的所有节点
		List<WfNode> nodes = workflowBasicFlowService.getWfNodeList(workflowId);
		// 查询已经设置的节点list
		List<WfBackNode> wfBackNodeList = workflowBasicFlowService
				.getBackNodeListByWfId(workflowId);

		getRequest().setAttribute("nodes", nodes);
		getRequest().setAttribute("workflowId", workflowId);
		getRequest().setAttribute("wfBackNodeList", wfBackNodeList);
		return "backOneNode";
	}

	/**
	 * 保存指定节点关系
	 * 
	 * @throws IOException
	 */
	public void saveBackNode() throws IOException {
		// 起始节点id
		String fromNodeId = getRequest().getParameter("fromNodeId");
		// 指定节点id
		String toNodeId = getRequest().getParameter("toNodeId");
		// 流程id
		String workflowId = getRequest().getParameter("workflowId");
		// 起始节点name
		String fromNodeName = getRequest().getParameter("fromNodeName");
		// 指定节点name
		String toNodeName = getRequest().getParameter("toNodeName");
		List<WfBackNode> wfbackNodes = workflowBasicFlowService
				.getBackNodeListByWfId(workflowId);
		int isExist = 0; // 判断是否已经存在起始点的标志位
		if (wfbackNodes.size() != 0 && wfbackNodes != null) {
			for (WfBackNode wfbn : wfbackNodes) {
				if ((fromNodeId).equals(wfbn.getFromNodeId())) {
					isExist = 1;
					getResponse().getWriter().print("no");
					break;
				}
			}
		}
		if (isExist == 0) {
			// 入库
			WfBackNode wfBackNode = new WfBackNode();
			wfBackNode.setFromNodeId(fromNodeId);
			wfBackNode.setToNodeId(toNodeId);
			wfBackNode.setWorkflowId(workflowId);
			wfBackNode.setFromNodeName(fromNodeName);
			wfBackNode.setToNodeName(toNodeName);
			wfBackNode.setDateTime(new Date());
			try {
				workflowBasicFlowService.save(wfBackNode);
				getResponse().getWriter().print("yes");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 保存指定节点关系
	 */
	public void deleteBackNode() {
		// 流程id
		String workflowId = getRequest().getParameter("workflowId");
		// 主键Id
		String wfBackNodeId = getRequest().getParameter("wfBackNodeId");
		try {
			workflowBasicFlowService.delete(workflowId, wfBackNodeId);
			getResponse().getWriter().print("yes");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 更新指定节点信息
	 * 
	 * @throws IOException
	 */
	public void updateBackNode() throws IOException {
		// 主键id
		String backNodeId = getRequest().getParameter("backId");
		// 起始节点id
		String fromNodeId = getRequest().getParameter("fromNodeId");
		// 指定节点id
		String toNodeId = getRequest().getParameter("toNodeId");
		// 流程id
		String workflowId = getRequest().getParameter("workflowId");
		// 起始节点name
		String fromNodeName = getRequest().getParameter("fromNodeName");
		// 指定节点name
		String toNodeName = getRequest().getParameter("toNodeName");
		int isExist = 0; // 判断是否已经存在起始点的标志位
		WfBackNode wfbackNode = workflowBasicFlowService
				.getBackNodeByBackNodeId(workflowId, backNodeId);
		List<WfBackNode> wfbackNodes = workflowBasicFlowService
				.getBackNodeListByWfId(workflowId);
		if (wfbackNodes.size() != 0 && wfbackNodes != null) {
			// 移除当前的
			for (WfBackNode wfbn : wfbackNodes) {
				if ((wfbackNode.getId()).equals(wfbn.getId())) {
					wfbackNodes.remove(wfbn);
					break;
				}
			}
			// 循环剩下的
			for (WfBackNode wfbn : wfbackNodes) {
				if ((fromNodeId).equals(wfbn.getFromNodeId())) {
					isExist = 1;
					getResponse().getWriter().print("no");
					break;
				}
			}
		}
		if (isExist == 0) {
			// 入库--更新
			wfbackNode.setFromNodeId(fromNodeId);
			wfbackNode.setToNodeId(toNodeId);
			wfbackNode.setWorkflowId(workflowId);
			wfbackNode.setFromNodeName(fromNodeName);
			wfbackNode.setToNodeName(toNodeName);
			try {
				workflowBasicFlowService.update(wfbackNode);
				getResponse().getWriter().print("yes");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 选择车辆
	 * 
	 * @return
	 */
	public String chooseCarNumber() {
		// String cars = getRequest().getParameter("cars");
		String cars = getSession().getAttribute("cars").toString();
		Map<String, String> carList = new HashMap<String, String>();
		String[] allcar = cars.split("#");
		for (String str : allcar) {
			carList.put(str.split(",")[0], str.split(",")[1]);
		}
		getRequest().setAttribute("carList", carList);

		return "chooseCarNumber";
	}

	// ===============================================移 动 端 接
	// 口========start================================================
	/**
	 * 获取待办---门户
	 * 
	 * @throws IOException
	 */
	public void getTodoListOfWebNew() throws IOException {
		// 当前人员
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String itemIds = getRequest().getParameter("itemIds");

		String column = getRequest().getParameter("column");
		String pagesize = getRequest().getParameter("pagesize");
		String url = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		String callBack = getRequest().getParameter("callback");
		String out = "";
		out = pendingService.getTodoForPortalNew(userId, column, pagesize, url,
				callBack, itemIds);
		getResponse().getWriter().write(out);
		getResponse().getWriter().close();
	}
	
	public void getTodoListOfWeb() throws IOException {
		// 当前人员
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		String itemIds = getRequest().getParameter("itemIds");

		String column = getRequest().getParameter("column");
		String pagesize = getRequest().getParameter("pagesize");
		String url = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		String callBack = getRequest().getParameter("callback");
		String out = "";
		out = pendingService.getTodoForPortal(userId, column, pagesize, url,
				callBack, itemIds).toString();
		getResponse().getWriter().write(out);
		getResponse().getWriter().close();
	}

	/**
	 * 获取当前人待办有几种类型
	 */
	public void getTypeOfToDoList() {
		JSONObject jsonObject = getJSONObject();
		// 用户id
		String userId = (String) jsonObject.get("userId");
		// 当前人员
		// Employee emp = (Employee)
		// getSession().getAttribute(MyConstants.loginEmployee);
		// String userId = emp.getEmployeeGuid();
		List<ItemType> typeList = new ArrayList<ItemType>();
		// 获取配置文件中的事项管理的所有类型
		String itemType = SystemParamConfigUtil
				.getParamValueByParam("itemTypes");
		if (itemType != null && !("").equals(itemType)) {
			String[] itemTypes = itemType.split(";");
			// 待办里所有的事项类型
			List<String> pendingTypeList = pendingService
					.getTypeListOfPending(userId);
			for (String pendType : pendingTypeList) {
				ItemType it = new ItemType();
				for (int i = 0; i < itemTypes.length; i++) {
					if (itemTypes[i].split(":")[0].equals(pendType)) {
						it.setType(pendType);
						it.setName(itemTypes[i].split(":")[1]);
						typeList.add(it);
						break;
					}
				}
			}
		}
		// 打开流
		PrintWriter out = null;
		HttpServletResponse response = getResponse();
		response.setCharacterEncoding("utf-8");
		String outStr = "";
		try {
			out = getResponse().getWriter();
			outStr = JSONArray.fromObject(typeList).toString();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 输出json
		out.print(outStr);
		out.close();
	}
	
	
	/**
	 * 
	 * 描述：获取手机端接口数据 (0:待办,被督办列表;1:已办未办结;2:待收;3:收藏夹;4:已办结;5:通知公告;6:关注列表;7:督办列表;8:前置机待收;9:前置机已收;10:下级已收列表;11:传阅列表;12:已阅传阅列表)
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:42:03
	 */
	public void getTodoListOfMobile() {
		AccessLog accessLog = new AccessLog();
		Date startDate = new Date();
		accessLog.setAccessDate(startDate);
		// 打开流
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String itemIds = getRequest().getParameter("itemIds");
			String title = getRequest().getParameter("title");
			String type = "";
			String state = "";
			String userId = "";
			String siteId = "";
			String clientType = "";
			String nodeId = "";
			Integer column = null;
			Integer pagesize = null;
			String mobileUrl = SystemParamConfigUtil.getParamValueByParam("mobileUrl");
			String containsMail =  SystemParamConfigUtil.getParamValueByParam("containsMail");			//是否包含邮件等内容信息
			String serverUrl = mobileUrl+ getRequest().getContextPath();
			if(jsonObject != null){
				title =(String) jsonObject.get("title");			// 标题 
				itemIds = (String) jsonObject.get("itemIds");
				type= (String) jsonObject.get("type");
				userId = (String) jsonObject.get("userId");					// 用户id
				column = (String) jsonObject.get("column") == null ? 0
						: Integer.parseInt((String) jsonObject.get("column"));// 页数ag
				pagesize = (String) jsonObject.get("pagesize") == null ? 10
						: Integer.parseInt((String) jsonObject.get("pagesize"));// 页面显示的条数
				siteId = (String) jsonObject.get("siteId");//站点id
				clientType = (String)jsonObject.get("clientType");
				nodeId = (String)jsonObject.get("nodeId");
			}else{
				title = getRequest().getParameter("title");			// 标题 
				itemIds = getRequest().getParameter("itemIds");
				type= getRequest().getParameter("type");
				userId =  getRequest().getParameter("userId");		// 用户id
				column =  getRequest().getParameter("column") == null ? 0
						: Integer.parseInt((String) getRequest().getParameter("column"));	// 页数ag
				pagesize = (String)  getRequest().getParameter("pagesize") == null ? 10
						: Integer.parseInt((String)  getRequest().getParameter("pagesize"));// 页面显示的条数
				siteId =  getRequest().getParameter("siteId");//站点id
				clientType = getRequest().getParameter("clientType");
				nodeId = getRequest().getParameter("nodeId");
			}
			
			accessLog.setClientType(clientType);
			accessLog.setUserid(userId);
			accessLog.setMethodName("getTodoListOfMobile--"+type);
			String itemids = "";
			if(StringUtils.isNotBlank(siteId)){
				if(StringUtils.isNotBlank(itemIds)){//去取两个itemId的交集
					itemids = this.getIntersectItemId(itemIds, siteId);
				}else{
					itemids = itemService.getItemIdsBydeptId(siteId);
				}
			}else{
				itemids = itemIds;
			}
			String conditionSql = "";
			if (CommonUtil.stringNotNULL(itemids)) {  
				itemids = "'" + itemids.replaceAll(",", "','") + "'";
				conditionSql = " and p.wf_item_uid in (" + itemids + ")";
			}
			if (title != null  && CommonUtil.stringNotNULL(title.trim())) {  
				conditionSql += " and p.process_title like '%" + title.trim() + "%'";
			}
			if (CommonUtil.stringNotNULL(nodeId)) {  
				nodeId = "'" + nodeId.replaceAll(",", "','") + "'";
				conditionSql += " and p.wf_node_uid in (" + nodeId + ") ";
			}
			
			// 待办，被督办列表
			if ("0".equals(type)) {
				// 总条数
				// 删除 process title 为空的数据
				//排除传阅办件
				conditionSql += " and (not exists (select dcv.instanceid from document_circulation_view dcv where p.wf_instance_uid = dcv.instanceid ) or n.wfn_onekeyhandle != 1)";
				
				tableInfoService.deleteErrorProcess();
				if(containsMail!=null && containsMail.equals("1")){
					int count = integrateService.findTodoMessageCount(conditionSql, userId);
					jsonStr = integrateService.findTodoMessageOfMobile(userId, count, column + 1, pagesize, type, itemIds, title, serverUrl);
				}else{
					int count = pendingService.getCountOfPending(conditionSql, userId, "");
					jsonStr = pendingService.getPendListOfMobileForDB(userId, count,
							column + 1, pagesize, "", itemids, title, serverUrl, "");// 待办json（根据itemId获得）
				}
				
			} else if ("1".equals(type)) {// 已办
				/*if (!CommonUtil.stringNotNULL(state)) {  
					state = "4";
				} */
				List<Pending> list = tableInfoService.getOverList(conditionSql,
						userId, column*pagesize, pagesize, state);
				Employee emp = employeeService.findEmployeeById(userId);
				pendingService.setBackStatus(list, emp.getIsAdmin(), emp.getEmployeeGuid());
				jsonStr = pendingService.getOverListOfMobile(userId, list,
						column*pagesize, pagesize, "", itemIds,serverUrl);
			}else if("2".equals(type)){ // 待收
				/*String roleId = (String) jsonObject.getString("roleId");
				EmployeeRole employeeRole = employeeRoleService.getEmployeeRoleById(roleId);
				if(employeeRole != null){
					String userIds = employeeRole.getUserIds();
					if(userIds!= null && !("").equals(userIds) && !("null").equals(userIds)){
						//判断当前人是否在权限组里
						if(userIds.indexOf(userId) > -1){
							Employee emp = employeeService.findEmployeeById(userId);
							Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
							String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
							if(departId != null && !departId.equals("")){
								conditionSql += " and (t.touserid ='"+userId+"' or t.todepartId='"+departId+"') ";
							}
							jsonStr = tableInfoService.getDofileReceiveListOfMobile(emp.getDepartmentGuid(),userId, column*pagesize, pagesize,Integer.parseInt("0"), conditionSql);
						}
					}
				}*/
			    // 待收
			    conditionSql = "";
			    Employee emp = employeeService.findEmployeeById(userId);
			    Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
			    String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
			    String linkDeptIds = dep.getDepartmentGuid();
			    if (CommonUtil.stringNotNULL(linkDeptIds)) {  
				linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
			    }
			    linkDeptIds += ",'"+departId+"'";
			    Map<String, String> searchmap = new HashMap<String, String>();
			    searchmap.put("departId", linkDeptIds);
			    searchmap.put("serverUrl", serverUrl);
			    jsonStr = tableInfoService.getDofileReceiveListOfMobile(userId, column*pagesize, pagesize,Integer.parseInt("0"), searchmap, null);
			}else if("3".equals(type)){	//收藏夹
				conditionSql = "";
				if (CommonUtil.stringNotNULL(itemIds)) {
					conditionSql = " and t.item_id in (" + itemIds + ") ";
				}
				if(CommonUtil.stringNotNULL(title)){
					conditionSql = " and t.dofile_title like '%"+title.trim()+"%' ";
				}
				int count = tableInfoService.getCountOfDoFileFavourites("", conditionSql, userId);
				jsonStr = tableInfoService.getFavDoFileListOfMobile(conditionSql,userId, count,
						column*pagesize, pagesize,serverUrl);
			}else if("4".equals(type)){
				state ="2";// 已办结
				List<Pending> list = tableInfoService.getOverList(conditionSql,userId, column*pagesize, pagesize,state);
				jsonStr = pendingService.getOverListOfMobile(userId, list,
						column*pagesize, pagesize, "", itemIds,serverUrl);
			}else if("5".equals(type)){			//通知公告
				/*String contionSql = "";
				if (title != null  && CommonUtil.stringNotNULL(title.trim())) {  
					contionSql += " and t3.process_title like '%" + title.trim() + "%'";
				}
				List<NoticeInfo> list = noticeInfoService.findNoticeInfoList(contionSql, column*pagesize, pagesize);
				jsonStr = noticeInfoService.getNoticeInfoListOfMobile(list,serverUrl);*/
			}else if("6".equals(type)){			//关注列表
				List<Pending> list = tableInfoExtendService.getFollowList(conditionSql,userId, column*pagesize, pagesize,type);
				jsonStr = pendingService.getFollowListOfMobile(userId, list, serverUrl);
			}else if("7".equals(type)){			//督办列表
				conditionSql += " and (p.jdqxdate <= sysdate or (p.jdqxdate > sysdate and sysdate > p.jdqxdate-3)) ";
				jsonStr = tableInfoExtendService.getOutOfDateList4Mobile(conditionSql, serverUrl, column*pagesize, pagesize);
			}else if("8".equals(type)){			//前置机待收
				Employee emp = employeeService.findEmployeeById(userId);
				conditionSql = reConSql(title,emp);
				List<ToRecDoc> list = toRecDocService.findToRecDocList(conditionSql, column*pagesize, pagesize);
				jsonStr = toRecDocService.findToRecDocListOfMobile(userId, list,
						column*pagesize, pagesize, "", itemIds,serverUrl);
			}else if("9".equals(type)){			//前置机已收
				conditionSql = "";
				if(CommonUtil.stringNotNULL(title)){
					conditionSql += " and (t.bt like '%"+title.trim()+"%' or t.wh like '%"+title.trim()+"%' or t.fwdw like '%"+title.trim()+"%') ";
				}
				Employee emp = employeeService.findEmployeeById(userId);
				List<ToRecDoc> list = toRecDocService.findToRecedDocList(userId, conditionSql,
							Paging.pageIndex, Paging.pageSize);
				List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
				getRequest().setAttribute("itemList", itemList);
				Map<String, ReceiveProcessShip> map = toRecDocService.findReceiveWfpShipList(list);
				getRequest().setAttribute("map", map);
				jsonStr = toRecDocService.findToRecedDocListOfMobile(userId, list,itemList,map,
						column*pagesize, pagesize, "", itemIds,serverUrl);
			}else if("10".equals(type)){
    			 	//下级已收列表
    				conditionSql = "";
    				Employee emp = employeeService.findEmployeeById(userId);
    				Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
    				String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
    				String linkDeptIds = dep.getDepartmentGuid();
    				if (!CommonUtils.isEmpty(linkDeptIds)) {  
    				    linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
    				}
    				linkDeptIds += ",'"+departId+"'";
    				Map<String, String> searchmap = new HashMap<String, String>();
    				searchmap.put("departId", linkDeptIds);
    				searchmap.put("serverUrl", serverUrl);
    				List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
    				jsonStr = tableInfoService.getDofileReceiveListOfMobile(userId, column*pagesize, pagesize,Integer.parseInt("1"), searchmap, itemList);
    			
			}else if("11".equals(type)){
			 	//传阅列表
				conditionSql = " and h.isread = '0' ";
				jsonStr = tableInfoService.getCyDofileListOfMobile(conditionSql, userId, column*pagesize, pagesize, serverUrl);
			}else if("12".equals(type)){
			 	//已阅列表
				conditionSql = " and h.isread = '1' ";
				jsonStr = tableInfoService.getCyDofileListOfMobile(conditionSql, userId, column*pagesize, pagesize, serverUrl);
			}else if("13".equals(type)){
				conditionSql = "";
				Employee emp = employeeService.findEmployeeById(userId);
				Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
				String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
				String linkDeptIds = dep.getDepartmentGuid();
				if (!CommonUtils.isEmpty(linkDeptIds)) {  
					linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
				}
				linkDeptIds += ",'"+departId+"'";
				Map<String, String> searchmap = new HashMap<String, String>();
				searchmap.put("departId", linkDeptIds);
				searchmap.put("serverUrl", serverUrl);
				List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
				jsonStr = tableInfoService.getDofileReceiveListOfMobile(userId, column*pagesize, pagesize,3, searchmap, itemList);
			}else if("14".equals(type)){//传阅
				//查询传阅件
				conditionSql += " and (p.wf_instance_uid in (select dcv.instanceid from document_circulation_view dcv) and n.wfn_onekeyhandle = 1)"; 

				// 总条数
				int count = pendingService.getCountOfPending(conditionSql, userId, "");
				jsonStr = pendingService.getPendListOfMobile(userId, count,
						column + 1, pagesize, "", itemIds, title, serverUrl, "1");// 待办json（根据itemId获得）
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		/*FileGeneThread fgThread = new FileGeneThread(jsonStr);
		fgThread.start();*/
		out.print(jsonStr);
		out.close();
		long l = startDate.getTime()-(new Date()).getTime();
		accessLog.setAccessTime(l+"");
		tableInfoExtendService.addAccessLog(accessLog);
	}
	
	/**
	 * 
	 * @Description: 移动端查看待收详情
	 * @author: xiep
	 * @time: 2017-8-19 下午2:19:57
	 */
	public void getTrueJsonOfMobile() {
		try {
			JSONObject jsonObject = getJSONObject();
			String receiveId = getRequest().getParameter("receiveId");
			if(jsonObject != null){
				// 待收办件id
				receiveId =(String) jsonObject.get("receiveId");
			}else{
				receiveId = getRequest().getParameter("receiveId");
			}
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
			if(doFileReceive != null){
				
				String serverUrl =  SystemParamConfigUtil.getParamValueByParam("mobileUrl")+getRequest().getContextPath();
				//String serverUrl = "http://" + getRequest().getLocalAddr() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
				String id = doFileReceive.getId();
				String pInstanceId = doFileReceive.getpInstanceId();
				String attSuffixName = SystemParamConfigUtil.getParamValueByParam("attSuffixName");// 正文附件的后缀
				String attFjSuffixName = SystemParamConfigUtil.getParamValueByParam("attFjSuffixName");// 附加附件的后缀
				List<SendAttachments> sattList = attachmentService.findAllSendAtts(pInstanceId + attSuffixName,null);
				List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(pInstanceId + attFjSuffixName,null);
				List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(pInstanceId + "oldfj",null);
				int unMergeAttCnt = 0;
				JSONArray jArr = new JSONArray();
				//取出所有的附件的PDFPATH
				sattExtList.addAll(oldExtList);
				sattList.addAll(sattExtList);
				int imageCount = 0;
				String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
				for (SendAttachments sendAttachments : sattList) {
					//获取未专程pdf的附件数目
					if(CommonUtil.stringNotNULL(sendAttachments.getFiletype()) && 
							("zip".equalsIgnoreCase(sendAttachments.getFiletype()) 
									|| "ceb".equalsIgnoreCase(sendAttachments.getFiletype()) 
									|| "rar".equalsIgnoreCase(sendAttachments.getFiletype()) 
									|| "7z".equalsIgnoreCase(sendAttachments.getFiletype()))){
						unMergeAttCnt = unMergeAttCnt + 1;
					}
					if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
						imageCount += sendAttachments.getPagecount();
					}else{
						String toPdfPath = sendAttachments.getTopdfpath();
						if(CommonUtil.stringIsNULL(toPdfPath)){
							toPdfPath = newPdfRoot + sendAttachments.getLocalation();
						}
						if(CommonUtil.stringNotNULL(toPdfPath) && 
								(toPdfPath.endsWith(".pdf") || toPdfPath.endsWith(".true") ||
										toPdfPath.endsWith(".PDF") || toPdfPath.endsWith(".TRUE"))) {
							Integer pageCount = PdfPage.getPdfPage(sendAttachments.getTopdfpath());
							sendAttachments.setPagecount(pageCount);
							attachmentService.updateSendAtt(sendAttachments);
							imageCount += pageCount;
						}
					}
					JSONObject obj = new JSONObject();
					obj.put("id", sendAttachments.getId());
					obj.put("name", sendAttachments.getFilename());
					obj.put("docGuid", sendAttachments.getDocguid());
					String newPdfPath = "";
					newPdfPath = sendAttachments.getTopdfpath();
					if(CommonUtil.stringIsNULL(newPdfPath)){
						newPdfPath = sendAttachments.getLocalation();
					}else{
						newPdfPath = newPdfPath.substring(newPdfRoot.length());
					}
					String attPdfPath = serverUrl+ "/form/html/workflow/" + newPdfPath;
					obj.put("pdfPath", attPdfPath);
					obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
					jArr.add(obj);
				}
				TrueJSON trueJson = new TrueJSON();
				trueJson.setPdfurl(jArr.toString());
				/*String mlDisplayText = getSlideDisplay(pInstanceId, "false");
				trueJson.setMlDisplayText(mlDisplayText);*/
				
				String sb = "";
				HttpServletResponse response = getResponse();
				response.setCharacterEncoding("utf-8");
				// 打开流
				PrintWriter out = getResponse().getWriter();
				sb = JSONObject.fromObject(trueJson).toString();
				out.print(sb);
				out.close();
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @Description: 移动端下级来文收取
	 * @author: xiep
	 * @time: 2017-8-19 下午2:29:43
	 */
	public void receiveLowerByMobile(){
		System.out.println("receiveLowerByMobile---1---------------start-------");
		JSONArray jsonArray = getJSONArray(); 
		// 获取主键id
		String id = "";
		String processId ="";
		String receiveType = "";
		String itemId = "";
		String workFlowId = "";
		String userId =  "";
		String msg = "";
		String state = "";
		//System.out.println("receiveLowerByMobile--2----------------jsonArray-------size=" + jsonArray.size());
		for(int i = 0; i <jsonArray.size() ; i++ ){
			JSONObject jsonObject = (JSONObject) jsonArray.get(i);
			if(jsonObject != null && !"".equals(jsonObject)){
				id = (String) jsonObject.get("id");
				processId = (String) jsonObject.get("processId");
				receiveType = (String) jsonObject.get("receiveType");
				itemId = (String) jsonObject.get("itemId");
				userId = (String) jsonObject.get("userId");
				state = (String) jsonObject.get("status");
			}else{
				id = getRequest().getParameter("id");
				processId = getRequest().getParameter("processId");
				receiveType = getRequest().getParameter("receiveType");
				itemId = getRequest().getParameter("itemId");
				userId = getRequest().getParameter("userId");
				state = getRequest().getParameter("status");
			}
			System.out.println("receiveLowerByMobile---3---------------jsonArray-------id=" + id);
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
			if (doFileReceive != null) { // 做更新操作
				Integer status = doFileReceive.getStatus();
				if(status!=null && status==1){
					msg = "over";
				}else{
					// 获取部门 
					String currentDeptId = doFileReceive.getToDepartId();
					String linkDeptIds = currentDeptId;
					List<WfDictionary> keys = dictionaryService.getDictionaryByName("linkDept");
					for(int index = 0 ; index <keys.size() ; index++){
						WfDictionary dic = keys.get(index);
						String[] dicKeys = dic.getVc_key().split(",");
						String[] dicValues = dic.getVc_value().split(",");
						for(int j = 0 ; j < dicValues.length ; j++){
							String temp = SystemParamConfigUtil.getParamValueByParam(dicValues[j]);
							if(temp != null && temp.indexOf(linkDeptIds)>-1){
								linkDeptIds = temp ;
								break;
							}
						}
					}
					if(currentDeptId.equals(linkDeptIds)){
						System.out.println("receiveLowerByMobile---4---------------currentDeptId.equals(linkDeptIds)-------id=" + id);
						if(StringUtils.isNotBlank(state) && state.equals("4")){
							doFileReceive.setStatus(4); // 表示拒收
						}else{
							doFileReceive.setStatus(1); // 表示签收
						}
						doFileReceive.setRecDate(new Date());
						String commentJson = doFileReceive.getTrueJson();		//true意见
						String oldTruePath = doFileReceive.getPdfpath();
						if(oldTruePath!=null && !oldTruePath.equals("")){
							String[] args = new TrueToPdf().trueToPdf(oldTruePath);
							String  pdfPath= "";
							if(args!=null && args.length >0){
								pdfPath = args[0];
							}
							String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
							doFileReceive.setPdfpath(truePath);
						}
						//将意见合并到true文件中
						/*if(jrdb.equals("false")&&!"2".equals(doFileReceive.getReceiveType())){
							createRecTrue(doFileReceive);
						}*/
						tableInfoService.updateDoFileReceive(doFileReceive);
					}else{
						System.out.println("receiveLowerByMobile---5---------------!currentDeptId.equals(linkDeptIds)-------id=" + id);
						// 根据to 部门id，instanceid 查询 数据
						if (!CommonUtils.isEmpty(linkDeptIds)) {  
							linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
						}
						List<DoFileReceive> receivers = tableInfoService.getDoFileReceiveByPIdAndDeptIds(doFileReceive.getpInstanceId(),linkDeptIds);
						Date currentDate = new Date();
						if(receivers != null&&receivers.size()>0){
							for(int j = 0 ; j < receivers.size(); j++){
								DoFileReceive rece = receivers.get(j);
								if(StringUtils.isNotBlank(state) && state.equals("4")){
									rece.setStatus(4); // 表示拒收
								}else{
									rece.setStatus(1); // 表示签收
								}
								rece.setRecDate(currentDate);
								String commentJson = doFileReceive.getTrueJson();		//true意见
								String oldTruePath = doFileReceive.getPdfpath();
								String[] args = new TrueToPdf().trueToPdf(oldTruePath);
								String  pdfPath= "";
								if(args!=null && args.length >0){
									pdfPath = args[0];
								}
								String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
								doFileReceive.setPdfpath(truePath);
								/*if(jrdb.equals("false")&&!"2".equals(rece.getReceiveType())){
									createRecTrue(rece);
								}*/
								tableInfoService.updateDoFileReceive(rece);
							}
						}
					}
					msg = "yes";
					}
				}
		}
		System.out.println("receiveLowerByMobile---6----------------------msg=" + msg);
		try {
			getResponse().getWriter().print("{\"success\":\""+msg+"\"}");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @Description:下级已收转待办 
	 * @author: xiep
	 * @time: 2017-8-19 下午3:47:26
	 */
	public void innerPendingLowRecOfMobile(){
		// 打开流
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String userId = "";
			String itemId = "";
			String id = "";
			if(jsonObject != null){
				userId = (String)jsonObject.get("userId");
				itemId = (String)jsonObject.get("itemId");
				id = (String)jsonObject.get("id");//下级已收id、企业来文Id
			}else{
				userId = getRequest().getParameter("userId");
				itemId = getRequest().getParameter("itemId");
				id = getRequest().getParameter("id");//下级已收id、企业来文Id
				
			}
			String workFlowId = "";
			String message = "";
			String message_return = "";
			
			Employee emp = employeeService.findEmployeeById(userId);
			WfItem wfItem = new WfItem();
			if(CommonUtil.stringIsNULL(itemId)){
				itemId = SystemParamConfigUtil.getParamValueByParam("defRecPendItemId");
			}
			wfItem = itemService.getItemById(itemId);
			if(null!=wfItem){
				workFlowId = wfItem.getLcid();
			}
			//下级已收、部门下级已收
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
			String instanceId_r = doFileReceive.getInstanceId();
			String pinstanceId = doFileReceive.getpInstanceId();
			List<WfProcess> wfpList = tableInfoService.getProcessList(instanceId_r);
			WfProcess wfProcess = null;
			if(wfpList!=null && wfpList.size()>0){
				wfProcess = wfpList.get(0);
			}
			if(wfProcess == null){
				System.out.println("wfProcess为空,请检查！");
				List<WfProcess> list_p = tableInfoService.getProcessList(pinstanceId);
				if(list_p!=null && list_p.size()>0){
					wfProcess = list_p.get(0);
				}
			}
			
			String processId = wfProcess.getWfProcessUid();
			if(processId!=null && !processId.equals("")){
				processId = processId.trim();
			}
			String receiveType = "1";
			Date nowTime = new Date();
			WfProcess wfProcess_new = new WfProcess();
			if (wfProcess != null) {
				//将推送信息中的记录修改成自己的
				tableInfoService.updatePushMessage(emp.getEmployeeGuid(), wfProcess);
				//将推送记录修改下userid
				tableInfoService.updateWfProcessByTs(emp.getEmployeeGuid(),wfProcess);
				WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
				wfProcess.setIsExchanging(0);
				if(("1").equals(receiveType)){
					//查找流程中第一步的节点信息
					if(wfNode==null){
						getResponse().getWriter().print("noNode");
						return ;
					}
					//---------------期限日期---------------
					String deadline = wfNode.getWfn_deadline();
					String deadlineunit = wfNode.getWfn_deadlineunit();
					Date jdqxDate = tableInfoService.getEndDate(nowTime, deadline, deadlineunit );
					Date apply_date = wfProcess.getApplyTime();
					String wcsx = wfItem.getVc_wcsx();		//办件完成期限
					Date zhqxDate = tableInfoService.getEndDate(apply_date, wcsx, "0");	//默认为工作日
					wfProcess.setFromNodeid("下级已收移动端过来的");
					wfProcess.setToNodeid(wfNode.getWfn_id());
					wfProcess.setNodeUid(wfNode.getWfn_id());
					wfProcess.setOwner(userId);
					wfProcess.setUserUid(userId);
					wfProcess.setFromUserId(userId);
					wfProcess.setItemId(itemId);
					wfProcess.setWfUid(workFlowId);
					wfProcess.setApplyTime(nowTime);
					wfProcess.setFinshTime(wfProcess_new.getFinshTime());
					wfProcess.setJssj(wfProcess_new.getJssj());
					wfProcess.setFormId(wfNode.getWfn_defaultform());
					wfProcess.setOldFormId(wfNode.getWfn_defaultform());
					wfProcess.setIsOver(Constant.NOT_OVER);
					wfProcess.setIsMaster(1);
					wfProcess.setIsShow(1);
					wfProcess.setJdqxDate(jdqxDate);
					wfProcess.setZhqxDate(zhqxDate);
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setItem_id(itemId);
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					//需要更新下关于pdf路径
					String wf_uid = wfProcess.getWfUid(); //流程
					WfNode firstNode = workflowBasicFlowService.findFirstNodeId(wf_uid);
					String formId = firstNode.getWfn_defaultform();
					String json = wfProcess.getCommentJson();
					wfProcess.setCommentJson("");
					
					//生成 收取的办文事项pdf(只读)
					List<Map> mapList = zwkjFormService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					// 获取表单对应关系(主要是获取中文名)
					List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
					String docValue = "";
				    //查找对应关系,入库收文表
					for (FormTagMapColumn ft : list) {
						String tagValue = "";
						if(("lwbt").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("yfdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fs").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwh").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("gwlx").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("swsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fwsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}
							docValue +=  ft.getFormtagname() +":"+  tagValue +";";
					}
					
					String htmlpath = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							"", wfProcess.getWfInstanceUid(), false ,true);
					String htmlpath2 = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							docValue, wfProcess.getWfInstanceUid(), false ,false);
					String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,"");
					wfProcess.setPdfPath(pdfPath);
					String instanceId = wfProcess.getWfInstanceUid();
					ToPdfThread toPdf = new ToPdfThread(htmlpath+","+htmlpath2, "",
							instanceId, attachmentService , "htmlToPdf", wfProcess, tableInfoService, json, flowService);
					toPdf.start();
					addDoFile(wfProcess, wfItem, wfNode);
				}else{
					//更新收文时间  走公文交换的
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					wfProcess.setUserUid(userId);
				}
				tableInfoService.updateProcess(wfProcess);
			}
			doFileReceive.setJrdb(1);//已经进入待办
			tableInfoService.updateDoFileReceive(doFileReceive);
			message_return = "success";
			getResponse().getWriter().print(message_return);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	/**
	 * 根据条件返回sql（前置机）
	 * 描述：TODO 对此方法进行描述
	 * @return String
	 * 作者:季振华
	 * 创建时间:2017-5-16 上午11:00:08
	 */
	public String reConSql(String wfTitle,Employee emp){
		Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
		/*
		 * departId  上级部门id 和 本部门id 如果还有上上级部门id 需要再查下部门表 暂时只支持3及部门
		 * */
		String departId = "'"+dep.getSuperiorGuid()+"','"+dep.getDepartmentGuid()+"'";	//获取当前人员的父机构Id
		List<String> deps = new ArrayList<String>();
		//获取机构匹配
		List<DepRelationShip> deplist = fieldMatchingService.getDepRelationShipListByDepId(departId);
		DepRelationShip ship = null;
		String docxg_depId = "";
		for(int i=0; deplist!=null && i<deplist.size(); i++){
			ship = deplist.get(i);
			if(ship!=null){
				docxg_depId = ship.getDocxg_depId();
				deps.add(docxg_depId);
			}
		}
		String conditionSql = "";
		if(deps!=null && deps.size()>0){
			String depIds = "";
			for(int i=0; i<deps.size(); i++){
				depIds +="'"+deps.get(i)+"',";
			}
			if(depIds!=null && !depIds.equals("")){
				depIds = depIds.substring(0, depIds.length()-1);
			}
			conditionSql += " and t.departmentId in ("+depIds+")";
		}
		
		if(CommonUtil.stringNotNULL(wfTitle)){
			conditionSql += " and t.bt like '%"+wfTitle+"%'";
		}
		return conditionSql;
	}
	
	/**
	 * 判断用户是否有待收已收权限
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:季振华
	 * 创建时间:2017-5-16 下午1:46:47
	 */
	public void isToRecDoc(){
		String userId =  getRequest().getParameter("userId");
		String toRecUserId = SystemParamConfigUtil.getParamValueByParam("toRecUserId");
		boolean isToRecDoc = false;
		if(CommonUtil.stringNotNULL(toRecUserId)){
			String[] toRecUserIds = toRecUserId.split(",");
			for(String s:toRecUserIds){
				if(s.equalsIgnoreCase(userId)){
					isToRecDoc = true;
				}
			}
		}
		try {
			if(isToRecDoc){
				getResponse().getWriter().print("success");
			}else{
				getResponse().getWriter().print("fail");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 描述：获取手机端接口（统计条数）【0:待办,被督办列表; 1:已办; 2:待收; 3:收藏夹; 4:已办结; 5:通知公告;  6:关注列表; 7:督办列表;11:待阅列表】
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:44:45
	 */
	public void getTodoCountOfMobile(){
		PrintWriter out = null;
		String jsonStr = "";
		JSONArray arr = new JSONArray();
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String itemIds = getRequest().getParameter("itemIds");
			String title = getRequest().getParameter("title");
			String types = "";
			String state = "";
			String userId = "";
			String siteId = "";
			String containsMail =  SystemParamConfigUtil.getParamValueByParam("containsMail");			//是否包含邮件等内容信息
			if(jsonObject != null){
				// 标题 
				title =(String) jsonObject.get("title");
				types = (String) jsonObject.get("type");
				// 用户id
				userId = (String) jsonObject.get("userId");
				// state = (String) jsonObject.get("state");
				siteId = (String) jsonObject.get("siteId");
			}else{
				// 标题 
				title = getRequest().getParameter("title");
				types = getRequest().getParameter("type");
				// 用户id
				userId =  getRequest().getParameter("userId");
				//state = getRequest().getParameter("state");
				siteId = getRequest().getParameter("siteId");
			}
			String itemids = "";
			if(StringUtils.isNotBlank(siteId)){
				if(StringUtils.isNotBlank(itemIds)){//去取两个itemId的交集
					itemids = this.getIntersectItemId(itemIds, siteId);
				}else{
					itemids = itemService.getItemIdsBydeptId(siteId);
				}
			}else{
				itemids = itemIds;
			}
			if (StringUtils.isNotBlank(itemids)) {  
				itemids = "'" + itemids.replaceAll(",", "','") + "'";
			}
			
			if(StringUtils.isNotBlank(types)){
				String [] typess = types.split(",");
				for (String type : typess) {
					String conditionSql = "";
					if (CommonUtil.stringNotNULL(itemids)) {  
						conditionSql = " and p.wf_item_uid in (" + itemids + ")";
					}
					if (title != null  && CommonUtil.stringNotNULL(title.trim())) {  
						conditionSql += " and p.process_title like '%" + title.trim() + "%'";
					}
					JSONObject obj = new JSONObject();
					if ("0".equals(type)) {
						//查询传阅件
						conditionSql += " and (p.wf_instance_uid not in (select dcv.instanceid from document_circulation_view dcv) or n.wfn_onekeyhandle != 1)"; 
						// 总条数
						int count = 0;
						if(containsMail!=null && containsMail.equals("1")){
							count = integrateService.findTodoMessageCount(conditionSql, userId);
						}else{
							count = pendingService.getCountOfPending(conditionSql, userId, "");
						}
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("1".equals(type)) {// 已办未办结
						if (CommonUtil.stringIsNULL(state)) {  
							state = "4";
						} 
						int count = tableInfoService.getCountOfOver(conditionSql,userId,state);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("2".equals(type)) {// 待收
						Employee emp = tableInfoService.findEmpByUserId(userId);
						Map<String, String> map = new HashMap<String, String>();
						Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
						getRequest().setAttribute("deptName", dep.getDepartmentName());
						String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
						String linkDeptIds = dep.getDepartmentGuid();
						if (CommonUtil.stringNotNULL(linkDeptIds)) {  
							linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
						}
						linkDeptIds += ",'"+departId+"'";
						map.put("departId", linkDeptIds);
						int count = tableInfoService.getDoFileReceiveCount(userId,0, map);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("4".equals(type)) {// 已办结
						state ="2";// 已办结
						int count = tableInfoService.getCountOfOver(conditionSql,userId,state);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("6".equals(type)) {// 关注列表
						//TODO 待补充
						
					}else if ("7".equals(type)) {// 督办列表
						//TODO 待补充
						conditionSql +=" and (p.jdqxdate <= sysdate or (p.jdqxdate > sysdate and sysdate > p.jdqxdate-3)) ";
						int count = tableInfoExtendService.getCountOfOutOfDate(conditionSql, "");  ;
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if("8".equals(type)){			//前置机待收
						Employee emp = employeeService.findEmployeeById(userId);
						conditionSql = reConSql(title,emp);
						int count = toRecDocService.findToRecDocCount(conditionSql);
						jsonStr = "{\"count\":\""+count+"\"}";
					}else if("9".equals(type)){			//前置机已收
						conditionSql = "";
						if(CommonUtil.stringNotNULL(title)){
							conditionSql += " and t.bt like '%"+title.trim()+"%'";
						}
						int count = toRecDocService.findToRecedDocCount(userId, conditionSql);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("10".equals(type)) {// 已收
						Employee emp = tableInfoService.findEmpByUserId(userId);
						Map<String, String> map = new HashMap<String, String>();
						Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
						getRequest().setAttribute("deptName", dep.getDepartmentName());
						String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
						String linkDeptIds = dep.getDepartmentGuid();
						if (CommonUtil.stringNotNULL(linkDeptIds)) {  
							linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
						}
						linkDeptIds += ",'"+departId+"'";
						map.put("departId", linkDeptIds);
						int count = tableInfoService.getDoFileReceiveCount(userId,1, map);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if ("11".equals(type)) {// 待阅
						conditionSql = " and h.isread = '0' ";
						int count = tableInfoService.getCountCyDoFiles(conditionSql ,userId);
						jsonStr = "{\"count\":\""+count+"\"}";
						obj.put("type", type);
						obj.put("count",count+"");
					}else if("14".equals(type)){//传阅列表
						//查询传阅件
						conditionSql += " and (p.wf_instance_uid in (select dcv.instanceid from document_circulation_view dcv) and n.wfn_onekeyhandle = 1)"; 
						int count = pendingService.getCountOfPending(conditionSql,userId, "");
						obj.put("type", type);
						obj.put("count",count+"");
					}
					arr.add(obj);
				}
			}
			/*FileGeneThread fgThread = new FileGeneThread(jsonStr);
			fgThread.start();*/
		}catch (IOException e) {
			e.printStackTrace();
		}
		out.print(arr.toString());
		out.close();
	}
	
	
	
	/**
	 * 
	 * 描述：添加办件到收藏夹中
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:45:52
	 */
	public void favourite(){
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			String instanceId = getRequest().getParameter("instanceId");
			String workFlowId =  getRequest().getParameter("workFlowId");
			//根据instanceId查询待办
			DoFile doFile = tableInfoService.getDoFileByElements(workFlowId,instanceId);
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			try {
				if(doFile!=null){
					String dofileId = doFile.getDoFile_id();
					String userId = emp.getEmployeeGuid();
					DofileFavourite fav = tableInfoService.getDofileFavouriteById(dofileId, userId);
					if(fav!=null){
						getResponse().getWriter().print("1");	//表示已被收藏
					}else{
						//插入中间表
						DofileFavourite dofileFav = new DofileFavourite();
						dofileFav.setFavouriteTime(new Date());
						dofileFav.setDofileId(doFile.getDoFile_id());
						dofileFav.setUserId(emp.getEmployeeGuid());
						tableInfoService.saveDofileFavourite(dofileFav);
						getResponse().getWriter().print("2");	//收藏成功
					}
				}else{	//该流程为子流程
					WfProcess wf = new WfProcess();
					wf.setWfInstanceUid(instanceId);
					List<WfProcess> list = tableInfoService.getWfProcessByEntity(wf);
					for(int i=0; list!=null && i<list.size();i++){
						instanceId = list.get(i).getAllInstanceid();
						if(instanceId!=null && !instanceId.equals("")){
							break;
						}
					}
					doFile = tableInfoService.getDoFileByElements("",instanceId);
					if(doFile!=null){
						String dofileId = doFile.getDoFile_id();
						String userId = emp.getEmployeeGuid();
						DofileFavourite fav = tableInfoService.getDofileFavouriteById(dofileId, userId);
						if(fav!=null){
							getResponse().getWriter().print("1");	//表示已被收藏
						}else{
							//插入中间表
							DofileFavourite dofileFav = new DofileFavourite();
							dofileFav.setFavouriteTime(new Date());
							dofileFav.setDofileId(doFile.getDoFile_id());
							dofileFav.setUserId(emp.getEmployeeGuid());
							tableInfoService.saveDofileFavourite(dofileFav);
							getResponse().getWriter().print("2");	//收藏成功
						}
					}else{
						getResponse().getWriter().print("3");	//收藏失败
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 
	 * 描述：取消办件收藏： 具体为删除中间关联表中的字段
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:46:29
	 */
	public void deletefavourite(){
		String dofileId = getRequest().getParameter("dofileId");
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		if(StringUtils.isNotBlank(dofileId)){
			String [] dofileIds = dofileId.split(",");
			for (String dofileid : dofileIds) {
				DofileFavourite favourite = tableInfoService.getDofileFavouriteById(dofileid, userId);
				if(favourite!=null){
					tableInfoService.removeDofileFavourite(favourite);
				}
			}
			toPage("1");
		}else{
			toPage("2");
		}
	}
	
	/**
	 * 手机端获取收藏夹列表
	 * @param  userId  用户id
	 * @param  itemIds  事项编码
	 * @param  column  页数ag
	 * @param  pagesize 页面显示的条数
	 */
	public  void  getFavDoFileOfMobile(){
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String itemIds = getRequest().getParameter("itemIds");
			String userId = "";
			Integer column = null;
			Integer pagesize = null;
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getLocalAddr() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
			if(jsonObject != null){
				// 用户id
				userId = (String) jsonObject.get("userId");
				// 页数ag
				column = (String) jsonObject.get("column") == null ? 0
						: Integer.parseInt((String) jsonObject.get("column"));
				// 页面显示的条数
				pagesize = (String) jsonObject.get("pagesize") == null ? 10
						: Integer.parseInt((String) jsonObject.get("pagesize"));
			}else{
				// 用户id
				userId =  getRequest().getParameter("userId");
				// 页数ag
				column =  getRequest().getParameter("column") == null ? 0:
						 Integer.parseInt((String) getRequest().getParameter("column"));
				// 页面显示的条数
				pagesize = (String)  getRequest().getParameter("pagesize") == null ? 10
						: Integer.parseInt((String)  getRequest().getParameter("pagesize"));
			}
			String conditionSql = "";
			if (CommonUtil.stringNotNULL(itemIds)) {  
				itemIds = "'" + itemIds.replaceAll(",", "','") + "'";
				conditionSql = " and t.item_id in (" + itemIds + ") ";
			}
			int count = tableInfoService.getCountOfDoFileFavourites("", conditionSql, userId);
			jsonStr = tableInfoService.getFavDoFileListOfMobile(conditionSql,userId, count,
					column, pagesize,serverUrl);
		} catch (IOException e) {
				e.printStackTrace();
		}
		out.print(jsonStr);
		out.close();
	}
	
	/**
	 * 手机端添加到收藏夹
	 * @param instanceId 实例id
	 * @param workFlowId 工作流id
	 * @param userId 用户id
	 * return string  1:已收藏; 2:收藏成功; 3:异常;  4:数据未传输正确; 5:异常
	 */
	public void addFavouriteOfMobile() throws Exception{
		JSONObject jsonObject = getJSONObject(); 
		if(jsonObject!=null){
			String instanceId =  (String)jsonObject.get("instanceId");
			String workFlowId =  (String)jsonObject.get("workFlowId");
			String userId =  (String)jsonObject.get("userId");
			DoFile doFile = tableInfoService.getDoFileByElements(workFlowId,instanceId);
			try {
				if(doFile!=null){
					String dofileId = doFile.getDoFile_id();
					DofileFavourite fav = tableInfoService.getDofileFavouriteById(dofileId, userId);
					if(fav!=null){
						getResponse().getWriter().print("1");	//表示已被收藏
					}else{
						DofileFavourite dofileFav = new DofileFavourite();
							dofileFav.setFavouriteTime(new Date());
							dofileFav.setDofileId(doFile.getDoFile_id());
							dofileFav.setUserId(userId);
						tableInfoService.saveDofileFavourite(dofileFav);
						getResponse().getWriter().print("2");	//收藏成功
					}
				}else{	//子流程
					WfProcess wf = new WfProcess();
					wf.setWfInstanceUid(instanceId);
					List<WfProcess> list = tableInfoService.getWfProcessByEntity(wf);
					for(int i=0; list!=null && i<list.size();i++){
						 instanceId = list.get(i).getAllInstanceid();
						 if(instanceId!=null && !instanceId.equals("")){
							 break;
						 }
					}
					doFile = tableInfoService.getDoFileByElements("",instanceId);
					if(doFile!=null){
						String dofileId = doFile.getDoFile_id();
						DofileFavourite fav = tableInfoService.getDofileFavouriteById(dofileId, userId);
						if(fav!=null){
							getResponse().getWriter().print("1");	//表示已被收藏
						}else{
							//插入中间表
							DofileFavourite dofileFav = new DofileFavourite();
							dofileFav.setFavouriteTime(new Date());
							dofileFav.setDofileId(doFile.getDoFile_id());
							dofileFav.setUserId(userId);
							tableInfoService.saveDofileFavourite(dofileFav);
							getResponse().getWriter().print("2");	//收藏成功
						}
					}else{
						LOGGER.warn("办件不存在: instanceId为："+instanceId);
						getResponse().getWriter().print("3");	//收藏失败
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
				getResponse().getWriter().print("5");	//异常
			}
		}else{
			try {
				getResponse().getWriter().print("4");	//数据未传输正确
			} catch (IOException e) {
				e.printStackTrace();
				getResponse().getWriter().print("5"); 	//异常
			}	
		}
	}
	
	/**
	 * 取消文件收藏夹
	 * @param  instanceId 实例id
	 * @param workFlowId 工作流id
	 * @param userId 用户id
	 * return string  1:成功; 2:失败; 3:数据接收失败;  4:异常;
	 * @throws Exception
	 */
	public void deletefavouriteOfMobile() throws Exception{
		JSONObject jsonObject = getJSONObject(); 
		if(jsonObject!=null){
			try{
				String instanceId =  (String)jsonObject.get("instanceId");
				String workFlowId =  (String)jsonObject.get("workFlowId");
				String userId =  (String)jsonObject.get("userId");
				DoFile doFile = tableInfoService.getDoFileByElements(workFlowId,instanceId);
				if(doFile!=null){
					String dofileId = doFile.getDoFile_id();
					DofileFavourite favourite = tableInfoService.getDofileFavouriteById(dofileId, userId);
					if(favourite!=null){
						tableInfoService.removeDofileFavourite(favourite);
					}
						getResponse().getWriter().print("1");		//成功
				}else{
					List<WfProcess> list = tableInfoService.getProcessList(instanceId);
					for(int i=0; list!=null && i<list.size();i++){
						 instanceId = list.get(i).getAllInstanceid();
						 if(instanceId!=null && !instanceId.equals("")){
							 break;
						 }
					}
					doFile = tableInfoService.getDoFileByElements("",instanceId);
					if(doFile!=null){
						String dofileId = doFile.getDoFile_id();
						DofileFavourite favourite = tableInfoService.getDofileFavouriteById(dofileId, userId);
						if(favourite!=null){
							tableInfoService.removeDofileFavourite(favourite);
						}
						getResponse().getWriter().print("1");		//成功
					}else{
						LOGGER.warn("办件不存在: instanceId为："+instanceId);
						getResponse().getWriter().print("2");	//收藏失败
					}
				}
			}catch (Exception e) {
				e.printStackTrace();
				getResponse().getWriter().print("4");		//异常
			}
		}else{
			getResponse().getWriter().print("3");		//数据接收失败
		}
	}
	
	
	/**
	 * 手机端访问----得到生成的pdf
	 */
	public void getPdfForMobile() {
		// 当前待办步骤生成的pdf地址
		
		String pdfName = getRequest().getParameter("pdfPath");
		System.out.println("pdfName+++++++++++++++++++++++++"+pdfName);
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getLocalAddr() + ":"
				+ getRequest().getLocalPort() + getRequest().getContextPath();
		String pdfPath ="";
		String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
	    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
	    if(pdfName.startsWith(oldpdfRoot)){
	    	pdfPath = serverUrl+ "/form/html/data/"+pdfName.substring(pdfName.lastIndexOf("/") + 1);
	    }else if(pdfName.startsWith(newPdfRoot)){
	    	pdfPath = serverUrl+ "/form/html/workflow/"+pdfName.substring(newPdfRoot.length());
	    }else{
	    	pdfPath = serverUrl+ "/form/html/"+pdfName.substring(newPdfRoot.length());
	    }
		try {
			URL url = new URL(pdfPath);
			System.out.println(pdfPath);
			/*FileGeneThread fgThread = new FileGeneThread(pdfPath);
			fgThread.start();*/
			URLConnection conn = url.openConnection();
			BufferedInputStream bis = new BufferedInputStream(
					conn.getInputStream());
			getResponse().setHeader("Content-Length", conn.getContentLength()+"");
			getResponse().setHeader("Content-Disposition","attachment;filename="+pdfName);

			byte bt[] = new byte[65000];
			int size;
			try {
				while ((size = bis.read(bt)) != -1) {
					getResponse().getOutputStream().write(bt, 0, size);
				}
			} finally {
				bis.close();
			}
			getResponse().getOutputStream().flush();
			getResponse().getOutputStream().close();
			getResponse().flushBuffer();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 描述：移动端附件下载的接口
	 *参数为 att 的name字段
	 * 作者:Yuxl
	 * 创建时间:2014-8-27 上午9:26:49
	 */
	public void getAttForMobile() {
		// 当前待办步骤生成的pdf地址
		String name = getRequest().getParameter("fileid");
		String type = getRequest().getParameter("type");
		name = name+"."+ type;
		SendAttachments att	= attachmentService.findAllSendAtt(name);
		if(att == null){
			try {
				getResponse().getOutputStream().write("附件不存在".getBytes());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}else{
			String location =att.getLocalation();
			String basePath = SystemParamConfigUtil.getParamValueByParam("filePath");
			String fileNameWithPath =basePath+location;
			try {
				File file = new File(fileNameWithPath);
				if(!file.exists()){
					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
					fileNameWithPath = fileNameWithPath.replace(basePath, pdfRoot);
					file = new File(fileNameWithPath);

				}
				String serverUrl = getRequest().getScheme()+"://" + getRequest().getLocalAddr() + ":"
						+ getRequest().getLocalPort() + getRequest().getContextPath();
				String pdfPath = "";
				String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
			    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			    if(fileNameWithPath.startsWith(oldpdfRoot)){
			    	pdfPath = serverUrl+ "/form/html/data/"+fileNameWithPath.substring(fileNameWithPath.lastIndexOf("/") + 1);
			    }else if(fileNameWithPath.startsWith(newPdfRoot)){
			    	pdfPath = serverUrl+ "/form/html/workflow/"+fileNameWithPath.substring(newPdfRoot.length());
			    }else{
			    	pdfPath = serverUrl+ "/form/html/"+fileNameWithPath.substring(fileNameWithPath.lastIndexOf("/") + 1);
			    }
				try {
					URL url = new URL(pdfPath);
					URLConnection conn = url.openConnection();
					BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
					getResponse().setHeader("Content-Length", conn.getContentLength()+"");
					byte bt[] = new byte[65000];
					int size;
					try {
						while ((size = bis.read(bt)) != -1) {
							getResponse().getOutputStream().write(bt, 0, size);
						}
					} finally {
						bis.close();
					}
					getResponse().getOutputStream().flush();
					getResponse().getOutputStream().close();
					getResponse().flushBuffer();
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (Exception e) {
				LOGGER.error("下载失败,文件路径为："+fileNameWithPath, e);
				e.printStackTrace();
			}
		}
	}
	
	
	/**
	 * 
	 * 描述： 获取待办详细的json，包括：表单详细、已经存在的手写json、节点列表、人员列表
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:47:32
	 */
	public void getAllDetailJson() {
		try {
			JSONObject jsonObject = getJSONObject(); 
			String nodeId = "";
			String processId = "";
			String instanceId = "";
			String formId = "";
			String oldFormId = "";
			String userId = "";
			String workflowid = "";
			String type = "";
			String isfavourite = "";
			boolean isOver = false;
			if(jsonObject!= null){
				nodeId =  (String)jsonObject.get("nodeId");
				processId = (String)jsonObject.get("processId");
				instanceId = (String)jsonObject.get("instanceId");
				formId = (String)jsonObject.get("formId");
				oldFormId = (String)jsonObject.get("oldFormId");
				userId = (String)jsonObject.get("userId");
				workflowid = (String)jsonObject.get("workflowId");
				type = (String)jsonObject.get("type");
				isfavourite = jsonObject.get("isfavourite")==null?"":(String)jsonObject.get("isfavourite");
			}else{
				nodeId =getRequest().getParameter("nodeId");
				processId =getRequest().getParameter("processId");
				instanceId =getRequest().getParameter("instanceId");
				formId =getRequest().getParameter("formId");
				oldFormId =getRequest().getParameter("oldFormId");
				userId =getRequest().getParameter("userId");
				workflowid =getRequest().getParameter("workflowId");
				type =getRequest().getParameter("type");
				isfavourite = getRequest().getParameter("isfavourite")==null?"":(String)getRequest().getParameter("isfavourite");
			}
			
			String params = getRequest().getParameter("params");
			WfProcess wfProcess = tableInfoService.getProcessById(processId);
			oldFormId = wfProcess.getOldFormId();

			//isOverPending: true; 表示为已办列表
			boolean isOverPending = false;
			if(wfProcess!= null && (wfProcess.getIsOver().equals("OVER")||
					(wfProcess.getStatus() !=null &&wfProcess.getStatus().equals("1")))){
				isOverPending = true;
			}
			
			if(processId!=null&&!"".equals(processId)){
				if(wfProcess!=null&&wfProcess.getJssj()==null&&(wfProcess.getIsOver()==null||wfProcess.getIsOver().equals("NOT_OVER"))){
					wfProcess.setJssj(new Date(System.currentTimeMillis()));
					tableInfoService.update(wfProcess);
				}
			}

			if(oldFormId == null){
				oldFormId = formId; 
			}
			List<String> exsitJson = new ArrayList<String>();
			WfNode current = workflowBasicFlowService.getWfNode(nodeId);
			if(isOverPending){	
				if(type == null||"".equals(type)){//已办 且不是查看历程
					if((oldFormId.equals(formId)||(isOverPending&&!oldFormId.equals(formId))||(current!=null&&(current.getWfn_form_continue()==null ||current.getWfn_form_continue().equals("0"))))){	
						exsitJson = getLastedCommonJson(processId);
					}
				}else{////已办 查看历程
					exsitJson = getExistJson(processId);
				}
			}
			else{
				// 处理 分发第一步打开 换表单竟然显示意见
				WfNode 	wfNode = 	workflowBasicFlowService.getWfNode(nodeId);
				if(oldFormId.equals(formId)||(wfNode!=null&& (wfNode.getWfn_form_continue()==null ||wfNode.getWfn_form_continue().equals("0")))){	
					exsitJson = getExistJson(processId);
				}
			}
			//表单元素
			List<Trueform> trueList = new ArrayList<Trueform>();
			if(wfProcess!= null && (wfProcess.getIsOver().equals("OVER")||(wfProcess.getStatus() !=null &&wfProcess.getStatus().equals("1")))){
				isOver = true;
				//pdfPath = wfProcess
			}else{
				if(isfavourite!=null && isfavourite.equals("1")){
				}else{
					formId = workflowBasicFlowService.getWfNode(nodeId).getWfn_defaultform();
					String webId = getDocNumWebId("mobile", userId);
					trueList = getFormValAndLocation("out",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", "", params, webId);
				}
			}
			List<NodeInfo> nodeInfoList = getNodeList(workflowid, instanceId, nodeId,processId, userId);
			List<EmpData> empDataList = new ArrayList<EmpData>();
			
			//根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			List<WfChild> childList = workflowBasicFlowService.showChildOfWf(workflowid, nodeId);
			
			List<AllDetailElement> adeList = new ArrayList<AllDetailElement>();
			AllDetailElement ade = new AllDetailElement();
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			String processUrl = serverUrl+"/table_getProcessOfMobile.do?instanceId="+instanceId+"&workFlowId="+workflowid+"&userId="+userId;
			ade.setProcessUrl(processUrl);
			if(type != null && type.equals("process")){
				ade.setProcessUrl("");
			//	exsitJson = getExistJson(processId);
				//判读当前步骤是否 为待办 且 为移动端 历程 待办取 前面的pdf 
				// 如果 oldfromid ！= formid
				if("NOT_OVER".equals(wfProcess.getIsOver())&&oldFormId.equals(formId)){
					trueList = new ArrayList<Trueform>();
				}
			}
			ade.setExistJsonList(exsitJson);
			ade.setTrueList(trueList);
			ade.setEmpDataList(empDataList);
			ade.setNodeInfoList(nodeInfoList);
			ade.setChildList(childList);
			// 不要显示 消息
			ade.setMsgInfo("0");
			adeList.add(ade);
			String sb = "";
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			// 打开流
			PrintWriter out = getResponse().getWriter();
			sb = JSONArray.fromObject(adeList).toString();
			out.print(sb);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 
	 * 描述：获取通知公告的json
	 * 作者:蔡亚军
	 * 创建时间:2015-7-24 下午2:51:11
	 */
	public void getTzggJson(){
		String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process");	
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		try {
			JSONObject jsonObject = getJSONObject(); 
			String processId = "";
			if(jsonObject!= null){
				processId =  (String)jsonObject.get("processId");
			}else{
				processId =getRequest().getParameter("processId");
			}
			String sb = "";
			PrintWriter out = getResponse().getWriter();
			WfProcess wfProcess = tableInfoService.getProcessById(processId);
			TrueJSON trueJson = new TrueJSON();
			trueJson.setMsgInfo("0"); // 崇川不显示 消息中心
			String pdfPath = wfProcess.getPdfPath();
			String[] paths = pdfPath.split(",");
			String path = paths[1];
			String serverUrl =   SystemParamConfigUtil.getParamValueByParam("mobileUrl")+getRequest().getContextPath();
			//String serverUrl = "http://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			if(path.startsWith(oldpdfRoot)){
				path = serverUrl+ "/form/html/data/"+path.substring(path.lastIndexOf("/") + 1);
			}else if(path.startsWith(newPdfRoot)){
			    path = serverUrl+ "/form/html/workflow/"+path.substring(newPdfRoot.length());
			}else{
			    path = serverUrl+ "/form/html/"+path.substring(path.lastIndexOf("/") + 1);
			}
			trueJson.setPdfurl(path);
			trueJson.setTruepaper(wfProcess.getCommentJson());
			trueJson.setNodeInfoList(new ArrayList<NodeInfo>());
			trueJson.setChildList(new ArrayList<WfChild>());
			trueJson.setProcessUrl("");
			trueJson.setTrueform(new ArrayList<Trueform>());
			sb = JSONObject.fromObject(trueJson).toString();
			//notice.setCommentJson(wfProcess.getCommentJson());
			out.print(sb);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 描述：手机端获取表单基本页面数据
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:48:10
	 */
	public void getAllTrueJson(){
		long startTime = System.currentTimeMillis();
		long endTime;
		System.out.println("------getAllTrueJson进入 ------");
		AccessLog accessLog = new AccessLog();
		Date startDate = new Date();
		accessLog.setAccessDate(startDate);
		accessLog.setMethodName("getAllTrueJson");
		PrintWriter out = null;
		try {
			JSONObject jsonObject = getJSONObject(); 
			String nodeId = "";
			String processId = "";
			String instanceId = "";
			String formId = "";
			String oldFormId = "";
			String userId = "";
			String workflowid = "";
			String type = "";
			String isfavourite = "";
			String itemType = "";		//办件的事项类型
			String isps = "";				//是否为待办中的批示打开
			String nowProcessId = ""; //本步骤的步骤id
			String mtype = "";
			String siteId = "";
			String clientType = "";
			JSONObject obj = new JSONObject();//通用状态  (0,不展示按钮;1,可以关注提醒;2,可以补发;3,已关注)
			obj.put("cmd", "0");
			obj.put("data", "");
			
			if(jsonObject!= null){
				nodeId =  (String)jsonObject.get("nodeId");
				processId = (String)jsonObject.get("processId");
				instanceId = (String)jsonObject.get("instanceId");
				formId = (String)jsonObject.get("formId");
				oldFormId = (String)jsonObject.get("oldFormId");
				userId = (String)jsonObject.get("userId");
				workflowid = (String)jsonObject.get("workflowId");
				type = (String)jsonObject.get("type");
				isfavourite = jsonObject.get("isfavourite")==null?"":(String)jsonObject.get("isfavourite");
				itemType = (String)jsonObject.get("itemType");
				isps = jsonObject.get("isps")==null?"":(String)jsonObject.get("isps");
				nowProcessId = jsonObject.get("nowProcessId")==null?"":(String)jsonObject.get("nowProcessId");
				mtype = jsonObject.get("mtype")==null?"":(String)jsonObject.get("mtype");
				siteId = jsonObject.get("siteId")==null?"":(String)jsonObject.get("siteId");
				clientType = jsonObject.get("clientType")==null?"":(String)jsonObject.get("clientType");
			}else{
				nodeId =getRequest().getParameter("nodeId");
				processId =getRequest().getParameter("processId");
				instanceId =getRequest().getParameter("instanceId");
				formId =getRequest().getParameter("formId");
				oldFormId =getRequest().getParameter("oldFormId");
				userId =getRequest().getParameter("userId");
				workflowid =getRequest().getParameter("workflowId");
				type =getRequest().getParameter("type");
				isfavourite = getRequest().getParameter("isfavourite")==null?"":(String)getRequest().getParameter("isfavourite");
				itemType = getRequest().getParameter("itemType");
				isps = getRequest().getParameter("isps")==null?"":(String)getRequest().getParameter("isps");
				nowProcessId = getRequest().getParameter("nowProcessId")==null?"":(String)getRequest().getParameter("nowProcessId");
				mtype = getRequest().getParameter("mtype")==null?"":(String)getRequest().getParameter("mtype");
				clientType = getRequest().getParameter("clientType")==null?"":(String)getRequest().getParameter("clientType");
			}
			
			accessLog.setClientType(clientType);
			accessLog.setUserid(userId);
			if(StringUtils.isNotBlank(mtype)){
				type = mtype;
				if(mtype.equals("11")){
					HandRoundShip roundShip = new HandRoundShip();
					roundShip.setInstanceId(instanceId);
					roundShip.setUserId(userId);
					roundShip.setIsRead(1);
					businessService.updateHandRoundShip(roundShip);
				}
			}
			String params = getRequest().getParameter("params");
			String nextNodeId = "";
			boolean is_Over = false;
			isps= getRequest().getParameter("isps");
			WfProcess wfProcess = tableInfoService.getProcessById(processId);
			String allInstanceId = ""; 
			if(wfProcess != null){
				//获取下个节点的id,补发选人的时候用的
//				List<WfProcess> nextProcesses = tableInfoService.findWfProcessByInstanceIdAndStepIndex(wfProcess.getWfInstanceUid(), wfProcess.getStepIndex()+1);
				List<WfProcess> nextProcesses = tableInfoService.findWfProcessByInsAndIndex(wfProcess.getWfInstanceUid(), wfProcess.getStepIndex()+1);
				if(null != nextProcesses && nextProcesses.size()>0){
					nextNodeId = nextProcesses.get(0).getNodeUid();
				}
				
				allInstanceId = wfProcess.getAllInstanceid();
				
			}
			
			if(StringUtils.isBlank(allInstanceId)){
				allInstanceId = instanceId;
			}
			
			if(wfProcess!=null && !("NOT_OVER".equals(wfProcess.getIsOver()))){
				is_Over = true;
				String instanceId2 = wfProcess.getWfInstanceUid();
				wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId2);
			}
			
			if(isps!=null && isps.equals("1")){	//当前意见为批示意见
				ReadedEndPending entity  = new ReadedEndPending();
				entity.setInstanceId(wfProcess.getWfInstanceUid());
				entity.setUserId(userId);
				entity.setStatus("1");
				integrateService.saveReadedEndPending(entity);
			}
			
			oldFormId = wfProcess.getOldFormId();
			
			//isOverPending: true; 表示为已办列表
			boolean isOverPending = false;
			if(wfProcess!= null && (wfProcess.getIsOver().equals("OVER")||
					(wfProcess.getStatus() !=null && wfProcess.getStatus().equals("1")))){
				isOverPending = true;
			}
			if(is_Over){
				isOverPending = true;
			}
			
			//阅读办件,第一次时, 更新办件的阅读时间
			if(processId!=null&&!"".equals(processId)){
				if(wfProcess!=null && wfProcess.getJssj()==null && 
								(wfProcess.getIsOver()==null||wfProcess.getIsOver().equals("NOT_OVER"))){
					wfProcess.setJssj(new Date(System.currentTimeMillis()));
					tableInfoService.update(wfProcess);
				}
			}
			
			if(oldFormId == null){
				oldFormId = formId; 
			}
			String isDoEnd = "0";
			// 已经存在的json
			String pdfPath = wfProcess.getPdfPath();
			String exsitJson = "";
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点1 ------："+(endTime-startTime)/1000.0);
			WfNode current = workflowBasicFlowService.getWfNode(nodeId);
			if(isOverPending){	
//				TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
				TrueJson trueJson = trueJsonService.findNewestTrueJsonByInstanceId(instanceId);
				endTime = System.currentTimeMillis();
				System.out.println("------getAllTrueJson断点2 ------："+(endTime-startTime)/1000.0);
				if(trueJson!=null){
					exsitJson = trueJson.getTrueJson();
				}else{
					exsitJson = getExistJsonStr(processId);
				}
				if(CommonUtil.stringNotNULL(pdfPath)){
					if(pdfPath.split(",") != null && pdfPath.split(",").length>0){
						pdfPath = pdfPath.split(",")[0];
						String[] paths = pdfPath.split(",");
						if(paths!=null && paths.length==2){
							 pdfPath = pdfPath.split(",")[1];
						}else{
							 pdfPath = pdfPath.split(",")[0];
						}
					}
				}
				String checkProcessId = "";
				if(StringUtils.isNotBlank(nowProcessId)){
					checkProcessId = nowProcessId;
				}else{
					checkProcessId = processId;
				}
				WfProcess checwfp = tableInfoService.getProcessById(checkProcessId);
				WfNode node = workflowBasicFlowService.findFormIdByNodeId(checwfp.getNodeUid());
				if(node != null){
					List<WfProcess> wfps = tableInfoService.findWfProcessList(checwfp.getWfInstanceUid(), checwfp.getStepIndex()+1);
					Integer isReissue = node.getWfn_isreissue();
					if(isReissue != null && isReissue.equals(1)){
						boolean flag = checkCanReissue(checwfp);
						if(flag){
							JSONObject dataObj = new JSONObject();
							dataObj.put("routeType", "4");
							if(wfps!= null && wfps.size()>0){
								dataObj.put("nextNodeid", wfps.get(0).getNodeUid());
							}else{
								dataObj.put("nextNodeid", nextNodeId);
							}
							obj.put("cmd", "2");
							obj.put("data", dataObj);
						}
					}
				}
				endTime = System.currentTimeMillis();
				System.out.println("------getAllTrueJson断点3 ------："+(endTime-startTime)/1000.0);
			}else{
//				TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
				TrueJson trueJson = trueJsonService.findNewestTrueJsonByInstanceId(instanceId);
				endTime = System.currentTimeMillis();
				System.out.println("------getAllTrueJson断点4 ------："+(endTime-startTime)/1000.0);
				
				if(trueJson!=null){
					exsitJson = trueJson.getTrueJson();
				}else{
					exsitJson = getExistJsonStr(processId);
				}
				if(StringUtils.isNotBlank(pdfPath)){
					if(pdfPath.split(",") != null && pdfPath.split(",").length>0){
						pdfPath = pdfPath.split(",")[0];
					}
				}
				//移动端打开待办，判断是否可以关注提醒
				Integer isfollow = current.getWfn_isfollow();
				if(null != isfollow && isfollow.equals(1)){
					JSONObject dataObj = new JSONObject();
					//查询该办件是否被关注过
					List<FollowShip> shipList = tableInfoExtendService.getFollowShips(instanceId, userId,"");
					if(null != shipList && shipList.size()>0){
						obj.put("cmd", "3");
						obj.put("data", dataObj);
						
					}else{
						obj.put("cmd", "1");
						obj.put("data", dataObj);
					}
				}
				boolean isEndProcess = false;
				String route_type = "";
				
				//传阅节点最后一步自动办结
				if(current!=null){
					String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
					if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && autoEndNodeId.indexOf(current.getWfn_id()) == -1)){
						route_type = current.getWfn_route_type();	//流程组类型(3,为并行结合式; 4, 并行传阅式， 5，并行办理式)
						if(route_type!=null ){
							if(route_type.equals("3") || route_type.equals("4") || route_type.equals("5") || route_type.equals("6")){
								int count = 0;
								List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);
								for(int i = 0; i < sameStepWfList.size(); i++){
									if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
										count ++;
									}
								}
								
								List<WfNode> nodeList = new ArrayList<WfNode>();
								if(wfProcess.getpStepIndex()!=null && wfProcess.getpStepIndex()==1){	//办件被暂存
									WfNode wfNode = tableInfoService.getWfNodeById(wfProcess.getNodeUid());
									Object[] list = workflowBasicFlowService.showNextNode(workflowid, wfNode.getWfn_id());
									if(list!=null && list.length==2){
										if(list[0]!=null){
											nodeList = (List<WfNode>)list[0];
										}
									}
								}else{
									nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), wfProcess.getWfInstanceUid());
								}
								endTime = System.currentTimeMillis();
								System.out.println("------getAllTrueJson断点5 ------："+(endTime-startTime)/1000.0);

								for (WfNode wfn : nodeList) {
									if (("end").equals(wfn.getWfn_type())||(wfn.getNode_isReply() != null && wfn.getNode_isReply()==1)) {
										isEndProcess = true;
										break;
									}
								}
								
								
								if((count == 1) && isEndProcess){
									 isDoEnd = "1";
								}
							}
						}
					}
				}
				
				
			}
			
			//将日志信息保存入库：
			TrueJsonLog log = new TrueJsonLog();
			log.setInstanceId(instanceId);
			log.setProcessId(processId);
			log.setReadOrWriteDate(new Date());
			log.setReadOrWrite("0");
			log.setUserId(userId);
			log.setTrueJson(exsitJson);
			log.setExcute("getAllTrueJson");
			trueJsonService.saveTrueJsonLog(log);
			
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点6 ------："+(endTime-startTime)/1000.0);
			
			// 处理附件的问题
			List<SendAttachments> sattList = attachmentService.findAllSendAtts(allInstanceId + ATT_SUFFIX_NAME,null);
			List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(allInstanceId + ATT_FJSUFFIX_NAME,null);
			String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String serverUrl =   SystemParamConfigUtil.getParamValueByParam("mobileUrl")+getRequest().getContextPath();
			
		    String itemId = wfProcess.getItemId();
			WfItem item = itemService.getItemById(itemId);
			String isFlexibleForm = item.getIsFlexibleForm();
			
			List<MobileAttachment> mAttlist = new ArrayList<MobileAttachment>();
			MobileAttachment entity = null;
			if (sattList != null && sattList.size() > 0) {
				for (SendAttachments sat : sattList) {
					String skipFileType = "rar,zip,cebx";
					if((skipFileType.indexOf(sat.getFiletype()) == -1) || sat.getFiletype().equals("ceb")){
						FileUtils.byteArrayToFile(sat,attachmentService);
						entity = new MobileAttachment();
						entity.setAttId(sat.getId());
						entity.setDocguid(sat.getDocguid());
						entity.setName(sat.getFilename());
						entity.setFileLoaction(serverUrl + "/form/html/workflow/" + sat.getLocalation());
						entity.setAttType("1");
						mAttlist.add(entity);
					}
				}
			}
			
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点7 ------："+(endTime-startTime)/1000.0);
		    //表单元素
			List<Trueform> trueList = new ArrayList<Trueform>();
			if(wfProcess!= null && (wfProcess.getIsOver().equals("OVER")	
						||(wfProcess.getStatus() !=null && wfProcess.getStatus().equals("1")))){
			}else{
				if(isFlexibleForm!=null && isFlexibleForm.equals("1")){		//如果是弹性表单
					
					
				}else{							//传统的pdf附件格式
					if(isfavourite!=null && isfavourite.equals("1")){
					}else{
						formId = workflowBasicFlowService.getWfNode(nodeId).getWfn_defaultform();
						String webId = getDocNumWebId("mobile", userId);
						trueList = getFormValAndLocation("out",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", "", params, webId);
					}
				}
			}
			
			List<NodeInfo> nodeInfoList = getNodeList(workflowid, instanceId, nodeId, processId, userId);
			
			//传阅模式，最后一个人，下一步是办结时，显示办结按钮
			String route_type = "";
			boolean isEndProcess = false;
			Integer isDoInMobile = 0;
			TrueJSON trueJson = new TrueJSON();
			
			//判断是否是发改委，如果是，就传附件过去
			String fgwSiteId = SystemParamConfigUtil.getParamValueByParam("fgwSiteId");
			String testUserIds = SystemParamConfigUtil.getParamValueByParam("testUserIds");
			
			//如果是发起节点，PC暂存后移动端再上传附件，则不传正文
			boolean firstEditAtt = true;
			if(wfProcess!=null && wfProcess.getStepIndex()==1 && wfProcess.getfInstancdUid()==null){
				trueJson.setNeedFj("1");
				firstEditAtt = false;
			}else{
				trueJson.setNeedFj("0");
			}
			if(isOverPending){
			}else{
				if((StringUtils.isNotBlank(testUserIds)&&testUserIds.contains(userId))||(StringUtils.isNotBlank(fgwSiteId) && StringUtils.isNotBlank(siteId) && fgwSiteId.equals(siteId) && firstEditAtt)){
					trueJson.setAttList(mAttlist);//附件传给移动端
				}
			}
			
			trueJson.setIsDoEnd(isDoEnd);
			
			if(isOverPending){
				trueJson.setIsOver("true");
			}else{
				trueJson.setIsOver("false");
			}
			
			if(current!=null){
				trueJson.setRouteType(current.getWfn_route_type());
				trueJson.setNeedFP(current.getWfn_isSendAgain()+"");
				if(null != current.getWfn_isSendBack() && current.getWfn_isSendBack().equals(1)){
					List<WfNode> list = workflowBasicFlowService.findWfNodeByInstanceId(instanceId, processId);
					JSONArray arr = new JSONArray();
					for (WfNode wfNode : list) {
						JSONObject obj1 = new JSONObject();
						obj1.put("nodeId", wfNode.getWfn_id());
						obj1.put("nodeName", wfNode.getWfn_name());
						arr.add(obj1);
					}
					trueJson.setBackNodeList(arr.toString());
					
				}
				isDoInMobile = current.getWfn_isDoInMobile();
				
				route_type = current.getWfn_route_type();	//流程组类型(3,为并行结合式; 4, 并行传阅式， 5，并行办理式)
				if(CommonUtil.stringNotNULL(route_type)){
					if(route_type.equals("3") || route_type.equals("4") || route_type.equals("5") || route_type.equals("6")){
						//传阅最后一个人显示办结按钮
//						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);
						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
						int count = 0;
						for(int i=0; i<sameStepWfList.size(); i++){
							if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
								count ++;
							}
						}
						if(nodeInfoList != null && nodeInfoList.size() > 0){
							for(int i = 0; i < nodeInfoList.size(); i++){
								NodeInfo nodeInfo = nodeInfoList.get(i);
								if(CommonUtil.stringIsNULL(nodeInfo.getNodeName())){
									if(count == 1){
										isEndProcess = true;
										break;
									}else{
										nodeInfo.setNodeName("不办结");
									}
								}
							}
						}
					}
				}
			}
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点8 ------："+(endTime-startTime)/1000.0);
			
			//根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			List<WfChild> childList = workflowBasicFlowService.showChildOfWf(workflowid, nodeId);
			
			trueJson.setIsDoInMobile(isDoInMobile+"");
			trueJson.setCommonStatus(obj);
			if(isEndProcess){
				trueJson.setLastStep("1");
			}
			
			trueJson.setMsgInfo("0"); 
			ZwkjForm zwkjForm = zwkjFormService.getFrom(workflowid, formId, instanceId);
			Integer fontSize = zwkjForm.getFontSize();
			int imageCount = 0;
			//弹性表单
			if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
				trueJson.setFormPage(zwkjForm.getFormPageJson());
				pdfPath = wfProcess.getAttachPath();			    	//获取真实的图片地址路径
			}
			if(pdfPath!=null){
				imageCount = PdfPage.getPdfPage(pdfPath);
				if(pdfPath.startsWith(newPdfRoot)){
					pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
				}else{
					pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
				}
		    }
			
			JSONArray pathArray = new JSONArray();
			//如果是弹性表单，就不创表单信息
			if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
			}else{
				DoFile d = tableInfoService.getDoFileByElements(null,instanceId);
				//设置表单的pdfPath
				JSONObject formObj = new JSONObject();
				formObj.put("id", "form");
				formObj.put("name", "form");
				formObj.put("pdfPath", pdfPath);
				formObj.put("isSeal", "");
				formObj.put("docGuid", "");
				pathArray.add(formObj);
				if(d.getCopyNumber()!=null&&d.getCopyNumber()>0){
					WfProcess p = pendingService.getRecentProcess(instanceId);
					if(p.getPdfPath()!=null && p.getPdfPath().length()>0){
						pdfPath =  p.getPdfPath().split(",")[1];
					}
					if(pdfPath.startsWith(newPdfRoot)){
				    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
				    }else{
				    	 pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
				    }
					for(int i=0;i<d.getCopyNumber();i++){
						//设置表单的pdfPath
						formObj = new JSONObject();
						formObj.put("id", "form");
						formObj.put("name", "form");
						formObj.put("pdfPath", pdfPath.replace(".true", ".pdf"));
						formObj.put("isSeal", "");
						formObj.put("docGuid", "");
						pathArray.add(formObj);
					}
				}
			}

			trueJson.setFormPages(pathArray.size()+"");//正文页数
			
			if(current!=null && current.getWfn_formcopy() != null && current.getWfn_formcopy()==1){	//复制表单pdf路径
				trueJson.setCopyPdfPath(pdfPath.replace(".true", ".pdf"));
			}
			imageCount = pathArray.size();
			//if(imageCount==1){
				sattList.addAll(sattExtList);
				//设置附件的pdfPath
				if(null != sattList && sattList.size()>0){
					for (SendAttachments attach : sattList) {
						String skipFileType = "rar,zip,cebx";
						if((skipFileType.indexOf(attach.getFiletype()) == -1) || attach.getFiletype().equals("ceb")){
							FileUtils.byteArrayToFile(attach,attachmentService);
							if(null != attach.getPagecount() && attach.getPagecount() != 0){
								imageCount += attach.getPagecount();
							}else{
								Integer pageCount = PdfPage.getPdfPage(attach.getTopdfpath());
								attach.setPagecount(pageCount);
								attachmentService.updateSendAtt(attach);
								imageCount += pageCount;
							}
							JSONObject attObj = new JSONObject();
							attObj.put("id", attach.getId());
							attObj.put("name", attach.getFilename());
							String rePdfPath = attach.getTopdfpath().replace(newPdfRoot, serverUrl+ "/form/html/workflow/");
							attObj.put("pdfPath", rePdfPath);
							attObj.put("isSeal", attach.getIsSeal());
							attObj.put("docGuid", attach.getDocguid());
							attObj.put("filesize", attach.getFilesize());
							
							List<CutPages> cutList = attachmentService.findCutPagesListByDocId(attach.getId());
							if(cutList!=null && cutList.size()>0){
								JSONArray array = new JSONArray();
								JSONObject entity2 = null;
								CutPages cut = null;
								for(int i=0; i<cutList.size(); i++){
									cut = cutList.get(i);
									FileUtils.byteArrayToFile(cut);
									entity2 = new JSONObject();
									entity2.put("id", cut.getId());
									entity2.put("pageCount", cut.getPageCount());
									String pdfUrl = cut.getFilepath();
									String attUrl = serverUrl+ "/form/html/workflow/"+pdfUrl;
									entity2.put("pdfUrl", attUrl);
									entity2.put("sort", cut.getSort());
									entity2.put("startPage", cut.getStartPage());
									entity2.put("endPage", cut.getEndPage());
									entity2.put("curFilesize", cut.getFileSize());
									array.add(entity2);
								}
								attObj.put("files", array.toString());
							}
							pathArray.add(attObj);
						}
					}
				}
				
			trueJson.setPdfurl(pathArray.toString());			//true Json中插入
			
			//意见为空时,自动做补入操作
			if("".equals(exsitJson)){
				String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
				String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
				int  StampType = 0;
				if(usbkey == "yiyuan"){
					StampType = 0;
				}else{
					StampType = 1;
				}
				exsitJson ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+wfProcess.getWfInstanceUid()+"\",\"pages\": [{\"basicOS\": \"ios\",\"company\": \"trueway\",\"height\": 1448,\"processes\": [],\"version\": 2,\"width\": 1024}],\"resources\": []}";
			}
			
			// 获取意见常用语
			List<PersonalComment> personalComments = commentService.getPersonalComments(userId);
			List<String> personComment = new ArrayList<String>();
			for(PersonalComment pc :personalComments){
				personComment.add("{\"value\":\""+pc.getContent()+"\"}");
			}
			trueJson.setPersonalComment(personComment);		//常用语意见组合
			trueJson.setTruepaper(exsitJson);		//手写意见
			
			if(null != current){
				String is_self_loop = current.getWfn_self_loop();
				if(CommonUtil.stringNotNULL(is_self_loop) 
						&& "1".equals(is_self_loop)){
					for(NodeInfo n:nodeInfoList){
						n.setNodeName("完成");
						n.setOperate("1");//保存节点
					}
					NodeInfo nodeInfo = new NodeInfo();
					nodeInfo.setNodeId(current.getWfn_id());
					nodeInfo.setNodeName(current.getWfn_name());
					nodeInfo.setRouteType(current.getWfn_route_type());
					nodeInfo.setFormId(current.getWfn_defaultform());
					nodeInfoList.add(nodeInfo);
				}
			}
			
			trueJson.setNodeInfoList(nodeInfoList);
			trueJson.setChildList(childList);
			
			String processUrl = serverUrl+"/table_getProcessOfMobile.do?instanceId="+instanceId+"&workFlowId="+workflowid+"&userId="+userId;
			trueJson.setProcessUrl(processUrl);
			
			//历程跟已办打开时,不传输 输入框之类的信息
			if(type != null && type.equals("process")){
				trueJson.setProcessUrl("");
				if("NOT_OVER".equals(wfProcess.getIsOver())&&oldFormId.equals(formId)){
					trueList = new ArrayList<Trueform>();
				}
			}
			if(is_Over){
				if("NOT_OVER".equals(wfProcess.getIsOver()) && oldFormId.equals(formId)){
					trueList = new ArrayList<Trueform>();
				}
			}
			trueJson.setTrueform(trueList);			//菲弹性表单值
			trueJson.setIsFlexibleForm(isFlexibleForm);
			//trueformdata:保存的trueDat内容
			if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
				String isOver = "0";
				if(isOverPending){
					isOver = "1";
				}
				List<TrueformData> trueFormList = getTrueformdata("out",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", params, "", isOver);
				trueJson.setTrueformdata(trueFormList);
			}
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点9 ------："+(endTime-startTime)/1000.0);
			
			//设置意见排序
			if(current!=null){
				//1、如果步骤过程中,需要培训
				/*if(wfn_comment_sort!=null && wfn_comment_sort.equals("1")){*/
					/*String wfn_child_nodeIds = current.getWfn_child_nodeIds();
					String nodeIds = "'"+wfProcess.getNodeUid()+"',";
					if(wfn_child_nodeIds!=null && !wfn_child_nodeIds.equals("")){
						String[] ids = wfn_child_nodeIds.split(",");
						for(int i=0; i<ids.length; i++){
							nodeIds += "'"+ids[i]+"',";
						}
					}
					if(nodeIds!=null && !nodeIds.equals("")){
						nodeIds = nodeIds.substring(0, nodeIds.length()-1);
					}*/
				List<WfNode> listNode =  workflowBasicFlowService.getSortNode(workflowid);
				String nodeIds ="";
				for(WfNode n : listNode){
					nodeIds += "'"+n.getWfn_id()+"',";
				}
				if(nodeIds!=null && !nodeIds.equals("")){
					nodeIds = nodeIds.substring(0, nodeIds.length()-1);
					//1、查询相关节点中的全部人员
					List<Employee> emplist = tableInfoService.findToSortEmployeeList(allInstanceId, nodeIds);
					List<EmployeeSort> list = new ArrayList<EmployeeSort>();
					if(null != listNode && listNode.size()>0){
						EmployeeSort sort = null;
						for(Employee emp:emplist ){
							sort = new EmployeeSort();
							sort.setUserId(emp.getEmployeeGuid());
							sort.setUserName(emp.getEmployeeName());
							sort.setSort(emp.getTabindex());
							list.add(sort);
						}
					}
					trueJson.setEmpList(list);
				}
					
				/*}*/
			}
			
			List<String> processIdList = tableInfoService.getOverProcessId(instanceId);
			if(null != processIdList && processIdList.size()>0){
				JSONArray arr = new JSONArray();
				for (int i = 0; i < processIdList.size(); i++) {
					JSONObject obj2 = new JSONObject();
					obj2.put("processId", processIdList.get(i));
					obj2.put("sort", i);
					arr.add(obj2);
				}
				trueJson.setProcessIdSort(arr);
			}
			
			endTime = System.currentTimeMillis();
			System.out.println("------getAllTrueJson断点10 ------："+(endTime-startTime)/1000.0);
			//获取页面风格相关参数
			Map<String, String> formStylemap = new HashMap<String, String>();
			List<FormStyle> formStylelist = zwkjFormService.getFormStyle(formStylemap);
			
			if(fontSize != null && fontSize != 0){
				trueJson.setFontSize(fontSize+"");
			}else{
				if(formStylelist != null && formStylelist.size() > 0){
					FormStyle formStyle = formStylelist.get(0);
					if(formStyle != null){
						trueJson.setFontSize(formStyle.getFontSize());
					} 
				}
			}
			
			if(formStylelist != null && formStylelist.size() > 0){
				FormStyle formStyle = formStylelist.get(0);
				if(formStyle != null){
					trueJson.setVerticalSpacing(formStyle.getVerticalSpacing());
					trueJson.setDateFormat(formStyle.getDateFormat());
					trueJson.setFont(formStyle.getFont());
				} 
			}
			Employee emp = tableInfoService.findEmpByUserId(userId);
			trueJson.setUserName(emp.getEmployeeName());
			
			if(wfProcess!=null && wfProcess.getStepIndex()==1 && wfProcess.getfInstancdUid()==null){
				trueJson.setNeedFj("1");
			}else{
				trueJson.setNeedFj("0");
			}
			
			String leaderIds = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
			if(current!=null&&current.getWfn_isUseNewInput()!=null&&1==current.getWfn_isUseNewInput()){
				if(leaderIds.contains(userId)){
					trueJson.setPleaseOrWatch("true");
				}
			}
			String hideOpt_siteId = SystemParamConfigUtil.getParamValueByParam("hideOpt_siteId");
			if(CommonUtil.stringNotNULL(hideOpt_siteId) && hideOpt_siteId.contains(emp.getSiteId())){
				if(CommonUtil.stringNotNULL(leaderIds) && leaderIds.contains(emp.getEmployeeGuid())){
					trueJson.setNeedHideOperate("false");
				}else{
					trueJson.setNeedHideOperate("true");
				}
			}else{
				trueJson.setNeedHideOperate("false");
			}
			WfNode wfNode = tableInfoService.getWfNodeById(nodeId);
			
			if(wfNode!=null && wfNode.getWfn_autoNoname()!=null && wfNode.getWfn_autoNoname()==1){
				trueJson.setNeedName("false");
			}else{
				trueJson.setNeedName("true");
			}
			
			String sb = "";
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			out = getResponse().getWriter();
			JsonConfig jsonConfig=new JsonConfig();
	        jsonConfig.setExcludes(new String[]{"warehouseMainList","reWarehouseMainList","sellMainList","reSellMainList"});
			sb = JSONObject.fromObject(trueJson,jsonConfig).toString();
			out.print(sb);
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			if(out!=null){
				out.close();
			}
		}
		endTime = System.currentTimeMillis();
		System.out.println("------getAllTrueJson结束 ------："+(endTime-startTime)/1000.0);
		long l = startDate.getTime()-(new Date()).getTime();
		accessLog.setAccessTime(l+"");
		tableInfoExtendService.addAccessLog(accessLog);
	}
	
	/**
	 * 
	 * 描述：获取true表单元素值
	 * @param server
	 * @param userId
	 * @param workflowid
	 * @param nodeId
	 * @param processId
	 * @param instanceId
	 * @param formId
	 * @param oldFormId
	 * @param value
	 * @param params
	 * @param webId
	 * @return List<TrueformData>
	 * 作者:蔡亚军
	 * 创建时间:2016-12-6 下午2:26:51
	 */
	public List<TrueformData> getTrueformdata(String server ,String userId,String workflowid,
			String nodeId,String processId,String instanceId,String formId,String oldFormId,
			String value,String params, String webId, String isOver){
		if(formId==null || formId.equals("") || formId.equals("null")){
			return null;
		}
		ZwkjForm form = zwkjFormService.getOneFormById(formId);
		String locations = form.getElementLocationJson();
		JSONArray jsonArray = JSONArray.fromObject(locations);
		// 部门id
		String deptId = "";
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if (emp != null && !("").equals(emp)) {
			deptId = emp.getDepartmentGuid();
		}
		if (deptId == null || ("").equals(deptId)) {
			emp = tableInfoService.findEmpByUserId(userId);
			deptId = emp.getDepartmentGuid();
		}
		// 根据部门id 获取 大部门id
		if(deptId != null || !("").equals(deptId)){
			String  depts = (String) getSession().getAttribute(MyConstants.DEPARMENT_ID);
			if(StringUtils.isBlank(depts)){
				depts = departmentService.findSencodDep(deptId);
			}
			String[] _depts = depts.replaceAll("'", "").split(",");
			webId = _depts[_depts.length-2];
		}
		WfProcess process = tableInfoService.getProcessById(processId);
		if (process != null && CommonUtil.stringNotNULL(process.getEntrustUserId())) { // 如果有委托，权限使用委托人的权限，传入委托人id
			userId = process.getEntrustUserId();
		}
		// 用户权限
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(userId, deptId, nodeId, workflowid);// linkPhone=1,text
		// 获取表单对应关系(主要是获取中文名)
		List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
		// TODO----------支持一个表，后期需要修改
		// 表单元素的list
		List<TrueformData> trueList = new ArrayList<TrueformData>();

		// 获取元素的值---------------start-------------------
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		// 当前节点所绑定的表单Id
		String newFormId = wfNode.getWfn_defaultform();
		// 父流程的f_formId
		String midInstanceId = instanceId;
		
		//赋值--为下面查询父表单的值
		if(process != null){
			//主到子流程的第一步时
			if(("1").equals(process.getIsChildWf()) && process.getStepIndex() == 1 && process.getDoType() != null && process.getIsManyInstance().equals("1")){
				List<WfProcess> processList = tableInfoService.getProcessList(process.getfInstancdUid());
				oldFormId = processList.get(0).getFormId();
				instanceId = process.getfInstancdUid();
			}
		}
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (process == null ||(process.getStepIndex() == 1 && !("").equals(process.getDoType()) && ("1").equals(process.getIsChildWf()))) {
			isFirstChildWf = "true";
		}
		// *********************************子流程不换表单可用，换表单仍需修改*********************************
		// 查询表单的值--主流程到子流程过程---换表单
		if(process != null && process.getIsManyInstance() != null && !("").equals(process.getIsManyInstance())){
			value = this.saveForm(oldFormId, 2,midInstanceId,newFormId,null, workflowid,instanceId,isFirstChildWf,"");
			if(value==null || value.equals("")){
				value = this.saveForm(oldFormId, 2,instanceId,newFormId,null, workflowid,instanceId,isFirstChildWf,"");
			}
		}else{
			try {
				value = this.saveForm(oldFormId, 2,instanceId,newFormId,null, workflowid,"",isFirstChildWf,"");
			} catch (Exception e) {
				if(process!= null){
					value = "";
				}
			}
		}
		 boolean isExistReceiveList = false;
		 Integer stepIndex = 0;
		 if(process!=null){
		     DoFileReceive dfr = tableInfoService.getDoFileReceive(process.getWfInstanceUid());
		     if(dfr!= null){
			 isExistReceiveList = true;
		     }
		     stepIndex = process.getStepIndex();
		 }
		if(stepIndex == 1 && isExistReceiveList){
		    //默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.getSwByInstanceId(process.getWfInstanceUid());
			String docValue = "";
		    //查找对应关系,入库收文表
			for (FormTagMapColumn ft : list) {
				String tagValue = "";
				if(("lwbt").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("yfdw").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("lwdw").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("fs").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("lwh").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("gwlx").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("swsj").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("fwsj").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}
				if(!tagValue.equals("")){
					docValue +=  ft.getAssignColumnName() +":"+  tagValue +";";
				}
			}
			value = docValue + value;
		    }
		// 字典表
		Map<String, String> select_old = formAction.selectDicValuesForMobile(formId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
		Map<String, String>  dicMap = new HashMap<String, String>();
		Map<String, String> selects = new HashMap<String, String>();
		
		//params值,表示为 表单外部初始化带值
		if(params!=null && !params.equals("")){
			String[] param = params.split("[*][*][*]");
			for(int i=0; i<param.length; i++){
				String par = param[i];
				if(par!=null && !par.equals("")){
					String[] parval = par.split("[*][*]");
					if(parval!=null && parval.length>=2){
						boolean isCheckBox = false;
						for(String key : select_old.keySet()){
							if(key!=null && key.equals(parval[0])){	//匹配到字典表
								String vba = parval[1];
								if(vba!=null && !vba.equals("")){
									String[] vab = vba.split(",");
									String content = "";
									for(int j=0; j<vab.length; j++){
										content += vab[j]+",";
									}
									if(content!=null && content.length()>0){
										content = content.substring(0, content.length()-1);
									}
									dicMap.put(key, content+"[--]"+content);
								}
								isCheckBox = true;
							}
						}
						if(!isCheckBox){
							value += parval[0]+":"+parval[1]+";";
						}
					}
				}
			}
		}
		//map去除旧数据,添加新的dic
		if(dicMap!=null && dicMap.size()>0){
			//遍历dicMap
			for(String key : dicMap.keySet()){
				selects.put(key, dicMap.get(key));
			}
			//遍历原有的字典表选项
			for(String key : select_old.keySet()){
				if(!selects.containsKey(key)){
					selects.put(key, select_old.get(key));
				}
			}
		}else{
			selects = select_old;
		}
		String fwDepName = SystemParamConfigUtil.getParamValueByParam("fwDepName");
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---VC_SQR:0,text
				String isWrite = entry.getValue().split(",")[0];
				String tagType = entry.getValue().split(",")[1];
				if ( (isWrite.equals("2") || isWrite.equals("1"))			//表单属于只读或者读写
					&& !tagType.equals("hidden") && !tagType.equals("comment") && !tagType.equals("attachment")) { 
					// 表单元素的临时类
					TrueformData tf = new TrueformData();
					// 循环标志位
					int cycle = 0;
					// 设置中文名
					for (FormTagMapColumn ftm : list) {
						if(ftm.getFormtagname().equalsIgnoreCase(entry.getKey())){
						    	tf.setTextMaxLen(ftm.getTextMaxLen());//设置文本最大长度
							Object[] obj = tableInfoService.getIsBtName(workflowid, nodeId, newFormId, ftm.getFormtagname(), userId);
							if(obj!=null){
								tf.setIsbt((String)obj[2]);
							}else{
								tf.setIsbt("0");
							}
							tf.setCorrelation(ftm.getCorrelation());//设置关联字段名称
							tf.setConnectfield(ftm.getConnectfield());//设置关联修改字段名称
							tf.setCollumnName(ftm.getColumnCname());
							tf.setId(entry.getKey());			//表单页面的页面元素属性
							tf.setName(entry.getKey());
							tf.setZname(ftm.getColumnCname());
							tf.setIsWrite((isWrite!=null && isWrite.equals("2"))?"1":"0");		//设置表单的读写权限
							
							if(wfNode.getWfn_isUseNewInput()!=null&&wfNode.getWfn_isUseNewInput().equals(1)){
								String neewNewInputUsers = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
								if(neewNewInputUsers.contains(userId)){
									tf.setIsPleaseOrWatch(ftm.getIsPleaseOrWatch()); //是否使用请阅意见模式
								}
							}
							
							//字段规则
							tf.setAssociatedColumns(ftm.getAssociatedColumns());
							tf.setRegularExpression(ftm.getRegularExpression());
							tf.setRegularMeanings(ftm.getRegularMeanings());
							tf.setGenerationMode(ftm.getGenerationMode());
							//字段规则
							
							String tempUrl = getTagActionurl(ftm, server, processId, userId, deptId, instanceId, workflowid, webId, formId);
							//tf.setActionurl(tempUrl);
							String actionurl = tempUrl;
							if(!actionurl.equals("")){
								String[] values = actionurl.split(",");
								if(values!= null& values.length>0){
									actionurl = values[0];
									if(values.length>1){
										tf.setUrlHeight(Integer.parseInt(values[1].trim()));
										tf.setUrlWidth(Integer.parseInt(values[2].trim()));
										tf.setActionurl(actionurl);
									}
								}
							}
							if(("checkbox").equals(ftm.getFormtagtype())){
								tf = setFormTagvalue(ftm, value, selects, tf, "checkbox");
							} else if (("radio").equals(ftm.getFormtagtype())) {
								tf = setFormTagvalue(ftm, value, selects, tf, "radio");
							} else if (("select").equals(ftm.getFormtagtype())) {
								tf = setFormTagvalue(ftm, value, selects, tf, "select");
							} else {
								if (value != null && !("").equals(value)) {
									String[] values = value.split(";");
									for (String val : values) {
										if ((ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getAssignColumnName()))||
												(!ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getColumnname()))){
												int index = val.indexOf(":");
												String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
												//String[] vals = val.split(":");
												if (vals.length > 1) {
													if(("").equals(vals[1])){
														if(!("").equals(ftm.getConstantValue()) && !"1".equals(isOver)){
															String cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
															// 判断actionurl
															if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
																String[] spt = tf.getActionurl().split("name=");
																if(spt.length==2){
																	if(spt[1].equals(emp.getEmployeeLoginname())){
																		cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
																	}else{
																		cval = "";
																	}
																}
															}
															tf.setValue(cval);
														}
													}else{
														tf.setValue(vals[1]);
													}
												} else {
													tf.setValue("");
												}
												String isTrueArea = ftm.getTrueArea();
												if(isTrueArea!=null && isTrueArea.equals("1")){
													tf.setType("true");
												}else if(isTrueArea!=null && isTrueArea.equals("2")){
													tf.setType("img");
												}else{
													tf.setType("text");
												}
												cycle++;
												break;
											}else if((!ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getAssignColumnName()))){
												int index = val.indexOf(":");
												String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
												tf.setValue(vals[1]);
												tf.setType("text");
												cycle++;
												break;
											}
									}
									if (cycle > 0){
										break;
									}else {
										String cval = "";
										if(!"1".equals(isOver)){
											cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
										}
										tf.setType("text");
										// 判断actionurl
										if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
											String[] spt = tf.getActionurl().split("name=");
											if(spt.length==2){
												if(spt[1].equals(emp.getEmployeeLoginname())){
													cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
												}else{
													cval = "";
												}
											}
										}
										tf.setValue(cval);
									}
								}else{
									if(!("").equals(ftm.getConstantValue())){
										String cval = "";
										if(!"1".equals(isOver)){
											cval = getDefaultValue(ftm, userId, fwDepName, instanceId,workflowid);
										}
										// 判断actionurl
										if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
											String[] spt = tf.getActionurl().split("name=");
											if(spt.length==2){
												if(spt[1].equals(emp.getEmployeeLoginname())){
													cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
												}else{
													cval = "";
												}
											}
										}
										
										tf.setValue(cval);
									}else{
										tf.setValue("");
									}
									String isTrueArea = ftm.getTrueArea();
									if(isTrueArea!=null && isTrueArea.equals("1")){
										tf.setType("true");
									}else if(isTrueArea!=null && isTrueArea.equals("2")){
										tf.setType("img");
									}else{
										tf.setType("text");
									}
								}
							}
						}
					}
					trueList.add(tf);
				}else if (entry.getValue().split(",")[0].equals("0")  &&   entry.getValue().split(",")[1].equals("hidden")){
					for (int j = 0; j < jsonArray.size(); j++) {
						JSONObject jo = jsonArray.getJSONObject(j);
						if(jo.isNullObject()){
							continue;
						}
						String name = jo.get("name").toString();
						if(entry.getKey().equalsIgnoreCase(name)){
							TrueformData tf = new TrueformData();
							tf.setId(formId);
							tf.setType("hidden");
							tf.setIsbt("0");
							// hidden 设置值
							tf.setValue(String.valueOf(jo.get("value")));
							// 处理默认值
							FormTagMapColumn ftm = zwkjFormService.getFormTagMapColumnByFormId(formId,name);
							if(process == null && ftm != null&& (tf.getValue() == null|| "".equals(tf.getValue()))){
								if(!("").equals(ftm.getConstantValue())){
									String cval = "";
									if(!"1".equals(isOver)){
										cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
									}
									// 判断actionurl
									if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
										String[] spt = tf.getActionurl().split("name=");
										if(spt.length==2){
											if(spt[1].equals(emp.getEmployeeLoginname())){
												cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
											}else{
												cval = "";
											}
										}
									}
									tf.setValue(cval);
								}else{
									tf.setValue("");
								}
							}
							trueList.add(tf);
							break;
						}
					}
				}
			}
		}
		return trueList;
	}
	
	
	/**
	 * 
	 * 描述：补充业务表单的值
	 * @param ftm
	 * @param value
	 * @param selects
	 * @param tf
	 * @return TrueformData
	 * 作者:蔡亚军
	 * 创建时间:2016-12-8 上午10:15:36
	 */
	public TrueformData setFormTagvalue(FormTagMapColumn ftm, String value, Map<String, String> selects, 
			TrueformData tf , String formtagtype){
		Integer cycle = 0;
		if(selects!=null && !("").equals(selects)){		//select字典表
			for (String  key : selects.keySet()) {
				if(key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){		//对应表单对应对应的select值
					String[] values = value.split(";");		
					if(value!=null && !value.equals("")){
						for (String val : values) {
							String[] vals = val.split(":");
							if(key.toLowerCase().equals((val.split(":")[0].toLowerCase()))){
								if(vals.length > 1){
									tf.setValue(vals[1].replace('^', ';'));
								}else{
									tf.setValue("");
								}
							}
						}
					}
					String[] temp = selects.get(key).split("\\[--\\]");
					String[] keys = temp[0].split(",");
					String[] val1 = temp[1].split(",");
					String defaultV = temp[2];
					if(StringUtils.isBlank(value) && StringUtils.isNotBlank(defaultV) && !defaultV.equals("null")){
						tf.setValue(val1[Integer.parseInt(defaultV)-1]);
					}
					List<KeyValue> ll = new ArrayList<KeyValue>();
					for(int t = 0 ; t < keys.length; t++){
						String [] val1s = val1[t].split("##");
						if(val1s.length>1){
							ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
						}else{
							ll.add(new KeyValue(keys[t],val1[t],""));
						}
					}
					if(ll.size() > 0){
					   tf.setValues(ll);
					}
					tf.setType(formtagtype);
					cycle++;
					break;
				}
			}
		}
		return tf;
	}
	
	
	/**
	 * 
	 * 描述：获取页面元素调用的url地址
	 * @param ftm
	 * @param server
	 * @param processId
	 * @param userId
	 * @param deptId
	 * @param instanceId
	 * @param workflowid
	 * @param webId
	 * @param formId
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-12-8 上午9:44:55
	 */
	public String getTagActionurl(FormTagMapColumn ftm , String server, 
				String processId, String userId, String deptId , String instanceId, String workflowid,
				String webId, String formId){
		String actionurl = ftm.getOtherData()==null?"":ftm.getOtherData();
		// 处理是给 pc , 还是移动端掉用的
		if(!actionurl.equals("")){
			String tempActionUrl[] = actionurl.split("\\|\\|");
			if(tempActionUrl.length ==1){
				actionurl = tempActionUrl[0];
			}else{
				if("in".equals(server)){
					actionurl = tempActionUrl[0];
				}else if("out".equals(server)){
					actionurl = tempActionUrl[1];
				}
			}
		}
		// 获取字典表
		if(!actionurl.equals("")){
			String key = actionurl.substring(0, actionurl.indexOf("/"));
			List<WfDictionary> keys = dictionaryService.getDictionaryByName("urlSetting");
			for(int index = 0 ; index <keys.size() ; index++){
				WfDictionary dic = keys.get(index);
				String[] dicKeys = dic.getVc_key().split(",");
				String[] dicValues = dic.getVc_value().split(",");
				for(int j = 0 ; j < dicKeys.length ; j++)
				if(dicKeys[j].equals(key)){
					actionurl = dicValues[j]+"/"+actionurl;
					break;
				}
			}
		}
		String tempUrl = actionurl;
		if(actionurl.indexOf("processId=processId") >-1){
			tempUrl = tempUrl.replace("processId=processId", "processId="+processId);
		}
		if(actionurl.indexOf("userid=userid") >-1){
			tempUrl = tempUrl.replace("userid=userid", "userid="+userId);
		}
		if(actionurl.indexOf("deptId=deptId") >-1){
			tempUrl = tempUrl.replace("deptId=deptId", "deptId="+deptId);
		}
		if(actionurl.indexOf("instanceId=instanceId") >-1){
			tempUrl = tempUrl.replace("instanceId=instanceId", "instanceId="+instanceId);
		}
		if(actionurl.indexOf("workflowId=workflowId") >-1){
			tempUrl = tempUrl.replace("workflowId=workflowId", "workflowId="+workflowid);
		}
		if(actionurl.indexOf("webId=webId") >-1){
			tempUrl = tempUrl.replace("webId=webId", "webId="+webId);
		}
		if(actionurl.indexOf("formId=formId") >-1){
			tempUrl = tempUrl.replace("formId=formId", "formId="+formId);
		}
		WfProcess process = tableInfoService.getProcessById(processId);
		if(actionurl.indexOf("siteId=siteId") >-1){
			String siteId = "";
			if(process!=null){
				try{
					siteId = itemService.getItemById(process.getItemId()).getVc_ssbmid();
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
			tempUrl = tempUrl.replace("siteId=siteId", "siteId="+siteId);
		}
		if(actionurl.indexOf("nextNodeId=nextNodeId") >-1){
			String nextNodeId = "";
			if(process!=null){
				try{
					List<WfNode> nodeList = new ArrayList<WfNode>();
					nodeList = workflowBasicFlowService.showNode(process.getWfUid(), process.getNodeUid(), process.getWfInstanceUid());
					if(nodeList!=null&&nodeList.size()>0){
						nextNodeId = nodeList.get(0).getWfn_id();//获取下一个节点的id
					}
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
			tempUrl = tempUrl.replace("nextNodeId=nextNodeId", "nodeId="+nextNodeId);
		}
		String nodeId = "";
		WfNode wfNode = null;
		if(process!=null){
			nodeId = process.getNodeUid();
			wfNode = tableInfoService.getWfNodeById(nodeId);
		}
		if(actionurl.indexOf("nodeId=nodeId") > -1){
			if(CommonUtil.stringNotNULL(nodeId)){
				tempUrl = tempUrl.replace("nodeId=nodeId", "nodeId="+nodeId);
			}
		}
		if(actionurl.indexOf("routType=routType") > -1){
			if(wfNode!=null){
				tempUrl = tempUrl.replace("routType=routType", "routType="+wfNode.getWfn_route_type());
			}
		}
		return tempUrl;
	}
	
	
	
	
	/**
	 * 获取流程最新一步意见
	 * @param processId
	 * @return
	 * @throws IOException
	 */
	public List<String>  getLastedCommonJson(String processId)throws IOException{
		List<String> jsonString = new ArrayList<String>();
		WfProcess process = tableInfoService.getProcessById(processId);
		if(process!=null){
			String instanceid  = process.getWfInstanceUid();
			List<WfProcess> processList = tableInfoService.getProcessList(instanceid);
			if(processList!=null && processList.size() > 0){
				int size = processList.size();
				WfProcess wfp = null;
				for(int i=0; i<size; i++){
					wfp = processList.get(i);
					if(wfp.getIsMaster() != null && wfp.getIsMaster()==1){
						break;
					}
				}
				String commentJson = wfp.getCommentJson();
				if (commentJson != null &&!("").equals(commentJson)) {
					jsonString.add(commentJson.trim());
				}
			}
		}
		return jsonString;
	}
	
	

	/**
	 * 获取已经存在的json
	 * 
	 * @throws IOException
	 */
	public List<String> getExistJson(String processId) throws IOException {
		// JSONObject jsonObject = getJSONObject();
		// 步骤id
		// String processId = (String)jsonObject.get("processId");
		WfProcess process = tableInfoService.getProcessById(processId);
		String commentJson = process.getCommentJson();
		// String out = "";
		List<String> jsonString = new ArrayList<String>();
		if (commentJson != null &&!("").equals(commentJson)) {
//			commentJson = commentJson.replaceAll("\"username\":\"[^\"]*?\"", "\"username\":\"\"");
//			commentJson = commentJson.replaceAll("\"sendtime\":\"[^\"]*?\"", "\"sendtime\":\"\"");
			jsonString.add(commentJson.trim());
			// out = JSONArray.fromObject(jsonString).toString();
		}
		return jsonString;
		// getResponse().getWriter().print(out);
		// getResponse().getWriter().close();
	}

//+++ new 
	/**
	 * 获取流程最新一步意见
	 * @param processId
	 * @return
	 * @throws IOException
	 */
	public String  getLastedCommonJsonStr(String processId)throws IOException{
		String jsonString = "";
		WfProcess process = tableInfoService.getProcessById(processId);
		if(process!=null){
			String instanceid  = process.getWfInstanceUid();
			List<WfProcess> processList = tableInfoService.getProcessList(instanceid);
			
			if(processList!=null && processList.size() > 0){
				int size = processList.size();
				WfProcess wfp = null;
				for(int i=0; i<size; i++){
					wfp = processList.get(i);
					if(wfp.getIsMaster() != null && wfp.getIsMaster()==1){
						break;
					}
				}
				String commentJson = wfp.getCommentJson();
				if (commentJson != null &&!("").equals(commentJson)) {
					jsonString = commentJson.trim();
				}
			}
		}
		if("".equals(jsonString)){
			String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
			String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
			int  StampType = 0;
			if(usbkey == "yiyuan"){
				StampType = 0;
			}else{
				StampType = 1;
			}
			jsonString ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+process.getWfInstanceUid()+"\",\"pages\": [{\"basicOS\": \"ios\",\"company\": \"trueway\",\"height\": 1448,\"processes\": [],\"version\": 2,\"width\": 1024}],\"resources\": []}";
		}
		return jsonString;
	}
	
	

	/**
	 * 获取已经存在的json
	 * 
	 * @throws IOException
	 */
	public String getExistJsonStr(String processId) throws IOException {
		WfProcess process = tableInfoService.getProcessById(processId);
		String commentJson = process.getCommentJson();
		// String out = "";
		String jsonString = "";
		if (commentJson != null &&!("").equals(commentJson)) {
			jsonString = commentJson.trim();
		}
		if("".equals(jsonString)){
			String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
			String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
			int  StampType = 0;
			if(usbkey == "yiyuan"){
				StampType = 0;
			}else{
				StampType = 1;
			}
			jsonString ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+process.getWfInstanceUid()+"\",\"pages\": [{\"basicOS\": \"ios\",\"company\": \"trueway\",\"height\": 1448,\"processes\": [],\"version\": 2,\"width\": 1024}],\"resources\": []}";
		}
		return jsonString;
	}
	/**
	 * 手机端显示表单内容
	 * 
	 * @throws IOException
	 */
	public List<MobileElement> getFormValueOfMobile(String userId,
			String workflowid, String nodeId, String processId,
			String instanceId, String formId) throws IOException {
		List<MobileElement> moList = getFormVal(userId, workflowid, nodeId,
				processId, instanceId, formId);
		return moList;
	}

	/**
	 * web端显示表单内容
	 */
	public void getFormValueOfWeb() {
		// 用户id
		String userId = getRequest().getParameter("userId");
		// 流程id
		String workflowid = getRequest().getParameter("workflowId");
		// 节点id
		String nodeId = getRequest().getParameter("nodeId");
		// 步骤id
		String processId = getRequest().getParameter("processId");
		// 流程实例id
		String instanceId = getRequest().getParameter("instanceId");
		// 表单id
		String formId = getRequest().getParameter("formId");
		// JSONObject jsonObject = getJSONObject();
		// String userId = (String)jsonObject.get("userId");
		// String workflowid = (String)jsonObject.get("workflowId");
		// String nodeId = (String)jsonObject.get("nodeId");
		// String processId = (String)jsonObject.get("processId");
		// String instanceId = (String)jsonObject.get("instanceId");
		// String formId = (String)jsonObject.get("formId");

		List<MobileElement> moList = getFormVal(userId, workflowid, nodeId, processId, instanceId, formId);
		String sb = "";
		HttpServletResponse response = getResponse();
		response.setCharacterEncoding("utf-8");
		// 打开流
		PrintWriter out;
		try {
			out = getResponse().getWriter();
			sb = JSONArray.fromObject(moList).toString();
			out.print(sb);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 表单元素
	 * 
	 * @param userId
	 * @param workflowid
	 * @param nodeId
	 * @param processId
	 * @param instanceId
	 * @param formId
	 * @return
	 */
	public List<MobileElement> getFormVal(String userId, String workflowid, String nodeId, String processId, String instanceId, String formId) {
		// 部门id
		String deptId = "";
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		if (emp != null && !("").equals(emp)) {
			deptId = emp.getDepartmentGuid();
		}
		if (deptId == null || ("").equals(deptId)) {
			Employee empp = tableInfoService.findEmpByUserId(userId);
			deptId = empp.getDepartmentGuid();
		}
		WfProcess process = tableInfoService.getProcessById(processId);
		if (process != null
				&& CommonUtil.stringNotNULL(process.getEntrustUserId())) { // 如果有委托，权限使用委托人的权限，传入委托人id
			userId = process.getEntrustUserId();
		}

		// 用户权限
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(
				userId, deptId, nodeId, workflowid);// linkPhone=1,text
		// 获取表单对应关系(主要是获取中文名)
		List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
		// TODO----------支持一个表，后期需要修改
		List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(list.get(0).getTablename());

		// 表单元素的list
		List<FormElement> feList = new ArrayList<FormElement>();

		// 获取元素的值---------------start-------------------
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		// 当前节点所绑定的表单Id
		String newFormId = wfNode.getWfn_defaultform();
		String oldFormId = formId;
		// 赋值--为下面查询父表单的值
		if (!("").equals(process.getfInstancdUid()) && process.getfInstancdUid() != null && ("0").equals(process.getIsManyInstance())) {
			instanceId = process.getfInstancdUid();
		}
		// 查询表单的值
		String value = "";
		try {
			value = this.saveForm(oldFormId, 2, instanceId, newFormId, null, workflowid,"","",userId);
		} catch (Exception e) {
			// 第一次打开子流程的内部流程，取中间流程的值--当前找不到抛异常取父节点的值
			value = this.saveForm(oldFormId, 2, process.getfInstancdUid(), newFormId, null, workflowid,"","",userId);
		}
		// 获取元素的值---------------end-------------------
		List<String> commentTypeList = new ArrayList<String>();
		// 字典表
		Map<String, String> selects = formAction
				.selectDicValuesForMobile(oldFormId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---
																			// VC_SQR:0,text
				// 表单元素的临时类
				FormElement fe = new FormElement();
				// 循环标志位
				int cycle = 0;
				// 设置中文名
				for (FormTagMapColumn ftm : list) {
					if (ftm.getFormtagname().equals(entry.getKey())) {
						fe.setChinese(ftm.getColumnCname());
						// 设置中文名后才设置其他属性
						if (wfFieldInfoList != null
								&& wfFieldInfoList.size() != 0
								&& !("").equals(wfFieldInfoList)) {
							for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
								// 查找date日期类型
								if (ftm.getColumnname() != null
										&& !("").equals(ftm.getColumnname())) {
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(entry
											.getKey().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										fe.setDb_type("date");
										break;
									}
								}
							}
						}
						if (("comment").equals(ftm.getFormtagtype())) {
							if (!commentTypeList.contains(ftm.getFormtagname()
									+ ":" + entry.getValue().split(",")[0]
									+ ";" + ftm.getColumnCname())) {
								commentTypeList.add(ftm.getFormtagname() + ":"
										+ entry.getValue().split(",")[0] + ";"
										+ ftm.getColumnCname());
								break;
							}
						} else if (("checkbox").equals(ftm.getFormtagtype())) {
							if (value != null && !("").equals(value)) {
								String[] values = value.split(";");// 表单的值
								if (selects != null && !("").equals(selects)) {
									for (String key : selects.keySet()) {
										for (String val : values) {
											String[] vals = val.split(":");
											if (key.toLowerCase().equals(
													(val.split(":")[0]))) {
												if (vals.length > 1) {
													fe.setValue(selects
															.get(key)
															+ "--"
															+ vals[1]);
												} else {
													fe.setValue(selects
															.get(key)
															+ "--null");
												}
												cycle++;
												break;
											}
										}
										if (cycle > 0)
											break;
									}

								}
								if (cycle > 0)
									break;
							}
						} else if (("radio").equals(ftm.getFormtagtype())) {
							if (selects != null && !("").equals(selects)) {
								for (String key : selects.keySet()) {
									if (key.toLowerCase().equals(
											entry.getKey().toLowerCase())) {
										String val = selects.get(key);
										fe.setValue(val);
										cycle++;
										break;
									}
								}
								if (cycle > 0)
									break;
							}
						} else {
							if (value != null && !("").equals(value)) {
								String[] values = value.split(";");
								for (String val : values) {
									if ((val.split(":")[0]).equals(entry
											.getKey())) {
										String[] vals = val.split(":");
										if (vals.length > 1) {
											fe.setValue(vals[1]);
										} else {
											fe.setValue("");
										}
										cycle++;
										break;
									}
								}
								if (cycle > 0)
									break;
							}
						}
					}
				}
				// 设置name
				fe.setName(entry.getKey());
				// 设置类型(text、select...)
				fe.setType(entry.getValue().split(",")[1]);
				// 设置权限
				fe.setLimit(entry.getValue().split(",")[0]);
				feList.add(fe);
			}
		}
		// 意见元素的list
		List<CommentElement> ceList = new ArrayList<CommentElement>();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// 循环表单中有几种意见类型
		if (commentTypeList.size() != 0 && commentTypeList != null) {
			for (String str : commentTypeList) {
				// 查出所有符合条件的标签
				List<Comment> comments = commentService.findByInstanceId(
						instanceId, instanceId
								+ str.split(";")[0].split(":")[0]);
				if (comments.size() > 0 && comments != null) {
					for (Comment comment : comments) {
						CommentElement ce = new CommentElement();
						ce.setCommentName(str);
						ce.setContent(comment.getContent());
						ce.setPersonName(comment.getUserName());
						ce.setSignTime(sdf.format(comment.getSigndate()));
						ce.setLimit(str.split(";")[0].split(":")[1]);
						ce.setInstanceId(comment.getInstanceId());
						ce.setStepId(comment.getStepId());
						ce.setTagId(comment.getTagId());
						ceList.add(ce);
					}
				}
			}
		}

		// 意见的json
		// String commentJson = "";
		// if(process != null){
		// commentJson = process.getCommentJson();
		// }

		// 所有元素
		List<MobileElement> meList = new ArrayList<MobileElement>();
		MobileElement me = new MobileElement();
		// me.setCeList(ceList);
		me.setFeList(feList);
		// me.setCommentJson(commentJson);
		meList.add(me);
		return meList;
		/***
		 * 例子： [{"ceList":[{"commentName":"nbyj:1;拟办意见","content":"请研究办理",
		 * "instanceId"
		 * :"FC0E8AB5-B71F-4BEC-AF91-E418B310AD26","limit":"1","personName"
		 * :"华巍","signTime":"2013-07-23 11:05:52","stepId":
		 * "31C56635-5569-4EA6-BD39-10E388D90663"
		 * ,"tagId":"FC0E8AB5-B71F-4BEC-AF91-E418B310AD26nbyj"
		 * },{"commentName":"nbyj:1;拟办意见"
		 * ,"content":"请速办","instanceId":"FC0E8AB5-B71F-4BEC-AF91-E418B310AD26"
		 * ,"limit"
		 * :"1","personName":"陆建东","signTime":"2013-07-23 11:19:53","stepId"
		 * :"1125CD1A-9F05-4132-A09B-16D95E0717D1"
		 * ,"tagId":"FC0E8AB5-B71F-4BEC-AF91-E418B310AD26nbyj"
		 * }],"feList":[{"chinese"
		 * :"签发人","limit":"1","name":"","type":"text","value"
		 * :"张飞"},{"chinese":""
		 * ,"limit":"1","name":"","type":"text","value":"市政府办公室"
		 * },{"chinese":"印发日期"
		 * ,"limit":"1","name":"","type":"text","value":""},{"chinese"
		 * :"","limit":"1","name":"","type":"hidden","value":
		 * "C8505818-4A1B-4DBC-B097-3C7DDACBBE34"
		 * },{"chinese":"拟办意见","limit":"1",
		 * "name":"","type":"comment","value":""}
		 * ,{"chinese":"印发单位","limit":"1","name"
		 * :"","type":"text","value":"南通市政府办公室"
		 * },{"chinese":"发文机构","limit":"1","name"
		 * :"","type":"text","value":"南通市政府办公室"
		 * },{"chinese":"标题","limit":"1","name"
		 * :"","type":"text","value":"市政府办公室001"
		 * },{"chinese":"","limit":"1","name"
		 * :"","type":"hidden","value":"F83EA553-A3D3-40B7-809C-881EE764C80D"
		 * },{"chinese"
		 * :"紧急程度","limit":"1","name":"","type":"select","value":"1"}
		 * ,{"chinese":
		 * "","limit":"1","name":"","type":"wh","value":""},{"chinese"
		 * :"发文号","limit"
		 * :"1","name":"","type":"text","value":""},{"chinese":"","limit"
		 * :"1","name"
		 * :"","type":"text","value":""},{"chinese":"主送","limit":"1","name"
		 * :"","type":"hidden","value":
		 * "市政府办公室|{BFA811EA-0000-0000-4557-98D600000881}|5|南通市政府办公室"
		 * },{"chinese"
		 * :"","limit":"1","name":"","type":"hidden","value":"空"},{"chinese"
		 * :"","limit":"1","name":"","type":"hidden","value":
		 * "FC0E8AB5-B71F-4BEC-AF91-E418B310AD26"
		 * },{"chinese":"公开方式","limit":"1",
		 * "name":"","type":"select","value":"1"}
		 * ,{"chinese":"","limit":"1","name"
		 * :"","type":"text","value":"市政府办公室"},{
		 * "chinese":"","limit":"1","name":""
		 * ,"type":"hidden","value":"D7148E14-F185-4807-A044-09FD741227AB"
		 * },{"chinese"
		 * :"抄送","limit":"1","name":"","type":"hidden","value":""},{"chinese"
		 * :"批示意见"
		 * ,"limit":"1","name":"","type":"comment","value":""},{"chinese":
		 * "","limit"
		 * :"1","name":"","type":"attachment","value":""},{"chinese":"类型"
		 * ,"limit"
		 * :"1","name":"","type":"select","value":"意见"},{"chinese":"印发份数"
		 * ,"limit"
		 * :"1","name":"","type":"text","value":""},{"chinese":"","limit"
		 * :"1","name":"","type":"attachment","value":""}]}]
		 * 
		 */
	}
	
	
	/**
	 * 根据html转成新的html
	 * @param oldformId 
	 * @param nodeId 	节点id(nextNodeId),判断权限
	 * @param formValue 值 
	 * @param instanceId 实例Id 查询 
	 * @param isCyWF 
	 * @param isHidden 
	 * @return	string html
	 * @throws Exception
	 */
	@SuppressWarnings("static-access")
	public String getHtmlToNewHtml(String oldformId, String nodeId,
			String formValue, String instanceId, boolean isCyWF,
			boolean isHidden) throws Exception {
		// 查找html路径
		ZwkjForm form = zwkjFormService.getOneFormById(oldformId);
		String locations = form.getElementLocationJson();
		JSONArray jsonArray = JSONArray.fromObject(locations);
		getRequest().setAttribute("form", form);
		String allPath = "";
		String newHtmlPath = "";
		if (form != null && !stringIsNULL(form.getForm_htmlfilename())) {
			allPath = PathUtil.getWebRoot() + "form/html/"+ form.getForm_htmlfilename();
			getRequest().setAttribute("filename", form.getForm_htmlfilename());
			// 对象，其日历字段已由当前日期和时间初始化
			Calendar calendar = Calendar.getInstance();
			//生成的new的HTML
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_HTML_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			newHtmlPath =  pdfRoot +dstPath +String.valueOf(calendar.getTimeInMillis()) + ".html";
		}
		
		// 从html流中获取所有的标签数据
		List<FormTagMapColumn> mapList = new ArrayList<FormTagMapColumn>();
		String htmlString = readHTML(allPath);// 源数据
		List<TagBean> tags = getTagFromHTMLString(htmlString);// 返回页面taglist
		if (tags != null) {
			for (int i = 0; i < tags.size(); i++) {
				FormTagMapColumn m = new FormTagMapColumn();
				m.setFormtagname(tags.get(i).getTagName());
				m.setFormtagtype(tags.get(i).getTagType());
				m.setSelectDic(tags.get(i).getSelect_dic());
				m.setListId(tags.get(i).getListId());
				m.setColumnCname(tags.get(i).getCommentDes());
				mapList.add(m);
			}
		}
		// 查询已有表单标签和字段对应关系数据,修改页面默认选中
		List<FormTagMapColumn> mapedList = zwkjFormService
				.getFormTagMapColumnByFormId(oldformId);
		// 对应页面标签和已有对应关系之间的差别，(html中增加或删除元素带来的影响)，页面只显示最新页面标签元素
		if (mapedList != null && mapedList.size() > 0) {
			for (int i = 0; i < mapList.size(); i++) {
				for (int j = 0; j < mapedList.size(); j++) {
					if (mapedList.get(j).getFormtagname()
							.equals(mapList.get(i).getFormtagname())) {
						mapList.set(i, mapedList.get(j));
						break;
					}
				}
			}
		}
		// //用户权限
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		// emp.getDepartmentGuid(), nodeId, form.getWorkflowId());
		Map<String, String> perLimit = formPermitService.getLimitByNodeId(
				nodeId, form.getId(), form.getWorkflowId());
		// 获取页面中的list表单值
		String listValue = (String) getRequest().getSession().getAttribute(
				"listValues");
		JSONArray array = null;
		if (listValue != null && !listValue.equals("")) {
			array = JSONArray.fromObject(listValue);
		}
		OutputStreamWriter osw = null;
		try {
			// 读取模板文件
			FileInputStream fileinputstream = new FileInputStream(allPath);
			// 下面四行：获得输入流的长度，然后建一个该长度的数组，然后把输入流中的数据以字节的形式读入到数组中，然后关闭流
			int length = fileinputstream.available();
			byte bytes[] = new byte[length];
			fileinputstream.read(bytes);
			fileinputstream.close();
			// 通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String,
			// 然后利用字符串的replaceAll()方法进行指定字符的替换,此处除了这种方法之外，应该还可以使用表达式语言${}的方法来进行。
			// String start_en =
			// SystemParamConfigUtil.getParamValueByParam("start_en");
			// String templateContent = new String(bytes,"UTF-8");
			String templateContent = "";
			// if("0".equals(start_en)){
			templateContent = new String(bytes, "UTF-8");
			// htmlString = new String(bytes,"UTF-8");
			// }
			// if("1".equals(start_en)){
			// templateContent = new String(bytes,"GB2312");
			// htmlString = new String(bytes,"GB2312");
			// }
			templateContent =templateContent.replace("<html>", "<html><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />");

			// ------------------------------进行内容替换-------start----------------------------------------
			UrlCatcher u = new UrlCatcher();
			// 获取所有input类型标签
			String reg_input = "<INPUT[^<]*>";
			String[] inputs = u.getStringByRegEx(htmlString, reg_input, true);
			// 获取所有select类型标签
			String reg_select = "<SELECT[^<]*>(</select>)?";
			// String reg_select = "<SELECT.*?</select>";
			String[] selects = u.getStringByRegEx(htmlString, reg_select, true);
			// 获取所有textarea类型标签
			String reg_textarea = "<TEXTAREA[^<]*</TEXTAREA>";
			String[] textareas = u.getStringByRegEx(htmlString, reg_textarea,
					true);
			// 获取正文及附件类型的标签
			String reg_spanAtt = "<SPAN[^<]*</SPAN>";
			String[] spanAtts = u.getStringByRegEx(htmlString, reg_spanAtt,
					true);
			// 获取放意见标签的div
			String reg_divComment = "<trueway:comment[^<]*/>";
			String[] divComments = u.getStringByRegEx(htmlString,
					reg_divComment, true);
			// 把值填入html里
			if(formValue != null && !formValue.equals("")){
				String[] vals = formValue.split(";");
				String name = "";
				String value = "";
				int i = 0;// 跳出循环标志位
				
				for (String val : vals) {
					if (val.split(":").length > 1) {
						name = val.split(":")[0].trim();
						value = val.split((name+":"))[1];
					} else {
						name = val.split(":")[0].trim();
						value = "";
					}
					String permit = perLimit.get(name.toLowerCase());
					if(permit != null && !permit.split(",")[0].equals("1")&&isHidden){
						Pattern p = Pattern.compile("<div class=\""+name.toLowerCase()+"\">(.*?)</div>",Pattern.DOTALL);
						
						//p = Pattern.compile("value=\"([^\"]*)",Pattern.DOTALL);
						Matcher m =  p.matcher(templateContent);
						if(m.find()){
							templateContent = templateContent.replace(m.group(1),"");
						}
					}
					if(!("").equals(value) && value != null){
						for (FormTagMapColumn ftm : mapList) {
							//取name相同的标签，填入值
							if(ftm.getAssignColumnName() != null ? ftm.getFormtagname().equalsIgnoreCase(ftm.getAssignColumnName())?ftm.getFormtagname().equalsIgnoreCase(name.toUpperCase()):ftm.getAssignColumnName().equalsIgnoreCase(name.toUpperCase()):ftm.getFormtagname().equalsIgnoreCase(name.toUpperCase())){
								if(("text").equals(ftm.getFormtagtype())){
									if (inputs != null && inputs.length > 0) {
										if(array != null){
											for(int k=0; k<array.size();k++){
												JSONObject obj = (JSONObject)array.get(k);
												Iterator it = obj.keys();  
												while (it.hasNext()) {  
													String coloum = (String) it.next();  
													String coloumValue = obj.getString(coloum);  
													JSONArray comv = JSONArray.fromObject(coloumValue); 
													String reg_name = " name=\"" + coloum.toLowerCase();
													for(int m=0; m<comv.size(); m++){
														for (int j = 0;j < inputs.length; j++) {
															if(inputs[j].indexOf(reg_name) > 0){
																String tempPermit = perLimit.get(name.toLowerCase());
																if(tempPermit != null && !tempPermit.split(",")[0].equals("1")&&isHidden){
																	templateContent = templateContent.replaceFirst(inputs[j],"<input name='"+coloum+"'/>");
																}else{
																	templateContent = templateContent.replaceFirst(inputs[j],"<input name='"+coloum+"' value="+comv.get(m)+"/>");
																}
																break;
															}
														}
													}
												}
											}
										}
										for (int j = 0;j < inputs.length; j++) {
											//利用正则表达式获取表单元素名称
											String reg_name = " name=\"" + ftm.getFormtagname().toLowerCase()+"\"";
											if(inputs[j].toLowerCase().indexOf(reg_name.toLowerCase()) > 0){
												
												String tempPermit = ftm.getFormtagname().equalsIgnoreCase(name)?
														(perLimit.get(name.toLowerCase())==null ? perLimit.get(ftm.getFormtagname().toLowerCase()):perLimit.get(name.toLowerCase())):
															perLimit.get(ftm.getFormtagname().toLowerCase());
												if(tempPermit != null && !tempPermit.split(",")[0].equals("1")&&isHidden){
													value = "";
												}
												String valstr = "";
												Pattern p = Pattern.compile("width:(.*?)px",Pattern.DOTALL);
												Matcher m =  p.matcher(inputs[j]);
												if(m.find()){
													valstr = m.group(1);
												}
												if(value!=null && !value.equals("")){
													String[] idOrName = value.split("[*]");
													if(idOrName!=null && idOrName.length ==2){
														value = idOrName[1];
													}
												}
												String tempName = ftm.getFormtagname().equalsIgnoreCase(name) ? name.toLowerCase():ftm.getFormtagname().toLowerCase();
												if(valstr!=null && !valstr.equals("")){
													int width = Integer.parseInt(valstr.trim());
													templateContent = templateContent.replace(inputs[j],"<span style='width:"+width+"px;display:-moz-inline-box;display:inline-block;' name='"+tempName+"'>"+value+"</span>");
												}else{
													templateContent = templateContent.replace(inputs[j],"<span name='"+tempName+"'>"+value+"</span>");
												}
												i++;
												break;
											}
										}
										if (i > 0) {
											break;
										}
									}
								}else if(("checkbox").equals(ftm.getFormtagtype())){
									if (inputs != null && inputs.length > 0) {
										String[] values = value.split("\\^");
										for (String valstr : values) {
											//利用正则表达式获取表单元素名称
											String reg_name = " value=\""+valstr+"\"";
											String tempName = ftm.getFormtagname().equalsIgnoreCase(name) ? name.toLowerCase():ftm.getFormtagname().toLowerCase();
											for (int j = 0;j < inputs.length; j++) {
												if(inputs[j].toLowerCase().indexOf(reg_name.toLowerCase()) > 0){
													String tempPermit = ftm.getFormtagname().equalsIgnoreCase(name)?(perLimit.get(name.toLowerCase())==null ? perLimit.get(ftm.getFormtagname().toLowerCase()):perLimit.get(name.toLowerCase())):
													perLimit.get(ftm.getFormtagname().toLowerCase());													
													if(tempPermit != null && !tempPermit.split(",")[0].equals("1")&&isHidden){
														Pattern p = Pattern.compile("<div class=\""+name.toLowerCase()+"\">(.*?)</div>",Pattern.DOTALL);
														
														//p = Pattern.compile("value=\"([^\"]*)",Pattern.DOTALL);
														Matcher m =  p.matcher(templateContent);
														if(m.find()){
															valstr = 	m.group(1);
														}
														templateContent = templateContent.replace(valstr,"");
													}else{
														templateContent = templateContent.replace(inputs[j],"<input type=\"checkbox\" name='"+tempName+"' checked=\"checked\" value=\""+valstr+"\"/>");
													}
													i++;
													break;
												}
											}
										}
										if (i > 0) {
											break;
										}
									}
								} else if (("radio").equals(ftm.getFormtagtype())) {
									if (inputs != null && inputs.length > 0) {
										for (int j = 0; j < inputs.length; j++) {
											// 利用正则表达式获取表单元素名称
											String reg_name = " value=\"" + value
													+ "\"";
											if (inputs[j].toLowerCase().indexOf(reg_name.toLowerCase()) > 0) {
												String tempPermit = ftm.getFormtagname().equalsIgnoreCase(name)?
														(perLimit.get(name.toLowerCase())==null ? perLimit.get(ftm.getFormtagname().toLowerCase()):perLimit.get(name.toLowerCase())):
															perLimit.get(ftm.getFormtagname().toLowerCase());												
														String tempValue = inputs[j];
												if (tempPermit != null&& !tempPermit.split(",")[0].equals("1")&& isHidden) {
													tempValue += value+"</input>";
													value = "";
												}
												String tempName = ftm.getFormtagname().equalsIgnoreCase(name) ? name.toLowerCase():ftm.getFormtagname().toLowerCase();
												if(value.equals("")){
													templateContent = templateContent.replace(tempValue,"");
												}else{
													//templateContent = templateContent.replace(tempValue,"<input type=\"radio\" checked=\"checked\" name='"+ name.toLowerCase()+ "' value=\""+ value+ "\"/>"+value);
													templateContent = templateContent.replace(tempValue,"<input type=\"radio\" checked=\"checked\" name='"+ tempName+ "' value=\""+ value+ "\"/>");
												}
												
												i++;
												break;
											}
										}
										if (i > 0) {
											break;
										}
									}
								}else if(("select").equals(ftm.getFormtagtype())){
									if (selects != null && selects.length > 0) {
										for (int j = 0;j < selects.length; j++) {
											//利用正则表达式获取表单元素名称
											String reg_name = " name=\"" +  ftm.getFormtagname().toLowerCase()+"\"";
											if(selects[j].toLowerCase().indexOf(reg_name.toLowerCase()) > 0){
												//需要html中的标签里有zname属性否则下面得到的content将不对
//											String cname = ftm.getColumnCname();
												String cname = ftm.getSelectDic();//----城管局修改
												//查询字典表，得到下拉框的内容
												String content = selectDicValues(oldformId, value, cname);
												String contentValue = value;
												if(!("").equals(content)){
													contentValue = content;
												}
												String tempPermit = ftm.getFormtagname().equalsIgnoreCase(name)?
														(perLimit.get(name.toLowerCase())==null ? perLimit.get(ftm.getFormtagname().toLowerCase()):perLimit.get(name.toLowerCase())):
															perLimit.get(ftm.getFormtagname().toLowerCase());												if(tempPermit != null && !tempPermit.split(",")[0].equals("1")&&isHidden){
													contentValue = "";
												}
												String tempName = ftm.getFormtagname().equalsIgnoreCase(name) ? name.toLowerCase():ftm.getFormtagname().toLowerCase();
//											templateContent = templateContent.replace(selects[j],"<select name='"+name+"'><option selected='selected'>"+contentValue+"</option>");
												templateContent = templateContent.replace(selects[j],"<span>"+contentValue+"</span><select name='"+tempName+"' style=\"display:none\"><option selected='selected'>"+contentValue+"</option></select>");
												i++;
												break;
											}
										}
										if (i > 0) {
											break;
										}
									}
								}else if(("textarea").equals(ftm.getFormtagtype())){
									if (textareas != null && textareas.length > 0) {
										for (int j = 0;j < textareas.length; j++) {
											//利用正则表达式获取表单元素名称
											String reg_name = " name=\"" + ftm.getFormtagname().toLowerCase()+"\"";
											if(textareas[j].toLowerCase().indexOf(reg_name.toLowerCase()) > 0){
												String tempPermit = ftm.getFormtagname().equalsIgnoreCase(name)?
														(perLimit.get(name.toLowerCase())==null ? perLimit.get(ftm.getFormtagname().toLowerCase()):perLimit.get(name.toLowerCase())):
															perLimit.get(ftm.getFormtagname().toLowerCase());												if(tempPermit != null && !tempPermit.split(",")[0].equals("1")&&isHidden){
													value = "";
												}
												String valstr = "";
												Pattern p = Pattern.compile("width:(.*?)px",Pattern.DOTALL);
												Matcher m =  p.matcher(textareas[j]);
												if(m.find()){
													valstr = m.group(1);
												}
												if(valstr==null || valstr.equals("")){
													valstr = "400";
												}
												//下面一段代码针对于会议管理中的人员选择; (格式：id,id,id*name,name,name);pdf中只显示name值
												boolean isZsOrCs = false; 
												if(value!=null && !value.equals("")){
													String[] idOrName = value.split("[*]");
													if(idOrName!=null && idOrName.length ==2){
														String id = idOrName[0];
														String personName = idOrName[1];
														if(id!=null && personName!=null && id.length()>0
																&& personName.length()>0){
															String[] ids = id.split(",");
															String[] personNames = personName.split(",");
															if(ids!=null && ids.length>0
																	&& personNames!=null && personNames.length>0){
																isZsOrCs = true;
																value = personName;
															}
														}
													}
												}
												String tempName = ftm.getFormtagname().equalsIgnoreCase(name) ? name.toLowerCase():ftm.getFormtagname().toLowerCase();
												if(value != null && value.length() >9){
													// 获取 textarea 的 宽度 高度
													int wWidth = 400;
													// 判断是否是 数字
													try{
														wWidth = Integer.valueOf(valstr);
													}catch(Exception e){
														
													}
													int hHeight = 100;
													for (int jj = 0; jj < jsonArray.size(); jj++) {
														JSONObject jo = jsonArray.getJSONObject(jj);
														if(jo.isNullObject()){
															continue;
														}
														String temName = jo.get("name").toString();
														if(tempName.equalsIgnoreCase(temName)){
															wWidth = Integer.valueOf(String.valueOf(jo.get("width")));
															hHeight = Integer.valueOf(String.valueOf(jo.get("height")));
															break;
														}
													}
													double size = Math.round(Math.sqrt(wWidth*hHeight/value.length()))-1;
													if(value.indexOf("\r\n") > 0){
														value = value.replace("\r\n", "<br/>");
													}
													if(value.indexOf("\n") > 0){
														value = value.replace("\n", "<br/>");
													}
													value = value.replaceAll(" ", "&nbsp;");
													if(size > 18){
														templateContent = templateContent.replace(textareas[j],"<textare name='"+tempName+"' style='text-align: left;width:'"+valstr+"px;'>"+value+"</textarea>");
													}else{
														if(!isZsOrCs){
															size= size-2;
														}
															templateContent = templateContent.replace(textareas[j],"<textare name='"+tempName+"' style='width:"+valstr+"px;font-size:"+size+"px;'>"+value+"</textarea>");
													}
												}else{
													templateContent = templateContent.replace(textareas[j],"<textare name='"+tempName+"' style='text-align: left;width:'"+valstr+"px;'>"+value+"</textarea>");
												}
												i++;
												break;
											}
										}
									}
									if (i > 0) {
										break;
									}
								}
							
							}
						//	if((ftm.getFormtagname().toUpperCase()).equals(name.toUpperCase())||(ftm.getColumnname() != null &&ftm.getColumnname().toUpperCase().equals(name.toUpperCase()))){}
						}
					}
				}
			}else{
				// 替换值
				String req_checkbox = "<input .*?checkbox[^/]*?>.*?</input>";
				String[] checkboxs = u.getStringByRegEx(templateContent, req_checkbox, true);
				for (int k = 0; checkboxs!=null && k < checkboxs.length; k++) {
					templateContent = templateContent.replace(checkboxs[k], "");
				}
				String req_radio = "<input .*?radio[^/]*?>.*?</input>";
				String[] radios = u.getStringByRegEx(templateContent, req_radio, true);
				for (int k = 0; radios!=null && k < radios.length; k++) {
					templateContent = templateContent.replace(radios[k], "");
				}
				if(inputs!= null){
					for(int i = 0 ; i <inputs.length ; i ++ ){
						String valstr = "";
						Pattern p = Pattern.compile("width:(.*?)px",Pattern.DOTALL);
						Matcher m =  p.matcher(inputs[i]);
						if(m.find()){
							valstr = m.group(1);
						}
						int width = 120;
						if(valstr!=null && !valstr.equals("")){
							width = Integer.parseInt(valstr.trim())+10;
						}
						templateContent = templateContent.replace(inputs[i],"<span style='width:"+width+"px;display:-moz-inline-box;display:inline-block;' ></span>");
				    }
				}
				if(selects!= null){
					for(int i = 0 ; i <selects.length ; i ++ ){
						templateContent = templateContent.replace(selects[i],"");
						}
				}
				
				if(textareas != null){
					for(int i = 0 ; i <textareas.length ; i ++ ){
						templateContent = templateContent.replace(textareas[i],"");
						}
				}
				
			}
			for (FormTagMapColumn ftm : mapList) {
				if (("attachment").equals(ftm.getFormtagtype())) {
					if (spanAtts != null && spanAtts.length > 0) {
						for (int j = 0; j < spanAtts.length; j++) {
							// 利用正则表达式获取表单元素名称
							String reg_name = " id=\""
									+ ftm.getFormtagname().toLowerCase()
									+ "show\"";
							// 查找对应的附件
							List<SendAttachments> attZwList = attachmentService
									.findAllSendAtts(instanceId
											+ "att"
											+ ftm.getFormtagname()
													.toLowerCase(),null);
							List<SendAttachments> attFjList = attachmentService
									.findAllSendAtts(instanceId
											+ ftm.getFormtagname()
													.toLowerCase(),null);
							List<SendAttachments> attList = new ArrayList<SendAttachments>();
							if (attZwList.size() != 0 && attZwList != null) {
								attList = attZwList;
							} else {
								attList = attFjList;
							}
							// 获取附件的名字
							String attNames = "";
							for (SendAttachments sa : attList) {
								attNames += sa.getFilename().substring(0,sa.getFilename().lastIndexOf(".")) + ",";
							}
							if (attNames != null && !("").equals(attNames)) {
								attNames = attNames.substring(0,
										attNames.length() - 1);
							}
							if (spanAtts[j].indexOf(reg_name) > 0) {
								templateContent = templateContent.replace(
										spanAtts[j], "<span id='"
												+ ftm.getFormtagname()
														.toLowerCase() + "'>"
												+ attNames + "</span>");
								break;
							}
						}
					}
				} else if (("comment").equals(ftm.getFormtagtype())) {
					if (divComments != null && divComments.length > 0) {
						for (int k = 0; k < divComments.length; k++) {
							// 获取一类意见的简称
							String oneCommentName = ftm.getFormtagname()
									.toLowerCase();
							// 获取一类意见
							List<Comment> commentList = commentService
									.findByInstanceId(instanceId, instanceId
											+ oneCommentName);
							if (divComments[k].indexOf(oneCommentName) > 0) {
								StringBuffer sb = new StringBuffer();
								if (commentList.size() > 0
										&& commentList != null) {
									sb.append("<table style=\"border-collapse:collapse;border-spacing:0;\" cellspace=\"0\" cellpadding=\"0\" width=\"90%\">");
									for (Comment comment : commentList) {
										sb.append("<tr><td align=\"left\" colspan=\"2\">"
												+ comment.getContent()
												+ "</td></tr>");
										sb.append("<tr><td style=\"width:70%;\"></td><td style=\"text-align:center;\">"
												+ comment.getUserName()
												+ "</td></tr>");
										sb.append("<tr><td style=\"width:70%;\"></td><td style=\"text-align:center;\">"
												+ comment.getSigndate()
														.toString()
														.substring(0, 10)
												+ "</td></tr>");
									}
									sb.append("</table>");
								}
								templateContent = templateContent.replace(
										divComments[k], sb.toString());
								break;
							}
						}
					}

				}
			}
			// ----------对剩下的input框置成空,只显示空白----------
			// checkbox or radio 
			String req_checkbox = "<input .*?checkbox[^/]*?>.*?</input>";
			String[] checkboxs = u.getStringByRegEx(templateContent, req_checkbox, true);
			for (int k = 0; checkboxs!=null && k < checkboxs.length; k++) {
				templateContent = templateContent.replace(checkboxs[k], "");
			}
			String req_radio = "<input .*?radio[^/]*?>.*?</input>";
			String[] radios = u.getStringByRegEx(templateContent, req_radio, true);
			for (int k = 0; radios!=null && k < radios.length; k++) {
				templateContent = templateContent.replace(radios[k], "");
			}

			String selectExist = "<SELECT[^<]*></select>";
			// String reg_select = "<SELECT.*?</select>";
			String[] selectControls = u.getStringByRegEx(templateContent, selectExist, true);
			for (int k = 0; selectControls!=null && k < selectControls.length; k++) {
				templateContent = templateContent.replace(selectControls[k], "");
			}
			String[] inputExists = u.getStringByRegEx(templateContent,
					reg_input, true);
			if (inputExists != null && inputExists.length > 0) {
				for (int k = 0; k < inputExists.length; k++) {
					if (inputExists[k].indexOf("checkbox") < 0
							&& inputExists[k].indexOf("radio") < 0
							&& inputExists[k].indexOf("hidden") < 0) {
						String valstr = "";
						Pattern p = Pattern.compile("width:(.*?)px",Pattern.DOTALL);
						Matcher m =  p.matcher(inputExists[k]);
						if(m.find()){
							valstr = m.group(1);
						}
						if(valstr==null || valstr.equals("")){
							valstr = "150";
						}
						int width = Integer.parseInt(valstr.trim());
						templateContent = templateContent.replace(
								inputExists[k], "<span style='width:"+width+"px;display:-moz-inline-box;display:inline-block;'>&nbsp;</span>");
					}
				}
			}
			// ----------对剩下的textarea框置成空,只显示空白----------
			String[] textareaExists = u.getStringByRegEx(htmlString,
					reg_textarea, true);
			if (textareaExists != null && textareaExists.length > 0) {
				for (int kk = 0; kk < textareaExists.length; kk++) {
					if (textareaExists[kk].indexOf("id") > 0) {
						templateContent = templateContent.replace(
								textareaExists[kk], "<span>&nbsp;</span>");
					}
				}
			}
			/*// 解析 html width 
			// 获取所有textarea类型标签
			String reg_width = "width(=|:)\"(\\d+)px\"";
			
			String[] widths = u.getStringByRegEx(templateContent, reg_width,
								true);
		
			for(int i = 0; i < widths.length ; i++){
				Pattern p = Pattern.compile("width(=|:)\"(\\d+)px\"",Pattern.DOTALL);
				Matcher m =  p.matcher(widths[i]);
				String valstr = "120";
				if(m.find()){
					valstr = m.group(2);
				}
				float  newWidth = (Integer.parseInt(valstr))*5/4;
				String tempString = widths[i].replace(valstr, Float.valueOf(newWidth).intValue()+"");
				templateContent = templateContent.replace(widths[i] , tempString);
			}*/
			// 添加传阅名单
			if (isCyWF == true) {
				List<Comment> commentList = commentService
						.findCommentsByInstanceId(instanceId);
				// 传阅人员名单
				List<WfCyName> wcnPersonList = tableInfoService
						.findWfCyPersonNameByInstanceId(instanceId);
				// 传阅处室名单
				List<WfCyName> wcnOfficeList = tableInfoService
						.findWfCyOfficeNameByInstanceId(instanceId);

				// 解析html
				org.jsoup.nodes.Document doc = Jsoup.parse(templateContent
						.toString());
				// 让table显示
				org.jsoup.nodes.Element tr = doc.getElementById("cy");
				tr.removeAttr("style");
				tr.attr("display", "block");
				// 获取指定table的tbody
				Elements trs = doc.getElementById("cytable").select("tbody");

				// 比较大小
				int size = 0;
				if (wcnOfficeList.size() >= wcnPersonList.size()) {
					size = wcnOfficeList.size();
				} else {
					size = wcnPersonList.size();
				}
				for (int j = 0; j < size; j++) {
					// 人员和处室名字
					String person = "&nbsp;";
					String office = "&nbsp;";
					if (wcnPersonList.size() > j) {
						person = wcnPersonList.get(j).getEmployeeName();
					}
					if (wcnOfficeList.size() > j) {
						office = wcnOfficeList.get(j).getDeptName();
					}
					// 人员和处室时间
					String personSigndate = "&nbsp;";
					String officeSigndate = "&nbsp;";
					if (commentList.size() > 0
							&& !("").equals(commentList.size())) {
						for (Comment comment : commentList) {
							if (!("&nbsp;").equals(person)) {
								if (wcnPersonList.get(j).getEmployeeId()
										.equals(comment.getUserId())) {
									personSigndate = comment.getSigndate() + "";
								}
								if (!("&nbsp;").equals(personSigndate)) {
									personSigndate = personSigndate.substring(
											0, personSigndate.length() - 2);
								}
							}
							String deptName = tableInfoService
									.findDeptNameByUserId(comment.getUserId());
							if (!("").equals(deptName) && deptName != null
									&& deptName.equals(office)) {
								officeSigndate = comment.getSigndate() + "";
								if (!("&nbsp;").equals(officeSigndate)) {
									officeSigndate = officeSigndate.substring(
											0, officeSigndate.length() - 2);
								}
							}
						}
					}
					trs.append("<tr><td>" + person + "</td><td>"
							+ personSigndate + "</td><td>" + office
							+ "</td><td>" + officeSigndate + "</td></tr>");
				}
				templateContent = doc.html();
			}
			// ----------------------------------进行内容替换--------end----------------------------------------
			// 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。
			// byte tag_bytes[] = templateContent.getBytes();
			byte[] tag_bytes = null;
			// if("0".equals(start_en)){
			// tag_bytes = templateContent.getBytes();
			// }
			// if("1".equals(start_en)){
			tag_bytes = templateContent.getBytes("utf-8");
			// }
			// System.out.println(tag_bytes);
			// byte tag_bytes[] = templateContent.getBytes("utf-8");
			FileOutputStream fileoutputstream = new FileOutputStream(
					newHtmlPath);// 建立文件输出流
			osw = new OutputStreamWriter(fileoutputstream,
					"UTF-8");
			osw.write(templateContent);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
            if (osw != null) {
                try {
                	osw.close();
                } catch (IOException e1) {
                }
            }
        }
		//newHtmlPath = newHtmlPath.substring(1, newHtmlPath.length());
		return newHtmlPath;
	}
	
	/**
	 * 截取掉最后一个字符串
	 * @return
	 */
	public String removeLastComma(String str){
		if(str==null || str.equals("")){
			return "";
		}else{
			return str.substring(0, str.length() - 1);
		}
	}
	/**
	 * 得到html转成新的html，并转成pdf
	 * 
	 * @return
	 * @throws Exception
	 */
	public String getHtmlToNewOfPath(String oldformId, String nodeId,
			String formValue, String instanceId, boolean isCyWF,
			boolean isHidden) throws Exception {
		DoFile d = tableInfoService.getDoFileByElements(null,instanceId);
		String newHtmlPath = getHtmlToNewHtml(oldformId,nodeId, formValue, instanceId,isCyWF,isHidden);
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String pdfFormPath = pdfRoot+dstPath+(newHtmlPath.substring(newHtmlPath.lastIndexOf("/"),newHtmlPath.length()-5)+"merge")+".pdf";
		HtmlToPdf htp = new HtmlToPdf();
		htp.htmlToPdf(newHtmlPath, pdfFormPath);
		String pdfNewPath = pdfFormPath.substring(0, pdfFormPath.length() - 4)+ "merge" + ".pdf";
		int num = 0;
		if(d!=null){
			num = d.getCopyNumber()==null?0:d.getCopyNumber();
		}
		attachmentService.mergerAttToPdf(pdfFormPath, null, instanceId, pdfNewPath,num);
		return pdfNewPath;
	}
	
	/**
	 * 获取附件合并的pdf
	 * @param oldformId
	 * @param nodeId
	 * @param formValue
	 * @param instanceId
	 * @param isCyWF
	 * @param isHidden
	 * @return
	 * @throws Exception
	 */
	public String getAttToNewOfPath(String instanceId) throws Exception {
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String pdfNewPath = pdfRoot + dstPath + UuidGenerator.generate36UUID()+".pdf";
		attachmentService.mergerAttToPdf("", null, instanceId, pdfNewPath,0);
		return pdfNewPath;
	}

	/**
	 * word转pdf
	 * 
	 * @param filePath
	 * @param filename
	 * @throws IOException
	 */
	public String docToPdf(String filePath) throws IOException {
		// 原附件的ID
		// String fileId = getRequest().getParameter("fileId");
		// 是否是正文附件
		// String isManAttStr=getRequest().getParameter("isManAtt");
		// 文件路径
		String filePathOfSys = SystemParamConfigUtil
				.getParamValueByParam("filePath");
		// String filePath = getRequest().getParameter("filePath");
		String path = filePathOfSys + filePath;
		// 文件路径及文件名，除去后缀
		String fileAndPath = path.substring(0, path.length() - 4);

		WordToPdfOfPrinter d2p = new WordToPdfOfPrinter();

		try {
			d2p.docToPDF(fileAndPath + ".doc", fileAndPath + ".ps", fileAndPath
					+ ".pdf");
			boolean success = (new File(fileAndPath + ".ps")).delete();
			boolean success2 = (new File(fileAndPath + ".log")).delete();

			if (success && success2) {
				System.out.println("删除打印机文件成功");
			}
			// uploadPDF(fileId,isManAttStr);
			// getResponse().getWriter().print("success");
		} catch (Exception e) {
			e.printStackTrace();
			// getResponse().getWriter().print("fail");
		}
		return fileAndPath + ".pdf";
		// 若报错com.jacob.com.ComFailException: VariantChangeType failed
		// 那么在C:\Windows\System32\config\systemprofile下创建文件夹Desktop
	}

	/**
	 * 获取当前部门下的所有人员
	 */
	public List<EmpData> getEmployeeData(String userId) {
		// JSONObject jsonObject = getJSONObject();
		// 人员id
		// String userId = (String)jsonObject.get("userId");
		// String userId = "{BFA811EA-0000-0000-4554-7F8B000002CB}";
		// Employee emp = tableInfoService.findEmpByUserId(userId);
		// 处室id
		// String deptId = emp.getDepartmentGuid();
		// Department department = departmentService.findDepartmentById(deptId);

		// 获取最大部门的信息
		String bigDepId = SystemParamConfigUtil
				.getParamValueByParam("root_department_id");
		;
		// if
		// (department!=null&&CommonUtil.stringNotNULL(department.getSuperiorGuid()))
		// {
		// bigDepId = department.getSuperiorGuid();
		// }
		// 获取所有处室的deptId
		List<Department> deptList = departmentService
				.queryDepartmentsBySuperdepIds("'" + bigDepId + "'");
		// 获取所有人员的empId
		List<Employee> empList = new ArrayList<Employee>();
		for (Department dep : deptList) {
			List<Employee> employeeList = departmentService
					.findEmployeeListByDepId(dep);
			if (employeeList != null && employeeList.size() != 0) {
				for (Employee employee : employeeList) {
					empList.add(employee);
				}
			}
			// 针对最多3级目录人员--需优化--3层循环了???!!!
			List<Department> depList = departmentService
					.queryDepartmentsBySuperdepIds("'"
							+ dep.getDepartmentGuid() + "'");
			if (depList != null && depList.size() != 0) {
				for (Department dept : depList) {
					List<Employee> empsList = departmentService
							.findEmployeeListByDepId(dept);
					if (empsList != null && empsList.size() != 0) {
						for (Employee employee : empsList) {
							empList.add(employee);
						}
					}
				}
			}
		}
		// 拼json
		List<EmpData> empDataList = new ArrayList<EmpData>();
		for (Employee employee : empList) {
			EmpData ed = new EmpData();
			ed.setUserId(employee.getEmployeeGuid());
			ed.setUserName(employee.getEmployeeName());
			empDataList.add(ed);
		}
		return empDataList;
		// String sb = "";
		// HttpServletResponse response = getResponse();
		// response.setCharacterEncoding("utf-8");
		// // 打开流
		// PrintWriter out;
		// try {
		// out = getResponse().getWriter();
		// sb = JSONArray.fromObject(empDataList).toString();
		// out.print(sb);
		// out.close();
		// } catch (IOException e) {
		// e.printStackTrace();
		// }
	}

	/**
	 * 获取节点列表
	 * 
	 * @return
	 */
	public List<NodeInfo> getNodeList(String workFlowId, String instanceId,
			String nodeId,String processId, String userId) {
		List<NodeInfo> nodeInfoList = new ArrayList<NodeInfo>();
		
		// 根据当前节点Id查找下一节点Id
		List<WfNode> nodes = workflowBasicFlowService.showNode(workFlowId,nodeId, instanceId);
		 
		WfNode node = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		if(null != node){
			Integer skipNextnodes = node.getWfn_skipNextnodes();
			if(null != skipNextnodes && skipNextnodes.equals(1)){
				nodes = tableInfoExtendService.skipNextNodes(nodes, userId);
			}
		}
		for (WfNode wfNode : nodes) {
			String gdPerson = "";
			//1、 部门领导人
			String leaderId = "";
			if(wfNode!=null){
				String isdefdep = wfNode.getWfn_isdefdep(); 		
				if(isdefdep!=null && isdefdep.equals("1")){		//默认部门
					//获取人员的id
					DepartmentLeader departmentLeader =employeeLeaderService.findDepartmentLeaderByEmpId(userId);
					if(departmentLeader!=null){
						leaderId = departmentLeader.getLeaderId();		//领导人Id
					}
				}
			}
			gdPerson = leaderId;
			NodeInfo nodeInfo = new NodeInfo();
			if (!("").equals(wfNode.getWfn_bd_user())&& wfNode.getWfn_bd_user() != null) {
				gdPerson = wfNode.getWfn_bd_user();
			}
			WfProcess process = tableInfoService.getProcessById(processId);
			//如果 节点为回复节点，且 为其他流程发起的 交办 ，回复给 发起流程的 的人
			if(process != null && wfNode.getNode_isReply() != null && wfNode.getNode_isReply()==1 && process.getFjbProcessId() != null && !"".equals(process.getFjbProcessId())){
				WfProcess fProcess = tableInfoService.getProcessById(process.getFjbProcessId());
				gdPerson = fProcess.getUserUid();
			}else{
				// 节点固定人员Id
				if (!("").equals(wfNode.getWfn_bd_user())&& wfNode.getWfn_bd_user() != null) {
					gdPerson = wfNode.getWfn_bd_user();
				}
			}
			if(!gdPerson.equals("")){
				nodeInfo.setIsHaveGdPerson("1");
				if(gdPerson.indexOf(",")>-1){
					nodeInfo.setM_userIds(gdPerson.substring(0, gdPerson.indexOf(",")));
					nodeInfo.setC_userIds(gdPerson.substring(gdPerson.indexOf(",")+1));
				}else{
					nodeInfo.setM_userIds(gdPerson);
					nodeInfo.setC_userIds("");
				}
			}else{
				// 返回指定节点的人员
				List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, wfNode.getWfn_id());
				if (wfbList != null && wfbList.size() != 0) {
					String xtoname = "";// 主送
					String xccname = "";// 抄送
					if ((wfNode.getWfn_id()).equals(wfbList.get(0).getFromNodeId())) {
						List<WfProcess> desPersons = tableInfoService.findProcesses(workFlowId, instanceId,wfbList.get(0).getToNodeId());
						if (desPersons != null && desPersons.size() > 0) {
							for (WfProcess wfProcess : desPersons) {
								if (wfProcess.getIsMaster() != null &&wfProcess.getIsMaster() == 1) {
									xtoname = wfProcess.getUserUid();
								} else {
									xccname += wfProcess.getUserUid() + ",";
								}
							}
							if (!("").equals(xccname) && xccname.length() > 1) {
								xccname = xccname.substring(0, xccname.length() - 1);
							}
						}
					}
					nodeInfo.setIsHaveGdPerson("1");
					nodeInfo.setIsSendNow("1");
					nodeInfo.setM_userIds(xtoname);
					nodeInfo.setC_userIds(xccname);
				} else {
					nodeInfo.setIsHaveGdPerson("0");
					nodeInfo.setM_userIds("");
					nodeInfo.setC_userIds("");
				}
			}
			
			nodeInfo.setNodeId(wfNode.getWfn_id());
			nodeInfo.setNodeName(wfNode.getWfn_name());
			
			nodeInfo.setRouteType(wfNode.getWfn_route_type());
			if((wfNode.getWfn_type() != null &&wfNode.getWfn_type().equals("end"))||(wfNode.getNode_isReply() != null && wfNode.getNode_isReply()==1)){
				nodeInfo.setRouteType("");
				nodeInfo.setNodeName("");
			}
			nodeInfo.setFormId(wfNode.getWfn_defaultform());
			nodeInfoList.add(nodeInfo);
		}
		return nodeInfoList;
	}

	/**
	 * 保存意见(暂用,手写意见)
	 * 
	 * @throws Exception
	 */
	public void saveComment() throws Exception {
		JSONObject jsonObject = getJSONObject();
		// 表单元素json
		String formJson = (String) jsonObject.get("formJson");
		// 步骤id
		String processId = (String) jsonObject.get("processId");
		WfProcess process = tableInfoService.getProcessById(processId);
		if (process != null) {
			// 把json入库
			process.setCommentJson(formJson);
			tableInfoService.updateWfProcess(process);
		}
	}

	/**
	 * 
	 * 描述：保存pdf及意见，并解析表单json入库并插入待办数据
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午2:55:10
	 */
	public void saveElementAndSendNextForMobile() throws Exception{
		long startTime = System.currentTimeMillis();
		long endTime;
		System.out.println("------进入saveElementAndSendNextForMobile ------");
		AccessLog accessLog = new AccessLog();
		Date startDate = new Date();
		accessLog.setAccessDate(startDate);
		accessLog.setMethodName("saveElementAndSendNextForMobile");
		JSONObject jsonObject = getJSONObjectHederAndBody1();
		JSONObject flowInfo = (JSONObject) jsonObject.get("flowInfo");
		// 表单元素json
		JSONArray trueForm = new JSONArray().fromObject(jsonObject.get("trueform"));
		// 手写的json
		String writeJson = jsonObject.get("truepaper") + "";
		writeJson = JSONReplaceUtil.replaceJson(writeJson);
		//formPage
		String formPage = jsonObject.get("formPage") + "";
		formPage = JSONReplaceUtil.replaceJson(formPage);
		// 用户id
		String userId = (String) jsonObject.get("userId");
		// 步骤id
		String processId = (String) jsonObject.get("processId");
		// 走子流程时的父流程processId
		String f_proceId = getRequest().getParameter("f_proceId");
		// 是否是第一步
		String isFirst = getRequest().getParameter("isFirst");
		// 流程实例id
		String instanceId = (String) jsonObject.get("instanceId");
		
		String canSendMsg = (String) jsonObject.get("sms");

		System.out.println("移动端下一步是否发送短信sms："+canSendMsg);
		
		// 流程id
		String workFlowId = (String) jsonObject.get("workFlowId");
		
		DoFile doFile = tableInfoService.getDoFileByElements("", instanceId);
		if(doFile!=null && doFile.getIsDelete()!=null && doFile.getIsDelete()==1){
			getResponse().getWriter().print("10001");
			return;
		}
		
		String clientType = (String)jsonObject.get("clientType");
		accessLog.setClientType(clientType);
		
		String isChanged =  jsonObject.get("isChanged")!=null?(String) jsonObject.get("isChanged"):"";
		List<JSONObject> tplist = (List<JSONObject>) jsonObject.get("tplist");
		
		if (tplist != null) {
			for (int i = 0; i < tplist.size(); i++) {
				JSONObject st = tplist.get(i);
				SendAttachments att = new SendAttachments();
				att.setFileindex(0L);
				att.setFilename(st.getString("name"));// 设置文件名属性
				att.setFiletype(st.getString("type"));// 设置文件类型(后缀名)的属性
				att.setFilesize(Long.valueOf(st.getString("length")));// 设置文件大小的属性
				att.setFiletime(new Date(Long.valueOf(st.getString("filetime"))));// 设置上传时间属性
				att.setLocalation(st.getString("location"));// 设置上传后在服务器上保存路径的属性
				if("png".equals(st.getString("type"))||"jpg".equals(st.getString("type"))){
					att.setType("图片");// 设置上传附件所属类别
				}else if("mp3".equals(st.getString("type"))||"amr".equals(st.getString("type"))){
					att.setType("录音");// 设置上传附件所属类别
				}else if("mp4".equals(st.getString("type"))){
					att.setType("视频");// 设置上传附件所属类别
				}
				att.setTitle(st.getString("title"));// 设置上传附件标题
				att.setDocguid(instanceId + "fj");
				att.setEditer(userId+ ";"+ employeeService.findEmployeeById(userId).getEmployeeName());
				attachmentService.addSendAtts(att);
			}
		}
		
		//保存日志信息表
		TrueJson entity = new TrueJson();
		entity.setInstanceId(instanceId);
		entity.setProcessId(processId);
		entity.setSaveDate(new Date());
		entity.setUserId(userId);
		entity.setTrueJson(writeJson);
		entity.setExcute("saveElementAndSendNextForMobile");
		trueJsonService.saveTrueJson(entity);
		
		endTime = System.currentTimeMillis();
		System.out.println("------saveElementAndSendNextForMobile断点1 ------："+(endTime-startTime)/1000.0);
		
		// 旧表单id----待办的formId
		String oldformId = (String) jsonObject.get("oldformId");

		// 事项Id
		String itemId = (String) jsonObject.get("itemId");
		// 当前节点Id
		String nodeId = (String) jsonObject.get("nodeId");

		WfNode currentNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		
		String formId = currentNode.getWfn_defaultform();
		
		// 下一节点id(点击的节点)
		String nextNodeId = (String) jsonObject.get("nextNodeId");
		// 主送
		String m_userIds = (String) jsonObject.get("m_userIds");
		// 抄送
		String c_userIds = (String) jsonObject.get("c_userIds");
		if (c_userIds == null) {
			c_userIds = "";
		}
		// 抄送还是主送
		String operate = (String) jsonObject.get("operate");// 0:保存流程(只保存表单),和往下发
		// 子流程的实例类型-0:一个实例 1:多个实例
		String cType = getRequest().getParameter("cType");
		// 与父流程关系--0:异步 1:同步
		String relation = getRequest().getParameter("relation");
		// 父流程实例id
		String finstanceId = getRequest().getParameter("finstanceId");
		// 是否是从子流程进来
		String isChildWf = getRequest().getParameter("isChildWf");
		if (flowInfo != null && f_proceId == null) {
			f_proceId = flowInfo.getString("fprocessId");
		}
		if (flowInfo != null && (isChildWf == null || isChildWf.equals(""))) {
			isChildWf = flowInfo.getString("isChildWf");
		}
		if (isChildWf != null && isChildWf.equals("true")) {
			WfChild wfChild = workflowBasicFlowService.getWfChildByCid(workFlowId);
			relation = wfChild.getWfc_relation();
			cType = wfChild.getWfc_ctype();
		}
		if (flowInfo != null && (cType == null || cType.equals(""))) {
			cType = flowInfo.getString("cType");
		}
		if (flowInfo != null && (relation == null || relation.equals(""))) {
			relation = flowInfo.getString("relation");
		}
		if (flowInfo != null && (finstanceId == null || finstanceId.equals(""))) {
			finstanceId = flowInfo.getString("finstanceId");
		}
		if (flowInfo != null && (nextNodeId == null || nextNodeId.equals(""))) {
			nextNodeId = flowInfo.getString("nextNodeId");
		}
		if (flowInfo != null && (isFirst == null || isFirst.equals(""))) {
			isFirst = flowInfo.getString("isFisrtStep");
		}

		WfProcess lastProcess = pendingService.getProcessByID(processId);
		
		if(null != lastProcess){
			if(lastProcess.getIsOver().equals("OVER")){
				getResponse().getWriter().print("success");
				return;
			}
		}
		
		String mergepdf = "";
		if (lastProcess != null && !lastProcess.equals("")) {
			mergepdf = lastProcess.getMergePdf();
		}

		// 从子流程进来--入库数据表生成instanceId为了插步骤表
		String newInstanceIdForChildWf = getRequest().getParameter("newInstanceIdForChildWf");
		if (flowInfo != null&& (newInstanceIdForChildWf == null || newInstanceIdForChildWf.equals(""))) {
			newInstanceIdForChildWf = flowInfo.getString("instanceId");
		}

		// 解析 trueForm
		JSONObject formJson = new JSONObject();
		for (int t = 0; t < trueForm.size(); t++) {
			JSONObject jsp = trueForm.getJSONObject(t);
			if (trueForm.getJSONObject(t) != null&& !"null".equals(trueForm.getJSONObject(t).toString())) {
				String tempType = (String) trueForm.getJSONObject(t).get("type");
				String tempName = (String) trueForm.getJSONObject(t).get("name");
				String tempValue = (String) trueForm.getJSONObject(t).get("value");
				if (tempType.equals("checkbox")) {
					tempValue = tempValue.replaceAll(";", "^");
					String value = "";
					String[] vals = tempValue.split("\\^");
					for (int tt = 0; tt < vals.length; tt++) {
						String tempVal = null;
						if (vals[tt].indexOf("*") == -1) {
							tempVal = vals[tt];
						} else {
							tempVal = vals[tt].split("*")[1];
						}
						if (tempVal != "undefined") {
							if (tt == 0) {
								value = tempVal;
							} else {
								value += "^" + tempVal;
							}
						} else {
							value = vals[tt];
						}
					}
					tempValue = value;
				} else if (tempType.equals("radio")) {
					if (tempValue.equals("undefined")) {
						tempValue = "";
					} else {
						String value = "";
						String[] vals = tempValue.split("\\^");
						for (int tt = 0; tt < vals.length; tt++) {
							String tempVal = null;
							if (vals[tt].indexOf("*") == -1) {
								tempVal = vals[tt];
							} else {
								tempVal = vals[tt].split("*")[1];
							}
							if (tempVal != "undefined") {
								if (tt == 0) {
									value = tempVal;
								} else {
									value += "^" + tempVal;
								}
							} else {
								value = vals[tt];
							}
						}
						tempValue = value;
					}
				}
				formJson.put(tempName.toLowerCase(), tempValue);
			}
		}
		if (isChildWf != null && isChildWf.equals("true")) {
			formJson.put("instanceid", flowInfo.getString("instanceId"));
			formJson.put("formid", flowInfo.getString("formId"));
			formJson.put("workflowid", flowInfo.getString("workflowId"));
			formJson.put("processid", flowInfo.getString("processId"));
		} else {
			formJson.put("instanceid", instanceId);
			formJson.put("formid", formId);
			formJson.put("workflowid", workFlowId);
			formJson.put("processid", processId);
		}
		Employee emp = employeeService.findEmployeeById(userId);
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (wfProcess == null|| (wfProcess.getStepIndex() == 1&& !("").equals(wfProcess.getDoType()) && ("1").equals(wfProcess.getIsChildWf()))) {
			isFirstChildWf = "true";
		}
		// 判断是否是 走公文交换平台
		WfNode  nextNode = null;
		if(StringUtils.isNotBlank(nextNodeId)){
			nextNode = workflowBasicFlowService.getWfNode(nextNodeId);
		}
		String alreadyCopy = "";
		Object obj = jsonObject.get("alreadyCopy");
		if(null != obj){
			alreadyCopy = obj.toString();
		}
		if(StringUtils.isNotBlank(alreadyCopy)){
			int copyNomber = Integer.parseInt(alreadyCopy);
			for(int i=0;i<copyNomber;i++){
				this.pendingService.addFormPage(instanceId);
			}
		}

		endTime = System.currentTimeMillis();
		System.out.println("------saveElementAndSendNextForMobile断点2 ------："+(endTime-startTime)/1000.0);
		// 是否经过公文交换平台 IsExchange 0:否; 1:是
		if(nextNode!= null &&((nextNode.getIsExchange() != null &&nextNode.getIsExchange() == 1) ||(nextNode.getWfl_child_merge() != null &&"1".equals(nextNode.getWfl_child_merge())))){
			try {
				String oldValue = saveForm(oldformId, 2, instanceId, formId,nodeId, workFlowId, "", isFirstChildWf,userId);
				if (!oldValue.equals("")) {
					String[] values = oldValue.substring(0,oldValue.length() - 1).split(";");
					for (int j = 0; j < values.length; j++) {
						String[] keyValues = values[j].split(":");
						if (keyValues.length == 2) {
							String key = keyValues[0];
							String value = keyValues[1];
							if (formJson.get(key) == null) {
								formJson.put(key, value);
							}
						}
					}
				}
				String msg = this.isGoExChangeOfMobile(m_userIds, c_userIds, nextNodeId, workFlowId, userId, processId, writeJson);
				if (msg != null && !"".equals(msg)) {
					if(msg.startsWith("outparwf")){		//需要发送到流程的下一节点(自动分发给流程的下一节点)
						if(msg.equals("outparwf:")){
						}else{
							String[] msgArr = msg.split(":");
							if(msgArr!=null && msgArr.length==1){	//已经无任何流转节点
								
							}else{		//后面串联着节点
								String nodeIndo = msgArr[1];
								String[] par = nodeIndo.split(",");
								String wfn_nodeId = par[0];
								String route_type = par[1];
								m_userIds = par[2];
								c_userIds = "";
								nextNodeId = wfn_nodeId;
								if(wfn_nodeId!=null){
									sendInfoToNext(wfProcess, oldformId, processId, f_proceId, writeJson, 
											workFlowId, formId, instanceId, operate, nodeId, itemId, 
											userId, isChanged, isFirst, isChildWf, finstanceId, nextNodeId, 
											mergepdf, nextNode, lastProcess, formJson, flowInfo, cType, relation,
											m_userIds, c_userIds, emp, isFirstChildWf, newInstanceIdForChildWf, formPage);
								}
							}
						}
					}else{
						// 走合并流程的流程
						String[] msgs = msg.split(";");
						for (int i = 0; i < msgs.length; i++) {
							String isMerge = msgs[i].split(",")[0];
							String tempuserId = msgs[i].split(",")[1];
							String tempinstanceId = msgs[i].split(",")[2];
							String tempprocessId = msgs[i].split(",")[3];
							String tempformId = msgs[i].split(",")[4];
							String childWorkflowId = msgs[i].split(",")[5];
							String childNodeId = msgs[i].split(",")[6];
							String docType = msgs[i].split(",")[7];
							if (formJson.get("instanceId") != null) {
								formJson.put("instanceIdOld",formJson.get("instanceId"));
								formJson.put("instanceid", tempinstanceId);
							}
							if (formJson.get("workFlowId") != null) {
								formJson.put("workFlowIdOld",formJson.get("workFlowId"));
								formJson.put("workFlowid", childWorkflowId);
							}
							if (formJson.get("processId") != null) {
								formJson.put("processIdOld",formJson.get("processId"));
								formJson.put("processid", tempprocessId);
							}
							if (formJson.get("formId") != null) {
								formJson.put("formIdOld", formJson.get("formId"));
								formJson.put("formid", tempformId);
							}
							// 将formJson的值插入到 request里面去
							JSONObject params = new JSONObject();
							params.put("isMerge", isMerge);
							params.put("currentUserId", userId);
							params.put("formJson", formJson);
							params.put("instanceId", tempinstanceId); // new
																		// instanceid
							params.put("userId", tempuserId);
							params.put("oldProcessId", processId);
							params.put("processId", tempprocessId); // new process
							params.put("formId", tempformId); // new formid
							params.put("workFlowId", childWorkflowId); // newWorkFlowId
							params.put("nextNodeId", nextNodeId);
							params.put("childNodeId", childNodeId);
							params.put("json", writeJson);
							params.put("formPage", formPage);
							params.put("nodeId", nodeId);
							params.put("index", i);
							params.put("docType", docType);
							if (i == msgs.length - 1) {
								params.put("isLast", "1");
							} else {
								params.put("isLast", "0");
							}
							if (i == 0) {
								getNextIsMergeOfMobile(params, true);
							} else {
								getNextIsMergeOfMobile(params, false);
							}
						}
					}
				}
				//新 发短信
				if(StringUtils.isNotBlank(canSendMsg) && canSendMsg.equals("1")){
					WfItem item = itemService.getItemById(lastProcess.getItemId());
					String userIds = m_userIds + "," + c_userIds;
					List<Employee> empList = tableInfoService.findEmpsByUserIds(userIds);
					String numbers = "";
					if(null != empList && empList.size()>0){
						for (Employee employee : empList) {
							numbers += employee.getEmployeeMobile()+",";
						}
					}
					if(StringUtils.isNotBlank(numbers)){
						numbers = numbers.substring(0,numbers.length()-1);
					}
					SendMsgUtil msgUtil = new SendMsgUtil();
					Map<String, String> map = new HashMap<String, String>();
					map.put("itemName", item.getVc_sxmc());
					map.put("sendUserName", emp.getEmployeeName());
					map.put("title", lastProcess.getProcessTitle());
					msgUtil.sendMsg(numbers, "trueWorkflow", map);
				}				
				
				getResponse().getWriter().print("success");
				
				//残联定制，阅文自动办结
				String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
				if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && StringUtils.isNotBlank(nextNodeId) && autoEndNodeId.indexOf(nextNodeId) != -1)){
					List<WfProcess> nextwfps = tableInfoService.findWfProcessList(instanceId, wfProcess.getStepIndex()+1);
					if(null != nextwfps && nextwfps.size()>0){
						this.endAuto(emp, instanceId, workFlowId, oldformId, nextwfps.get(0).getWfProcessUid(), nextNodeId, writeJson);
					}else{
						this.endAuto(emp, instanceId, workFlowId, oldformId, processId, nextNodeId, writeJson);
					}
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				getResponse().getWriter().print("fail");
			} finally {
				getResponse().getWriter().close();
			}
		} else { // sendNext
			try {
				endTime = System.currentTimeMillis();
				System.out.println("------saveElementAndSendNextForMobile断点3 ------："+(endTime-startTime)/1000.0);
				sendInfoToNext(wfProcess, oldformId, processId, f_proceId, writeJson, workFlowId, formId, instanceId, operate, nodeId, itemId, userId, isChanged, isFirst, isChildWf, finstanceId, nextNodeId, mergepdf, nextNode, lastProcess, formJson, flowInfo, cType, relation, m_userIds, c_userIds, emp, isFirstChildWf, newInstanceIdForChildWf, formPage);
				//新 发短信
				if(StringUtils.isNotBlank(canSendMsg) && canSendMsg.equals("1")){
					WfItem item = itemService.getItemById(lastProcess.getItemId());
					String userIds = m_userIds + "," + c_userIds;
					List<Employee> empList = tableInfoService.findEmpsByUserIds(userIds);
					String numbers = "";
					if(null != empList && empList.size()>0){
						for (Employee employee : empList) {
							numbers += employee.getEmployeeMobile()+",";
						}
					}
					if(StringUtils.isNotBlank(numbers)){
						numbers = numbers.substring(0,numbers.length()-1);
					}
					SendMsgUtil msgUtil = new SendMsgUtil();
					Map<String, String> map = new HashMap<String, String>();
					map.put("itemName", item.getVc_sxmc());
					map.put("sendUserName", emp.getEmployeeName());
					map.put("title", lastProcess.getProcessTitle());
					msgUtil.sendMsg(numbers, "trueWorkflow", map);
				}
				
				getResponse().getWriter().print("success");
				
				endTime = System.currentTimeMillis();
				System.out.println("------saveElementAndSendNextForMobile断点4 ------："+(endTime-startTime)/1000.0);
				//残联定制，阅文自动办结
				String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
				if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && StringUtils.isNotBlank(nextNodeId) && autoEndNodeId.indexOf(nextNodeId) != -1)){
//					List<WfProcess> nextwfps = tableInfoService.findWfProcessList(instanceId, wfProcess.getStepIndex()+1);
					List<WfProcess> nextwfps = tableInfoService.findWfProcessIdByInsIdAndStp(instanceId, wfProcess.getStepIndex()+1);
					if(null != nextwfps && nextwfps.size()>0){
						this.endAuto(emp, instanceId, workFlowId, oldformId, nextwfps.get(0).getWfProcessUid(), nextNodeId, writeJson);
					}else{
						this.endAuto(emp, instanceId, workFlowId, oldformId, processId, nextNodeId, writeJson);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				getResponse().getWriter().print("fail");
			} finally {
				getResponse().getWriter().close();
			}
		}
		accessLog.setUserid(userId);
		long l = startDate.getTime()-(new Date()).getTime();
		endTime = System.currentTimeMillis();
		System.out.println("------saveElementAndSendNextForMobile断点5 ------："+(endTime-startTime)/1000.0);
		accessLog.setAccessTime(l+"");
		tableInfoExtendService.addAccessLog(accessLog);
	}
	
	
	/**
	 * 
	 * 描述：将移动端获取的数据值进行入库操作
	 * @param oldformId
	 * @param processId
	 * @param f_proceId
	 * @param workFlowId
	 * @param formId
	 * @param instanceId
	 * @param nodeId
	 * @param itemId
	 * @param userId
	 * @param isFirst
	 * @param finstanceId
	 * @param nextNodeId
	 * @param nextNode
	 * @param formJson
	 * @param flowInfo
	 * @param emp
	 * @param isFirstChildWf
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午2:57:04
	 */
	public String saveFormValueOfMobile(String oldformId, String processId, String f_proceId,
			 String workFlowId,String formId, String instanceId, String nodeId, String itemId, String userId,  String isFirst, 
			String finstanceId, String nextNodeId,  WfNode nextNode,JSONObject formJson, JSONObject flowInfo, 
			Employee emp, String isFirstChildWf){
		boolean changed = false;
		// ----------------------------保存表单数据----------start----------------------
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(oldformId);
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 列表和非列表类型的分开存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			lists.add(ft);
		}
		// 读取list中的tableName(去重之后的)
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
				tableNameList.add(lists.get(i).getAssignTableName());
			}
		}
		WfProcess oldProcess = tableInfoService.getProcessById(processId);
		if (oldProcess == null && f_proceId != null&& !f_proceId.equals("")) {
			oldProcess = tableInfoService.getProcessById(f_proceId);
		}
		if ((finstanceId == null || finstanceId.equals(""))&& oldProcess != null) {
			finstanceId = oldProcess.getfInstancdUid();
		} else {
			if (isFirst == null || !isFirst.equals("true")) {
				if (oldProcess != null&& !finstanceId.equals(oldProcess.getfInstancdUid())) {
					finstanceId = oldProcess.getfInstancdUid();
				}
			} else {
				finstanceId = flowInfo.getString("finstanceId");
			}

		}
		String value = "";
		// ========================非列表类型=============================//
		if (tableNameList.size() != 0 && !("").equals(tableNameList)&& tableNameList != null) {

			List<FormTagMapColumn> ftmcList = new ArrayList<FormTagMapColumn>();
			for (String tableName : tableNameList) {
				StringBuffer tagName = new StringBuffer();
				String tabName = tableName;

				for (int i = 0; i < ftmcList.size(); i++) {
					if (ftmcList.get(i).getTablename() != null&& !ftmcList.get(i).getTablename().equalsIgnoreCase(ftmcList.get(i).getAssignTableName())) {
						tabName = ftmcList.get(i).getTablename();
					}
				}
				// oldValue
				List<Map> mapList = zwkjFormService.findTableByFormId(tableName, oldformId, instanceId);
				if (mapList == null || mapList.size() == 0) {
					if ((finstanceId == null || finstanceId.equals(""))&& oldProcess != null) {
						finstanceId = oldProcess.getWfInstanceUid();
					}
					mapList = zwkjFormService.findTableByFormId(tableName, oldformId, finstanceId);
				}
				if (mapList == null || mapList.size() == 0) {
					mapList = zwkjFormService.findTableByFormId(tabName, formId, instanceId);
					changed = true;
				}
				ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId,tableName, 1, isFirstChildWf);
				// 取出表名
				// String tabName = ftmcList.get(0).getTablename();
				String columnName = "";
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
				tagName = new StringBuffer("");
				for (FormTagMapColumn ftmc : ftmcList) {
					// 列名
					String columnnameAll = "";
					// 列所对应的的值--未换表单
					if (oldformId.equals(formId)) {
						columnnameAll = ftmc.getAssignColumnName();
					} else {
						if (!("true").equals(isFirstChildWf)) {
							columnnameAll = ftmc.getColumnname();
						} else {
							columnnameAll = ftmc.getAssignColumnName();
						}
					}
					if (ftmc.getColumnname() != null&& !("").equals(ftmc.getColumnname())) {
						if (!ftmc.getColumnname().equalsIgnoreCase(ftmc.getFormtagname())) {
							columnnameAll += ";"+ ftmc.getFormtagname(); // 列名
						}
					}
					// =================保存或更新和点“完成”时=================
					if (columnnameAll != null
							&& !("").equals(columnnameAll)) {
						columnName += columnnameAll + ","; // 列名

						// 表里的一类数据
						String columnValue = "";
						String docNum =null;
						if (!("").equals(formJson)) {
							String formName = "";
							if (columnnameAll.toLowerCase().indexOf(";") > -1) {
								//formName = columnnameAll.toLowerCase().split(";")[1];
								// pad 上面文号消失了
								formName = columnnameAll.toLowerCase().split(";")[0];
								columnName = columnName.replace(columnnameAll,columnnameAll.toLowerCase().split(";")[0]);
								columnnameAll = columnnameAll.toLowerCase().split(";")[0];
							} else {
								formName = columnnameAll.toLowerCase();
							}
							columnValue = (String) formJson.get(formName) != null ? (String) formJson.get(formName) : "";
							if (("undefined").equals(columnValue)) {
								columnValue = "";
							}
							if("docNum".equals(ftmc.getConstantValue())&&!"".equals(columnValue)){
								if(columnValue.split("\\*").length>1){
									docNum = columnValue;
									columnValue = columnValue.split("\\*")[1];
								}else if(columnValue.split("\\|\\|").length>1){
									docNum = columnValue;
									columnValue = columnValue.split("\\|\\|")[1];
								}								
							}
							if(emp != null){
								String permit = formPermitService.findSingleFormPermitByUserId(workFlowId, nodeId, emp.getEmployeeGuid(), ftmc.getFormtagname());
								if (!permit.equals("2") && columnValue.equals("") && mapList != null && mapList.size() > 0) {
									if (columnValue.equals("")&& mapList != null&& mapList.size() > 0) { // json// 中只显示// 读写的json// ,// 只读的取一下数据库
										// 从maplist取值
										if (mapList.get(0).get(columnnameAll.toUpperCase()) != null) {
											// 没有换数据表 或者
											if (changed == false|| !tableName.equalsIgnoreCase(ftmc.getTablename())) {
												columnValue = mapList.get(0).get(columnnameAll.toUpperCase()).toString();
											}
											if (columnValue.indexOf("org.hibernate.lob.SerializableClob") > -1) {
												columnValue = tableInfoService.getClob(tableName,instanceId,columnnameAll.toLowerCase(),formId);
											}
										}
									}
								}
							}
							
							
							value += formName + ":" + columnValue + ";";
						} else {
							value += columnnameAll + ":" + columnValue+ ";";
						}
						// -----------------------------文号入库---------------start------------------
						if(CommonUtil.stringNotNULL(docNum)){
							this.addDocNumForMobile(itemId,workFlowId, ftmc,instanceId, formId, docNum, emp);
						}
						// -----------------------------文号入库---------------end------------------
						String colVal = "'" + columnValue + "',";
						if (wfFieldInfoList != null&& wfFieldInfoList.size() != 0&& !("").equals(wfFieldInfoList)) {
							for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
								// 日期型
								if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase())&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
									colVal = "to_date('" + columnValue+ "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
								}
							}
						}
						tagName.append(colVal);
					}
				}
				if (ftmcList.size() > 0) {
					for (WfFieldInfo wfColumn : wfFieldInfoList) {
						// 基础字段(换表单如果有新的表加入，需加上基础字段)
						if (wfColumn.getI_tableid() == null|| ("").equals(wfColumn.getI_tableid())) {
							if (columnName.toLowerCase().indexOf(wfColumn.getVc_fieldname().toLowerCase()) < 0) {
								columnName += wfColumn.getVc_fieldname().toUpperCase()+ ",";
								// 入库为新的formId
								if (("formid").equals(wfColumn.getVc_fieldname().toLowerCase())) {
									tagName.append("'" + formId + "',");
								} else {
									tagName.append("'"+ getRequest().getParameter(wfColumn.getVc_fieldname())+ "',");
								}
							}
						}
					}
				}
				// 更新--先删除再重新插库
				// 需要入库的表
				ZwkjForm zf = zwkjFormService.getOneFormById(formId);
				String saveTableName = zf.getInsert_table();
				if (!("").equals(saveTableName)&& tableName.equals(saveTableName)) {
					// 更新--先删除再重新插库
					zwkjFormService.deleteForm(tableName, formId, instanceId);
					zwkjFormService.saveForm(tableName, columnName.substring(0, columnName.length() - 1),tagName.substring(0, tagName.length() - 1));
				}
			}
		}
		return value;
	}
	
	
	public void sendInfoToNext(WfProcess wfProcess, String oldformId, String processId, String f_proceId,
			String writeJson, String workFlowId,String formId, String instanceId, String operate, 
			String nodeId, String itemId, String userId, String isChanged, String isFirst, 
			String isChildWf, String finstanceId, String nextNodeId, String mergepdf, WfNode nextNode,
			WfProcess lastProcess, JSONObject formJson, JSONObject flowInfo, String cType, String relation, 
			String m_userIds, String c_userIds, Employee emp, String isFirstChildWf,
			String newInstanceIdForChildWf, String formPage) throws Exception{
				long startTime = System.currentTimeMillis();
				long endTime ;
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点1 ------："+(endTime-startTime)/1000.0);
				String oldJson = wfProcess!=null?wfProcess.getCommentJson():"";
				//1、将form表单值进行入库操作
				String value = saveFormValueOfMobile(oldformId, processId, f_proceId, workFlowId, formId, instanceId, nodeId, itemId, c_userIds, isFirst, finstanceId, nextNodeId, nextNode, formJson, flowInfo, emp, isFirstChildWf);
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点2 ------："+(endTime-startTime)/1000.0);
				WfProcess oldProcess = tableInfoService.getProcessById(processId);
				// if  node ==  会议通过的节点 update 会议状态
				String meetingPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingPassNode");
				String meetingNotPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingNotPassNode");
				if(meetingPassNodeIds != null && meetingPassNodeIds.indexOf(nextNodeId)>-1){
					meetingInfoService.updateState(instanceId,"1");
				}else if(meetingNotPassNodeIds != null && meetingNotPassNodeIds.indexOf(nextNodeId)>-1){
					meetingInfoService.updateState(instanceId,"0");
				}
				if (isChildWf != null && isChildWf.equals("true")) { // 子流程进入
					if (relation != null && relation.equals("1")) { // 同步
						if (oldProcess != null) { // 存在父id
							tableInfoService.updateWfProcessStatus(oldProcess.getWfInstanceUid());
						}
					}
				}
				// 查询表单值
				String formValue = this.saveForm(oldformId, 2, instanceId, formId, nodeId,workFlowId, finstanceId, isFirstChildWf,userId);
				
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点3 ------："+(endTime-startTime)/1000.0);
				
				// 把json入库
				if (oldProcess != null) {
//					oldProcess.setCommentJson(writeJson);
					oldProcess.setFormPage(formPage);
				}
				// 获取该实例的第一个node属性
				WfNode wfNode2 = workflowBasicFlowService.findFirstNodeId(workFlowId);
				// 获取对应父流程的pdf
				WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
				
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点4 ------："+(endTime-startTime)/1000.0);
				
				String firstOverPdf = "";
				boolean flag2 = false;
				
				if(lastProcess!=null ){
					if(!lastProcess.getFormId().equals(lastProcess.getOldFormId())){
						flag2 = true;
					}
				}
				
				if((nextNode != null && !formId.equals(nextNode.getWfn_defaultform()))||(flag2) && nextNode!=null){
					if(lastProcess!=null ){
						WfNode wn = workflowBasicFlowService.findFormIdByNodeId(nodeId);
						String wfn_form_continue = nextNode.getWfn_form_continue();
						boolean flag = true;
						if(wfn_form_continue==null || wfn_form_continue.equals("0")){
							if(wn.getWfn_form_continue()==null || wn.getWfn_form_continue().equals("0")){
								if(wfProcess!=null){
									if(wfProcess.getStepIndex() == 1 &&"1".equals(wfProcess.getIsBack())){
									}else{
										flag = false;
									}
								}else if(pWfProcess != null){	//为空
									flag = false;
								}
							}
						}
						if(flag2){
							flag = true;
						}
						if(flag){
							//获取当前节点
							String overhtml = getHtmlToNewHtml(formId, nodeId, value , instanceId, false, false);
							String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
							String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
							String overPdfPath = pdfRoot+dstPath+ (overhtml.substring
									(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".true";
							String pdfpath = lastProcess.getPdfPath();
							if(pdfpath!=null){
								String[] pdfs = pdfpath.split(",");
								if(pdfs!=null&& pdfs.length>1){
									pdfpath = pdfs[0]+","+overPdfPath;
								}
							}
							lastProcess.setPdfPath(pdfpath);
							ToPdfThread toPdf = new ToPdfThread(overhtml, "",
									instanceId, attachmentService , "htmlToPdf",lastProcess,tableInfoService,writeJson,flowService);
							toPdf.start();
							
						}
						endTime = System.currentTimeMillis();
						System.out.println("------sendInfoToNext断点5 ------："+(endTime-startTime)/1000.0);
					}else{
						String overhtml = getHtmlToNewHtml(formId, nodeId, value , instanceId, false, false);
						endTime = System.currentTimeMillis();
						System.out.println("------sendInfoToNext断点6 ------："+(endTime-startTime)/1000.0);
						HtmlToPdf htp = new HtmlToPdf();
						String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
						String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
						firstOverPdf = pdfRoot+dstPath+ (overhtml.substring(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".pdf";
						htp.htmlToPdf(overhtml, firstOverPdf);
						endTime = System.currentTimeMillis();
						System.out.println("------sendInfoToNext断点7 ------："+(endTime-startTime)/1000.0);
						// 转成true 
						firstOverPdf  = new PDFToTrue().pdfToTrue(firstOverPdf, writeJson);
					}
				}
				
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点8 ------："+(endTime-startTime)/1000.0);
				if(Constant.isFlexibleForm){
					formPage = changeFormPageJson(formValue, formPage, nextNodeId, formId, workFlowId);
				}
				
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点9 ------："+(endTime-startTime)/1000.0);
				String oldPdfPath = "";
				String middlePdf = "";
				if (flowInfo != null && !flowInfo.equals("")) {
					Object object = flowInfo.getString("pdfNewPath");
					if (object != null && !object.equals("")) {
						middlePdf = (String) object;
						oldPdfPath = middlePdf;
					}
				}
				if (oldPdfPath != null && !oldPdfPath.equals("")) { // 带过来的pdf
				} else {
					if (wfNode2 != null) {
						String form_continue = wfNode2.getWfn_form_continue();
						if (form_continue != null && form_continue.equals("1")) { // 延用
							if (pWfProcess != null) {
								String path = pWfProcess.getPdfPath();
								if (path != null && path.length() > 0) {
									oldPdfPath = path.split(",")[0]; // 父流程的表单
								}
							}
						}
					}
				}
				if (mergepdf != null && !mergepdf.equals("")) {
					if (oldPdfPath == null || oldPdfPath.equals("")) {
						oldPdfPath = mergepdf;
					}
				}
				// 生成新的html并转成pdf
				String pdfPath = "";
				String pdfPath2 = "";
				String htmlpath = "";
				String htmlpath2 = "";
				String pdfType = "0";
				int count2 = 0 ;
				String conditionSql = "";
				List<SendAttachmentsHistory> attHistoryList = attachmentService.findIsEditOfSendAttHistory(instanceId + ATT_SUFFIX_NAME);
				if (!("1").equals(operate)&& (("true").equals(isFirst) || !("").equals(formJson)|| wfProcess.getStepIndex() == 1 || attHistoryList.size() != 0)) {
					String wfn_form_continue = nextNode.getWfn_form_continue();
					boolean flag = true;
					WfNode wn = workflowBasicFlowService.getWfNode(nodeId); // 当前节点
					if (wfn_form_continue == null|| wfn_form_continue.equals("0")) {
						if (wn.getWfn_form_continue() == null|| wn.getWfn_form_continue().equals("0")) {
							if (wfProcess != null) {
								if (wfProcess.getStepIndex() == 1&& "1".equals(wfProcess.getIsBack())) {
								} else {
									pdfPath = wfProcess.getPdfPath();
									flag = false;
								}
							} else if (pWfProcess != null) {
								pdfPath = pWfProcess.getPdfPath();
								flag = false;
							}
						}
					}
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点10 ------："+(endTime-startTime)/1000.0);
					pdfType = "1";
					if (flag) { // 不延用表单
						pdfType = "2";
						if (nextNode.getWfn_defaultform().equals(formId)) {
							htmlpath = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, true);
							htmlpath2 = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, false);
						} else {
							htmlpath = getHtmlToNewHtml(nextNode.getWfn_defaultform(), nextNodeId,
									value, instanceId, false, true);
							htmlpath2 = getHtmlToNewHtml(nextNode.getWfn_defaultform(), nextNodeId,
									value, instanceId, false, true);
						}
						pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,oldPdfPath);
						if(wfProcess!=null){
							Integer stepIndex2 = wfProcess.getStepIndex();
							String instanceId2 = wfProcess.getWfInstanceUid();
							if (CommonUtil.stringNotNULL(instanceId2)){
								conditionSql = " and p.wf_f_instance_uid = '" + instanceId2 + "'";
							}
							if (null != stepIndex2){
								conditionSql += " and p.step_index = " + stepIndex2 + "";
							}
							count2 = pendingService.getCountOfPending(conditionSql);
							if(count2 > 1){
								pdfPath2 = wfProcess.getPdfPath();
								pdfPath = pdfPath2.split(",")[0] +  "," +  pdfPath.split(",")[1];
							}
						}
						endTime = System.currentTimeMillis();
						System.out.println("------sendInfoToNext断点11------："+(endTime-startTime)/1000.0);
					}
					if (htmlpath.equals("") && htmlpath2.equals("")&& oldPdfPath.equals("")) {
						oldPdfPath = pdfPath.split(",")[0];
					}
					// 主送抄送,完成： 需要生成pdf文件
					if (!("1").equals(operate)) {
						ToPdfThread topdf = new ToPdfThread(htmlpath + ","+ htmlpath2, attachmentService, instanceId,oldPdfPath, writeJson, "middle",wfProcess,"",flowService,null,null, tableInfoService);
						topdf.start();
					}
				} else {
					htmlpath = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, true);
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点12 ------："+(endTime-startTime)/1000.0);
					htmlpath2 = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, false);
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点13 ------："+(endTime-startTime)/1000.0);
					pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,oldPdfPath);
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点14 ------："+(endTime-startTime)/1000.0);
					if(wfProcess!=null){
						Integer stepIndex2 = wfProcess.getStepIndex();
						String instanceId2 = wfProcess.getWfInstanceUid();
						if (CommonUtil.stringNotNULL(instanceId2)){
							conditionSql = " and p.wf_f_instance_uid = '" + instanceId2 + "'";
						}
						if (null != stepIndex2){
							conditionSql += " and p.step_index = " + stepIndex2 + "";
						}
						count2 = pendingService.getCountOfPending(conditionSql);
						if(count2 > 1){
							pdfPath2 = wfProcess.getPdfPath();
							pdfPath = pdfPath2.split(",")[0] + "," +  pdfPath.split(",")[1];
						}
					}
					if (htmlpath.equals("") && htmlpath2.equals("")&& oldPdfPath.equals("")) {
						oldPdfPath = pdfPath.split(",")[0];
					}
					// 主送抄送,完成： 需要生成pdf文件
					if (("1").equals(operate)) {
						wfProcess.setIsOver("OVER");
						ToPdfThread topdf = new ToPdfThread(htmlpath + ","+ htmlpath2, attachmentService, instanceId,oldPdfPath, writeJson, "middle",wfProcess,"",flowService,null,null, tableInfoService);
						topdf.start();
					}
				}

				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点15 ------："+(endTime-startTime)/1000.0);
				if (("1").equals(operate)) {// 抄送插入待办
					// 将意见json保存到主办中
					/*WfProcess process = pendingService.getProcessByID(processId);
					if (process != null) {
						Integer master = process.getIsMaster();
						if (master != null && master == 0) {
							WfProcess masterProcess = tableInfoService.getMasterProcess(wfProcess);
							if (masterProcess != null) {
//								masterProcess.setCommentJson(writeJson);
								masterProcess.setFormPage(formPage);
								tableInfoService.updateProcess(masterProcess);
								List<WfProcess> list = tableInfoService.getNextProcess(wfProcess);
								for (WfProcess process_ : list) {
									process_.setFormPage(formPage);
//									process_.setCommentJson(writeJson);
									tableInfoService.updateProcess(process_);
								}
							}
						}
					}*/
					
					//获取当前节点的节点类型:如果节点
					WfNode  wf_node = workflowBasicFlowService.findNodeById(nodeId);
					if(wf_node!=null){   //检查节点模式
						String route_type = wf_node.getWfn_route_type();
						if(route_type!=null && (route_type.equals("4") || route_type.equals("6"))){
							/*WfProcess ent = new WfProcess();
							ent.setStepIndex(wfProcess.getStepIndex());
							ent.setWfInstanceUid(wfProcess.getWfInstanceUid());
							ent.setNodeUid(wfProcess.getNodeUid());
							List<WfProcess>  wfplist = tableInfoService.getWfProcessByEntity(ent);
							for(int i=0; i<wfplist.size(); i++){
								WfProcess proc = wfplist.get(i);
								if(!proc.getWfProcessUid().equals(wfProcess.getWfProcessUid())){
									if(pdfPath!=null && !pdfPath.equals("")){
										String newPdfPath = "";
										String[] temps = pdfPath.split(",");
										if(temps != null && temps.length > 0){
											newPdfPath = temps[0];
										}
										if(proc != null && CommonUtil.stringNotNULL(proc.getPdfPath())){
											String[] procPdfpaths = proc.getPdfPath().split(",");
											if(procPdfpaths != null && procPdfpaths.length > 1){
												newPdfPath = newPdfPath + procPdfpaths[1];
											}
										}
										proc.setPdfPath(newPdfPath);
										tableInfoService.update(proc);
									}
								}
							}*/
						}
					}
					
					
					if(wf_node!=null){
						String wfn_route_type = wf_node.getWfn_route_type();
						if(wfn_route_type!=null && wfn_route_type.equals("6")){
							List<WfProcess> list =  tableInfoService.findWfProcessList(workFlowId, instanceId, nodeId, wfProcess.getStepIndex());
							for(int i=0; i<list.size(); i++){
								if(list.get(i).getWfProcessUid().equals(processId)){
									if(i==list.size()-1){
										System.out.println("当前节点为并行传阅模式, 且传阅结束");
									}else{
										WfProcess wfp = list.get(i+1);
										wfp.setIsShow(1);
										LOGGER.warn("将用户:"+wfp.getUserUid()+",待办'"+wfp.getProcessTitle()+"'展示出来");
										tableInfoService.update(wfp);
										sycnPendToChat(wfp, userId);
										break;
									}
								}
							}
						}
					}
					
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点16 ------："+(endTime-startTime)/1000.0);
					// 标题的值
					String vc_title = getTitle(workFlowId, formId, instanceId).split(";")[0];
					
					tableInfoService.updateProcess(processId, operate, instanceId, nodeId, userId, vc_title, workFlowId,itemId, pdfPath, writeJson);
					//websocket推送消息
					WebSocketUtil webSocket = new WebSocketUtil();
					webSocket.delBadge(userId, "", "");
					
					WfNode wfnode = workflowBasicFlowService.getWfNode(nodeId);	//获取当前node
					String route_type = "";
					if(wfnode!=null){
						route_type = wfnode.getWfn_route_type(); 
					}
					
					if(route_type!=null && route_type.equals("3")){		//并行结合
						Integer master = wfProcess.getIsMaster();
						if(master!= null && master==2){	//全部办结完成
							//获取该节点的
							List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
							WfNode nextNode2 = null;		//下一节点
							if(nodeList!=null && nodeList.size()>0){
								nextNode2 = nodeList.get(0);
							}
							sendNextProcess(nextNode2, wfProcess, value, vc_title, writeJson,formPage, false,userId);
						}
					}else if(route_type!=null && (route_type.equals("4") || route_type.equals("6"))){		//并行传阅式
						wfProcess.setFinshTime(new Date());
						wfProcess.setIsOver(Constant.OVER);
						tableInfoService.update(wfProcess);
						WfItem item = tableInfoService.findItemByWorkFlowId(workFlowId);
						boolean isreplay = false;		//是否添加数据到待处理中
						if(item!=null && item.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO)){
							String formNodeId = wfProcess.getFromNodeid();
							WfNode node = workflowBasicFlowService.getWfNode(formNodeId);
							if(node!=null){
								if (node.getWfn_send_file()!= null && node.getWfn_send_file()==1) {
									isreplay = true;
								}
							}
						}
						if(isreplay){
							//查询上一步发送的人员id,userId相同
							WfProcess wfp = new WfProcess();
							wfp.setStepIndex(wfProcess.getStepIndex()-1);
							wfp.setNodeUid(wfProcess.getFromNodeid());
							wfp.setWfInstanceUid(wfProcess.getWfInstanceUid());
//							List<WfProcess> lastList = tableInfoService.findWfProcessList(wfp);
							List<WfProcess> lastList = tableInfoService.findWfProcessListByIsOver(wfp);
							WfProcess lastWfp = null;
							for(WfProcess wf:lastList){
								if(wf.getUserUid().equals(wfProcess.getFromUserId())){
									lastWfp = wf;
									break;
								}
							}
							if(lastWfp!=null){
								if(isChanged!=null && isChanged.equals("1")){
									Replay replay = new Replay();
									replay.setProcessId(lastWfp.getWfProcessUid());
									replay.setReplayProcessid(processId);
									replay.setReplayTime(new Date());
									replay.setReplayUserid(wfProcess.getUserUid());
									replay.setStatus("0");
									replay.setTitle(wfProcess.getProcessTitle());
									replayService.saveReplay(replay);
								}
							}
						}
						//检查该步骤信息是否已经被处理
//						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);
						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
						int count = 0;
						for(int i=0; i<sameStepWfList.size(); i++){
							if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
								count ++;
								break;
							}
						}
						if(count==0){	//	count=0时表示该节点已经办结完成
							List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
							WfNode nextnode = null;		//下一节点
							if(null != nodeList && nodeList.size()>0){
								for(int i=0; i<nodeList.size(); i++){
									nextnode = nodeList.get(i);
									String xtoUserId = nextnode.getWfn_bd_user();
									if(xtoUserId!=null && !xtoUserId.equals("")){
										break;
									}
									List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, nextnode.getWfn_id());
									if(wfbList!=null && wfbList.size()>0){
										break;
									}
								}
								nextnode = nextnode != null ? nextnode : nodeList.get(0);
							}
							endTime = System.currentTimeMillis();
							System.out.println("------sendInfoToNext断点17 ------："+(endTime-startTime)/1000.0);
							sendNextProcess(nextnode, wfProcess, value, vc_title, writeJson, formPage, false, userId);
						}
					}else if(route_type!=null && route_type.equals("5")){			//并行办理:直接发送给下一步,下一步的人员,必须固定
//						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfProcess);		//查看已被办理的个数
						List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);		//查看已被办理的个数
						int count = 0 ;		//已经被办理的个数
						for(int i=0; i<sameStepWfList.size(); i++){
							if(sameStepWfList.get(i).getIsOver().equals("OVER")){	
								count ++;
								break;
							}
						}
						if(count>1){		//更新下一步的信息数据
							//检查下一步骤是否已经被办理
//							Integer stepIndex = wfProcess.getStepIndex()+1;
//							List<WfProcess> list = tableInfoService.findWfProcessList(instanceId, stepIndex);
//							int num = 0;
//							WfProcess wfp = null;
//							for(int i=0; i<list.size(); i++){
//								wfp = list.get(i);
//								if(wfp.getIsOver()!=null && wfp.getIsOver().equals("OVER")){
//									num ++;
//								}
//							}
//							if(num==0){	
//								WfProcess wf = null;
//								for(int i=0; i<list.size(); i++){
//									wf = list.get(i);
//									wf.setFormPage(formPage);
////									wf.setCommentJson(writeJson);
//									tableInfoService.update(wf);
//								}
//							}else{	////办件已经进入办理之中
//								
//							}
						}else{		//插入下一步的数据
							List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
							WfNode nextnode = null;		//下一节点
							if(nodeList!=null && nodeList.size()>0){
								nextnode = nodeList.get(0);
							}
							sendNextProcess(nextnode, wfProcess, value, vc_title, writeJson, formPage, false,userId);
						}
					}else {
						List<WfNode> nodes = workflowBasicFlowService.showNode(workFlowId,nodeId, instanceId);
						WfProcess nextProcess = null;
						WfNode node = null;
						boolean flag = false;
						for(WfNode wfNode : nodes){
							List<WfProcess> list2 = tableInfoService.getNodeProcess(workFlowId, 
									instanceId, wfNode.getWfn_id() ,wfProcess.getfInstancdUid());
							for(int i=0 ; list2!=null && i<list2.size();i++){
								nextProcess = list2.get(i);
								if(nextProcess.getIsOver().equals("NOT_OVER")){	
									node = wfNode;
									flag = true;
									break;
								}
							}
							if(flag){
								break;
							}
						}
						endTime = System.currentTimeMillis();
						System.out.println("------sendInfoToNext断点17 ------："+(endTime-startTime)/1000.0);
						if(node!=null){
							//生成新的pdf
							htmlpath = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, true);
							htmlpath2 = getHtmlToNewHtml(formId, nextNodeId,value, instanceId, false, false);
							pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,oldPdfPath);
							//调用线程
							ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,instanceId,oldPdfPath,"","middle",wfProcess,"",flowService, null,null, tableInfoService);
							topdf.start();
							nextProcess.setPdfPath(pdfPath);
							//更新newprocess
							tableInfoService.updateProcess(nextProcess);
							endTime = System.currentTimeMillis();
							System.out.println("------sendInfoToNext断点18 ------："+(endTime-startTime)/1000.0);
						}
						if (Integer.parseInt(operate) == 1) {
							// 是否当前步骤的其他人都办完
							boolean isOver = tableInfoService.isAllOver(workFlowId,instanceId, nodeId,oldProcess.getfInstancdUid());
							if (isOver == true) {
								// 让下一步发送的待办显示
								updateNewProcess(instanceId, workFlowId, nodeId, "");
							}
						}
					}
					endTime = System.currentTimeMillis();
					System.out.println("------sendInfoToNext断点19 ------："+(endTime-startTime)/1000.0);
					// 更新步骤
				} else {
					// -----------------------------发送下一步入待办----------------------------------
					// 插入待办
					String title = "";
					if (("true").equals(isFirst) || ("true").equals(isChildWf)|| ("").equals(isChildWf)) {
						if (("true").equals(isChildWf)&& formId.equals(oldformId)) {
							// 第一次进子流程
							title = getTitle(workFlowId, formId, finstanceId).split(";")[0];
							if (title.equals("")) {
								title = getTitle(workFlowId, formId, instanceId).split(";")[0];
							}
						} else {
							title = getTitle(workFlowId, formId, instanceId).split(";")[0];
						}
					} else {
						title = getTitle(workFlowId, formId, instanceId).split(";")[0];
						if(title == null||title.equals("")){
							title = oldProcess.getProcessTitle();
						}
					}
					if (title.equals("")) {
						title = "无标题";
					}
					WfChild wfChild = workflowBasicFlowService.getWfChildByCid(workFlowId);
					if (cType == null) {
						cType = wfChild == null ? "" : wfChild.getWfc_ctype();
					}
					if (relation == null) {
						relation = wfChild == null ? "" : wfChild.getWfc_relation();
					}
					Integer isExchange = null;
					// 查找当前节点的类型
					String route_type = this.getWfLine(workFlowId, nodeId, nextNodeId);
					// 下面方法中调用线程存在延时,需要先根据条件,修改上一次的状态位(具体为not_over修改为over)
					if (oldProcess != null && !("true").equals(isChildWf)) {
						oldProcess.setIsOver(Constant.OVER);
						oldProcess.setFinshTime(new Date());
						if (CommonUtil.stringNotNULL(oldProcess.getPdfPath()) && 
								CommonUtil.stringNotNULL(pdfPath) &&
								(pdfPath.split(",") != null) && (pdfPath.split(",").length > 1) &&
								CommonUtil.stringNotNULL(oldProcess.getPdfPath().split(",")[0] ) && 
								CommonUtil.stringNotNULL(pdfPath.split(",")[1])){
								oldProcess.setPdfPath(oldProcess.getPdfPath().split(",")[0] + "," + pdfPath.split(",")[1]);
							}
						tableInfoService.updateProcess(oldProcess);
					}
					String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
					SendNextProcess sendNextProcess = new SendNextProcess(title, m_userIds, c_userIds, emp.getEmployeeGuid(),workFlowId, nodeId, f_proceId, processId,nextNodeId, instanceId, itemId, formId, oldformId,"", "", "", isChildWf, cType, relation, finstanceId,newInstanceIdForChildWf, "", middlePdf, "", serverUrl);
					sendNextProcess.setPdfPath(pdfPath);
					sendNextProcess.setTrueJson(writeJson);
					sendNextProcess.setFormPage(formPage);
					// 调用线程: 处理的事情如下, 1, 插入待办; 2,待收已收; 3,over竞争步骤;
					// 4,下一步状态show改为1, 5,执行存储过程
					ToPdfThread topdf = new ToPdfThread(htmlpath + ","+ htmlpath2, 
							attachmentService, instanceId,oldPdfPath, "", "middle",
							sendNextProcess,isExchange, pdfType, tableInfoService, 
							route_type,employeeService, departmentService, emp, wfProcess,
							workflowBasicFlowService, zwkjFormService, "",flowService,itemService,firstOverPdf, formPage, null,nextNode.getWfn_self_loop());
					topdf.start();
			}
				endTime = System.currentTimeMillis();
				System.out.println("------sendInfoToNext断点20 ------："+(endTime-startTime)/1000.0);
	}
	
	
	
	/**
	 * 
	 * 描述： 在formPageJson根据权限填充对应的数值
	 * @param formValue		业务数据表值
	 * @param formPageJson	
	 * @param nodeId		节点Id
	 * @param formId		表单Id
	 * @param workflowId	流程Id
	 * @return String		返回的formPageJson值
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:05:25
	 */
	public String changeFormPageJson(String formValue, String formPageJson, String nodeId, String formId, String workflowId){
		Map<String, String>  valMap = new HashMap<String, String>();			//业务字段值（map形式存储）
		if(formValue!=null && !formValue.equals("")){	
			String[] values = formValue.split(";");
			for(String data: values){
				valMap.put(data.split(":")[0], data.split(":").length>1?data.split(":")[1]:"");
			}
		}
		Map<String, String> perLimit = formPermitService.getLimitByNodeId(nodeId, formId, workflowId);		//表单许可权限值
		//解析复杂的json数据值
		JSONObject obj = JSONObject.fromObject(formPageJson);		
		JSONArray arr = obj.getJSONArray("page");
		Map<String, String> map = new HashMap<String,String>();
		for(int i=0; i<arr.size(); i++){
			JSONObject obj2 = (JSONObject) arr.get(i);
			Iterator it = obj2.keys();
			while(it.hasNext()){
				String key = (String)it.next();
				String value = obj2.getString(key);
				if(key!=null && key.equals("id")){	
				}else{
					if(value!=null){
						map = changeJSONArrayJson(value,valMap,perLimit, map);
					}
				}
			}
		}
		//遍历map,将有数值的内容填充进去
		for(String key : map.keySet()){
			String value = map.get(key);
			formPageJson = formPageJson.replace(key, value);
		}
		return formPageJson;
	}
	
	/**
	 * 
	 * 描述：解析对应的json数值
	 * @param obj
	 * @param valMap
	 * @param perLimit
	 * @param map
	 * @return Map<String,String>
	 * 作者:蔡亚军
	 * 创建时间:2016-3-2 上午9:09:34
	 */
	public Map<String, String> changeJSONArrayJson(Object obj, Map<String, 
				String> valMap, Map<String, String> perLimit, Map<String, String> map){
		JSONArray arr = new JSONArray();
		try{
			arr = JSONArray.fromObject(obj);			//字符串是否为jsonarray
		}catch (Exception e) {
			try{
				JSONObject obj3 = JSONObject.fromObject(obj);		//是否为jsonObject; 将jsonObject添加到jsonArray中
				arr.add(obj3);
			}catch (Exception e2) {
			}
		}
		if(arr!=null && arr.size()>0){
			//遍历jsonArray数组;
			for(int i=0; i<arr.size(); i++){
				JSONObject obj2 = (JSONObject)arr.get(i);
				Iterator it = obj2.keys();
				boolean exist = false;
				while(it.hasNext()){
					String key = (String)it.next();
					String value = obj2.getString(key);
					if(key!=null && key.equals("id") && !value.equals("table") && !value.equals("")){			//只有需要填写的jsonArray存在数据内容
						String mapkey = obj2.toString();
						String oldchar = "\"id\":\""+value+"\"";
						String status = perLimit.get(value);
						String formvalue = valMap.get(value.toUpperCase());
						Object objType = obj2.get("type");
						String type = objType!=null?objType.toString():"";
						if(status!=null && status.equals("1") && !(type==null || type.equals("td"))){		//状态=1的
							if(formvalue==null || formvalue.equals("") || formvalue.equals("null")){
								formvalue = "";
							}
							String newchar = "\"text\":\""+formvalue+"\",\"id\":\""+value+"\"";
							String mapValue = mapkey.replace(oldchar, newchar);		//替换内部的 type:text
						    mapValue = mapValue.replace("\"type\":\""+type+"\"", "\"type\":\"words\"");		//替换内部的 type:text
							map.put(mapkey, mapValue);
							exist = true;
							break;
						}
					}
				}
				if(!exist){
					it = obj2.keys();
					while(it.hasNext()){
						String key = (String)it.next();
						String value = obj2.getString(key);
						if(value!=null){
							try{
								arr = JSONArray.fromObject(value);			//字符串是否为jsonarray
								map = changeJSONArrayJson(value,valMap,perLimit, map);
							}catch (Exception e) {
								try{
									JSONObject obj3 = JSONObject.fromObject(value);		//是否为jsonObject; 将jsonObject添加到jsonArray中
									arr.add(obj3);
									map = changeJSONArrayJson(value,valMap,perLimit, map);
								}catch (Exception e2) {
								}
							}
						}
					}
				}
			}
		}
		return map;
	}
	
	
	/**
	 * 
	 * @Title: endForMobile
	 * @Description: 办结--移动端
	 * @param @throws IOException 设定文件
	 * @return void 返回类型
	 * @throws
	 */
	public void endForMobile() throws IOException{
		AccessLog accessLog = new AccessLog();
		Date startDate = new Date();
		accessLog.setAccessDate(startDate);
		accessLog.setMethodName("endForMobile");
		JSONObject jsonObject = getJSONObjectHederAndBody1();
		//表单元素json
		JSONArray trueForm = new JSONArray().fromObject(jsonObject.get("trueform"));//;
		//手写的json
		
		String clientType = (String)jsonObject.get("clientType");
		accessLog.setClientType(clientType);
		String userId = (String)jsonObject.get("userId");
		Employee emp = tableInfoService.findEmpByUserId(userId);
		//步骤id
		String processId =  (String)jsonObject.get("processId");
		String f_instanceId = (String)jsonObject.get("finstanceId");
		//流程实例id
		String instanceId =  (String)jsonObject.get("instanceId");
		//旧表单id----待办的formId
		String oldformId =  (String)jsonObject.get("oldformId");
		//点击节点的新表单id----节点的属性formId
		String formId =  (String)jsonObject.get("formId");
		//流程id
		String workFlowId =  (String)jsonObject.get("workFlowId");
		//当前节点Id
		String nodeId =  (String)jsonObject.get("nodeId");
		//open第一步
		String isWriteNewValue =  (String)jsonObject.get("isWriteNewValue");
		//上一步的oldProcessId--openFirst前的processId
		String beforeProcessId =  (String)jsonObject.get("beforeProcessId");
		
		DoFile doFileDel = tableInfoService.getDoFileByElements("", instanceId);
		if(doFileDel!=null && doFileDel.getIsDelete()!=null && doFileDel.getIsDelete()==1){
			getResponse().getWriter().print("10001");
			return;
		}
		//表单意见json
		String trueJson =  jsonObject.get("truepaper")+"";
		trueJson = JSONReplaceUtil.replaceJson(trueJson);
		//保存日志信息表
		TrueJson entity = new TrueJson();
		entity.setInstanceId(instanceId);
		entity.setProcessId(processId);
		entity.setSaveDate(new Date());
		entity.setUserId(userId);
		entity.setTrueJson(trueJson);
		entity.setExcute("endformobile");
		trueJsonService.saveTrueJson(entity);
		
		// 第一步就办结
		String currentItemId =  (String)jsonObject.get("itemId");
		// 如果接口里面没有事项id
		if(currentItemId == null ||currentItemId.equals("")){
			JSONObject flowInfo = (JSONObject)jsonObject.get("flowInfo");
			if(flowInfo != null ){
				currentItemId = flowInfo.getString("itemId");
			}
		}
		// 附件
		List<JSONObject> tplist = (List<JSONObject>) jsonObject.get("tplist");
		if (tplist != null) {
			for (int i = 0; i < tplist.size(); i++) {
				JSONObject st = tplist.get(i);
				SendAttachments att = new SendAttachments();
				att.setFileindex(0L);
				att.setFilename(st.getString("name"));// 设置文件名属性
				att.setFiletype(st.getString("type"));// 设置文件类型(后缀名)的属性
				att.setFilesize(Long.valueOf(st.getString("length")));// 设置文件大小的属性
				att.setFiletime(new Date(Long.valueOf(st.getString("filetime"))));// 设置上传时间属性
				att.setLocalation(st.getString("location"));// 设置上传后在服务器上保存路径的属性
				if("png".equals(st.getString("type"))||"jpg".equals(st.getString("type"))){
					att.setType("图片");// 设置上传附件所属类别
				}else if("mp3".equals(st.getString("type"))||"amr".equals(st.getString("type"))){
					att.setType("录音");// 设置上传附件所属类别
				}else if("mp4".equals(st.getString("type"))){
					att.setType("视频");// 设置上传附件所属类别
				}
				att.setTitle(st.getString("title"));// 设置上传附件标题
				att.setDocguid(instanceId + "fj");
				att.setEditer(userId+ ";"+ employeeService.findEmployeeById(userId).getEmployeeName());
				attachmentService.addSendAtts(att);

			}
		}
		
		try {
			if(formId == null ||formId.equals("")||formId.equals("null")){
				formId = oldformId;
			}
			// 根据节点找formid
			if((formId == null ||formId.equals("")||formId.equals("null"))&& nodeId != null){
				WfNode nextNode = workflowBasicFlowService.getWfNode(nodeId);
				formId = nextNode.getWfn_defaultform();
				oldformId = formId;
			}
			// save value 
			// 入库
			WfProcess wfp = tableInfoService.getProcessById(processId);
			if((f_instanceId == null ||"".equals(f_instanceId))&&wfp != null){
				f_instanceId = wfp.getfInstancdUid();
			}
			String value1 = 	saveTrueForm(oldformId,instanceId,formId, trueForm,workFlowId,processId);
			//标题的值
			String title = getTitle(workFlowId,formId,instanceId);
			String vc_title = title.split(";")[0];
			
			if((vc_title==null || vc_title.equals(""))){
				if(wfp.getDoType() != null && !("").equals(wfp.getDoType())){
					String value2 = this.saveForm(formId, 2, wfp.getfInstancdUid(), formId, nodeId, workFlowId,"","",userId);
					String[] valses=value2.split(";");
					String valuess="";
					for(int i=0;i<valses.length;i++){
						if(i>0){
							valuess +=";";
						}
						String[] str = valses[i].split(":");
						String val = valses[i].split(":")[0];
						valuess+=val+"\":\"";
						if(str.length>1){
							valuess +=valses[i].replace(val+":", "");
						}
					}
					value1=value1.replaceAll(":","\":\"").replaceAll(";","\";\"");
					value1=value1.substring(0,value1.lastIndexOf(";"));
					value1=value1.replaceAll("\"\"", "\"---///\"");
					value2=valuess.replaceAll(";","\";\"");
					value2=value2.substring(0,value2.lastIndexOf(";"));
					value2=value2.replaceAll("\"\"", "\"---///\"");
					JSONObject js= JSONObject.fromObject("{\""+value1+"}");
					JSONObject js1= JSONObject.fromObject("{\""+value2+"}");
					Iterator it = js.keys();
					List<String> keyList = new ArrayList<String>();
					while(it.hasNext()){
			            keyList.add(it.next().toString());
			        }
					JSONObject js3=new JSONObject();
					for(int i=0;i<keyList.size();i++){
						if(js.get(keyList.get(i))==null||"---///".equals(js.get(keyList.get(i)))||"".equals(js.get(keyList.get(i)))){
							js3.put(keyList.get(i).toLowerCase(), js1.get(keyList.get(i).toLowerCase())==null?(js1.get(keyList.get(i).toUpperCase())==null?"---///":js1.get(keyList.get(i).toUpperCase())):js1.get(keyList.get(i).toLowerCase()));
						}else{
							js3.put(keyList.get(i).toLowerCase(), js.get(keyList.get(i))==null?"---///":js.get(keyList.get(i)));
						}
					}
					value1 = js3.toString().replace("{", "").replace("}", "");
					value1=value1.replaceAll("\"---///\"", "\"\"");
					value1 = value1.replaceAll("\",\"", ";").replaceAll("\"", "")+";";
				}
			}
			
			WfProcess p_WfProcess = tableInfoService.getParentProcessByInstanceid(f_instanceId);
			String oldPdfPath = "";
			if(p_WfProcess!=null){
				String path = p_WfProcess.getPdfPath();
				if(path!=null && path.length()>0){
					oldPdfPath =  path.split(",")[0];
				}
			}
			//pdf路径
			String pdfPath = ""; 
			//获取html地址
			String htmlpath = getHtmlToNewHtml(formId, "", value1, instanceId, false, true);
			//表单pdf
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH);
			String htmlpdfPath = pdfRoot+dstPath+ (htmlpath.substring(htmlpath.lastIndexOf("/")+1,htmlpath.length()-5)+"merge")+".true";
			//合并意见pdf
			String newPdfPath = htmlpdfPath.substring(0,htmlpdfPath.length()-5)+"new" + ".true";
			//与父表单合并的pdf
			String mergePath = "";
			if(oldPdfPath!=null && !oldPdfPath.equals("")){
				mergePath = newPdfPath.substring(0, newPdfPath.length() - 5) + "mergeNew" + ".true";
			}else{
				mergePath = newPdfPath;
			}
			WfProcess oldProcess = pendingService.getProcessByID(processId);
			String newProcessId = UuidGenerator.generate36UUID();
			//调用线程生成对应的pdf文件
			WfNode node = workflowBasicFlowService.getWfNode(nodeId);
			String form_continue = node.getWfn_form_continue();
			if(form_continue==null || form_continue.equals("0")){
				pdfPath = oldProcess.getPdfPath();
			}else{
				ToPdfThread toPdfThread = new ToPdfThread(htmlpath,attachmentService,instanceId,oldPdfPath,trueJson,"end",oldProcess,newPdfPath,flowService,processId,newProcessId, tableInfoService);
				toPdfThread.start();
				pdfPath = mergePath+","+newPdfPath;
			}
			// 获取办结节点 
			// 根据type and pid 获取节点
			List<WfNode> nodes =workflowBasicFlowService.getNodesByPid(workFlowId);
			WfNode nextNode = null;
			for(int i = 0; i <nodes.size() ; i++){
				if(nodes.get(i).getWfn_type()!= null && "end".equals(nodes.get(i).getWfn_type())){
					nextNode = nodes.get(i);
					break;
				}
			}
			
			// if  node ==  会议通过的节点 update 会议状态
			String meetingPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingPassNode");
			String meetingNotPassNodeIds = SystemParamConfigUtil.getParamValueByParam("meetingNotPassNode");
			
			if(nextNode != null && meetingPassNodeIds != null && meetingPassNodeIds.indexOf(nextNode.getWfn_id())>-1){
				meetingInfoService.updateState(instanceId,"1");
			}else if(nextNode != null  && meetingNotPassNodeIds != null && meetingNotPassNodeIds.indexOf(nextNode.getWfn_id())>-1){
				meetingInfoService.updateState(instanceId,"0");
			}
			
			boolean outparwf = false;
			String ifFw = "";
			String wfc_return_pend = "";
			if(oldProcess!=null){
				if(p_WfProcess!=null){
					String f_wfUId = p_WfProcess.getWfUid();
					String wfUId = oldProcess.getWfUid();
					//获取两者的匹配关系
					WfChild wfChild = workflowBasicFlowService.getWfChildByPidAndCid(wfUId, f_wfUId);
					outparwf = wfChild.getWfc_outparwf()!=null && wfChild.getWfc_outparwf().equals("1")?true:false;
					if(wfChild!=null){
						wfc_return_pend = wfChild.getWfc_return_pend();
						ifFw = wfChild.getWfc_isSend();
					}
				}
			}
			WfChild wfChild = null;
			if(p_WfProcess!=null && !outparwf){
				String path = p_WfProcess.getPdfPath();
				if(path!=null && path.length()>0){
					oldPdfPath =  path.split(",")[0];
				}
				//以下是针对会议管理定制的
				String p_wf_uid = p_WfProcess.getWfUid();
				if(wfp!=null){
					String c_wf_uid = wfp.getWfUid();
					wfChild = workflowBasicFlowService.getWfChildByPidAndCid(c_wf_uid, p_wf_uid);
					if(wfChild!=null){
						String c_type = wfChild.getWfc_ctype();
						if(c_type==null || c_type.equals("0")){
							String commonJson = p_WfProcess.getCommentJson();
							commonJson = JSONReplaceUtil.replaceJson(commonJson);
							String parPdf =pdfRoot+ dstPath+oldPdfPath.substring(oldPdfPath.lastIndexOf("/")+1,oldPdfPath.length()-5)+"gene.pdf";
							ToPdfThread util = new ToPdfThread("createFile", oldPdfPath, parPdf, commonJson);
							util.start();
							oldPdfPath = parPdf ;
						}
					}
				}
			}
			if(p_WfProcess!=null){
				wfChild = workflowBasicFlowService.getWfChildByPidAndCid(workFlowId, p_WfProcess.getWfUid());
			}
			if(wfChild != null && ((StringUtils.isNotBlank(wfChild.getIsNeedFForm()) && wfChild.getIsNeedFForm().equals("0")) || StringUtils.isBlank(wfChild.getIsNeedFForm()))){
				oldPdfPath = "";
			}
			// 更新步骤(办结插一条数据) 这个是一般办结 加子流程第一步办结
			if(oldProcess ==null && (beforeProcessId == null||beforeProcessId.equals(""))){
				if(currentItemId != null && !currentItemId.equals("")){
					tableInfoService.updateInstanceFirstStepOver(workFlowId, instanceId,nodeId, userId, vc_title, formId, trueJson, pdfPath, currentItemId,processId);
				}
			}else{
				newProcessId = tableInfoService.updateInstanceOver(workFlowId, instanceId, beforeProcessId,processId, nodeId, userId, vc_title, formId ,trueJson, pdfPath, isWriteNewValue,newProcessId);
				//webSocket推送
				WebSocketUtil webSocket = new WebSocketUtil();
				webSocket.delBadge(userId, "", "");
			}
			
			//办结时,修改远程DzJcdb表的状态位
			DzJcdbShip ship = tableInfoService.findDzJcdbShipById(instanceId);
			if(ship!=null){
				String no = ship.getNo();
				DzJcdb dzJcdb = tableInfoService.findDzJcdbById(no);
				if(dzJcdb!=null){
					dzJcdb.setState("2");	//2已督办已反馈
					tableInfoService.updateDzJcdb(dzJcdb);
				}
			}
			
			WfProcess process = pendingService.getProcessByID(processId);
			
			// 根据 node id 加 stepIndex  加isEnd 获取办结 process
			pendingService.getEndProcess(process.getStepIndex()+1,process.getNodeUid(),process.getWfInstanceUid());
			boolean needfile = true;
			String itemid = "";
			// 是否是子流程的第一步
			String isFirstChildWf = "";
			if(process!=null){
				itemid = process.getItemId();
				if (process.getStepIndex() == 1 && !("").equals(process.getDoType()) && ("1").equals(process.getIsChildWf())) {
					isFirstChildWf = "true";
				}
			}
			
			if(process != null && !("").equals(process.getIsManyInstance()) && !("false").equals(isWriteNewValue) && !outparwf){
				String waitingProcessId = tableInfoService.getWaitingProcessId(process);
				//判断子流程的所有实例是否都办结--更新父流程状态--如果子流程后面有节点则不更新
				WfNode wfNode = tableInfoService.updateMainStatus(process);
				String pinstanceId = "";	//主流程
				//将依申请公开 子流程表单中的答复意见合并
				String combine_formid = SystemParamConfigUtil.getParamValueByParam("combine_formid");
				String combine_field = SystemParamConfigUtil.getParamValueByParam("combine_field");
				if(combine_formid!=null && formId.equals(combine_formid)){
					boolean ischildOver = tableInfoService.checkIsChildEnd(process);	//子流程是否已经办结完成
					if(ischildOver){	//已经办结完成
						String fInstanceId = process.getfInstancdUid();
						String childInstanceId = "";
						String content = "";
						List<String> wfList = tableInfoService.getWfProcessByWfChildInstanceId(fInstanceId);
						pinstanceId= process.getAllInstanceid();
						for(int i=0; wfList!=null && i<wfList.size(); i++){
							childInstanceId = wfList.get(i);
							String value = this.saveForm(formId, 2, childInstanceId, formId, nodeId, workFlowId,"","",userId);
							if(value!=null && value.length()>0){
								String[] data = value.split(";");
								for(String colvalue:data){
									String coloum = "";
									String coloumValue = "";
									if(colvalue!=null && colvalue.length()>0){
										int index = colvalue.indexOf(":");
										coloum = colvalue.substring(0,index);
										coloumValue = colvalue.substring(index+1,colvalue.length());
									}
									if(combine_field!=null){
										if(combine_field.trim().equalsIgnoreCase(coloum.trim())){
											content += coloumValue.trim()+";;";
										}
									}
								}
							}
						}
						if(content!=null && content.length()>0){
							ZwkjForm zf = zwkjFormService.getOneFormById(process.getFormId());
							String filename = zf.getForm_caption()+".doc";
							this.addAttFromContent(userId,content,pinstanceId,filename);
						}
					}
				}
				//子流程,办件结束,重新回到主流程
				oldProcess = pendingService.getProcessByID(processId);
				WfProcess firstWfProcess = tableInfoService.isGetTs(oldProcess.getWfInstanceUid());
				Integer doType = null;
				if(firstWfProcess!=null){
					doType =  firstWfProcess.getDoType();	//办理类型--1：主办、2：协办、3:中间流程
				}else{
					doType =  oldProcess.getDoType();
				}
				if(wfNode!=null){
					String formid = wfNode.getWfn_defaultform() ;		//该节点的模板id
					String finstanceId = process.getfInstancdUid();
					String pInstanceId = tableInfoService.getPinstanceId(finstanceId);
					//根据instanceId
					String fworkFlowId = tableInfoService.getworkFlowIdByInstanceId(pInstanceId);
					// 页面回值--查询
					String value;
					try {
						value = this.saveForm(formid, 2, pInstanceId, formid, wfNode.getWfn_id(),
								fworkFlowId,"",isFirstChildWf,userId);
					} catch (Exception e) {
						//换表单报错,置为空
						value = "";
					}
					
					//插入下一条待办信息,  限于子流程的两端均为 父流程节点
					String pdfNewPath = getHtmlToNewOfPath(wfNode.getWfn_defaultform(),wfNode.getWfn_id(), value, instanceId, false ,true);
					String firstpdfpath = "";
					String[] files = null;
					if(mergePath!=null && !mergePath.equals("")){
						String fileStrs = pdfNewPath +","+mergePath;
						if (!("").equals(fileStrs) && fileStrs.length() > 0) {
							files = new String[fileStrs.split(",").length];
							for (int i = 0; i < fileStrs.split(",").length; i++) {
								files[i] = fileStrs.split(",")[i];
							}
							firstpdfpath = mergePath.substring(0, mergePath.length() - 4) + "mergeNew" + ".pdf";
						}
					}
					String path = firstpdfpath +","+firstpdfpath;
					Map<String,Object> map = new HashMap<String,Object>();
					map.put("wfNode", wfNode);
					map.put("path", path);
					map.put("process", process);
					map.put("emp", emp);
					map.put("value", value);
					map.put("mergePath", mergePath);
					//线程执行：合并pdf意见 插入下一步的待办信息
					ToPdfThread pdfThread = new ToPdfThread(files,firstpdfpath,"first",map,tableInfoService,flowService);
					pdfThread.start();
					String allInstanceId = process.getAllInstanceid();
					//入库--附件上传
					if(!("").equals(allInstanceId) && !("null").equals(allInstanceId) && allInstanceId != null){
						this.addAllAtt(process, allInstanceId, emp);
					}
				}else{
					//该待办(已办)为父流程的主办信息,需要将其pdf添加到父流程的正文附件中
					if(doType!=null && doType==1){	
						String finstanceId = oldProcess.getfInstancdUid();
						String fTureInstanceId = "";   //真实的父instanceId(针对子流程与父流程之间存在的中间instanceId(临时的假的))
						if(finstanceId!=null && !finstanceId.equals("")){
							WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
							int count = tableInfoService.getStepIndexByInstanceId(finstanceId);
							if(count>1){	//不是中间步骤
								fTureInstanceId = pWfProcess.getWfInstanceUid();
							}else{
								if(pWfProcess!=null){
									if(firstWfProcess!=null && firstWfProcess.getIsManyInstance()!=null
											&& firstWfProcess.getIsManyInstance().equals("0")){
										fTureInstanceId = pWfProcess.getWfInstanceUid();
									}else{
										fTureInstanceId = pWfProcess.getfInstancdUid();
									}
									Integer pDoType = pWfProcess.getDoType();
									while(pDoType!=null && pDoType==3){	//表示该流程为中间流程
										finstanceId = pWfProcess.getfInstancdUid();
										if(finstanceId==null || finstanceId.equals("")){	//自动分发
											if(pWfProcess!=null && pWfProcess.getIsManyInstance()!=null
													&& pWfProcess.getIsManyInstance().equals("0")){
												fTureInstanceId = pWfProcess.getWfInstanceUid();
											}else{
												fTureInstanceId = pWfProcess.getWfInstanceUid();
											}
											pDoType = null;
										}else{
											pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
											if(pWfProcess!=null){
												pDoType = pWfProcess.getDoType();
												fTureInstanceId = pWfProcess.getWfInstanceUid();
											}else{
												pDoType = null;
											}
										}
									}
								}
							}
						}
						//以下针对于如果子流程(主办),采用的是延用父流程的表单,默认认为父子表单是一致，只需将主办子流程的表单意见同步到父流程中,无需携带附件
						boolean isfileNeed = true;
						WfProcess waitingWfProcess = tableInfoService.getProcessById(waitingProcessId);
						WfNode childWfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
						String formContinue = childWfNode.getWfn_form_continue();
						//表单延用：表示合并意见到父流程actionstatus中
						if(formContinue!=null && formContinue.equals("0")){	
							isfileNeed = false;
							String	updateJson = trueJson;
							//获取需要更新的步骤信息
							if(waitingWfProcess!=null){
								waitingWfProcess.setCommentJson(updateJson);
								tableInfoService.update(waitingWfProcess);
							}
						}
						if(fTureInstanceId != null && !("null").equals(fTureInstanceId) && !("").equals(fTureInstanceId) && needfile){
							WfProcess endProcess = new WfProcess();			//办结节点pdf
							endProcess.setPdfPath(pdfPath);
							endProcess.setFormId(formId);
							this.addDirectAtt(endProcess, fTureInstanceId, emp);
						}
					}
				}
			}else if(process == null && ("false").equals(isWriteNewValue) && !outparwf){ //点击办结,无对应的过程信息(针对于点开子流程立即办结:子流程只有一个节点)
					oldProcess = pendingService.getProcessByID(beforeProcessId);
						//该待办(已办)为父流程的主办信息,需要将其pdf添加到父流程的正文附件中
						String finstanceId = oldProcess.getWfInstanceUid();
						String fTureInstanceId = "";   //真实的父instanceId(针对子流程与父流程之间存在的中间instanceId(临时的假的))
						if(finstanceId!=null && !finstanceId.equals("")){
							int count = tableInfoService.getStepIndexByInstanceId(finstanceId);
							if(count>1){	//不是中间步骤
								fTureInstanceId = oldProcess.getWfInstanceUid();
							}else{
								if(oldProcess!=null){
									Integer pDoType = oldProcess.getDoType();
									while(pDoType!=null && pDoType==3){	//表示该流程为中间流程
										finstanceId = oldProcess.getfInstancdUid();
										if(finstanceId==null || finstanceId.equals("")){	//自动分发
											if(oldProcess!=null && oldProcess.getIsManyInstance()!=null
													&& oldProcess.getIsManyInstance().equals("0")){
												fTureInstanceId = oldProcess.getWfInstanceUid();
											}else{
												fTureInstanceId = oldProcess.getWfInstanceUid();
											}
											pDoType = null;
										}else{
											oldProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
											if(oldProcess!=null){
												pDoType = oldProcess.getDoType();
												fTureInstanceId = oldProcess.getWfInstanceUid();
											}else{
												pDoType = null;
											}
										}
									}
								}
							}
						if(fTureInstanceId != null && !("null").equals(fTureInstanceId) && !("").equals(fTureInstanceId)){
							WfProcess endProcess = new WfProcess();			//办结节点pdf
							String path = pdfPath.split(",")[1];
							String parPdf = path.substring(0, path.length()-5)+"toParfj.pdf";
							endProcess.setPdfPath(pdfPath.split(",")[0]+","+parPdf);
							endProcess.setFormId(formId);
							this.addDirectAtt(endProcess, fTureInstanceId, emp);
							
							if(ifFw!=null && ifFw.equals("1")){		//流程为发文流程
								if(wfp!=null){
									String fInstanceId = wfp.getfInstancdUid();
									ToPdfThread pdfThread = new ToPdfThread(fInstanceId,parPdf,tableInfoService, "toSend");
									pdfThread.start();
								}
							}
						}
					}
				}else if(outparwf){			//脱离了父流程
					//获取流程属性
					if(wfc_return_pend!=null && wfc_return_pend.equals("1")){
						String fInstanceId = oldProcess.getfInstancdUid();
						//获取节点发送的步骤
						WfProcess sendWfp = tableInfoService.findSendWfProcess(instanceId);
						List<WfProcess> wfpList = tableInfoService.getProcessList(fInstanceId);
						Integer maxStepIndex = wfpList.get(0).getStepIndex();
						if(sendWfp!=null){
							sendWfp.setFromUserId(userId);
							//比办结时间多1秒--历程不会乱
							sendWfp.setApplyTime(new Date(System.currentTimeMillis()+2000));
							sendWfp.setFinshTime(null);
							sendWfp.setWfProcessUid(UuidGenerator.generate36UUID());
							sendWfp.setCommentJson(trueJson);
							sendWfp.setStepIndex(maxStepIndex+1);
							sendWfp.setIsOver("NOT_OVER");
							sendWfp.setAction_status(0);
							sendWfp.setJssj(null);
							sendWfp.setIsShow(1);
							tableInfoService.addProcess(sendWfp);
						}
					}
				}
			excuteProcedure("", 1, instanceId, formId, nodeId);
			saveNextWfProcess(instanceId, processId,emp.getEmployeeGuid());
			//调用档案系统web service进行归档操作
			String isChildWf = "";
			if(wfp != null){
				wfp.getIsChildWf();
			}
			String callArchiveFlag = SystemParamConfigUtil.getParamValueByParam("callArchiveFlag");
			//主流程办结进行归档操作
			WfItem item = itemService.getItemById(currentItemId);
			if(!"1".equals(isChildWf) && "YES".equals(callArchiveFlag)){
				if(item != null){
					String sxlx = item.getVc_sxlx();
					CallWebServiceThread callWebServiceThread = new CallWebServiceThread(sxlx, instanceId, archiveWebService);
					callWebServiceThread.start();
				}
			}
			getResponse().getWriter().print("success");
			
			//--5,生成办件对应的pdf文件存流入库
			/*String gdPdfPath = "";
			if(null != wfp && wfp.getAllInstanceid().equals(instanceId)){//主流程办结才生成pdf文件
				String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_GD_FILE_PATH);
				DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
				if(doFile != null){
					gdPdfPath = getPDFPath(processId, pdfRoot+gdPath+wfp.getProcessTitle()+".pdf","");
					if(StringUtils.isNotBlank(gdPdfPath)){
						File file = new File(gdPdfPath);
						if(file.exists()){
							doFile.setPdfPath(gdPdfPath);
							doFile.setPdfData(Hibernate.createBlob(new FileInputStream(file)));
							tableInfoService.updateDoFile(doFile);
						}
					}
				}
			
				//--6,向第三方推送数据
				String fileUrl = "";
				if(StringUtils.isNotBlank(gdPdfPath)){
					File file = new File(gdPdfPath);
					if(file.exists()){
						String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
						if(gdPdfPath.startsWith(pdfRoot)){
							fileUrl = serverUrl+ "/form/html/workflow/"+gdPdfPath.substring(pdfRoot.length());
						}
					}
				}
				PushDataToPdfThread pushDataToPdfThread = new PushDataToPdfThread(thirdpartyInterfaceLogService, tableInfoExtendService, item, instanceId, wfp.getProcessTitle(), fileUrl); 
				pushDataToPdfThread.start();
			}*/
			
			if(null != wfp && wfp.getAllInstanceid().equals(instanceId)){//主流程办结才生成pdf文件
				String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_GD_FILE_PATH);
				DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
				Map<String, Object> param = null ; 
				if(doFile != null){
					
					param = getPDFPathByEnd(processId, pdfRoot+gdPath+wfp.getProcessTitle()+".pdf","");
					String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
					param.put("serverUrl", serverUrl);
					param.put("doFile", doFile);
				}
				PushDataToPdfThread pushDataToPdfThread = new PushDataToPdfThread(thirdpartyInterfaceLogService,tableInfoExtendService,attachmentService,tableInfoService,trueJsonService,zwkjFormService,this,item, instanceId, wfp.getProcessTitle(), param); 
				pushDataToPdfThread.start();
			}
			
		} catch (IOException e) {
			getResponse().getWriter().print("fail");
		} catch (Exception e) {
			e.printStackTrace();
		}
		accessLog.setUserid(userId);
		long l = startDate.getTime()-(new Date()).getTime();
		accessLog.setAccessTime(l+"");
		tableInfoExtendService.addAccessLog(accessLog);
	}

	/**
	 * 读取字典表
	 */
	public String selectDicValues(String formid, String value, String cname) {
		// 下拉框内被选中的内容
		String content = "";
		if (CommonUtil.stringNotNULL(formid)) {
			// 查询下拉框对应字典表信息并转换为json字符串用于页面动态赋值
			List<FormTagMapColumn> mapedList = zwkjFormService
					.getFormTagMapColumnByFormId(formid);
			List<WfDictionary> dicList = new ArrayList<WfDictionary>();
			if (mapedList != null) {
				for (int i = 0; i < mapedList.size(); i++) {
					FormTagMapColumn m = mapedList.get(i);
					if (CommonUtil.stringNotNULL(m.getSelectDic())) {
						dicList.add(dictionaryService.getDictionaryByName(
								m.getSelectDic()).get(0));
					}
				}
			}
			if (dicList != null && dicList.size() > 0) {
				for (WfDictionary wfdc : dicList) {
					String[] values = wfdc.getVc_value().split(",");
					for (int i = 0; i < values.length; i++) {
						if (value.equals(values[i])
								&& cname.equals(wfdc.getVc_name())) {
							content = wfdc.getVc_key().split(",")[i];
							break;
						}
					}
				}
			}
		}
		return content;
	}

	/**
	 * 
	 * @Title: stringIsNULL
	 * @Description: 工具，判断字符为空
	 * @param s
	 * @return boolean 返回类型
	 */
	public boolean stringIsNULL(String s) {
		if (s == null || s.equals("")) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * @Title: readHTMLToString
	 * @Description: 输入流 按行的方式读取文件为字符串用于teatarea中展示
	 * @param path
	 * @return String 返回类型
	 */
	public String readHTML(String path) {
		StringBuffer htmlString = new StringBuffer();// 返回页面流格式字符串
		// 读取文件，用于展示
		File file = new File(path);
		BufferedReader reader = null;
		if (file.exists()) {
			try {
				FileInputStream fin = new FileInputStream(file);
				InputStreamReader in = new InputStreamReader(fin, "UTF-8");
				reader = new BufferedReader(in);
				String tempString = null;
				while ((tempString = reader.readLine()) != null) {
					htmlString.append(tempString + "\n");
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (reader != null) {
					try {
						reader.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
		return htmlString.toString();
	}

	/**
	 * 
	 * @Title: getTagFromHTMLString
	 * @Description: 从html字符串流中获取标签信息(非常重要)
	 * @param htmlString
	 * @return List<String[]> 返回类型
	 */
	public List<TagBean> getTagFromHTMLString(String htmlString) {
		List<TagBean> tags = new ArrayList<TagBean>();

		UrlCatcher u = new UrlCatcher();
		String reg_input = "<INPUT[^<]*>";// 获取所有input类型标签
		String[] inputs = u.getStringByRegEx(htmlString, reg_input, true);

		String reg_select = "<SELECT[^<]*>";// 获取所有select类型标签
		String[] selects = u.getStringByRegEx(htmlString, reg_select, true);

		String reg_textarea = "<TEXTAREA[^<]*</TEXTAREA>";// 获取所有textarea类型标签
		String[] textareas = u.getStringByRegEx(htmlString, reg_textarea, true);

		// 新增意见标签抓取
		// <trueway:comment typeinAble="true" deleteAbled="true"
		// id="${instanceId}csyj" instanceId="${instanceId}"
		// currentStepId="${instanceId}"/>
		String reg_comment = "<trueway:comment[^<]*>";// 获取所有comment类型标签
		String[] comments = u.getStringByRegEx(htmlString, reg_comment, true);

		// 附件标签抓取
		// <trueway:att onlineEditAble="true" id="${instanceId}att"
		// docguid="${instanceId}" showId="attshow" ismain="true"
		// uploadAble="true" deleteAble="true" previewAble="true"
		// tocebAble="false" toStampAble="true" openBtnClass="icon-add"
		// otherBtnsClass="icon-help" uploadCallback="loadCss"
		// deleteCallback="loadCss"/>
		String reg_att = "<trueway:att[^<]*>";// 获取所有att类型标签
		String[] atts = u.getStringByRegEx(htmlString, reg_att, true);

		// 文号标签抓取
		// <trueway:dn tagId="dn_tagid_zhu" defineId="${workFlowId}"
		// webId="${webId}" showId="wenhaos" value="wenhaos"/>
		String reg_dn = "<trueway:dn[^<]*>";// 获取所有dn类型标签
		String[] dns = u.getStringByRegEx(htmlString, reg_dn, true);

		/*
		 * String reg_zd=">[^<]+</a>"; String zd=uc.getStringByRegEx(datatds[5],
		 * reg_zd, false)[0]; zd=zd.substring(1,zd.length()-4);
		 */
		if (inputs != null && inputs.length > 0) {
			for (int i = 0; i < inputs.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				String reg_name = " name=['\"]?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_]+['\"]?";
				String[] names = u.getStringByRegEx(inputs[i], reg_name, true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					tagName = tagName.substring(5, tagName.length());
				}
				// 利用正则表达式获取表单元素类型
				String reg_type = " type=['\"]?[^'\"]+['\"]?";
				String[] types = u.getStringByRegEx(inputs[i], reg_type, true);
				if (types != null && types.length > 0) {
					tagType = types[0];
					tagType = tagType.trim();
					tagType = tagType.replaceAll("'", "");
					tagType = tagType.replaceAll("\"", "");
					tagType = tagType.substring(5, tagType.length());
				}

				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u
						.getStringByRegEx(inputs[i], reg_cname, true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}

				// if (tagType==null) {
				// reg_type=" type=['\"]?hidden['\"]?";
				// types=u.getStringByRegEx(inputs[i], reg_type, true);
				// if (types!=null&&types.length>0) {
				// tagType=types[0];
				// tagType=tagType.trim();
				// tagType=tagType.replaceAll("'", "");
				// tagType=tagType.replaceAll("\"", "");
				// tagType=tagType.substring(5,tagType.length());
				// }
				// }
				// 如果匹配到元素名称，但没有匹配到元素类型，则认为元素类型为text文本框
				if (tagName != null && tagType == null) {
					tagType = "text";
				}
				String list = null;
				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setListId(list);
					tag.setCommentDes(tagZname);// 标签属性zname中文描述
					tag.setCommentTagDes(tagZnameStr);// 标签属性zname字符串

					// 此处过滤radio、checkbox，同组radio或checkbox采用一条记录
					boolean isin = false;
					for (int j = 0; j < tags.size(); j++) {
						TagBean bean = tags.get(j);
						if (bean.getTagName().equals(tagName)
								&& bean.getTagType().equals(tagType)) {
							isin = true;
							break;
						}
					}
					if (!isin) {
						tags.add(tag);
					}

				}
			}
		}

		if (selects != null && selects.length > 0) {
			for (int i = 0; i < selects.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				String reg_name = " name=['\"]?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_]+['\"]?";
				String[] names = u.getStringByRegEx(selects[i], reg_name, true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					tagName = tagName.substring(5, tagName.length());
				}
				tagType = "select";
				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u.getStringByRegEx(selects[i], reg_cname,
						true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}

				String reg_dic = " dic=['\"]?[^'\"]+['\"]?";
				String[] dics = u.getStringByRegEx(selects[i], reg_dic, true);
				if (dics != null && dics.length > 0) {
					select_dic = dics[0];
					select_dic = select_dic.trim();
					select_dic = select_dic.replaceAll("'", "");
					select_dic = select_dic.replaceAll("\"", "");
					select_dic = select_dic.trim();
					select_dic = select_dic.substring(4, select_dic.length());
				}

				// 匹配列表字段属性
				String reg_list = " list=['\"]?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789]+['\"]?";
				String[] lists = u.getStringByRegEx(selects[i], reg_list, true);
				String list = null;
				if (lists != null && lists.length > 0) {
					list = lists[0];
					list = list.trim();
					list = list.replaceAll("'", "");
					list = list.replaceAll("\"", "");
					list = list.substring(5, list.length());
				}
				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setListId(list);
					tag.setCommentDes(tagZname);// 标签属性zname中文描述
					tag.setCommentTagDes(tagZnameStr);// 标签属性zname字符串
					tags.add(tag);
				}
			}
		}

		if (textareas != null && textareas.length > 0) {
			for (int i = 0; i < textareas.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				String reg_name = " name=['\"]?[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_]+['\"]?";
				String[] names = u.getStringByRegEx(textareas[i], reg_name,
						true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					tagName = tagName.substring(5, tagName.length());
				}
				tagType = "textarea";
				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u.getStringByRegEx(textareas[i], reg_cname,
						true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}
				// 匹配列表字段属性
				String list = null;
				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setListId(list);
					tag.setCommentDes(tagZname);// 标签属性zname中文描述
					tag.setCommentTagDes(tagZnameStr);// 标签属性zname字符串
					tags.add(tag);
				}
			}
		}

		// 新增意见标签抓取
		if (comments != null && comments.length > 0) {
			for (int i = 0; i < comments.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				// <trueway:comment typeinAble="true" deleteAbled="true"
				// id="${instanceId}csyj" instanceId="${instanceId}"
				// currentStepId="${instanceId}"/>
				String reg_name = " id=['\"]{1}[^'\"]+['\"]{1}";
				String[] names = u
						.getStringByRegEx(comments[i], reg_name, true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					// tagName=tagName.substring(16,tagName.length());
					if (tagName.indexOf("}") != -1) {
						tagName = tagName.split("}")[1];
					}
				}
				tagType = "comment";
				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u.getStringByRegEx(comments[i], reg_cname,
						true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}
				// 意见标签描述
				// String cname="";
				// String commentTagDes="";
				// String reg_cname=" commentDes=['\"]{1}[^'\"]+['\"]{1}";
				// String[] cnames=u.getStringByRegEx(comments[i], reg_cname,
				// true);
				// if (cnames!=null&&cnames.length>0) {
				// cname=cnames[0];
				// cname=cname.trim();commentTagDes=cname;
				// cname=cname.replaceAll("'", "");
				// cname=cname.replaceAll("\"", "");
				// cname=cname.substring(11,cname.length());
				// }
				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setCommentDes(tagZname);// 意见标签描述
					tag.setCommentTagDes(tagZnameStr);
					tags.add(tag);
				}
			}
		}

		// 附件标签抓取
		if (atts != null && atts.length > 0) {
			for (int i = 0; i < atts.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				// <trueway:att onlineEditAble="true" id="${instanceId}att"
				// docguid="${instanceId}" showId="attshow" ismain="true"
				// uploadAble="true" deleteAble="true" previewAble="true"
				// tocebAble="false" toStampAble="true" openBtnClass="icon-add"
				// otherBtnsClass="icon-help" uploadCallback="loadCss"
				// deleteCallback="loadCss"/>
				String reg_name = " id=['\"]{1}[^'\"]+['\"]{1}";
				String[] names = u.getStringByRegEx(atts[i], reg_name, true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					// tagName=tagName.substring(16,tagName.length());
					if (tagName.indexOf("}") != -1) {
						tagName = tagName.split("}")[1];
					}
				}
				tagType = "attachment";
				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u.getStringByRegEx(atts[i], reg_cname, true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}

				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setCommentDes(tagZname);// 标签属性zname中文描述
					tag.setCommentTagDes(tagZnameStr);// 标签属性zname字符串
					tags.add(tag);
				}
			}
		}

		// 文号标签抓取
		if (dns != null && dns.length > 0) {
			for (int i = 0; i < dns.length; i++) {
				TagBean tag = new TagBean();
				String tagName = null;// 表单元素名称
				String tagType = null;// 表单元素类型
				String select_dic = null;// 下拉框关联字典表名称

				// 利用正则表达式获取表单元素名称
				// <trueway:dn tagId="dn_tagid_zhu" defineId="${workFlowId}"
				// webId="${webId}" showId="wenhaos" value="wenhaos"/>
				String reg_name = " tagId=['\"]{1}[^'\"]+['\"]{1}";
				String[] names = u.getStringByRegEx(dns[i], reg_name, true);
				if (names != null && names.length > 0) {
					tagName = names[0];
					tagName = tagName.trim();
					tagName = tagName.replaceAll("'", "");
					tagName = tagName.replaceAll("\"", "");
					tagName = tagName.substring(6, tagName.length());
					// if (tagName.indexOf("}")!=-1) {
					// tagName=tagName.split("}")[1];
					// }
				}
				tagType = "wh";
				// 利用正则表达式获取标签中文描述
				String tagZname = null;//
				String tagZnameStr = null;
				String reg_cname = " zname=['\"]?[^'\"]+['\"]?";
				String[] cnames = u.getStringByRegEx(dns[i], reg_cname, true);
				if (cnames != null && cnames.length > 0) {
					tagZname = cnames[0];
					tagZname = tagZname.trim();
					tagZnameStr = tagZname;
					tagZname = tagZname.replaceAll("'", "");
					tagZname = tagZname.replaceAll("\"", "");
					tagZname = tagZname.substring(6, tagZname.length());
				}

				if (tagName != null && tagType != null) {
					tag.setTagName(tagName);
					tag.setTagType(tagType);
					tag.setSelect_dic(select_dic);
					tag.setCommentDes(tagZname);// 标签属性zname中文描述
					tag.setCommentTagDes(tagZnameStr);// 标签属性zname字符串
					tags.add(tag);
				}
			}
		}

		return tags;
	}

	public String getTitle(WfMain wfMain, String instanceId) {
		String str = wfMain.getWfm_title_name();
		String tablename = wfMain.getWfm_title_table();
		String names = wfMain.getWfm_title_name();
		String ids = wfMain.getWfm_title_column();

		WfTableInfo table = tableInfoService.getTableById(tablename);
		if (table != null) {
			tablename = table.getVc_tablename();
		}
		// 解析标题字符串 2013年{姓名}3月{性别}4日
		List<String> cloumnNames = new ArrayList<String>();

		String regEx = "\\{[^\\}\\{]*\\}";
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(names);
		String tag = "";
		String all = "";
		while (m.find()) {
			// 标签和内容
			tag = m.group();
			if (tag != null && !tag.equals("")) {
				tag = tag.substring(1, tag.length() - 1);
				cloumnNames.add(tag);
			}
		}
		String[] idsArr = ids == null ? null : ids.split(",");

		if (cloumnNames != null) {
			for (int i = 0; i < cloumnNames.size(); i++) {
				WfFieldInfo filed = tableInfoService.getFieldById(idsArr[i]);
				String sql = "select " + filed.getVc_fieldname()
						+ ",'替代' from " + tablename + " t where t.INSTANCEID='"
						+ instanceId + "'";
				List<Object[]> list = tableInfoService.getListBySql(sql);
				String value = "";
				if (list != null && list.size() > 0) {
					String fieldtype = filed.getI_fieldtype() ;
					//clob字段需要处理
					if(fieldtype!=null && fieldtype.equals("3")){		
						value = ClobToString.clob2String((SerializableClob) list.get(0)[0]);
					}else{
						value = list.get(0)[0]==null?"":list.get(0)[0].toString();
					}
				}
				str = str.replace("{" + cloumnNames.get(i) + "}", value);
			}
		}
		return str;
	}

	public String getServerPluginValue(String serverPlugId, String instanceId,
			String formId, String nodeid) {
		String workflowid = getSession().getAttribute(
				MyConstants.workflow_session_id) != null ? getSession()
				.getAttribute(MyConstants.workflow_session_id).toString()
				: null;

		ServerPlugin p = serverPluginService
				.getOneServerPluginById(serverPlugId);
		ServerPlugClass c = null;
		String revalue = null;
		if (CommonUtil.stringNotNULL(p.getXml_url())) {
			String basePath = Constants.getAttachmentPath();// 得到上传文件在服务器上的基路径
			File file = new File(basePath + p.getXml_url());
			if (file.exists()) {
				c = parseXmlToBean(basePath + p.getXml_url());
			}
		}
		if (c != null) {
			// 目前只考虑只有一个输出参数的情况

			// java反射机制 根据类名称和方法名称 动态调用方法
			try {
				Class class1 = Class.forName(c.getClassUrl());
				Object obj = class1.newInstance();
				Method method = class1
						.getMethod(c.getReturnMethod(), Map.class);
				// 输入参数固定为一个，且为map数组
				Map map = new HashMap();
				map.put("workflowid", workflowid);
				map.put("instanceId", instanceId);
				map.put("formId", formId);
				map.put("nodeid", nodeid);

				revalue = (String) method.invoke(obj, map);
				System.out.println("*****************************服务器插件方法"
						+ c.getReturnMethod()
						+ "()执行成功************************************");
				System.out.println("*****************************返回值:"
						+ revalue + "************************************");
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
		}

		return revalue;
	}

	/**
	 * 解析xml文件内容至bean对象
	 * 
	 * @return
	 */
	public ServerPlugClass parseXmlToBean(String allfilepath) {

		ServerPlugClass c = new ServerPlugClass();
		// dom4j方式解析
		Document document = null;
		SAXReader saxReader = new SAXReader();
		try {
			document = saxReader.read(new File(allfilepath));
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		// 解析类属性
		Element root = document.getRootElement();
		c.setName(getAttributeValue(root, "name"));
		c.setZhName(getAttributeValue(root, "zhName"));
		c.setJarName(getAttributeValue(root, "jar"));
		c.setClassUrl(getAttributeValue(root, "class"));
		c.setReturnMethod(getAttributeValue(root, "returnMethod"));

		List<ServerPlugMethod> methodList = new ArrayList<ServerPlugMethod>();
		// 遍历解析方法属性
		Iterator i = root.elementIterator();
		while (i.hasNext()) {// server节点
			ServerPlugMethod m = new ServerPlugMethod();
			Element methodElement = (Element) i.next();
			m.setId(getAttributeValue(methodElement, "id"));
			m.setName(getAttributeValue(methodElement, "name"));
			m.setZhName(getAttributeValue(methodElement, "zhName"));
			// 遍历解析参数属性
			Iterator i_param = methodElement.elementIterator();
			while (i_param.hasNext()) {// inputFields、outputFields节点
				Element paramElement = (Element) i_param.next();
				if (paramElement.getName().equals("inputFields")) {
					Iterator i_inout = paramElement.elementIterator();
					List<ServerPlugParam> paramList = new ArrayList<ServerPlugParam>();
					while (i_inout.hasNext()) {// field节点
						ServerPlugParam p = new ServerPlugParam();
						Element fieldElement = (Element) i_inout.next();
						p.setName(getAttributeValue(fieldElement, "name"));
						p.setZhName(getAttributeValue(fieldElement, "zhName"));
						p.setType(getAttributeValue(fieldElement, "type"));
						p.setLength(getAttributeValue(fieldElement, "length"));
						paramList.add(p);
					}
					m.setInputs(paramList);
				} else if (paramElement.getName().equals("outputFields")) {
					Iterator i_inout = paramElement.elementIterator();
					List<ServerPlugParam> paramList = new ArrayList<ServerPlugParam>();
					while (i_inout.hasNext()) {// field节点
						ServerPlugParam p = new ServerPlugParam();
						Element fieldElement = (Element) i_inout.next();
						p.setName(getAttributeValue(fieldElement, "name"));
						p.setZhName(getAttributeValue(fieldElement, "zhName"));
						p.setType(getAttributeValue(fieldElement, "type"));
						p.setLength(getAttributeValue(fieldElement, "length"));
						paramList.add(p);
					}
					m.setOuts(paramList);
				}
			}
			methodList.add(m);
		}
		c.setMethods(methodList);
		return c;
	}

	public String getAttributeValue(Element root, String attributeName) {
		String value = null;
		List attributes = root.attributes();
		for (int i = 0; i < attributes.size(); i++) {
			Attribute attribute = (Attribute) attributes.get(i);
			String name = attribute.getName();
			if (name.equals(attributeName)) {
				value = attribute.getValue();
				break;
			}
		}
		return value;
	}

	// --------------------别的action中的方法------------------end-------

	private JSONObject getJSONObject() {
		InputStream iStream = null;
		try {
			iStream = getRequest().getInputStream();
			byte[] data = readStream(iStream);
			if(data.length  >0 ){
				return JSONObject.fromObject(new String(data, "utf-8"));
			}else{
				return null;
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (iStream != null) {
				try {
					iStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}

	
	private JSONArray getJSONArray() {
		InputStream iStream = null;
		try {
			iStream = getRequest().getInputStream();
			byte[] data = readStream(iStream);
			if(data.length  >0 ){
				return JSONArray.fromObject(new String(data, "utf-8"));
			}else{
				return null;
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (iStream != null) {
				try {
					iStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}
	// --------------------别的action中的方法------------------end-------

	private JSONObject getJSONObjectHeder() {

		InputStream iStream = null;
		JSONObject jsonObject = new JSONObject();
		JSONArray js = null;
		try {
			String files = getRequest().getHeader("files");
			if (Utils.isNotNullOrEmpty(files)) {
				js = JSONArray.fromObject(files);
			} else {
				jsonObject.put("formjson", getJSONObject());
				return jsonObject;
			}
			iStream = getRequest().getInputStream();
			List<JSONObject> list = new ArrayList<JSONObject>();
			ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
			int ch;
			while ((ch = iStream.read()) != -1) {
				bytestream.write(ch);
			}
			byte imgdata[] = bytestream.toByteArray();
			bytestream.close();
			int z = 0;
			for (int i = 0; i < js.size(); i++) {
				JSONObject obj = js.getJSONObject(i);
				String name = (String) obj.get("name");
				if (!Utils.isNotNullOrEmpty(name)) {
					name = ".jpg";
				}
				String type = (String) obj.get("type");
				String length = (String) obj.get("length");
				String pathname = UUID.randomUUID().toString();
				String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
				String uploadfilename = pathname + name;
				String dstPath = FileUploadUtils.getRealFilePath(uploadfilename, basePath, Constant.UPLOAD_FILE_PATH);
				String path = basePath + dstPath;
				FileOutputStream out = null;
				if (Utils.isNotNullOrEmpty(type) && type.equals("image")) {
					try {
						out = new FileOutputStream(new File(path));
						out.write(imgdata, z, Integer.valueOf(length.trim()));
						z += Integer.valueOf(length.trim());
						JSONObject att = new JSONObject();
						att.put("name", pathname + name);
						att.put("location", dstPath);
						att.put("length", length.trim());
						list.add(att);
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						out.close();
					}
				} else if (Utils.isNotNullOrEmpty(type)
						&& type.equals("formjson")) {
					String formjson = new String(imgdata, z, z
							+ Integer.valueOf(length.trim()), "utf-8");
					z += Integer.valueOf(length.trim());
					jsonObject.put("formjson", JSONObject.fromObject(formjson));
				}
			}
			jsonObject.put("tplist", list);
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (iStream != null) {
				try {
					iStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return jsonObject;
	}
		
	private JSONObject getJSONObjectHederAndBody() {
		InputStream iStream = null;
		JSONObject jsonObject = new JSONObject();
		JSONArray js = null;
		try {
			String trueJson  = getRequest().getHeader("truejson");
			trueJson = URLDecoder.decode(trueJson,"UTF-8");
			//trueJson = new String(trueJson.getBytes(),"");
			JSONObject json = JSONObject.fromObject(trueJson);
			Iterator keys = json.keys();
			while(keys.hasNext()){
				String key = (String) keys.next();
				if("other".equals(key)){
					// 将 other 作为 json 对象 取数据
					JSONObject json2 = JSONObject.fromObject(json.get(key));
					Iterator keys2 =  json2.keys();
					while(keys2.hasNext()){
						String key2 = (String) keys2.next();
						jsonObject.put(key2, json2.get(key2));
					}
				}else{
					jsonObject.put(key, json.get(key));
				}
				
			}
			
			// 读取resources 信息
			String truepaper = jsonObject.get("truepaper")+"";
			if(truepaper != null && !"".equals(truepaper)){
				js = JSONObject.fromObject(truepaper).getJSONArray("resources");
			}
			iStream = getRequest().getInputStream();
			List<JSONObject> list = new ArrayList<JSONObject>();
			ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
			int ch;
			while ((ch = iStream.read()) != -1) {
				bytestream.write(ch);
			}
			byte imgdata[] = bytestream.toByteArray();
			System.out.println(imgdata.length);
			bytestream.close();
			//如果 js 不为空 则取附件
			if(js != null && js.size() > 0){
				int fileSize = 0;
				for (int i = 0; i < js.size(); i++) {
				JSONObject obj = js.getJSONObject(i);
				String newfile = obj.getString("newfile");
			
				// 新文件 则上传
				if(newfile.equals("true")){
					String type = (String) obj.get("filetype");
					String length = (String) obj.get("filesize");
					String name = (String) obj.get("filename");
					String filetime = (String) obj.get("filetime");
					String userid = (String) obj.get("userid");
					String fileurl =  (String) obj.get("fileurl");
					if (!Utils.isNotNullOrEmpty(type)) {
						type = "jpg";
					}
					//String filename = fileurl.split("=")[1];
					String	 filename = MyUtils.Md5String(userid+filetime);
					String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
					String uploadfilename = filename+"."+type;
					String dstPath = FileUploadUtils.getRealFilePath(uploadfilename, basePath, Constant.UPLOAD_FILE_PATH);
					String path =  dstPath+"/"+uploadfilename;

					FileOutputStream out = null;
					if (Utils.isNotNullOrEmpty(type)) {
						try {
							out = new FileOutputStream(new File(basePath+path));
							out.write(imgdata, fileSize, Integer.valueOf(length.trim()));
							fileSize += Integer.valueOf(length.trim());
							JSONObject att = new JSONObject();
							att.put("type",type);
							att.put("location", path);
							att.put("title", name+"."+type);
							att.put("name", filename+"."+type);
							att.put("length", length.trim());
							att.put("filetime", filetime);
							list.add(att);
						} catch (Exception e) {
							e.printStackTrace();
						} finally {
							out.close();
						}
					} 
				}
				}
			}
			
			jsonObject.put("tplist", list);
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (iStream != null) {
				try {
					iStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return jsonObject;
	}
	
	private JSONObject getJSONObjectHederAndBody1(){
		InputStream iStream = null;
		JSONObject jsonObject = new JSONObject();
		JSONArray js = null;
		try {
			String instanceId = "";
			String nodeId = "";
			iStream = getRequest().getInputStream();
			List<JSONObject> list = new ArrayList<JSONObject>();
			ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
			int ch;
			while ((ch = iStream.read()) != -1) {
				bytestream.write(ch);
			}
			byte imgdata[] = bytestream.toByteArray();
			bytestream.close();
			// 获取前4个字节
			int trueJsonLength = Utils.getIntValue(imgdata,0,4);
			String trueJson =new String(imgdata,4,trueJsonLength);
			if(trueJson!=null && !trueJson.equals("")){
				trueJson = URLDecoder.decode(trueJson,"UTF-8");
				JSONObject json = JSONObject.fromObject(trueJson);
				Iterator keys = json.keys();
				while(keys.hasNext()){
					String key = (String) keys.next();
					if("other".equals(key)){
						// 将 other 作为 json 对象 取数据
						JSONObject json2 = JSONObject.fromObject(json.get(key));
						if(json2.get("instanceId")!=null){
							instanceId = json2.getString("instanceId");
						}
						if(json2.get("nodeId")!=null){
							nodeId = json2.getString("nodeId");
						}
						Iterator keys2 =  json2.keys();
						while(keys2.hasNext()){
							String key2 = (String) keys2.next();
							jsonObject.put(key2, json2.get(key2));
						}
					}else{
						jsonObject.put(key, json.get(key));
					}
				}
			}
			// 读取resources 信息
			String truepaper = jsonObject.get("truepaper")+"";
			if(truepaper != null && !"".equals(truepaper) && !truepaper.equals("null")){
				js = JSONObject.fromObject(truepaper).getJSONArray("resources");
			}
			//如果 js 不为空 则取附件
			if(js != null && js.size() > 0){
				int fileSize = trueJsonLength+4;
				for (int i = 0; i < js.size(); i++) {
					JSONObject obj = js.getJSONObject(i);
					FileOutputStream out = null;
					try {
						String attId = (String) obj.get("attId"); // 附件唯一标识
						String length = (String) obj.get("fileSize"); // 附件的大小
						if(length==null){
							length = (String) obj.get("filesize");
						}
						String newfile = (String) obj.get("newfile"); // 是否发起上传附件
						String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
						Date nowTime = new Date();
						// 获取当前登录用户
						// 用户id
						String userId = (String) jsonObject.get("userId");
						Employee emp = employeeService.findEmployeeById(userId);
						String userName = emp.getEmployeeName();
						if(CommonUtil.stringNotNULL(newfile) && newfile.equals("true")){
							SendAttachments sendAttachments = new SendAttachments();
							String filename = (String) obj.get("filename")!=null?obj.getString("filename"):"";
							String filetype = (String) obj.get("filetype")!=null?obj.getString("filetype"):"";
//							if(!filename.contains("."+filetype)){
//								filename += "."+filetype; 
//							}
							String dstPath = FileUploadUtils.getRealFilePath(filename, basePath,Constant.UPLOAD_FILE_PATH);
							String path = basePath + dstPath;
							File newFile = new File(path);
							out = new FileOutputStream(newFile);
							out.write(imgdata, fileSize, Integer.valueOf(length.trim()));
							fileSize += Integer.valueOf(length.trim());
//							sendAttachments.setId(UuidGenerator.generate36UUID());
							sendAttachments.setDocguid(instanceId+ATT_FJSUFFIX_NAME);
							sendAttachments.setEditer(userId+":"+userName);
							sendAttachments.setFilename(filename);
							sendAttachments.setFiletype(filetype);
							sendAttachments.setFilesize(newFile.length());
							sendAttachments.setFiletime(nowTime);
							sendAttachments.setLocalation(dstPath);
							sendAttachments.setNodeId(nodeId);
							sendAttachments.setData(Hibernate.createBlob(new FileInputStream(newFile)));
							attachmentService.addSendAtts(sendAttachments);
							AttachmentThread thread = new AttachmentThread(attachmentService, path, sendAttachments.getFiletype(), sendAttachments, newFile);
							thread.start();
						}else{
							SendAttachments att = attachmentService.findSendAtts(attId);
							if(att!=null){
								String uploadfilename = att.getFilename();
								/*if(uploadfilename.endsWith(".doc")){
									uploadfilename = uploadfilename+"x";
									att.setFiletype("docx");
									att.setFilename(uploadfilename);
								}*/
								String dstPath = FileUploadUtils.getRealFilePath(uploadfilename, basePath,Constant.UPLOAD_FILE_PATH);
								String path = basePath + dstPath;
								File newFile = new File(path);
								out = new FileOutputStream(newFile);
								out.write(imgdata, fileSize, Integer.valueOf(length.trim()));
								fileSize = fileSize+Integer.valueOf(length.trim());
								String docguid = att.getDocguid();
								SendAttachmentsHistory attHistory = new SendAttachmentsHistory();
								attHistory.setDocguid(docguid);
								attHistory.setEditer(att.getEditer()); 
								attHistory.setFileindex(att.getFileindex());
								attHistory.setFiletype(att.getFiletype());
								attHistory.setFilename(att.getFilename());
								attHistory.setFjid(attId);
								attHistory.setEditer(userName);
								attHistory.setLocalation(dstPath);
								attHistory.setFiletime(nowTime);
								attHistory.setFilesize(newFile.length());
								//判断是否有编辑---用于pdf领导签批意见后重新生成正文,意见需不显示，下次签而又要显示的标识位判断
								attHistory.setIsHaveEdit("1");
								attHistory.setAttflow(Hibernate.createBlob(new FileInputStream(newFile)));
								attachmentService.addSendAttHistory(attHistory);
		//							att.setFiletime(nowTime);
								att.setLocalation(dstPath);
								att.setFilesize(newFile.length());
								attachmentService.updateSendAtt(att);
								AttachmentThread thread = new AttachmentThread(attachmentService, path, att.getFiletype(), att, newFile);
								thread.start();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						if(out!=null){
							out.close();
						}
					}
				}
			}
			
			jsonObject.put("tplist", list);
		} catch (IOException e1) {
			e1.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (iStream != null) {
				try {
					iStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		FileGeneThread fgThread = new FileGeneThread(jsonObject.toString(),(String) jsonObject.get("processId")+"_mobile");
		fgThread.start();
		return jsonObject;
	
	}
	
	private byte[] readStream(InputStream is) throws Exception {
		ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
		int ch;
		while ((ch = is.read()) != -1) {
			bytestream.write(ch);
		}
		byte imgdata[] = bytestream.toByteArray();
		bytestream.close();
		return imgdata;
	}

	// ------------------------回调接口----------------------start------

	/**
	 * 车辆的回调---如果同意借用,需要更新状态
	 */
	public void updateCarStatus() {

	}

	/**
	 * 会议审核,选择审核人
	 */
	public String showAduitMeetingPerson() {
		String department_rootId = SystemParamConfigUtil
				.getParamValueByParam("root_department_id");
		getRequest().setAttribute("department_rootId", department_rootId);

		if (getRequest().getParameter("isBigDep") != null) {
			getRequest().setAttribute("isBigDep",
					getRequest().getParameter("isBigDep"));
		}
		if (getRequest().getParameter("notEmployee") != null) {
			getRequest().setAttribute("notEmployee",
					getRequest().getParameter("notEmployee"));
		}

		return "showAduitMeetingPerson";
	}
	
	// ------------------------回调接口-----------------------end-------

	public static void main1(String[] args) {
		FileInputStream fileinputstream;
		String templateContent = "";
		try {
			fileinputstream = new FileInputStream("d:/a.html");
			// 下面四行：获得输入流的长度，然后建一个该长度的数组，然后把输入流中的数据以字节的形式读入到数组中，然后关闭流
			int length = fileinputstream.available();
			byte bytes[] = new byte[length];
			fileinputstream.read(bytes);
			fileinputstream.close();
			// 通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String,
			// 然后利用字符串的replaceAll()方法进行指定字符的替换,此处除了这种方法之外，应该还可以使用表达式语言${}的方法来进行。
			templateContent = new String(bytes, "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		UrlCatcher u = new UrlCatcher();
		// String htmlString =
		// "<td><select zname=\"紧急程度\" name=\"priority\" id=\"priority\"  style=\"width:150px;height:30px\"> </select></td><td><select name='doctype'><option value=\"通知\" >通知</option> <option value=\"命令\" >命令</option> <option value=\"决定\" >决定</option> </select><select name=\"adsf\"></td><td><option value=\"决定\" >决定</option> </select><input id=\"123\"/></td>";
		// String reg_select = "<SELECT>.*?</select>";
		System.out.println(templateContent);
		// String[] selects = u.getStringByRegEx(templateContent, reg_select,
		// true);
		// for (String string : selects) {
		// System.out.println(string);
		// }
		String value = "立式话筒^无线话筒^录音系统^演讲台^投影仪";
		String[] vals = value.split("\\^");
		for (String string : vals) {
			System.out.println(string);
		}
		// 获取放意见标签的div
		String reg_divComment = "<trueway:comment[^<]*/>";
		System.out.println(reg_divComment);
		String[] divComments = u.getStringByRegEx(templateContent,
				reg_divComment, true);
		System.out.println(divComments == null);
		for (String divCom : divComments) {
			System.out.println(divCom);
		}
		// Pattern p = Pattern.compile("\r|\n");
		// Matcher m = p.matcher(templateContent);
		// templateContent = m.replaceAll("");
		// System.out.println(templateContent);
		// String[] a = templateContent.split("<div id=");
		// for (int i = 1; i < a.length; i++) {
		// a[i] = a[i].substring(0,a[i].indexOf("</div></td>"));
		// }

	}

	/**
	 * 保存或更新或查询表单里的属性(通州城管 add)
	 */
	@SuppressWarnings("unchecked")
	public String saveForm_ToDb(String oldformId, int todo, String instanceId,
			String formId, String nodeid, String workFlowId, String processId,
			String zwName,String isFirstChildWf) {
		// 第一步保存
		if (oldformId == null || ("").equals(oldformId)) {
			oldformId = formId;
		}
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService
				.getTableNameByFormId(oldformId);
		// ========================列表类型=============================//
		List<FormTagMapColumn> haveLists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameHaveList = new ArrayList<String>();
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 列表和非列表类型的分开存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() != null && !("").equals(ft.getListId())) {
				haveLists.add(ft);
			} else {
				lists.add(ft);
			}
		}
		// 读取两个list中的tableName(去重之后的)
		for (int i = 0, n = haveLists.size(); i < n; i++) { // 列表型
			if (!tableNameHaveList.contains(haveLists.get(i).getTablename())) {
				tableNameHaveList.add(haveLists.get(i).getTablename());
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			if (!tableNameList.contains(lists.get(i).getTablename())) {
				tableNameList.add(lists.get(i).getTablename());
			}
		}
		// ========================列表类型=============================//
		StringBuffer tagHaveName = new StringBuffer();
		if (tableNameHaveList.size() != 0 && !("").equals(tableNameHaveList)
				&& tableNameHaveList != null) {
			List<Map> list = new ArrayList<Map>();// 存放查询出来的值
			for (String tableHaveName : tableNameHaveList) { // T_WF_OFFICE_PERSON,T_WF_OFFICE_WORKLIST
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService
						.getFormTagMapColumnByFormId(oldformId, formId, tableHaveName, todo,"");
				// 取出表名
				String tabHaveName = ftmcList.get(0).getTablename();
				String columnHaveName = "";
				StringBuffer tagHaveNameValue = new StringBuffer();
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService
						.findWfFileldInfoByTableName(tableHaveName);
				// 查询数据库已有的数据
				List<Map> mapList = zwkjFormService.findTableByFormId(
						tabHaveName, oldformId, instanceId);
				Map m1 = new HashMap();
				for (FormTagMapColumn ftmc : ftmcList) { // JL_GZSJ,JL_GZDD,JL_ZW,JL_XZ
					if (todo == 2) {
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList)
								&& mapList != null) {
							String[] haveValue = new String[mapList.size()];// 定义数组的长度，即查出来的数据条数
							for (int i = 0, n = mapList.size(); i < n; i++) {
								String tagNameHaveValue = mapList.get(i).get(
										ftmc.getColumnname()) == null ? null
										: mapList.get(i).get(
												ftmc.getColumnname())
												+ ""; // 列所对应的的值
								if (wfFieldInfoList != null
										&& wfFieldInfoList.size() != 0
										&& !("").equals(wfFieldInfoList)) {
									for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
										// clob类型装换成String
										if (ftmc.getColumnname() != null
												&& !("").equals(ftmc
														.getColumnname())) {
											if ((wfFieldInfo.getVc_fieldname()
													.toLowerCase()).equals(ftmc
													.getColumnname()
													.toLowerCase())
													&& Integer
															.parseInt(wfFieldInfo
																	.getI_fieldtype()) == 3) {
												// 此处已可以查出大字段内容
												tagNameHaveValue = tableInfoService
														.getClob(
																tabHaveName,
																instanceId,
																wfFieldInfo
																		.getVc_fieldname(),formId);
											}
										}
									}
								}
								if (("null").equals(tagNameHaveValue)
										|| tagNameHaveValue == null) {
									tagNameHaveValue = "";
								}
								haveValue[i] = tagNameHaveValue;
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // ；列的属性名
							m1.put(ftmc.getColumnname().toLowerCase(),
									haveValue);
						}
					} else {
						// =================保存或更新和点“完成”时=================
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnHaveName += ftmc.getColumnname() + ","; // 列名
							// 表里的一类数据 格式：jl_gzsj=aaa,bbb,ccc,
							String tagHaveNameBak = "'"
									+ (getRequest().getParameter(
											ftmc.getFormtagname()) == null ? ""
											: getRequest().getParameter(
													ftmc.getFormtagname()))
									+ "',";
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										String thn = tagHaveNameBak.substring(
												0, tagHaveNameBak.length() - 1);
										if (thn.split(",").length > 1) {
											for (int i = 0, n = thn.split(",").length - 1; i < n; i++) {
												if (!("")
														.equals(thn.split(",")[i])) {
													tagHaveNameBak += "to_date('"
															+ thn.split(",")[i]
															+ "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
												} else {
													tagHaveNameBak += "\"\",";// 为空，则加空字符串
												}
											}
										} else {
											tagHaveNameBak = "to_date('"
													+ tagHaveNameBak
															.substring(
																	1,
																	tagHaveNameBak
																			.length() - 2)
													+ "','yyyy-MM-dd'),"; // 列所对应的的值
										}
									}
								}
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // ；列的属性名
							tagHaveNameValue.append(tagHaveNameBak); // 列所对应的的值
																		// 格式：'a;1','a;2','a;3','a;4',
						}
					}
				}
				if (todo != 2) {
					// 对多列循环入库
					String[] tagMany = tagHaveNameValue.substring(0,
							tagHaveNameValue.length() - 1).split(",");
					int cloumnSize = 0; // 一共有几行
					for (int i = 0, n = tagMany.length; i < n; i++) { // 格式：['a;1','a;2','a;3','a;4']
						String taVal = tagMany[i].substring(1,
								tagMany[i].length() - 1);
						String[] tgma = taVal.split(";");
						cloumnSize = tgma.length;
						break;
					}
					List<String[]> insertDataList = new ArrayList<String[]>();
					for (int i = 0, n = cloumnSize; i < n; i++) {
						StringBuffer saveValue = new StringBuffer();
						String cloumHaNa = columnHaveName; // 重新初始化
						StringBuffer isNull = new StringBuffer(); // 判断一行是否为空
						for (int j = 0, m = tagMany.length; j < m; j++) {
							String taVal = tagMany[j].substring(1,
									tagMany[j].length() - 1);
							isNull.append(taVal.split(";")[i]);
							saveValue.append("'" + taVal.split(";")[i] + "',"); // 取出每一行的值，拼接
						}
						if (!("").equals(isNull)) {
							for (WfFieldInfo wfColumn : wfFieldInfoList) {
								// 基础字段(换表单如果有新的表加入，需加上基础字段)
								if (wfColumn.getI_tableid() == null
										|| ("").equals(wfColumn.getI_tableid())) {
									if (cloumHaNa.toLowerCase().indexOf(
											wfColumn.getVc_fieldname()
													.toLowerCase()) < 0) {
										cloumHaNa += wfColumn.getVc_fieldname()
												.toUpperCase() + ",";
										// 入库为新的formId
										if (("formid").equals(wfColumn
												.getVc_fieldname()
												.toLowerCase())) {
											saveValue.append("'" + formId
													+ "',");
										} else {
											saveValue
													.append("'"
															+ getRequest()
																	.getParameter(
																			wfColumn.getVc_fieldname())
															+ "',");
										}
									}
								}
							}
							// 用于往下一步发送，删除之前的数据，再循环插入新数据
							String[] dataList = new String[3];// 一个为表名，一个为列名，一个为列值
							dataList[0] = tabHaveName;
							dataList[1] = cloumHaNa;
							dataList[2] = saveValue.toString();
							insertDataList.add(dataList);
						}
					}
					if (todo != 0) {
						if (todo == 1) {
							// 更新--先删除再重新插库
							zwkjFormService.deleteForm(tableHaveName, formId,
									instanceId);
							if (tagHaveNameValue != null
									&& !("").equals(tagHaveNameValue)) {
								for (String[] data : insertDataList) {
									zwkjFormService.saveForm(
											data[0],
											data[1].substring(0,
													data[1].length() - 1),
											data[2].substring(0,
													data[2].length() - 1));
								}
							}
						}
					}
				} else {
					list.add(m1); // 拼接数据放入map中格式化(查询数据)
				}
				getRequest().setAttribute("tagHaveName",
						tagHaveName.substring(0, tagHaveName.length() - 1));
			}
			String valueHaveList = new Gson().toJson(list);
			getRequest().getSession().setAttribute("listValues", valueHaveList);// 页面回值，存session
		}

		// ========================非列表类型=============================//
		String value = "";// 页面回值
		StringBuffer tagNameForm = new StringBuffer();// 标签属性名
		StringBuffer searchValue = new StringBuffer();
		if (tableNameList.size() != 0 && !("").equals(tableNameList)
				&& tableNameList != null) {
			for (String tableName : tableNameList) {
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService
						.getFormTagMapColumnByFormId(oldformId, formId, tableName, todo, isFirstChildWf);
				// 取出表名
				String tabName = ftmcList.get(0).getTablename();
				String columnName = "";
				StringBuffer tagName = new StringBuffer();
				List<Map> mapList = zwkjFormService.findTableByFormId(tabName,
						oldformId, instanceId);
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService
						.findWfFileldInfoByTableName(tableName);
				for (FormTagMapColumn ftmc : ftmcList) {
					if (todo == 2) {
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList)
								&& mapList != null) {
							String tagNameValue = mapList.get(0).get(
									ftmc.getColumnname()) == null ? null
									: mapList.get(0).get(ftmc.getColumnname())
											+ ""; // 列所对应的的值
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// clob类型装换成String
									if (ftmc.getColumnname() != null
											&& !("").equals(ftmc
													.getColumnname())) {
										if ((wfFieldInfo.getVc_fieldname()
												.toLowerCase()).equals(ftmc
												.getColumnname().toLowerCase())
												&& Integer.parseInt(wfFieldInfo
														.getI_fieldtype()) == 3) {
											// 此处已可以查出大字段内容
											tagNameValue = tableInfoService
													.getClob(
															tableName,
															instanceId,
															wfFieldInfo
																	.getVc_fieldname(),formId);
										}
									}
								}
							}
							if (("null").equals(tagNameValue)
									|| tagNameValue == null) {
								tagNameValue = "";
							}
							searchValue.append(ftmc.getFormtagname() + ":"
									+ tagNameValue + ";");
						}
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnName += ftmc.getColumnname().toLowerCase()
									+ ","; // 列名
							String tagNameBak = mapList.get(0).get(
									ftmc.getColumnname()) == null ? null
									: mapList.get(0).get(ftmc.getColumnname())
											+ ""; // 列所对应的的值
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										if (wfFieldInfo.getVc_fieldname() != null
												&& !("").equals(wfFieldInfo
														.getVc_fieldname())) {
											if (!("").equals(tagNameBak)
													&& tagNameBak != null) {
												if (tagNameBak.length() > 10) {
													tagNameBak = tagNameBak
															.substring(0, 10); // 列所对应的的值(查询时截取，否则带时分秒里有"："影响)
												}
											}
										}
									}
								}
							}
							tagName.append("'" + tagNameBak + "',"); // 列所对应的的值
							tagNameForm.append(ftmc.getFormtagname() + ",");
						}
					} else {
						// =================保存或更新和点“完成”时=================
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnName += ftmc.getColumnname() + ","; // 列名
							// 表里的一类数据
							String columnValue = getRequest().getParameter(
									ftmc.getFormtagname()) == null ? ""
									: getRequest().getParameter(
											ftmc.getFormtagname()).toString();
							if (columnValue.equals("") && mapList != null
									&& mapList.size() > 0) {
								// 从maplist取值
								if (mapList.get(0).get(ftmc.getColumnname()) != null) {
									columnValue = mapList.get(0)
											.get(ftmc.getColumnname())
											.toString();
								}

							}
							// -----------------------------文号入库---------------start------------------
							List<String> depIds = (List<String>) getSession()
									.getAttribute(MyConstants.DEPARMENT_IDS);
							String webId = depIds.get(0);
							// 根据流程ID判断是发文还是办文确定序号
							WfItem item = tableInfoService
									.findItemByWorkFlowId(workFlowId, webId);
							if (item != null) {
								if (item.getVc_sxlx().equals(
										Constant.DEFINE_TYPE_SEND)) { // 发文
								// -------need to do----------------//TODO
								// 取出业务表里的文号，入库到文号表,这里需写活(取文号对应的字段的值)--写死了，需扩展
									if (("wh").equals(ftmc.getColumnname()
											.toLowerCase())) {
										String docNum = getRequest()
												.getParameter(
														ftmc.getFormtagname()) == null ? ""
												: getRequest().getParameter(
														ftmc.getFormtagname())
														.toString();
										DocNumberWhFw docNumberWhFw = docNumberService
												.findDocNumFw(instanceId);
										if (docNumberWhFw == null) {
											docNumberWhFw = new DocNumberWhFw();
										}
										docNumberWhFw.setFormId(formId);
										docNumberWhFw.setInstanceId(instanceId);
										docNumberWhFw.setWorkflowId(workFlowId);
										docNumberWhFw = setDocNumberWhFw(
												docNumberWhFw, docNum);
										if (docNumberWhFw != null) {
											docNumberService
													.updateFw(docNumberWhFw);
										} else {
											docNumberService
													.addFw(docNumberWhFw);
										}
									}
								} else if ((item.getVc_sxlx().equals(
										Constant.DEFINE_TYPE_DO) || ("2")
										.equals(item.getVc_sxlx()))) { // 办文和传阅
									if (("bwh").equals(ftmc.getColumnname()
											.toLowerCase())) {
										String docNum = getRequest()
												.getParameter(
														ftmc.getFormtagname()) == null ? ""
												: getRequest().getParameter(
														ftmc.getFormtagname())
														.toString();
										DocNumberWhBw docNumberWhBw = docNumberService
												.findDocNumBw(instanceId);
										if (docNumberWhBw == null) {
											docNumberWhBw = new DocNumberWhBw();
										}
										docNumberWhBw.setFormId(formId);
										docNumberWhBw.setInstanceId(instanceId);
										docNumberWhBw.setWorkflowId(workFlowId);
										docNumberWhBw.setWebId(webId);
										// 办文的类型-----暂时设置为0,如有作废功能,需更新
										docNumberWhBw.setResult(0);
										docNumberWhBw = setDocNumberWhBw(
												docNumberWhBw, docNum);
										if (docNumberWhBw != null) {
											docNumberService
													.updateBw(docNumberWhBw);
										} else {
											docNumberService
													.addBw(docNumberWhBw);
										}
									}
								}
							}
							// -----------------------------文号入库---------------end------------------

							value += ftmc.getColumnname() + ":" + columnValue
									+ ";";
							String tagNameBak = "'"
									+ (getRequest().getParameter(
											ftmc.getFormtagname()) == null ? ""
											: getRequest().getParameter(
													ftmc.getFormtagname()))
									+ "',";
							// 类型是radio、checkbox时--undefined
							if (tagNameBak.equals("'',")) {
								tagNameBak = "'" + columnValue + "',";
							}
							if ("'undefined'".equals(tagNameBak)) {
								tagNameBak = "";
							}
							if ("FORMID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + formId + "',";
							}
							if ("INSTANCEID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + instanceId + "',";
							}
							if ("WORKFLOWID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + workFlowId + "',";
							}
							if ("PROCESSID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + processId + "',";
							}
							if ("WJBT".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + zwName + "',";
							}

							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										tagNameBak = "to_date('"
												+ tagNameBak
														.substring(
																1,
																tagNameBak
																		.length() - 2)
												+ "','yyyy-MM-dd'),"; // 列所对应的的值
									}
								}
							}
							tagName.append(tagNameBak); // 列所对应的的值
							tagNameForm.append(ftmc.getFormtagname() + ",");
						}
					}
				}
				for (WfFieldInfo wfColumn : wfFieldInfoList) {
					// 基础字段(换表单如果有新的表加入，需加上基础字段)
					if (wfColumn.getI_tableid() == null
							|| ("").equals(wfColumn.getI_tableid())) {
						if (columnName.toLowerCase().indexOf(
								wfColumn.getVc_fieldname().toLowerCase()) < 0) {
							columnName += wfColumn.getVc_fieldname()
									.toUpperCase() + ",";
							// 入库为新的formId
							if (("formid").equals(wfColumn.getVc_fieldname()
									.toLowerCase())) {
								tagName.append("'" + formId + "',");
							} else {
								tagName.append("'"
										+ getRequest().getParameter(
												wfColumn.getVc_fieldname())
										+ "',");
							}
						}
					}
				}
				if (todo != 0) {
					if (todo == 1) {
						// 更新--先删除再重新插库
						zwkjFormService.deleteForm(tableName, formId,
								instanceId);
						zwkjFormService.saveForm(tabName, columnName.substring(
								0, columnName.length() - 1), tagName.substring(
								0, tagName.length() - 1));
					}
				}
				if (!("").equals(searchValue.toString())) {
					value = searchValue.toString();
				}
				getRequest().setAttribute("tagNameForm",
						tagNameForm.substring(0, tagNameForm.length() - 1));
			}
		}
		return value;
	}

	/**
	 * 手机纸质登记接口
	 * 
	 * 作者:zhuxc<br>
	 * 创建时间:2013-10-22 上午08:57:46
	 */
	public void registRecDoc() {
		PrintWriter out = null;
		try {
			out = getResponse().getWriter();
		} catch (IOException e1) {
			e1.printStackTrace();
			return;
		}
		try {
			out = getResponse().getWriter();
			// 表单的字节长度
			String formLength = getRequest().getParameter("formLength");
			int len = Integer.parseInt(formLength);
			InputStream iStream = getRequest().getInputStream();
			byte[] allData = readStream(iStream); // 数据流
			if (allData.length <= 0) {
				out.print("{\"success\":\"1\"}");
				return;
			}
			byte[] formByte = new byte[len]; // 表单字节数组
			System.arraycopy(allData, 0, formByte, 0, len);
			String formJson = new String(formByte);
			JSONObject json = JSONObject.fromObject(formJson); // 表单json
			String userId = (String) json.get("userId"); // 用户id
			String userName = (String) json.get("userName"); // 用户姓名
			String type = (String) json.get("type"); // 公文类型：收文(1)、收文-人民来信(2)、收文-会议通知(3)、城管局阅办单(4)
			String title = (String) json.get("title"); // 标题
			title = URLDecoder.decode(title, "UTF-8");
			userName = URLDecoder.decode(userName, "UTF-8");
			JSONArray imageArr = (JSONArray) json.get("imagesDate"); // 图片数组
			// JSONArray imageArr = JSONArray.fromObject(images);
			if (CommonUtil.stringIsNULL(title)) {
				title = "空";
			}

			System.out.println("userName:" + userName);
			System.out.println("title:" + title);

			String fileShowName = title + ".doc";
			String processId = UuidGenerator.generate36UUID();
			String instanceId = UuidGenerator.generate36UUID();
			String nodeId = "";
			String itemId = type;
			String titleColName = "";
			/* 根据itemid 获得相关nodeid titlecolnam */
			WfItem wfitem = itemService.getItemById(type);

			String workFlowid = wfitem.getLcid();

			WfNode wfNode = workflowBasicFlowService
					.findFirstNodeId(workFlowid);
			if (null != wfNode) {
				nodeId = wfNode.getWfn_id();
			}

			WfMain wf_main = workflowBasicFlowService.getWfMainById(workFlowid);
			if (null != wf_main) {
				String name = tableInfoService.getTableAndColumnName(wf_main
						.getWfm_title_column());// tableName;columnName#tableName;columnName
				// 查找列名,用于页面判断
				String columnName = "";
				String[] names = name.split("#");
				for (String str : names) {
					columnName += str.split(";")[1] + ",";
				}
				if (!("").equals(columnName) && columnName.length() > 0) {
					columnName = columnName.substring(0,
							columnName.length() - 1);
				}
				titleColName = columnName;
			}

			/*
			 * if("1".equals(type)){ //收文 nodeId =
			 * SystemParamConfigUtil.getParamValueByParam("swNodeId"); itemId =
			 * SystemParamConfigUtil.getParamValueByParam("swItemId");
			 * titleColName = "LWBT"; }else if("2".equals(type)){ //人民来信 nodeId
			 * = SystemParamConfigUtil.getParamValueByParam("rmlxNodeId");
			 * itemId =
			 * SystemParamConfigUtil.getParamValueByParam("rmlxItemId");
			 * titleColName = "LWBT"; }else if("3".equals(type)){ //会议通知 nodeId
			 * = SystemParamConfigUtil.getParamValueByParam("hytzNodeId");
			 * itemId =
			 * SystemParamConfigUtil.getParamValueByParam("hytzItemId");
			 * titleColName = "HYNR"; }else if("4".equals(type)){ //阅办单 nodeId =
			 * SystemParamConfigUtil.getParamValueByParam("ybdNodeId"); itemId =
			 * SystemParamConfigUtil.getParamValueByParam("ybdItemId");
			 * titleColName = "ZYNR"; }
			 */
			Object[] dbInfo = tableInfoService.getToDbInfoIds(nodeId);// 查找流程id、表单id
			if (dbInfo == null) {
				System.out.println("!!! 您配置的节点id或事项id有误!!!");
				out.print("{\"success\":\"1\"}");
				return;
			}

			String formId = dbInfo[0].toString();
			String workFlowId = dbInfo[1].toString();

			// 保存表单
			saveForm_ToDb4Mobile("", 1, instanceId, formId, nodeId, workFlowId,
					processId, title, titleColName,"");
			// 更新步骤
			tableInfoService.updateProcess(processId, "0", instanceId, nodeId,
					userId, title, workFlowId, itemId, "", "", formId,null);

			String year = new SimpleDateFormat("yyyy").format(new Date());
			String month = new SimpleDateFormat("MM").format(new Date());
			String day = new SimpleDateFormat("dd").format(new Date());

			String basePath = SystemParamConfigUtil
					.getParamValueByParam("filePath");
			String dstFolder = "attachments/" + year + "/" + month + "/" + day;

			List<String> imagePaths = new ArrayList<String>(); // 图片保存路径列表
			List<String> targWords = new ArrayList<String>(); // 替换标签
			String docTempName = "registRecDoc";
			int imageLen = len;
			int imgIndex = imageArr.size() - 1;
			for (int i = 0; i < imageArr.size(); i++) {
				JSONObject jsonF = imageArr.getJSONObject(i);
				int byteLength = Integer.valueOf(jsonF.getString("lenth"));
				String imageName = jsonF.getString("filename");
				byte[] ttByte = new byte[byteLength];
				System.arraycopy(allData, imageLen, ttByte, 0, byteLength);

				String filetype = imageName.substring(imageName
						.lastIndexOf("."));
				String saveFileName = UuidGenerator.generate36UUID() + filetype;
				String imagePath = basePath + dstFolder + "/" + saveFileName;
				imagePaths.add(imagePath);
				targWords.add("{{pic" + imgIndex + "}}");
				imgIndex--;
				// 保存文件
				FileUploadUtils
						.getFile(ttByte, imagePath, basePath + dstFolder);

				imageLen += byteLength;
			}

			// 模板文件地址
			String srcPath = getSpringContext().getServletContext()
					.getRealPath("")
					+ "\\tempfile\\forMobile\\"
					+ docTempName
					+ ".doc";
			// 临时文件地址，每次将文件拷贝到临时文件，然后再读取临时文件的内容，替换标签，
			String copyTempFile = getSpringContext().getServletContext()
					.getRealPath("")
					+ "\\tempfile\\forMobile\\"
					+ docTempName
					+ "_temp_" + new Date().getTime() + ".doc";
			File tempFile = new File(copyTempFile);

			FileUploadUtils.copy(new File(srcPath), tempFile);
			JacobWordUtil.insertImage(tempFile.getAbsolutePath(), imagePaths,
					targWords);

			// 保存附件
			String dstPath = FileUploadUtils.getRealFilePath(fileShowName,
					basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			SendAttachments attsext = new SendAttachments();
			attsext.setEditer(userId + ";" + userName);
			attsext.setDocguid(instanceId + ATT_SUFFIX_NAME);
			attsext.setFileindex(0L);
			attsext.setFilename(fileShowName); // 设置文件名属性
			attsext.setFiletype(FileUploadUtils.getExtension(fileShowName));// 设置文件类型(后缀名)的属性
			attsext.setFilesize(tempFile.length()); // 设置文件大小的属性
			attsext.setLocalation(dstPath); // 设置上传后在服务器上保存路径的属性
			attsext.setFiletime(new Timestamp(new Date().getTime())); // 设置上传时间属性
			attsext.setTitle(fileShowName); // 设置上传附件标题
			attsext.setType("doc"); // 设置上传附件所属类别

			attachmentService.addSendAtts(attsext);
			
			File dstFile = new File(basePath + dstPath); // 创建一个服务器上的目标路径文件对象
			FileUploadUtils.copy(tempFile, dstFile); // 完成上传文件，就是将本地文件复制到服务器上

			// 检查临时文件是否存在，存在就删除
			if (tempFile.exists()) {
				tempFile.delete();
			}
			out.print("{\"success\":\"0\"}");
		} catch (Exception e) {
			e.printStackTrace();
			out.print("{\"success\":\"1\"}");
		}
	}

	/**
	 * 保存表单数据，用于手机接口 作者:zhuxc<br>
	 * 创建时间:2013-10-22 下午04:35:47
	 */
	private String saveForm_ToDb4Mobile(String oldformId, int todo,
			String instanceId, String formId, String nodeid, String workFlowId,
			String processId, String zwName, String titleColName,String isFirstChildWf) {
		// 第一步保存
		if (oldformId == null || ("").equals(oldformId)) {
			oldformId = formId;
		}
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService
				.getTableNameByFormId(oldformId);
		// ========================列表类型=============================//
		List<FormTagMapColumn> haveLists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameHaveList = new ArrayList<String>();
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 列表和非列表类型的分开存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() != null && !("").equals(ft.getListId())) {
				haveLists.add(ft);
			} else {
				lists.add(ft);
			}
		}
		// 读取两个list中的tableName(去重之后的)
		for (int i = 0, n = haveLists.size(); i < n; i++) { // 列表型
			if (!tableNameHaveList.contains(haveLists.get(i).getTablename())) {
				tableNameHaveList.add(haveLists.get(i).getTablename());
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			if (!tableNameList.contains(lists.get(i).getTablename())) {
				tableNameList.add(lists.get(i).getTablename());
			}
		}
		// ========================列表类型=============================//
		StringBuffer tagHaveName = new StringBuffer();
		if (tableNameHaveList.size() != 0 && !("").equals(tableNameHaveList)
				&& tableNameHaveList != null) {
			List<Map> list = new ArrayList<Map>();// 存放查询出来的值
			for (String tableHaveName : tableNameHaveList) { // T_WF_OFFICE_PERSON,T_WF_OFFICE_WORKLIST
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService
						.getFormTagMapColumnByFormId(oldformId, formId, tableHaveName, todo, isFirstChildWf);
				// 取出表名
				String tabHaveName = ftmcList.get(0).getTablename();
				String columnHaveName = "";
				StringBuffer tagHaveNameValue = new StringBuffer();
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService
						.findWfFileldInfoByTableName(tableHaveName);
				// 查询数据库已有的数据
				List<Map> mapList = zwkjFormService.findTableByFormId(
						tabHaveName, oldformId, instanceId);
				Map m1 = new HashMap();
				for (FormTagMapColumn ftmc : ftmcList) { // JL_GZSJ,JL_GZDD,JL_ZW,JL_XZ
					if (todo == 2) {
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList)
								&& mapList != null) {
							String[] haveValue = new String[mapList.size()];// 定义数组的长度，即查出来的数据条数
							for (int i = 0, n = mapList.size(); i < n; i++) {
								String tagNameHaveValue = mapList.get(i).get(
										ftmc.getColumnname()) == null ? null
										: mapList.get(i).get(
												ftmc.getColumnname())
												+ ""; // 列所对应的的值
								if (wfFieldInfoList != null
										&& wfFieldInfoList.size() != 0
										&& !("").equals(wfFieldInfoList)) {
									for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
										// clob类型装换成String
										if (ftmc.getColumnname() != null
												&& !("").equals(ftmc
														.getColumnname())) {
											if ((wfFieldInfo.getVc_fieldname()
													.toLowerCase()).equals(ftmc
													.getColumnname()
													.toLowerCase())
													&& Integer
															.parseInt(wfFieldInfo
																	.getI_fieldtype()) == 3) {
												// 此处已可以查出大字段内容
												tagNameHaveValue = tableInfoService
														.getClob(
																tabHaveName,
																instanceId,
																wfFieldInfo
																		.getVc_fieldname(),formId);
											}
										}
									}
								}
								if (("null").equals(tagNameHaveValue)
										|| tagNameHaveValue == null) {
									tagNameHaveValue = "";
								}
								haveValue[i] = tagNameHaveValue;
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // ；列的属性名
							m1.put(ftmc.getColumnname().toLowerCase(),
									haveValue);
						}
					} else {
						// =================保存或更新和点“完成”时=================
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnHaveName += ftmc.getColumnname() + ","; // 列名
							// 表里的一类数据 格式：jl_gzsj=aaa,bbb,ccc,
							String tagHaveNameBak = "'"
									+ (getRequest().getParameter(
											ftmc.getFormtagname()) == null ? ""
											: getRequest().getParameter(
													ftmc.getFormtagname()))
									+ "',";
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										String thn = tagHaveNameBak.substring(
												0, tagHaveNameBak.length() - 1);
										if (thn.split(",").length > 1) {
											for (int i = 0, n = thn.split(",").length - 1; i < n; i++) {
												if (!("")
														.equals(thn.split(",")[i])) {
													tagHaveNameBak += "to_date('"
															+ thn.split(",")[i]
															+ "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
												} else {
													tagHaveNameBak += "\"\",";// 为空，则加空字符串
												}
											}
										} else {
											tagHaveNameBak = "to_date('"
													+ tagHaveNameBak
															.substring(
																	1,
																	tagHaveNameBak
																			.length() - 2)
													+ "','yyyy-MM-dd'),"; // 列所对应的的值
										}
									}
								}
							}
							tagHaveName.append(ftmc.getFormtagname() + ","); // ；列的属性名
							tagHaveNameValue.append(tagHaveNameBak); // 列所对应的的值
																		// 格式：'a;1','a;2','a;3','a;4',
						}
					}
				}
				if (todo != 2) {
					// 对多列循环入库
					String[] tagMany = tagHaveNameValue.substring(0,
							tagHaveNameValue.length() - 1).split(",");
					int cloumnSize = 0; // 一共有几行
					for (int i = 0, n = tagMany.length; i < n; i++) { // 格式：['a;1','a;2','a;3','a;4']
						String taVal = tagMany[i].substring(1,
								tagMany[i].length() - 1);
						String[] tgma = taVal.split(";");
						cloumnSize = tgma.length;
						break;
					}
					List<String[]> insertDataList = new ArrayList<String[]>();
					for (int i = 0, n = cloumnSize; i < n; i++) {
						StringBuffer saveValue = new StringBuffer();
						String cloumHaNa = columnHaveName; // 重新初始化
						StringBuffer isNull = new StringBuffer(); // 判断一行是否为空
						for (int j = 0, m = tagMany.length; j < m; j++) {
							String taVal = tagMany[j].substring(1,
									tagMany[j].length() - 1);
							isNull.append(taVal.split(";")[i]);
							saveValue.append("'" + taVal.split(";")[i] + "',"); // 取出每一行的值，拼接
						}
						if (!("").equals(isNull)) {
							for (WfFieldInfo wfColumn : wfFieldInfoList) {
								// 基础字段(换表单如果有新的表加入，需加上基础字段)
								if (wfColumn.getI_tableid() == null
										|| ("").equals(wfColumn.getI_tableid())) {
									if (cloumHaNa.toLowerCase().indexOf(
											wfColumn.getVc_fieldname()
													.toLowerCase()) < 0) {
										cloumHaNa += wfColumn.getVc_fieldname()
												.toUpperCase() + ",";
										// 入库为新的formId
										if (("formid").equals(wfColumn
												.getVc_fieldname()
												.toLowerCase())) {
											saveValue.append("'" + formId
													+ "',");
										} else {
											saveValue
													.append("'"
															+ getRequest()
																	.getParameter(
																			wfColumn.getVc_fieldname())
															+ "',");
										}
									}
								}
							}
							// 用于往下一步发送，删除之前的数据，再循环插入新数据
							String[] dataList = new String[3];// 一个为表名，一个为列名，一个为列值
							dataList[0] = tabHaveName;
							dataList[1] = cloumHaNa;
							dataList[2] = saveValue.toString();
							insertDataList.add(dataList);
						}
					}
					if (todo != 0) {
						if (todo == 1) {
							// 更新--先删除再重新插库
							zwkjFormService.deleteForm(tableHaveName, formId,
									instanceId);
							if (tagHaveNameValue != null
									&& !("").equals(tagHaveNameValue)) {
								for (String[] data : insertDataList) {
									zwkjFormService.saveForm(
											data[0],
											data[1].substring(0,
													data[1].length() - 1),
											data[2].substring(0,
													data[2].length() - 1));
								}
							}
						}
					}
				} else {
					list.add(m1); // 拼接数据放入map中格式化(查询数据)
				}
				getRequest().setAttribute("tagHaveName",
						tagHaveName.substring(0, tagHaveName.length() - 1));
			}
			String valueHaveList = new Gson().toJson(list);
			getRequest().getSession().setAttribute("listValues", valueHaveList);// 页面回值，存session
		}

		// ========================非列表类型=============================//
		String value = "";// 页面回值
		StringBuffer tagNameForm = new StringBuffer();// 标签属性名
		StringBuffer searchValue = new StringBuffer();
		if (tableNameList.size() != 0 && !("").equals(tableNameList)
				&& tableNameList != null) {
			for (String tableName : tableNameList) {
				// 取出一类数据
				List<FormTagMapColumn> ftmcList = zwkjFormService
						.getFormTagMapColumnByFormId(oldformId, formId, tableName, todo, isFirstChildWf);
				// 取出表名
				String tabName = ftmcList.get(0).getTablename();
				String columnName = "";
				StringBuffer tagName = new StringBuffer();
				List<Map> mapList = zwkjFormService.findTableByFormId(tabName,
						oldformId, instanceId);
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService
						.findWfFileldInfoByTableName(tableName);
				for (FormTagMapColumn ftmc : ftmcList) {
					if (todo == 2) {
						// ================查询表单的值(从待办点进来)==========================
						if (mapList.size() != 0 && !("").equals(mapList)
								&& mapList != null) {
							String tagNameValue = mapList.get(0).get(
									ftmc.getColumnname()) == null ? null
									: mapList.get(0).get(ftmc.getColumnname())
											+ ""; // 列所对应的的值
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// clob类型装换成String
									if (ftmc.getColumnname() != null
											&& !("").equals(ftmc
													.getColumnname())) {
										if ((wfFieldInfo.getVc_fieldname()
												.toLowerCase()).equals(ftmc
												.getColumnname().toLowerCase())
												&& Integer.parseInt(wfFieldInfo
														.getI_fieldtype()) == 3) {
											// 此处已可以查出大字段内容
											tagNameValue = tableInfoService
													.getClob(
															tableName,
															instanceId,
															wfFieldInfo
																	.getVc_fieldname(),formId);
										}
									}
								}
							}
							if (("null").equals(tagNameValue)
									|| tagNameValue == null) {
								tagNameValue = "";
							}
							searchValue.append(ftmc.getFormtagname() + ":"
									+ tagNameValue + ";");
						}
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnName += ftmc.getColumnname().toLowerCase()
									+ ","; // 列名
							String tagNameBak = mapList.get(0).get(
									ftmc.getColumnname()) == null ? null
									: mapList.get(0).get(ftmc.getColumnname())
											+ ""; // 列所对应的的值
							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										if (wfFieldInfo.getVc_fieldname() != null
												&& !("").equals(wfFieldInfo
														.getVc_fieldname())) {
											if (!("").equals(tagNameBak)
													&& tagNameBak != null) {
												if (tagNameBak.length() > 10) {
													tagNameBak = tagNameBak
															.substring(0, 10); // 列所对应的的值(查询时截取，否则带时分秒里有"："影响)
												}
											}
										}
									}
								}
							}
							tagName.append("'" + tagNameBak + "',"); // 列所对应的的值
							tagNameForm.append(ftmc.getFormtagname() + ",");
						}
					} else {
						// =================保存或更新和点“完成”时=================
						if (ftmc.getColumnname() != null
								&& !("").equals(ftmc.getColumnname())) {
							columnName += ftmc.getColumnname() + ","; // 列名
							// 表里的一类数据
							String columnValue = getRequest().getParameter(
									ftmc.getFormtagname()) == null ? ""
									: getRequest().getParameter(
											ftmc.getFormtagname()).toString();

							// -----------------------------文号入库---------------start------------------
							// List<String> depIds =
							// (List<String>)getSession().getAttribute(MyConstants.DEPARMENT_IDS);
							// String webId = depIds.get(0);
							String webId = "tzqcgj";
							// 根据流程ID判断是发文还是办文确定序号
							WfItem item = tableInfoService
									.findItemByWorkFlowId(workFlowId, webId);
							if (item != null) {
								if (item.getVc_sxlx().equals(
										Constant.DEFINE_TYPE_SEND)) { // 发文
								// -------need to do----------------//TODO
								// 取出业务表里的文号，入库到文号表,这里需写活(取文号对应的字段的值)--写死了，需扩展
									if (("wh").equals(ftmc.getColumnname()
											.toLowerCase())) {
										String docNum = getRequest()
												.getParameter(
														ftmc.getFormtagname()) == null ? ""
												: getRequest().getParameter(
														ftmc.getFormtagname())
														.toString();
										DocNumberWhFw docNumberWhFw = docNumberService
												.findDocNumFw(instanceId);
										if (docNumberWhFw == null) {
											docNumberWhFw = new DocNumberWhFw();
										}
										docNumberWhFw.setFormId(formId);
										docNumberWhFw.setInstanceId(instanceId);
										docNumberWhFw.setWorkflowId(workFlowId);
										docNumberWhFw = setDocNumberWhFw(
												docNumberWhFw, docNum);
										if (docNumberWhFw != null) {
											docNumberService
													.updateFw(docNumberWhFw);
										} else {
											docNumberService
													.addFw(docNumberWhFw);
										}
									}
								} else if ((item.getVc_sxlx().equals(
										Constant.DEFINE_TYPE_DO) || ("2")
										.equals(item.getVc_sxlx()))) { // 办文和传阅
									if (("bwh").equals(ftmc.getColumnname()
											.toLowerCase())) {
										String docNum = getRequest()
												.getParameter(
														ftmc.getFormtagname()) == null ? ""
												: getRequest().getParameter(
														ftmc.getFormtagname())
														.toString();
										DocNumberWhBw docNumberWhBw = docNumberService
												.findDocNumBw(instanceId);
										if (docNumberWhBw == null) {
											docNumberWhBw = new DocNumberWhBw();
										}
										docNumberWhBw.setFormId(formId);
										docNumberWhBw.setInstanceId(instanceId);
										docNumberWhBw.setWorkflowId(workFlowId);
										docNumberWhBw.setWebId(webId);
										// 办文的类型-----暂时设置为0,如有作废功能,需更新
										docNumberWhBw.setResult(0);
										docNumberWhBw = setDocNumberWhBw(
												docNumberWhBw, docNum);
										if (docNumberWhBw != null) {
											docNumberService
													.updateBw(docNumberWhBw);
										} else {
											docNumberService
													.addBw(docNumberWhBw);
										}
									}
								}
							}
							// -----------------------------文号入库---------------end------------------

							value += ftmc.getColumnname() + ":" + columnValue
									+ ";";
							String tagNameBak = "'"
									+ (getRequest().getParameter(
											ftmc.getFormtagname()) == null ? ""
											: getRequest().getParameter(
													ftmc.getFormtagname()))
									+ "',";
							// 类型是radio、checkbox时--undefined
							if ("'undefined'".equals(tagNameBak)) {
								tagNameBak = "";
							}
							if ("FORMID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + formId + "',";
							}
							if ("INSTANCEID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + instanceId + "',";
							}
							if ("WORKFLOWID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + workFlowId + "',";
							}
							if ("PROCESSID".equals(ftmc.getColumnname()
									.toUpperCase())) {
								tagNameBak = "'" + processId + "',";
							}
							/*
							 * if("WJBT".equals(ftmc.getColumnname().toUpperCase(
							 * ))){ tagNameBak = "'"+zwName+"',";
							 * }if("LWDW".equals
							 * (ftmc.getColumnname().toUpperCase())){ tagNameBak
							 * = "'"+zwName+"',"; }
							 */
							if (CommonUtil.stringNotNULL(titleColName)
									&& titleColName.equalsIgnoreCase(ftmc
											.getColumnname().toUpperCase())) {
								tagNameBak = "'" + zwName + "',";
							}

							if (wfFieldInfoList != null
									&& wfFieldInfoList.size() != 0
									&& !("").equals(wfFieldInfoList)) {
								for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
									// 日期型
									if ((wfFieldInfo.getVc_fieldname()
											.toLowerCase()).equals(ftmc
											.getColumnname().toLowerCase())
											&& Integer.parseInt(wfFieldInfo
													.getI_fieldtype()) == 1) {
										tagNameBak = "to_date('"
												+ tagNameBak
														.substring(
																1,
																tagNameBak
																		.length() - 2)
												+ "','yyyy-MM-dd'),"; // 列所对应的的值
									}
								}
							}
							tagName.append(tagNameBak); // 列所对应的的值
							tagNameForm.append(ftmc.getFormtagname() + ",");
						}
					}
				}
				for (WfFieldInfo wfColumn : wfFieldInfoList) {
					// 基础字段(换表单如果有新的表加入，需加上基础字段)
					if (wfColumn.getI_tableid() == null
							|| ("").equals(wfColumn.getI_tableid())) {
						if (columnName.toLowerCase().indexOf(
								wfColumn.getVc_fieldname().toLowerCase()) < 0) {
							columnName += wfColumn.getVc_fieldname()
									.toUpperCase() + ",";
							// 入库为新的formId
							if (("formid").equals(wfColumn.getVc_fieldname()
									.toLowerCase())) {
								tagName.append("'" + formId + "',");
							} else {
								tagName.append("'"
										+ getRequest().getParameter(
												wfColumn.getVc_fieldname())
										+ "',");
							}
						}
					}
				}
				if (todo != 0) {
					if (todo == 1) {
						// 更新--先删除再重新插库
						zwkjFormService.deleteForm(tableName, formId,
								instanceId);
						zwkjFormService.saveForm(tabName, columnName.substring(
								0, columnName.length() - 1), tagName.substring(
								0, tagName.length() - 1));
					}
				}
				if (!("").equals(searchValue.toString())) {
					value = searchValue.toString();
				}
				getRequest().setAttribute("tagNameForm",
						tagNameForm.substring(0, tagNameForm.length() - 1));
			}
			// 生成新的html并转成pdf
			String pdfPath = "";
			// 页面回值--保存
			try {
				pdfPath = getHtmlToNewOfPath(formId, nodeid, value, instanceId,
						false, false);
				return pdfPath;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return "";
	}

	/***************************** 以上城管局定制 **************************************/

	/************
	 * 政务中心 获取公文类型
	 * 
	 * ******************/
	public void getDocumetType() {
		PrintWriter out = null;
		try {
			out = getResponse().getWriter();
		} catch (IOException e1) {
			e1.printStackTrace();
			return;
		}
		try {
			out = getResponse().getWriter();
			String registItems = SystemParamConfigUtil
					.getParamValueByParam("registItems");
			String[] registItemArray = registItems.split(",");
			JSONArray jsonArray = new JSONArray();
			for (int i = 0; i < registItemArray.length; i++) {
				JSONObject jsonObj = new JSONObject();
				String itemId = registItemArray[i];
				jsonObj.put("id", itemId);
				// jsonObj.put("titleColName",
				// SystemParamConfigUtil.getParamValueByParam("registTitleColName"+i));
				WfItem wfitem = itemService.getItemById(itemId);
				if (null != wfitem) {
					jsonObj.put("typeName", wfitem.getVc_sxmc());
					String workFlowId = wfitem.getLcid();
					WfNode wfNode = workflowBasicFlowService
							.findFirstNodeId(workFlowId);
					if (null != wfNode) {
						jsonObj.put("nodeId", wfNode.getWfn_id());
					}
					WfMain wf_main = workflowBasicFlowService
							.getWfMainById(workFlowId);
					if (null != wf_main) {
						String name = tableInfoService
								.getTableAndColumnName(wf_main
										.getWfm_title_column());// tableName;columnName#tableName;columnName
						// 查找列名,用于页面判断
						String columnName = "";
						String[] names = name.split("#");
						for (String str : names) {
							columnName += str.split(";")[1] + ",";
						}
						if (!("").equals(columnName) && columnName.length() > 0) {
							columnName = columnName.substring(0,
									columnName.length() - 1);
						}
						jsonObj.put("titleColName", columnName);
					}
				} else {
					jsonObj.put("typeName", "");
				}
				jsonArray.add(jsonObj);
			}

			out.print("{\"success\":\"true\",\"data\":" + jsonArray.toString()
					+ "}");
		} catch (Exception e) {
			e.printStackTrace();
			out.print("{\"success\":\"false\"}");
		}
	}

	/**
	 * 得到我的请假单 列表
	 * 
	 * @return
	 */
	public String getMyLeaveList() {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		/******** 城管局定制 区分办结、等办；按事项id分类 *******/
		String statustype = getRequest().getParameter("statustype");
		String itemid = getRequest().getParameter("itemid");
		// 查询条件
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String status = getRequest().getParameter("status") == null ? ""
				: getRequest().getParameter("status");
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = "";
		if (CommonUtil.stringNotNULL(title)
				|| CommonUtil.stringNotNULL(itemName)
				|| CommonUtil.stringNotNULL(status)) {
			conditionSql = "and p.process_title like '%" + title
					+ "%' and i.vc_sxmc like '%" + itemName
					+ "%' and p.status like '%" + status + "%'";
		}
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));

		// List<Pending> list =
		// tableInfoService.getOverList(conditionSql,emp.getEmployeeGuid(),
		// Paging.pageIndex, Paging.pageSize);
		List<Pending> list = null;
		// 分为办理和已办结 加上 流程名
		if (!itemid.equals("") && itemid != null) {
			int count = tableInfoService.getCountOfMyLeave(conditionSql,
					emp.getEmployeeGuid(), itemid, statustype);
			Paging.setPagingParams(getRequest(), pageSize, count);
			list = tableInfoService.getMyLeaveList(conditionSql,
					emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize,
					itemid, statustype);

		}
		pendingService.initIsOvertime(list); // 设置是否超期提示
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("wfTitle", title);
		getRequest().setAttribute("itemName", itemName);
		getRequest().setAttribute("statustype", statustype);
		getRequest().setAttribute("itemid", itemid);
		return "myLeaveList";
	}

	// ------ add by yuxl 2013-12-05 ------
	// 判读办件是否已办
	public void nextStepIsOver() throws IOException {
		//需求：并行传阅办件新加撤回功能。校验：查出这一节点的process,判断IS_OVER如果都为OVER，则不能撤回
		String userId = getRequest().getParameter("userId");
		// 流程实例id
		String instanceId = getRequest().getParameter("instanceId");
		// 当前步骤id
		String stepIndex = getRequest().getParameter("stepIndex");
		String isBack = getRequest().getParameter("isBack");
		//当是并行传阅节点时，做校验，不是就走原逻辑
		if(("5").equals(isBack)){
			List<WfProcess> wfps = tableInfoService.findStepWfPListByUserId(instanceId,Integer.valueOf(stepIndex) ,"");
			String result = "no";
			for(WfProcess wp : wfps){
				if(("NOT_OVER").equals(wp.getIsOver())){
					result = "yes";
					break;
				}
			}
			getResponse().getWriter().write(result);
		}else{
			Employee emp = (Employee) getSession().getAttribute(
					MyConstants.loginEmployee);
			if(StringUtils.isNotBlank(userId)){
				emp = tableInfoService.findEmpByUserId(userId);
			}
			
			String currentIndex = Integer.valueOf(stepIndex) + 1 + "";
			if (emp.getIsAdmin() != null && emp.getIsAdmin().equals("1")) {
				// 管理员不用判读下一步是否 已办
				getResponse().getWriter().write("yes");
			} else {
				if (pendingService.stepIsOver(instanceId, currentIndex)) {
					// over
					getResponse().getWriter().write("no");
				} else {
					getResponse().getWriter().write("yes");
				}
			}
		}
	}

	// 办件回收操作
	public void recycleTask() {
		try {
			// 更新 t_wf_process
			// 流程实例id
			String instanceId = getRequest().getParameter("instanceId");
			// 当前步骤id
			String stepIndex = getRequest().getParameter("stepIndex");
			String isBack = getRequest().getParameter("isBack");
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = getRequest().getParameter("userId");
			if(null != emp){
				userId = emp.getEmployeeGuid();
			}
			
			
			//当是并行传阅节点时，走新逻辑，不是就走老逻辑收回办件
			if(("5").equals(isBack)){
				pendingService.recallDoFileForBXCY(instanceId, stepIndex,userId);
			}else{
				pendingService.recycleTask(instanceId, stepIndex);
			}
			//记录日志
			List<WfProcess> wfps = tableInfoService.findStepWfPListByUserId(instanceId,Integer.valueOf(stepIndex) ,userId);
			String wfProcessUid = wfps.get(0).getWfProcessUid();
			WfRecallLog recallLog = new WfRecallLog();
			recallLog.setInstanceId(instanceId);
			recallLog.setProcessId(wfProcessUid);
			recallLog.setRecallTime(new Date());
			recallLog.setUserId(userId);
			tableInfoService.addRecallLog(recallLog);
			getResponse().getWriter().write("yes");
		} catch (IOException e) {
			e.printStackTrace();
			try {
				getResponse().getWriter().write("no");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}

	// ------ end ------

	// ------ add by yuxl 2013-12-06 ------
	public void stepIsOver() {
		try {
			// 更新 t_wf_process
			// 流程实例id
			String instanceId = getRequest().getParameter("instanceId");
			// 当前步骤id
			String processId = getRequest().getParameter("processId");
			WfProcess ps = pendingService.getProcessByID(processId);
			if (ps != null) {
				String currentIndex = ps.getStepIndex().toString();
				if (pendingService.stepIsOver(instanceId, currentIndex)) {
					// over
					getResponse().getWriter().write("no");
				} else {
					getResponse().getWriter().write("yes");
				}
			} else {
				getResponse().getWriter().write("yes");
			}

		} catch (IOException e) {
			e.printStackTrace();
			try {
				getResponse().getWriter().write("no");
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}

	/**
	 * 得到html转成新的html，并转成pdf
	 * 
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("static-access")
	public String htmlToPath(String oldformId, String formValue,
			String instanceId, boolean isCyWF) throws Exception {
		// 查找html路径
		ZwkjForm form = zwkjFormService.getOneFormById(oldformId);
		getRequest().setAttribute("form", form);
		String allPath = "";
		String newHtmlPath = "";
		if (form != null && !stringIsNULL(form.getForm_htmlfilename())) {
			allPath = PathUtil.getWebRoot() + "form/html/"
					+ form.getForm_htmlfilename();
			getRequest().setAttribute("filename", form.getForm_htmlfilename());
			// 对象，其日历字段已由当前日期和时间初始化
			Calendar calendar = Calendar.getInstance();
			// 生成一个新的html,用于存放值和生成pdf
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_HTML_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

			newHtmlPath = pdfRoot+dstPath+ String.valueOf(calendar.getTimeInMillis()) + ".html";
		}
		// 从html流中获取所有的标签数据
		List<FormTagMapColumn> mapList = new ArrayList<FormTagMapColumn>();
		String htmlString = readHTML(allPath);// 源数据
		List<TagBean> tags = getTagFromHTMLString(htmlString);// 返回页面taglist
		if (tags != null) {
			for (int i = 0; i < tags.size(); i++) {
				FormTagMapColumn m = new FormTagMapColumn();
				m.setFormtagname(tags.get(i).getTagName());
				m.setFormtagtype(tags.get(i).getTagType());
				m.setSelectDic(tags.get(i).getSelect_dic());
				m.setListId(tags.get(i).getListId());
				m.setColumnCname(tags.get(i).getCommentDes());
				mapList.add(m);
			}
		}
		// 查询已有表单标签和字段对应关系数据,修改页面默认选中
		List<FormTagMapColumn> mapedList = zwkjFormService
				.getFormTagMapColumnByFormId(oldformId);
		// 对应页面标签和已有对应关系之间的差别，(html中增加或删除元素带来的影响)，页面只显示最新页面标签元素
		if (mapedList != null && mapedList.size() > 0) {
			for (int i = 0; i < mapList.size(); i++) {
				for (int j = 0; j < mapedList.size(); j++) {
					if (mapedList.get(j).getFormtagname()
							.equals(mapList.get(i).getFormtagname())) {
						mapList.set(i, mapedList.get(j));
						break;
					}
				}
			}
		}
		try {
			// 读取模板文件
			FileInputStream fileinputstream = new FileInputStream(allPath);
			// 下面四行：获得输入流的长度，然后建一个该长度的数组，然后把输入流中的数据以字节的形式读入到数组中，然后关闭流
			int length = fileinputstream.available();
			byte bytes[] = new byte[length];
			fileinputstream.read(bytes);
			fileinputstream.close();
			// 通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String,
			// 然后利用字符串的replaceAll()方法进行指定字符的替换,此处除了这种方法之外，应该还可以使用表达式语言${}的方法来进行。
			// String templateContent = new String(bytes,"UTF-8");
			String templateContent = "";
			templateContent = new String(bytes, "UTF-8");
			htmlString = new String(bytes, "UTF-8");

			templateContent =templateContent.replace("<html>", "<html><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />");

			// ------------------------------进行内容替换-------start----------------------------------------
			UrlCatcher u = new UrlCatcher();
			// 获取所有input类型标签
			String reg_input = "<INPUT[^<]*>";
			String[] inputs = u.getStringByRegEx(htmlString, reg_input, true);
			// 获取所有select类型标签
			String reg_select = "<SELECT[^<]*>";
			// String reg_select = "<SELECT.*?</select>";
			String[] selects = u.getStringByRegEx(htmlString, reg_select, true);
			// 获取所有textarea类型标签
			String reg_textarea = "<TEXTAREA[^<]*</TEXTAREA>";
			String[] textareas = u.getStringByRegEx(htmlString, reg_textarea,
					true);
			// 获取正文及附件类型的标签
			String reg_spanAtt = "<SPAN[^<]*</SPAN>";
			String[] spanAtts = u.getStringByRegEx(htmlString, reg_spanAtt,
					true);
			// 获取放意见标签的div
			String reg_divComment = "<trueway:comment[^<]*/>";
			String[] divComments = u.getStringByRegEx(htmlString,
					reg_divComment, true);
			// 把值填入html里
			String[] vals = formValue.split(";");
			String name = "";
			String value = "";
			int i = 0;// 跳出循环标志位
			for (String val : vals) {
				if (val.split(":").length > 1) {
					int index = val.indexOf(":") ;
					name = val.substring(0, index);
					value = val.substring(index+1, val.length());
				} else {
					name = val.split(":")[0];
					value = "";
				}
				if (!("").equals(value) && value != null) {
					for (FormTagMapColumn ftm : mapList) {
						// 取name相同的标签，填入值
						if ((ftm.getFormtagname().toUpperCase()).equals(name
								.toUpperCase())) {
							if (("text").equals(ftm.getFormtagtype())) {
								if (inputs != null && inputs.length > 0) {
									for (int j = 0; j < inputs.length; j++) {
										// 利用正则表达式获取表单元素名称
										String reg_name = " name=\""
												+ name.toLowerCase() + "\"";
										if (inputs[j].indexOf(reg_name) > 0) {
											templateContent = templateContent
													.replace(
															inputs[j],
															"<span name='"
																	+ name.toLowerCase()
																	+ "'>"
																	+ value
																	+ "</span>");
											i++;
											break;
										}
									}
									if (i > 0) {
										break;
									}
								}
							} else if (("checkbox")
									.equals(ftm.getFormtagtype())) {
								if (inputs != null && inputs.length > 0) {
									String[] values = value.split("\\^");
									for (String valstr : values) {
										// 利用正则表达式获取表单元素名称
										String reg_name = " value=\"" + valstr
												+ "\"";
										for (int j = 0; j < inputs.length; j++) {
											if (inputs[j].indexOf(reg_name) > 0) {
												templateContent = templateContent
														.replace(
																inputs[j],
																"<input type=\"checkbox\" name='"
																		+ name.toLowerCase()
																		+ "' checked=\"checked\" value=\""
																		+ valstr
																		+ "\"/>");
												i++;
												break;
											}
										}
									}
									if (i > 0) {
										break;
									}
								}
							} else if (("radio").equals(ftm.getFormtagtype())) {
								if (inputs != null && inputs.length > 0) {
									for (int j = 0; j < inputs.length; j++) {
										// 利用正则表达式获取表单元素名称
										String reg_name = " value=\"" + value
												+ "\"";
										if (inputs[j].indexOf(reg_name) > 0) {
											templateContent = templateContent
													.replace(
															inputs[j],
															"<input type=\"radio\" checked=\"checked\" name='"
																	+ name.toLowerCase()
																	+ "' value=\""
																	+ value
																	+ "\"/>");
											i++;
											break;
										}
									}
									if (i > 0) {
										break;
									}
								}
							} else if (("select").equals(ftm.getFormtagtype())) {
								if (selects != null && selects.length > 0) {
									for (int j = 0; j < selects.length; j++) {
										// 利用正则表达式获取表单元素名称
										String reg_name = " name=\""
												+ name.toLowerCase() + "\"";
										if (selects[j].indexOf(reg_name) > 0) {
											// 需要html中的标签里有zname属性否则下面得到的content将不对
											// String cname =
											// ftm.getColumnCname();
											String cname = ftm.getSelectDic();// ----城管局修改
											// 查询字典表，得到下拉框的内容
											String content = selectDicValues(
													oldformId, value, cname);
											String contentValue = value;
											if (!("").equals(content)) {
												contentValue = content;
											}
											// templateContent =
											// templateContent.replace(selects[j],"<select name='"+name+"'><option selected='selected'>"+contentValue+"</option>");
											templateContent = templateContent
													.replace(
															selects[j],
															"<span>"
																	+ contentValue
																	+ "</span><select name='"
																	+ name.toLowerCase()
																	+ "' style=\"display:none\"><option selected='selected'>"
																	+ contentValue
																	+ "</option>");
											i++;
											break;
										}
									}
									if (i > 0) {
										break;
									}
								}
							} else if (("textarea")
									.equals(ftm.getFormtagtype())) {
								if (textareas != null && textareas.length > 0) {
									for (int j = 0; j < textareas.length; j++) {
										// 利用正则表达式获取表单元素名称
										String reg_name = " name=\""
												+ name.toLowerCase() + "\"";
										if (textareas[j].indexOf(reg_name) > 0) {
											templateContent = templateContent
													.replace(
															textareas[j],
															"<textare name='"
																	+ name.toLowerCase()
																	+ "'>"
																	+ value
																	+ "</textarea>");
											i++;
											break;
										}
									}
								}
								if (i > 0) {
									break;
								}
							}
						}
					}
				}
			}
			for (FormTagMapColumn ftm : mapList) {
				if (("attachment").equals(ftm.getFormtagtype())) {
					if (spanAtts != null && spanAtts.length > 0) {
						for (int j = 0; j < spanAtts.length; j++) {
							// 利用正则表达式获取表单元素名称
							String reg_name = " id=\""
									+ ftm.getFormtagname().toLowerCase()
									+ "show\"";
							// 查找对应的附件
							List<SendAttachments> attZwList = attachmentService
									.findAllSendAtts(instanceId
											+ "att"
											+ ftm.getFormtagname()
													.toLowerCase(),null);
							List<SendAttachments> attFjList = attachmentService
									.findAllSendAtts(instanceId
											+ ftm.getFormtagname()
													.toLowerCase(),null);
							List<SendAttachments> attList = new ArrayList<SendAttachments>();
							if (attZwList.size() != 0 && attZwList != null) {
								attList = attZwList;
							} else {
								attList = attFjList;
							}
							// 获取附件的名字
							String attNames = "";
							for (SendAttachments sa : attList) {
								attNames += sa.getFilename() + ",";
							}
							if (attNames != null && !("").equals(attNames)) {
								attNames = attNames.substring(0,
										attNames.length() - 1);
							}
							if (spanAtts[j].indexOf(reg_name) > 0) {
								templateContent = templateContent.replace(
										spanAtts[j], "<span id='"
												+ ftm.getFormtagname()
														.toLowerCase() + "'>"
												+ attNames + "</span>");
								break;
							}
						}
					}
				} else if (("comment").equals(ftm.getFormtagtype())) {
					if (divComments != null && divComments.length > 0) {
						for (int k = 0; k < divComments.length; k++) {
							// 获取一类意见的简称
							String oneCommentName = ftm.getFormtagname()
									.toLowerCase();
							// 获取一类意见
							List<Comment> commentList = commentService
									.findByInstanceId(instanceId, instanceId
											+ oneCommentName);
							if (divComments[k].indexOf(oneCommentName) > 0) {
								StringBuffer sb = new StringBuffer();
								if (commentList.size() > 0
										&& commentList != null) {
									sb.append("<table style=\"border-collapse:collapse;border-spacing:0;\" cellspace=\"0\" cellpadding=\"0\" width=\"90%\">");
									for (Comment comment : commentList) {
										sb.append("<tr><td align=\"left\" colspan=\"2\">"
												+ comment.getContent()
												+ "</td></tr>");
										sb.append("<tr><td style=\"width:70%;\"></td><td style=\"text-align:center;\">"
												+ comment.getUserName()
												+ "</td></tr>");
										sb.append("<tr><td style=\"width:70%;\"></td><td style=\"text-align:center;\">"
												+ comment.getSigndate()
														.toString()
														.substring(0, 10)
												+ "</td></tr>");
									}
									sb.append("</table>");
								}
								templateContent = templateContent.replace(
										divComments[k], sb.toString());
								break;
							}
						}
					}

				}
			}
			// ----------对剩下的input框置成空,只显示空白----------
			String[] inputExists = u.getStringByRegEx(templateContent,
					reg_input, true);
			if (inputExists != null && inputExists.length > 0) {
				for (int k = 0; k < inputExists.length; k++) {
					if (inputExists[k].indexOf("checkbox") < 0
							&& inputExists[k].indexOf("radio") < 0
							&& inputExists[k].indexOf("hidden") < 0) {
						templateContent = templateContent.replace(
								inputExists[k], "<span>&nbsp;</span>");
					}
				}
			}
			// ----------对剩下的textarea框置成空,只显示空白----------
			String[] textareaExists = u.getStringByRegEx(htmlString,
					reg_textarea, true);
			if (textareaExists != null && textareaExists.length > 0) {
				for (int kk = 0; kk < textareaExists.length; kk++) {
					if (textareaExists[kk].indexOf("id") > 0) {
						templateContent = templateContent.replace(
								textareaExists[kk], "<span>&nbsp;</span>");
					}
				}
			}
			// 添加传阅名单
			if (isCyWF == true) {
				List<Comment> commentList = commentService
						.findCommentsByInstanceId(instanceId);
				// 传阅人员名单
				List<WfCyName> wcnPersonList = tableInfoService
						.findWfCyPersonNameByInstanceId(instanceId);
				// 传阅处室名单
				List<WfCyName> wcnOfficeList = tableInfoService
						.findWfCyOfficeNameByInstanceId(instanceId);

				// 解析html
				org.jsoup.nodes.Document doc = Jsoup.parse(templateContent
						.toString());
				// 让table显示
				org.jsoup.nodes.Element tr = doc.getElementById("cy");
				tr.removeAttr("style");
				tr.attr("display", "block");
				// 获取指定table的tbody
				Elements trs = doc.getElementById("cytable").select("tbody");

				// 比较大小
				int size = 0;
				if (wcnOfficeList.size() >= wcnPersonList.size()) {
					size = wcnOfficeList.size();
				} else {
					size = wcnPersonList.size();
				}
				for (int j = 0; j < size; j++) {
					// 人员和处室名字
					String person = "&nbsp;";
					String office = "&nbsp;";
					if (wcnPersonList.size() > j) {
						person = wcnPersonList.get(j).getEmployeeName();
					}
					if (wcnOfficeList.size() > j) {
						office = wcnOfficeList.get(j).getDeptName();
					}
					// 人员和处室时间
					String personSigndate = "&nbsp;";
					String officeSigndate = "&nbsp;";
					if (commentList.size() > 0
							&& !("").equals(commentList.size())) {
						for (Comment comment : commentList) {
							if (!("&nbsp;").equals(person)) {
								if (wcnPersonList.get(j).getEmployeeId()
										.equals(comment.getUserId())) {
									personSigndate = comment.getSigndate() + "";
								}
								if (!("&nbsp;").equals(personSigndate)) {
									personSigndate = personSigndate.substring(
											0, personSigndate.length() - 2);
								}
							}
							String deptName = tableInfoService
									.findDeptNameByUserId(comment.getUserId());
							if (!("").equals(deptName) && deptName != null
									&& deptName.equals(office)) {
								officeSigndate = comment.getSigndate() + "";
								if (!("&nbsp;").equals(officeSigndate)) {
									officeSigndate = officeSigndate.substring(
											0, officeSigndate.length() - 2);
								}
							}
						}
					}
					trs.append("<tr><td>" + person + "</td><td>"
							+ personSigndate + "</td><td>" + office
							+ "</td><td>" + officeSigndate + "</td></tr>");
				}
				templateContent = doc.html();
			}
			// ----------------------------------进行内容替换--------end----------------------------------------

			// 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。
			// byte tag_bytes[] = templateContent.getBytes();
			byte[] tag_bytes = null;
			tag_bytes = templateContent.getBytes("utf-8");
			// System.out.println(tag_bytes);
			// byte tag_bytes[] = templateContent.getBytes("utf-8");
			FileOutputStream fileoutputstream = new FileOutputStream(
					newHtmlPath);// 建立文件输出流
			OutputStreamWriter osw = new OutputStreamWriter(fileoutputstream,
					"UTF-8");
			osw.write(templateContent);
			osw.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// pdf地址--得到的地址会在前面加个"/",不懂,有待检查
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

		String pdfFormPath = pdfRoot+dstPath+newHtmlPath.substring(newHtmlPath.lastIndexOf("/"), newHtmlPath.length() - 4)+".pdf";
		// html转成pdf
		HtmlToPdf htp = new HtmlToPdf();
		htp.htmlToPdf(newHtmlPath, pdfFormPath);
		
		String filePathOfSys = SystemParamConfigUtil.getParamValueByParam("filePath");

		// 获取正文附件地址 doc,ceb
		List<SendAttachments> sattList = attachmentService
				.findAllSendAtts(instanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService
				.findAllSendAtts(instanceId + ATT_FJSUFFIX_NAME,null);
		// 合并后的pdf地址
		String saveMergePath = pdfFormPath;
		String wordPath = "";
		String cebPath = "";
		String pdfPath="";
		ToPdfUtil pdfUtil = new ToPdfUtil();
		if (sattList.size() != 0 && !("").equals(sattList)) {
			for (SendAttachments sat : sattList) {
				//正文中存在同名ceb则不合入ceb
				boolean isSatt_ceb = pdfUtil.listIsHaveSameDocName(sattList,sat);
				
				if (("doc").equalsIgnoreCase(sat.getFiletype())) {
					wordPath += docToPdf(sat.getLocalation()) + ",";
				}else if (("ceb").equals(sat.getFiletype()) && isSatt_ceb) {
					CebToPdf cp = new CebToPdf();
					// 文件路径
					cp.cebToPdf(pdfRoot +sat.getLocalation());
					cebPath += pdfRoot+sat.getLocalation().substring(0,sat.getLocalation().length() - 3) + "pdf,";
				}else if (("pdf").equalsIgnoreCase(sat.getFiletype())){
					if(new File(filePathOfSys + sat.getLocalation()).exists()){
						pdfPath += filePathOfSys+sat.getLocalation() + ",";
					}else{
						pdfPath += pdfRoot+sat.getLocalation() + ",";
					}
				}
			}
		}
		if (sattExtList.size() != 0 && !("").equals(sattExtList)) {
			for (SendAttachments satExt : sattExtList) {
				//附件中存在同名ceb则不合入ceb
				boolean isSattExt_ceb = pdfUtil.listIsHaveSameDocName(sattExtList,satExt);
				
				if (("doc").equalsIgnoreCase(satExt.getFiletype())) {
					wordPath += docToPdf(satExt.getLocalation()) + ",";
				}else if (("ceb").equals(satExt.getFiletype())&& isSattExt_ceb) {
					CebToPdf cp = new CebToPdf();
					// 文件路径
					cp.cebToPdf(pdfRoot +satExt.getLocalation());
					cebPath += pdfRoot+satExt.getLocalation().substring(0,satExt.getLocalation().length() - 3) + "pdf,";

				}else if (("pdf").equalsIgnoreCase(satExt.getFiletype())){
					if(new File(filePathOfSys + satExt.getLocalation()).exists()){
						pdfPath += filePathOfSys+satExt.getLocalation() + ",";
					}else{
						pdfPath += pdfRoot+satExt.getLocalation() + ",";
					}
				}
			}
		}
		if (wordPath != null && !("").equals(wordPath)) {
			wordPath = wordPath.substring(0, wordPath.length() - 1);
		}
		if (cebPath != null && !("").equals(cebPath)) {
			cebPath = cebPath.substring(0, cebPath.length() - 1);
		}
		if (pdfPath != null && !("").equals(pdfPath)) {
			pdfPath = pdfPath.substring(0, pdfPath.length() - 1);
		}
		// 合并正文附件的pdf和表单的pdf
		MergePdf mp = new MergePdf();
		String fileStrs = pdfFormPath + "," + wordPath + "," + cebPath+","+pdfPath;
		String[] files = null;
		if (!("").equals(fileStrs) && fileStrs.length() > 0) {
			files = new String[fileStrs.split(",").length];
			for (int i = 0; i < fileStrs.split(",").length; i++) {
				files[i] = fileStrs.split(",")[i];
			}
			saveMergePath = pdfFormPath.substring(0, pdfFormPath.length() - 4)
					+ "merge" + ".pdf";
			mp.mergePdfFiles(files, saveMergePath);
		}

		return saveMergePath;
	}

	/**
	 * 获取待接收的信息
	 * 
	 * @return
	 */
	public String getDoFileReceiveList(){
		String status = getRequest().getParameter("status");
		String itemStatus = getRequest().getParameter("itemStatus");
		String wfTitle = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String lwdw = getRequest().getParameter("lwdw");
		
		String lwh = getRequest().getParameter("lwh");
		String startTime = getRequest().getParameter("startTime");
		String endTime = getRequest().getParameter("endTime");
		
		String state = getRequest().getParameter("state");
		Map<String, String> searchmap = new HashMap<String, String>();
		searchmap.put("wfTitle", wfTitle);
		searchmap.put("itemName", itemName);
		searchmap.put("lwh", lwh);
		searchmap.put("startTime", startTime);
		searchmap.put("endTime", endTime);
		searchmap.put("lwdw", lwdw);
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();	//人员id
		Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
		getRequest().setAttribute("deptName", dep.getDepartmentName());
		String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
		String linkDeptIds = dep.getDepartmentGuid();
		/*	Department super_dep = departmentService.findDepartmentById(departId);*/
		if (CommonUtil.stringNotNULL(linkDeptIds)) {  
			linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
		}
		linkDeptIds += ",'"+departId+"'";
		/*if(super_dep!=null){
			if(super_dep.getSuperiorGuid()!=null && !super_dep.getSuperiorGuid().equals("")){
				linkDeptIds += ",'"+super_dep.getSuperiorGuid()+"'";
			}
		}*/
		searchmap.put("departId", linkDeptIds);
		searchmap.put("state", state);
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
		int count = tableInfoService.getDoFileReceiveCount(userId,Integer.parseInt(status), searchmap);
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<DoFileReceive> list = tableInfoService.getDoFileReceiveList(
				userId, Paging.pageIndex, Paging.pageSize,Integer.parseInt(status), searchmap);
		//down地址
		String downloadUrl = SystemParamConfigUtil.getParamValueByParam("truedownloadUrl");
		getRequest().setAttribute("filedownloadUrl",  SystemParamConfigUtil.getParamValueByParam("filedownloadUrl"));
		getRequest().setAttribute("downloadUrl", downloadUrl);

		getRequest().setAttribute("list", list);
		getRequest().setAttribute("status", status);
		getRequest().setAttribute("itemStatus", itemStatus);
		getRequest().setAttribute("wfTitle", wfTitle);
		getRequest().setAttribute("itemName", itemName);
		
		getRequest().setAttribute("lwh", lwh);
		getRequest().setAttribute("startTime", startTime);
		getRequest().setAttribute("endTime", endTime);
		getRequest().setAttribute("lwdw", lwdw);
		getRequest().setAttribute("state", state);
		String zfbDepId = SystemParamConfigUtil.getParamValueByParam("zfbDepId");
		if(zfbDepId!=null && (zfbDepId.equals(dep.getDepartmentGuid())
				|| zfbDepId.equals(departId))){
			//jrdb	进入待办
			getRequest().setAttribute("jrdb", true);
		}else {
			getRequest().setAttribute("jrdb", false);
		}
		getRequest().setAttribute("jrdb", true);
		List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
		getRequest().setAttribute("itemList", itemList);
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		String founderSealUrl = SystemParamConfigUtil.getParamValueByParam("founderSealUrl");
		getRequest().setAttribute("founderSealUrl", founderSealUrl);
	
		if (status != null && status.equals("1")) {
			String type = getRequest().getParameter("type");
			if(CommonUtils.isNotBlank(type)&&type.equals("1")){
				return "ToSearchReceiveList";
			}
			return "toDoFileReceivedList";
		}if (status != null && status.equals("3")) {
			return "toDoFileRecList";
		}
		return "toDoFileReceiveList";
	}
	
	
	/**
	 * 
	 * 描述：获取弹性表单的页面元素
	 * 作者:蔡亚军
	 * 创建时间:2016-12-8 上午9:21:32
	 */
	public void  getFlexibleFormValue(){
		// 用户id
		String userId = getRequest().getParameter("userId");
		// 流程id
		String workflowid = getRequest().getParameter("workflowId");
		// 节点id
		String nodeId = getRequest().getParameter("nodeId");
		// 步骤id
		String processId = getRequest().getParameter("processId");
		// 流程实例id
		String instanceId = getRequest().getParameter("instanceId");
		// 表单id
		String formId = getRequest().getParameter("formId");
		String status = getRequest().getParameter("status");

		//旧的表单id
		String oldFormId = getRequest().getParameter("oldFormId");
		String params = getRequest().getParameter("params");
		String isOver = getRequest().getParameter("isOver");
		List<TrueformData> outList = getTrueformdata("out",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", params, "", isOver);
		List<TrueformData> trueFormList = new ArrayList<TrueformData>();
		for (TrueformData trueformData : outList) {
			if(StringUtils.isNotBlank(isOver) && isOver.equals("1")){
				trueformData.setIsWrite("0");
			}
			trueFormList.add(trueformData);
		}
		String sb = "";
		HttpServletResponse response = getResponse();
		response.setCharacterEncoding("utf-8");
		PrintWriter out;
		try {
			out = getResponse().getWriter();
			FlexibleFormJson json = new FlexibleFormJson(trueFormList);
			if(StringUtils.isNotBlank(status) && status.equals("6")){
				String toUserName = getRequest().getParameter("toUserName");
				String title = getRequest().getParameter("title");
				String valueObj = SystemParamConfigUtil.getParamValueByParam("valueJson");
				if(StringUtils.isNotBlank(valueObj)){
					JSONObject valueJson = JSONObject.fromObject(valueObj);
					valueJson.put(valueJson.getString("title"), title);
					valueJson.put(valueJson.getString("username"), toUserName);
					JSONObject outObj = setValue(JSONObject.fromObject(json), valueJson, "1");
					sb = outObj.toString();
				}else{
					sb = JSONObject.fromObject(json).toString();
				}
			}else{
				sb = JSONObject.fromObject(json).toString();
			}
			out.print(sb);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 描述： web端显示表单内容
	 * 作者:蔡亚军
	 * 创建时间:2015-7-8 下午3:06:29
	 */
	public void getFormValueAndLocationOfWeb() {
		// 数据字典获取的表字段值
		HashMap<String,String> map = new HashMap<String,String>();
		String processId_dic = getRequest().getParameter("dicValue");
		String modId = getRequest().getParameter("modId");
		String dataDicId = getRequest().getParameter("dicId");
		String matchId = getRequest().getParameter("matchId");
		String status = getRequest().getParameter("status");
		String dicValue = "";
		if(CommonUtil.stringNotNULL(modId)&&CommonUtil.stringNotNULL(dataDicId)&&CommonUtil.stringNotNULL(matchId)){
			map.put("id", matchId);
			DataDicMatch matchOld = dataCenterService.getDataDicMatchById(map);
			String tableName_local = "";
			if(null!=matchOld){
				tableName_local = matchOld.getTableCode();
			}
			map.put("tableName_local", tableName_local);
			map.put("notNull", "0");//查询columnName_local不为null
			map.put("dataDicId", dataDicId);
			map.put("is_Search", "1");
			map.put("matchId", matchId);
			List<ColumnMapColumn> cLists = dataCenterService.getColumnMapColumnList(map);//第一行列表市
			String columnsql = "";
			String tablesql = "";
			List<String> hLists = new ArrayList<String>();//横向
			List<String> hEnLists = new ArrayList<String>();//横向
			int k = 0;//记录clob字段所在下标
			String clobIndex = "";//记录clob字段所在下标
			String dateIndex = "";//记录时间字段所在下标
			String tableName = "";//引用表表名
			if(null!=cLists&&cLists.size()>0){
				for(ColumnMapColumn c:cLists){
					hLists.add(c.getName_local());
					hEnLists.add(c.getColumnName_local());
					columnsql += c.getColumnName() + ",";
					tablesql = c.getTableName();
					if("1".equals(c.getColumnType())){//字段类型为clob字段
						clobIndex += k + ",";
					}else if("2".equals(c.getColumnType())){
						dateIndex += k + ",";
					}
					k++;
					tableName = c.getTableName();
				}
				if(CommonUtil.stringNotNULL(columnsql)&&columnsql.length()>0){
					columnsql = columnsql.substring(0,columnsql.length()-1);
				}
				if(CommonUtil.stringNotNULL(clobIndex)&&clobIndex.length()>0){
					clobIndex = clobIndex.substring(0,clobIndex.length()-1);
				}
			}
			map.put("clobIndex", clobIndex);
			map.put("tablesql", tablesql);
			map.put("columnsql", columnsql);
			map.put("modId", modId);
			List<Object[]> sLists = null;
			if(CommonUtil.stringNotNULL(columnsql)){
				//分页相关，代码执行顺序不变
				map.put("processId_dic", processId_dic);
				map.put("tableName", tableName);
				sLists = dataCenterService.getDataFromDataSource(map,null, null, null);//获取的数据列表
			}
			getRequest().setAttribute("hLists", hLists);
			boolean isDate = false;
			SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat sf2 = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
			String primaryId = dataCenterService.getPrimaryIdByTable(tableName,modId);
			if(CommonUtil.stringIsNULL(primaryId)){
				primaryId = SystemParamConfigUtil.getParamValueByParam("primaryId");
			}
			if(CommonUtil.stringIsNULL(primaryId)){
				primaryId = "Id";
			}
			hEnLists.add(primaryId);
			if(null!=sLists&&sLists.size()>0){
				for(Object[] o:sLists){
					Object[] o_new = new Object[o.length+2];
					for(int i=0;i<o.length;i++){
						String[] dateIndexs = dateIndex.split(",");
						if(null != dateIndexs && dateIndexs.length>0){
							for (String s : dateIndexs){
								if(s.equals(i+"")){
									isDate = true;
								}
							}
						}
						if(isDate){
							try {
								o_new[i]=sf.format(sf2.parse(o[i]==null?"":o[i].toString()));
							} catch (ParseException e) {
								e.printStackTrace();
							}
						}else{
							o_new[i]=o[i];
						}
						isDate = false;
					}
					String value="";
					for(int i=0;i<o.length;i++){
						String s = hEnLists.get(i);
						String str = o[i]==null?"":o[i].toString();
						if(CommonUtil.stringIsNULL(str) || "null".equalsIgnoreCase(str)){
							str = "";
						}
						value += s + "###" + str + ",";
					}
					if(CommonUtil.stringNotNULL(value)&&value.length()>0){
						value = value.substring(0,value.length()-1);
					}
					dicValue = value;
				}
			}
		}
		
		// 用户id
		String userId = getRequest().getParameter("userId");
		// 流程id
		String workflowid = getRequest().getParameter("workflowId");
		// 节点id
		String nodeId = getRequest().getParameter("nodeId");
		// 步骤id
		String processId = getRequest().getParameter("processId");
		// 流程实例id
		String instanceId = getRequest().getParameter("instanceId");
		// 表单id
		String formId = getRequest().getParameter("formId");
		//旧的表单id
		String oldFormId = getRequest().getParameter("oldFormId");
		
		String no = getRequest().getParameter("no");
		String params =  getRequest().getParameter("params");
		
		String origProcId = getRequest().getParameter("origProcId");//原办件最后一步历程ID
		//获取原办件的表单值
		String origValue = getOrigFormValue(origProcId, instanceId);
		
		String webId = getDocNumWebId("web", "");
		List<Trueform> trueList = new ArrayList<Trueform>();
		if(CommonUtil.stringNotNULL(dicValue)){
			String[] dicValues = dicValue.split(",");
			List<Object[]> lists = new ArrayList<Object[]>();
			for(String s:dicValues){
				String [] ss = s.split("###");
				Object[] o = new Object[2];
				for(int i=0;i<ss.length;i++){
					o[i] = ss[i];
				}
				lists.add(o);
			}
			List<Trueform> trueList1 = getFormValAndLocation("in",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", no, params, webId);
			for(Trueform t:trueList1){
				for(Object[] o:lists){
					if((t.getColumnName()==null?"":t.getColumnName()).equalsIgnoreCase(o[0]==null?"":o[0].toString())){
						t.setValue(o[1]==null?"":o[1].toString());
					}
				}
				trueList.add(t);
			}
		}else if(CommonUtil.stringNotNULL(origValue)){//从原办件带值
			String[] origValues = origValue.split(";");
			List<Object[]> lists = new ArrayList<Object[]>();
			for(String s:origValues){
				String [] ss = s.split(":");
				Object[] o = new Object[2];
				for(int i=0;i<ss.length;i++){
					o[i] = ss[i];
				}
				lists.add(o);
			}
			List<Trueform> trueList1 = getFormValAndLocation("in",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", no, params, webId);
			for(Trueform t:trueList1){
				for(Object[] o:lists){
					if((t.getColumnName()==null?"":t.getColumnName()).equalsIgnoreCase(o[0]==null?"":o[0].toString())){
						t.setValue(o[1]==null?"":o[1].toString());
					}
				}
				trueList.add(t);
			}
		}else{
			trueList = getFormValAndLocation("in",userId, workflowid, nodeId, processId, instanceId, formId,oldFormId,"", no, params, webId);
		}
		
		String sb = "";
		HttpServletResponse response = getResponse();
		response.setCharacterEncoding("utf-8");
		// 打开流
		PrintWriter out;
		try {
			out = getResponse().getWriter();
			WebJson json = new WebJson(trueList);
			if(StringUtils.isNotBlank(status) && status.equals("6")){
				String toUserName = getRequest().getParameter("toUserName");
				String title = getRequest().getParameter("title");
				String valueObj = SystemParamConfigUtil.getParamValueByParam("valueJson");
				if(StringUtils.isNotBlank(valueObj)){
					JSONObject valueJson = JSONObject.fromObject(valueObj);
					valueJson.put(valueJson.getString("title"), title);
					valueJson.put(valueJson.getString("username"), toUserName);
					JSONObject outObj = setValue(JSONObject.fromObject(json), valueJson, "0");
					sb = outObj.toString();
				}else{
					sb = JSONObject.fromObject(json).toString();
				}
			}else{
				sb = JSONObject.fromObject(json).toString();
			}
			out.print(sb);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * 描述：根据类型获取webId,   web端,取出session中的内容;    移动端: 逆向递归获取webId
	 * @param type
	 * @param userId
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-12-26 下午2:38:04
	 */
	public String getDocNumWebId(String type, String userId){
		String webId = "";
		String depId = "";
		if(type!=null && type.equals("web")){
			 depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
		}else{
			if(userId!=null && !userId.equals("")){
				Employee emp = employeeService.findEmployeeById(userId);
				String departmentId = emp.getDepartmentGuid();
				depId = departmentService.findDepIds(departmentId);
			}
		}
		if(depId!=null && !depId.equals("")){
			String[] depIds = depId.split(",");
			int length = (depIds!=null)?depIds.length:0;
			if(length>=2){
				webId = depIds[length-2];
			}
			if(webId!=null && !webId.equals("")){
				webId = webId.substring(1, webId.length()-1);
			}
		}
		return webId;
	}
	/**
	 * 表单元素
	 * 
	 * @param userId
	 * @param workflowid
	 * @param nodeId
	 * @param processId
	 * @param instanceId
	 * @param formId
	 * @return
	 */
	public List<Trueform> getFormValAndLocation(String server ,String userId,String workflowid,
			String nodeId,String processId,String instanceId,String formId,String oldFormId,
			String value, String no ,String params, String webId){
		// 获取 location json
		if(formId==null || formId.equals("") || formId.equals("null")){
			return null;
		}
		ZwkjForm form = zwkjFormService.getOneFormById(formId);
		String locations = form.getElementLocationJson();
		JSONArray jsonArray = JSONArray.fromObject(locations);
		// 部门id
		String deptId = "";
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if (emp != null && !("").equals(emp)) {
			deptId = emp.getDepartmentGuid();
		}
		if (deptId == null || ("").equals(deptId)) {
			emp = tableInfoService.findEmpByUserId(userId);
			deptId = emp.getDepartmentGuid();
		}
		// 根据部门id 获取 大部门id
		if(deptId != null || !("").equals(deptId)){
			Department dep = departmentService.findDepartmentById(deptId);
			if(dep != null&&webId.equals("") ){
				webId = dep.getSuperiorGuid();
			}
		}
		WfProcess process = tableInfoService.getProcessById(processId);
		if (process != null && CommonUtil.stringNotNULL(process.getEntrustUserId())) { // 如果有委托，权限使用委托人的权限，传入委托人id
			userId = process.getEntrustUserId();
		}

		// 用户权限
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(userId, deptId, nodeId, workflowid);// linkPhone=1,text
		// 获取表单对应关系(主要是获取中文名)
		List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
		// TODO----------支持一个表，后期需要修改
		// List<WfFieldInfo> wfFieldInfoList =
		// zwkjFormService.findWfFileldInfoByTableName(list.get(0).getTablename());

		// 表单元素的list
		List<Trueform> trueList = new ArrayList<Trueform>();

		// 获取元素的值---------------start-------------------
		WfNode wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		// 当前节点所绑定的表单Id
		String newFormId = wfNode.getWfn_defaultform();
		// 父流程的f_formId
		String midInstanceId = instanceId;
		
		//赋值--为下面查询父表单的值
		if(process != null){
			//主到子流程的第一步时
			if(("1").equals(process.getIsChildWf()) && process.getStepIndex() == 1 && process.getDoType() != null && process.getIsManyInstance().equals("1")){
				List<WfProcess> processList = tableInfoService.getProcessList(process.getfInstancdUid());
				oldFormId = processList.get(0).getFormId();
				instanceId = process.getfInstancdUid();
			}
		}
		// 是否是子流程的第一步
		String isFirstChildWf = "";
		if (process == null ||(process.getStepIndex() == 1 && !("").equals(process.getDoType()) && ("1").equals(process.getIsChildWf()))) {
			isFirstChildWf = "true";
		}
		// *********************************子流程不换表单可用，换表单仍需修改*********************************
		// 查询表单的值--主流程到子流程过程---换表单
		if(process != null && process.getIsManyInstance() != null && !("").equals(process.getIsManyInstance())){
			value = this.saveForm(oldFormId, 2,midInstanceId,newFormId,null,workflowid,instanceId,isFirstChildWf,"");
			if(value==null || value.equals("")){
				value = this.saveForm(oldFormId, 2,instanceId,newFormId,null,workflowid,instanceId,isFirstChildWf,"");
			}
		}else{
			// 查询表单的值--都在主流程里---换表单
			try {
				value = this.saveForm(oldFormId, 2,instanceId,newFormId,null,workflowid,"",isFirstChildWf,"");
			} catch (Exception e) {
				//第一次打开子流程的内部流程，取中间流程的值--当前找不到抛异常取父节点的值
				if(process!= null){
					value = "";
				}
			}
		}
		
		// 字典表
		Map<String, String> select_old = formAction.selectDicValuesForMobile(formId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
		Map<String, String>  dicMap = new HashMap<String, String>();
		Map<String, String> selects = new HashMap<String, String>();
		if(params!=null && !params.equals("")){
			String[] param = params.split("[*][*][*]");
			for(int i=0; i<param.length; i++){
				String par = param[i];
				if(par!=null && !par.equals("")){
					String[] parval = par.split("[*][*]");
					if(parval!=null && parval.length>=2){
						boolean isCheckBox = false;
						for(String key : select_old.keySet()){
							if(key!=null && key.equals(parval[0])){	//匹配到字典表
								String vba = parval[1];
								if(vba!=null && !vba.equals("")){
									String[] vab = vba.split(",");
									String content = "";
									for(int j=0; j<vab.length; j++){
										content += vab[j]+",";
									}
									if(content!=null && content.length()>0){
										content = content.substring(0, content.length()-1);
									}
									dicMap.put(key, content+"[--]"+content);
								}
								isCheckBox = true;
							}
						}
						if(!isCheckBox){
							value += parval[0]+":"+parval[1]+";";
						}
					}
				}
			}
		}
		
		//map去除旧数据,添加新的dic
		if(dicMap!=null && dicMap.size()>0){
			//遍历dicMap
			for(String key : dicMap.keySet()){
				selects.put(key, dicMap.get(key));
			}
			//遍历原有的字典表选项
			for(String key : select_old.keySet()){
				if(!selects.containsKey(key)){
					selects.put(key, select_old.get(key));
				}
			}
		}else{
			selects = select_old;
		}
		 //是否存在待收里面
	    boolean isExistReceiveList = false;
	    Integer stepIndex = 0;
	    if(process!=null){
	    	  DoFileReceive dfr = tableInfoService.getDoFileReceive(process.getWfInstanceUid());
	  	    if(dfr!= null){
	  	    	isExistReceiveList = true;
	  	    }
	  	  stepIndex = process.getStepIndex();
	    }
	  
		
		if(stepIndex == 1 && isExistReceiveList){
		    //默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.getSwByInstanceId(process.getWfInstanceUid());
			String docValue = "";
		    //查找对应关系,入库收文表
			for (FormTagMapColumn ft : list) {
				String tagValue = "";
				if(("lwbt").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("yfdw").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("lwdw").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("fs").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("lwh").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("gwlx").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("swsj").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}else if(("fwsj").equals(ft.getDocColumn())){
					tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
				}
				if(!tagValue.equals("")){
					docValue +=  ft.getAssignColumnName() +":"+  tagValue +";";
				}
				}
				value = docValue + value;
		    }
		String fwDepName = SystemParamConfigUtil.getParamValueByParam("fwDepName");
		// 获取元素的值---------------end-------------------
		// 字典表
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---VC_SQR:0,text
				if (entry.getValue().split(",")[0].equals("2")
						&& !entry.getValue().split(",")[1].equals("hidden")
						&& !entry.getValue().split(",")[1].equals("comment")
						&& !entry.getValue().split(",")[1].equals("attachment")
						&& !entry.getKey().equals("dn_tagid_zhu")) {// 该表单只需要可写的，其他只读的都不需要。
					// 表单元素的临时类
					Trueform tf = new Trueform();
					tf.setId(formId);
					// 循环标志位
					int cycle = 0;
					// 设置中文名
					for (FormTagMapColumn ftm : list) {
						if(ftm.getFormtagname().equalsIgnoreCase(entry.getKey())){
							Object[] obj = tableInfoService.getIsBtName(workflowid, nodeId, newFormId, ftm.getFormtagname(), userId);
							if(obj!=null){
								tf.setCollumnName((String)obj[1]);
								tf.setIsbt((String)obj[2]);
								tf.setColumnName(obj[3]==null?"":obj[3].toString());
							}else{
								tf.setCollumnName("");
								tf.setIsbt("0");
								tf.setColumnName("");
							}
							
							Object[] obj2 = tableInfoService.getIsPy(workflowid, nodeId, newFormId, ftm.getFormtagname());
							if(obj!=null && obj2[2] != null){
								tf.setIspy(Integer.valueOf((String)obj2[2]));
							}else{
								tf.setIspy(0);
							}
							String actionurl = ftm.getOtherData()==null?"":ftm.getOtherData();
							
							// 处理是给 pc , 还是移动端掉用的
							if(!actionurl.equals("")){
								// in || out, 通用, ||out
								String tempActionUrl[] = actionurl.split("\\|\\|");
								if(tempActionUrl.length ==1){
									actionurl = tempActionUrl[0];
								}else{
									if("in".equals(server)){
										actionurl = tempActionUrl[0];
									}else if("out".equals(server)){
										actionurl = tempActionUrl[1];
									}
								}
							}
							if(!actionurl.equals("")){
								String[] values = actionurl.split(",");
								if(values!= null& values.length>0){
									actionurl = values[0];
									if(values.length>1){
										tf.setUrlHeight(Integer.parseInt(values[1].trim()));
										tf.setUrlWidth(Integer.parseInt(values[2].trim()));
									}
								}
							}
							
							
							String bindfields =  ftm.getBindfields()==null?"":ftm.getBindfields();
							if(bindfields!=null && !bindfields.equals("")){
								tf.setBindfields(bindfields);
							}
							
							String valueformat = ftm.getValueformat()==null?"":ftm.getValueformat();
							if(valueformat!=null && !valueformat.equals("")){
								tf.setValueformat(valueformat);
							}
							
							// 获取字典表
							if(!actionurl.equals("")){
								String key = actionurl.substring(0, actionurl.indexOf("/"));
								List<WfDictionary> keys = dictionaryService.getDictionaryByName("urlSetting");
								for(int index = 0 ; index <keys.size() ; index++){
									WfDictionary dic = keys.get(index);
									String[] dicKeys = dic.getVc_key().split(",");
									String[] dicValues = dic.getVc_value().split(",");
									for(int j = 0 ; j < dicKeys.length ; j++)
									if(dicKeys[j].equals(key)){
										actionurl = dicValues[j]+"/"+actionurl;
										break;
									}
								}
							}
							
							String tempUrl = actionurl;
							if(actionurl.indexOf("processId=processId") >-1){
								tempUrl = tempUrl.replace("processId=processId", "processId="+processId);
							}
							if(actionurl.indexOf("userid=userid") >-1){
								tempUrl = tempUrl.replace("userid=userid", "userid="+userId);
							}
							if(actionurl.indexOf("deptId=deptId") >-1){
								tempUrl = tempUrl.replace("deptId=deptId", "deptId="+deptId);
							}
							if(actionurl.indexOf("instanceId=instanceId") >-1){
								tempUrl = tempUrl.replace("instanceId=instanceId", "instanceId="+instanceId);
							}
							if(actionurl.indexOf("workflowId=workflowId") >-1){
								tempUrl = tempUrl.replace("workflowId=workflowId", "workflowId="+workflowid);
							}
							if(actionurl.indexOf("webId=webId") >-1){
								tempUrl = tempUrl.replace("webId=webId", "webId="+webId);
							}
							if(actionurl.indexOf("formId=formId") >-1){
								tempUrl = tempUrl.replace("formId=formId", "formId="+formId);
							}
							tf.setActionurl(tempUrl);
							tf.setValueformat(ftm.getValueformat());
							tf.setVerifyformat(ftm.getVerifyformat());
							tf.setBindfields(ftm.getBindfields());
							tf.setCorrelation(ftm.getCorrelation());//设置关联字段名称
							if(("checkbox").equals(ftm.getFormtagtype())){
								if(value!=null && !("").equals(value)){
									String[] values = value.split(";");//表单的值
									if(selects!=null && !("").equals(selects)){
										for (String  key : selects.keySet()) {
											for (String val : values) {
												String[] vals = val.split(":");
												if(key.toLowerCase().equals((val.split(":")[0].toLowerCase()))
														&& key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){
													if(vals.length > 1){
														tf.setValue(vals[1].replace('^', ';'));
													}else{
														tf.setValue("");
													}
													String[] temp = selects.get(key).split("\\[--\\]");
													String[] keys = temp[0].split(",");
													String[] val1 = temp[1].split(",");
													List<KeyValue> ll = new ArrayList<KeyValue>();
													for(int t = 0 ; t < keys.length; t++){
														String [] val1s = val1[t].split("##");
														if(val1s.length>1){
															ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
														}else{
															ll.add(new KeyValue(keys[t],val1[t],""));
														}
													}
													if(ll.size() > 0){
													   tf.setValues(ll);
													}
													tf.setType("checkbox");
													cycle++;
													break;
												}
											}
										}
										if (cycle > 0)
											break;
										else
											for (String  key : selects.keySet()) {
												if(key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){
													String[] temp = selects.get(key).split("\\[--\\]");
													String[] keys = temp[0].split(",");
													String[] val1 = temp[1].split(",");
													List<KeyValue> ll = new ArrayList<KeyValue>();
													for (int t = 0; t < keys.length; t++) {
														String [] val1s = val1[t].split("##");
														if(val1s.length>1){
															ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
														}else{
															ll.add(new KeyValue(keys[t],val1[t],""));
														}
													}
													if (ll.size() > 0) {
														tf.setValues(ll);
													}
													tf.setType("checkbox");
													cycle++;
													break;
												}
												
											}
									}
								}else{
									for (String  key : selects.keySet()) {
										if(key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){
											String[] temp = selects.get(key).split("\\[--\\]");
											String[] keys = temp[0].split(",");
											String[] val1 = temp[1].split(",");
											List<KeyValue> ll = new ArrayList<KeyValue>();
											for (int t = 0; t < keys.length; t++) {
												String [] val1s = val1[t].split("##");
												if(val1s.length>1){
													ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
												}else{
													ll.add(new KeyValue(keys[t],val1[t],""));
												}
											}
											if (ll.size() > 0) {
												tf.setValues(ll);
											}
											tf.setType("checkbox");
											cycle++;
											break;
										}
										
									}
								}
								if (cycle > 0)
									break;
							} else if (("radio").equals(ftm.getFormtagtype())) {
								if(value!=null && !("").equals(value)){
									String[] values = value.split(";");//表单的值
									if(tempUrl.equals("")){
										if(selects!=null && !("").equals(selects)){
											for (String  key : selects.keySet()) {
												for (String val : values) {
													String[] vals = val.split(":");
													if((key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())||key.toLowerCase().equalsIgnoreCase(ftm.getColumnname()))
															&&(key.toLowerCase().equals((val.split(":")[0].toLowerCase()))||val.split(":")[0].toLowerCase().equalsIgnoreCase(ftm.getColumnname()))){
														if(vals.length > 1){
															tf.setValue(vals[1].replace('^', ';'));
														}else{
															tf.setValue("");
														}
														String[] temp = selects.get(key).split("\\[--\\]");
														String[] keys = temp[0].split(",");
														String[] val1 = temp[1].split(",");
														List<KeyValue> ll = new ArrayList<KeyValue>();
														for(int t = 0 ; t < keys.length; t++){
															String [] val1s = val1[t].split("##");
															if(val1s.length>1){
																ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
															}else{
																ll.add(new KeyValue(keys[t],val1[t],""));
															}
														}
														if(ll.size() > 0){
														   tf.setValues(ll);
														}
														tf.setType("checkbox");
														cycle++;
														break;
													}
												}
											}
											if (cycle > 0)
												break;
											else
											for (String  key : selects.keySet()) {
												if(key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){
													String[] temp = selects.get(key).split("\\[--\\]");
													String[] keys = temp[0].split(",");
													String[] val1 = temp[1].split(",");
													List<KeyValue> ll = new ArrayList<KeyValue>();
													for (int t = 0; t < keys.length; t++) {
														String [] val1s = val1[t].split("##");
														if(val1s.length>1){
															ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
														}else{
															ll.add(new KeyValue(keys[t],val1[t],""));
														}
													}
													if (ll.size() > 0) {
														tf.setValues(ll);
													}
													tf.setType("radio");
													cycle++;
													break;
												}
												
											}
										}else{
											for (String val : values) {
												String[] vals = val.split(":");
												if(ftm.getFormtagname().equalsIgnoreCase(val.split(":")[0])){
													if (vals.length > 1) {
														if(vals[1].replace('^',';').indexOf(";")>-1){
															tf.setType("checkbox");
														}else{
															tf.setType("radio");
														}
														tf.setValue(vals[1].replace('^',';'));
													}else{
														tf.setValue("");
													}
													break;
												}
											}
										}
									}
								}else{
								if (selects != null && !("").equals(selects)) {
									for (String key : selects.keySet()) {
										if (key.toLowerCase().equals(entry.getKey().toLowerCase())
												&& key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())) {
											//String val = selects.get(key);
											String[] temp = selects.get(key).split("\\[--\\]");
											String[] keys = temp[0].split(",");
											String[] val1 = temp[1].split(",");
											List<KeyValue> ll = new ArrayList<KeyValue>();
											for (int t = 0; t < keys.length; t++) {
												String [] val1s = val1[t].split("##");
												if(val1s.length>1){
													ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
												}else{
													ll.add(new KeyValue(keys[t],val1[t],""));
												}
											}
											if (ll.size() > 0) {
												tf.setValues(ll);
											}
											cycle++;
											tf.setType("radio");
											break;
										}
									}
									if (cycle > 0)
										break;
								}
								}
							} else if (("select").equals(ftm.getFormtagtype())) {
								if (selects != null && !("").equals(selects)) {
									if(value!=null && !("").equals(value)){
										String[] values = value.split(";");//表单的值
										for (String val : values) {
											String[] vals = val.split(":");
											if(tempUrl.equals("")){
												for (String  key : selects.keySet()) {
													if (key.toLowerCase().equals((val.split(":")[0].toLowerCase())) && key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())) {
														tf.setType("select");
														if (vals.length > 1) {
															tf.setValue(vals[1].replace('^',';'));
															if (vals[1].contains("^"))
																tf.setType("checkbox");
														} else {
															tf.setValue("");
														}
														String[] temp = selects.get(key).split("\\[--\\]");
														String[] keys = temp[0].split(",");
														String[] val1 = temp[1].split(",");
														String defaultV = temp[2];
														List<KeyValue> ll = new ArrayList<KeyValue>();
														for (int t = 0; t < keys.length; t++) {
															String [] val1s = val1[t].split("##");
															if(val1s.length>1){
																ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
															}else{
																ll.add(new KeyValue(keys[t],val1[t],""));
															}
														}
														if (ll.size() > 0) {
															tf.setValues(ll);
														}
														if(StringUtils.isBlank(tf.getValue()) && StringUtils.isNotBlank(defaultV) && !defaultV.equals("null")){
															tf.setValue(val1[Integer.parseInt(defaultV)-1]);
														}
														cycle++;
														break;
													}
												}
											}else{
												if(ftm.getFormtagname().equalsIgnoreCase(val.split(":")[0])){
													if (vals.length > 1) {
														if(vals[1].replace('^',';').indexOf(";")>-1){
															tf.setType("checkbox");
														}else{
															tf.setType("select");
														}
														tf.setValue(vals[1].replace('^',';'));
													}else{
														tf.setValue("");
													}
													break;
												}
											}
										}
									}else{
										for (String key : selects.keySet()) {
											if (key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())) {
												//只要是读写的select,都要显示出来,无论value有没有值
												tf.setType("select");
												String[] temp = selects.get(key).split("\\[--\\]");
												String[] keys = temp[0].split(",");
												String[] val1 = temp[1].split(",");
												String defaultV = temp[2];
												List<KeyValue> ll = new ArrayList<KeyValue>();
												for (int t = 0; t < keys.length; t++) {
													String [] val1s = val1[t].split("##");
													if(val1s.length>1){
														ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
													}else{
														ll.add(new KeyValue(keys[t],val1[t],""));
													}
												}
												if (ll.size() > 0) {
													tf.setValues(ll);
												}
												if(StringUtils.isNotBlank(defaultV) && !defaultV.equals("null")){
													tf.setValue(val1[Integer.parseInt(defaultV)-1]);
												}
												cycle++;
												break;
											}
										}
									}
									
									if (cycle > 0)
										break;
									else
										for (String  key : selects.keySet()) {
											if(key.toLowerCase().equals(ftm.getFormtagname().toLowerCase())){
												String[] temp = selects.get(key).split("\\[--\\]");
												String[] keys = temp[0].split(",");
												String[] val1 = temp[1].split(",");
												List<KeyValue> ll = new ArrayList<KeyValue>();
												for (int t = 0; t < keys.length; t++) {
													String [] val1s = val1[t].split("##");
													if(val1s.length>1){
														ll.add(new KeyValue(keys[t],val1s[0],val1s[1]));
													}else{
														ll.add(new KeyValue(keys[t],val1[t],""));
													}
												}
												if (ll.size() > 0) {
													tf.setValues(ll);
												}
												tf.setType("select");
												cycle++;
												break;
											}
											
										}
								}
							} else {
								if (value != null && !("").equals(value)) {
									String[] values = value.split(";");
									for (String val : values) {
										if ((ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getAssignColumnName()))||
												(!ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getColumnname()))){
												int index = val.indexOf(":");
												String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
												//String[] vals = val.split(":");
												if (vals.length > 1) {
													if(("").equals(vals[1])){
														if(!("").equals(ftm.getConstantValue())){
															String cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
															// 判断actionurl
															if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
																String[] spt = tf.getActionurl().split("name=");
																if(spt.length==2){
																	if(spt[1].equals(emp.getEmployeeLoginname())){
																		cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
																	}else{
																		cval = "";
																	}
																}
															}
															tf.setValue(cval);
														}
													}else{
														tf.setValue(vals[1]);
													}
												} else {
													tf.setValue("");
												}
												tf.setType("text");
												cycle++;
												break;
											}else if((!ftm.getFormid().equals(oldFormId)&&(val.split(":")[0]).equalsIgnoreCase(ftm.getAssignColumnName()))){
												int index = val.indexOf(":");
												String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
												tf.setValue(vals[1]);
												tf.setType("text");
												cycle++;
												break;
											}
									}
									String trueArea = ftm.getTrueArea();
									if(trueArea!=null && trueArea.equals("1")){
										tf.setType("true");
									}else if(trueArea!=null && trueArea.equals("2")){
										tf.setType("img");
									}
									if (cycle > 0){
										break;
									}else {
										String cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
										tf.setType("text");
										// 判断actionurl
										if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
											String[] spt = tf.getActionurl().split("name=");
											if(spt.length==2){
												if(spt[1].equals(emp.getEmployeeLoginname())){
													cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
												}else{
													cval = "";
												}
											}
										}
										tf.setValue(cval);
									}
									if(trueArea!=null && trueArea.equals("1")){
										tf.setType("true");
									}
								}else{
									if(!("").equals(ftm.getConstantValue())){
										String cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
										
										// 判断actionurl
										if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
											String[] spt = tf.getActionurl().split("name=");
											if(spt.length==2){
												if(spt[1].equals(emp.getEmployeeLoginname())){
													cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
												}else{
													cval = "";
												}
											}
										}
										String trueArea = ftm.getTrueArea();
										if(trueArea!=null && trueArea.equals("1")){
											tf.setType("true");
										}else{
											tf.setType("text");
										}
										tf.setValue(cval);
									}else{
										tf.setValue("");
										tf.setType("text");
									}
								}
							}
						}
					}
					// 设置name
					tf.setName(entry.getKey());
					trueList.add(tf);
				}else if (entry.getValue().split(",")[0].equals("0")&&entry.getValue().split(",")[1].equals("hidden")){
					for (int j = 0; j < jsonArray.size(); j++) {
						JSONObject jo = jsonArray.getJSONObject(j);
						if(jo.isNullObject()){
							continue;
						}
						String name = jo.get("name").toString();
						if(entry.getKey().equalsIgnoreCase(name)){
							Trueform tf = new Trueform();
							tf.setId(formId);
							tf.setName(entry.getKey());
							tf.setType("hidden");
							tf.setCollumnName("");
							tf.setColumnName("");
							tf.setIsbt("0");
							tf.setValueformat("");
							tf.setVerifyformat("");
							tf.setBindfields("");
							// hidden 设置值
							tf.setValue(String.valueOf(jo.get("value")));
							// 处理默认值
							FormTagMapColumn ftm = zwkjFormService.getFormTagMapColumnByFormId(formId,name);
							if(process == null && ftm != null&& (tf.getValue() == null|| "".equals(tf.getValue()))){
								if(!("").equals(ftm.getConstantValue())){
									String cval = getDefaultValue(ftm, userId, fwDepName, instanceId);
									// 判断actionurl
									if(tf.getActionurl()!= null && tf.getActionurl().indexOf("Calendar")>-1){
										String[] spt = tf.getActionurl().split("name=");
										if(spt.length==2){
											if(spt[1].equals(emp.getEmployeeLoginname())){
												cval = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
											}else{
												cval = "";
											}
										}
									}
									
									tf.setValue(cval);
								}else{
									tf.setValue("");
								}
							}
							trueList.add(tf);
							break;
						}
					}
					
				}
			}
			// 所有元素
			// 添加 x, y , width , height
			for (int i = 0; i < trueList.size(); i++) {
				Trueform tf = trueList.get(i);
				for (int j = 0; j < jsonArray.size(); j++) {
					JSONObject jo = jsonArray.getJSONObject(j);
					if(jo.isNullObject()){
						continue;
					}
					String name = jo.get("name").toString();
					if (tf.getName().equalsIgnoreCase(name)) {
						trueList.get(i).setPage(0);
						trueList.get(i).setNodeId(nodeId);
						trueList.get(i).setNodeName(wfNode.getWfn_name());
						trueList.get(i).setWidth(Integer.valueOf(String.valueOf(jo.get("width"))));
						trueList.get(i).setHeight(Integer.valueOf(String.valueOf(jo.get("height"))));
						int  y = jo.getInt("startY");
						trueList.get(i).setPage(y/1362);
						trueList.get(i).setX(Integer.valueOf(String.valueOf(jo.get("startX"))));
						trueList.get(i).setY(y%1362);
						if(trueList.get(i).getType()!=null && trueList.get(i).getType().equals("true")){
							trueList.get(i).setType("true");
						}else{
							trueList.get(i).setType(String.valueOf(jo.get("type")).equals("textarea")?"textarea":String.valueOf(jo.get("type")));
						}
						if(trueList.get(i).getType() == null){
							trueList.get(i).setType(String.valueOf(jo.get("type").equals("textarea")?"textarea":String.valueOf(jo.get("type"))));
						}
					}
				}
			}
		}
		return trueList;
	}
	
	
	/**
	 * 
	 * 描述：获取系统设定的默认值
	 * @param ftm
	 * @param userId
	 * @param fwDepName
	 * @param instanceId
	 * @param workflowid 
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2015-6-9 下午4:46:52
	 */
	public String getDefaultValue(FormTagMapColumn ftm, String userId, String fwDepName, String instanceId){
		String cval = "";
		ConstantsOfForm  coff = new ConstantsOfForm();
		if(("people").equals(ftm.getConstantValue())){
			cval = coff.getLoginName(userId,employeeService);
		}else if(("depName").equals(ftm.getConstantValue())){
			cval = coff.getLoginDepName(userId,employeeService,departmentService);
		}else if(("fwdepName").equals(ftm.getConstantValue())){
			cval = fwDepName + coff.getLoginDepName(userId,employeeService,departmentService) + "发文";
		}else if(("timeEn").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(0);
		}else if(("timeEns").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(1);
		}else if(("timeEnss").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(4);
		}else if(("timeEnSe").equals(ftm.getConstantValue())){//英文分
			cval = coff.getNowTime(5);
		}else if(("timeZh").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(2);
		}else if(("timeZhs").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(3);
		}else if(("swsj").equals(ftm.getConstantValue())){
			cval = coff.getSwsj(instanceId,tableInfoService);
			if(cval.equals("")){
				cval = coff.getNowTime(0);
			}
		}else if(("peopleAndId").equals(ftm.getConstantValue())){
			cval = coff.getLoginIdAndName(userId,employeeService);
		}
		else if(("peopleId").equals(ftm.getConstantValue())){
			cval = userId;
		}else if(("depId").equals(ftm.getConstantValue())){
			cval = coff.getLoginDepId(userId,employeeService,departmentService);;
		}else if("unitName".equals(ftm.getConstantValue())){
		    cval = coff.getUnitName(userId,employeeService,departmentService);
		}
		return cval;
	}
	
	public String getDefaultValue(FormTagMapColumn ftm, String userId, String fwDepName, String instanceId, String workflowid){
		String cval = "";
		ConstantsOfForm  coff = new ConstantsOfForm();
		if(("people").equals(ftm.getConstantValue())){
			cval = coff.getLoginName(userId,employeeService);
		}else if(("depName").equals(ftm.getConstantValue())){
			cval = coff.getLoginDepName(userId,employeeService,departmentService);
			try {
				Employee  emp = null;
				if(StringUtils.isNotBlank(userId)){
					emp = tableInfoService.findEmpByUserId(userId);
				}
				String nowSiteId = tableInfoService.checkIsMultDept(emp,workflowid);
				if(StringUtils.isNotBlank(nowSiteId)){
					cval = tableInfoService.getDefaultMultDeptName(emp,nowSiteId,cval);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else if(("fwdepName").equals(ftm.getConstantValue())){
			cval = fwDepName + coff.getLoginDepName(userId,employeeService,departmentService) + "发文";
		}else if(("timeEn").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(0);
		}else if(("timeEns").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(1);
		}else if(("timeEnss").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(4);
		}else if(("timeEnSe").equals(ftm.getConstantValue())){//英文分
			cval = coff.getNowTime(5);
		}else if(("timeZh").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(2);
		}else if(("timeZhs").equals(ftm.getConstantValue())){
			cval = coff.getNowTime(3);
		}else if(("swsj").equals(ftm.getConstantValue())){
			cval = coff.getSwsj(instanceId,tableInfoService);
			if(cval.equals("")){
				cval = coff.getNowTime(0);
			}
		}else if(("peopleAndId").equals(ftm.getConstantValue())){
			cval = coff.getLoginIdAndName(userId,employeeService);
		}
		else if(("peopleId").equals(ftm.getConstantValue())){
			cval = userId;
		}else if(("depId").equals(ftm.getConstantValue())){
			cval = coff.getLoginDepId(userId,employeeService,departmentService);;
		}else if("unitName".equals(ftm.getConstantValue())){
			cval = coff.getUnitName(userId,employeeService,departmentService);
		}
		return cval;
	}
	
	
	
	
	/**
	 * 
	 * 描述：单个收取待收办件
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午10:33:18
	 */
	public void updateDoFileReceive() {
		// 获取主键id
		String id = getRequest().getParameter("id");
		String jrdb = getRequest().getParameter("jrdb");
		String state = getRequest().getParameter("state");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		if (doFileReceive != null) { // 做更新操作
			Integer status = doFileReceive.getStatus();
			String msg = "";
			if(status!=null && (status==1 || status==4)){
				msg = "over";
			}else{
				// 获取部门 
				String currentDeptId = doFileReceive.getToDepartId();
				String linkDeptIds = currentDeptId;
				List<WfDictionary> keys = dictionaryService.getDictionaryByName("linkDept");
				for(int index = 0 ; index <keys.size() ; index++){
					WfDictionary dic = keys.get(index);
					String[] dicKeys = dic.getVc_key().split(",");
					String[] dicValues = dic.getVc_value().split(",");
					for(int j = 0 ; j < dicValues.length ; j++){
						String temp = SystemParamConfigUtil.getParamValueByParam(dicValues[j]);
						if(temp != null && temp.indexOf(linkDeptIds)>-1){
							linkDeptIds = temp ;
							break;
						}
					}
				}
				if(currentDeptId.equals(linkDeptIds)){
					if(StringUtils.isNotBlank(state) && state.equals("4")){//用户执行了拒收操作
						doFileReceive.setStatus(4); // 表示拒收
					}else{
						doFileReceive.setStatus(1); // 表示签收
					}
					doFileReceive.setRecDate(new Date());
					String commentJson = doFileReceive.getTrueJson();		//true意见
					String oldTruePath = doFileReceive.getPdfpath();
					if(oldTruePath!=null && !oldTruePath.equals("")){
						String[] args = new TrueToPdf().trueToPdf(oldTruePath);
						String  pdfPath= "";
						if(args!=null && args.length >0){
							pdfPath = args[0];
						}
						String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
						doFileReceive.setPdfpath(truePath);
					}
					//将意见合并到true文件中
					/*if(jrdb.equals("false")&&!"2".equals(doFileReceive.getReceiveType())){
						createRecTrue(doFileReceive);
					}*/
					tableInfoService.updateDoFileReceive(doFileReceive);
				}else{
					// 根据to 部门id，instanceid 查询 数据
					if (CommonUtil.stringNotNULL(linkDeptIds)) {  
						linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
					}
					List<DoFileReceive> receivers = tableInfoService.getDoFileReceiveByPIdAndDeptIds(doFileReceive.getpInstanceId(),linkDeptIds);
					Date currentDate = new Date();
					if(receivers != null&&receivers.size()>0){
						for(int i = 0 ; i < receivers.size(); i++){
							DoFileReceive rece = receivers.get(i);
							if(StringUtils.isNotBlank(state) && state.equals("4")){//用户执行了拒收操作
								rece.setStatus(4); // 表示拒收
							}else{
								rece.setStatus(1); // 表示签收
							}
							rece.setRecDate(currentDate);
							String commentJson = doFileReceive.getTrueJson();		//true意见
							String oldTruePath = doFileReceive.getPdfpath();
							String[] args = new TrueToPdf().trueToPdf(oldTruePath);
							String  pdfPath= "";
							if(args!=null && args.length >0){
								pdfPath = args[0];
							}
							String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
							doFileReceive.setPdfpath(truePath);
							/*if(jrdb.equals("false")&&!"2".equals(rece.getReceiveType())){
								createRecTrue(rece);
							}*/
							tableInfoService.updateDoFileReceive(rece);
						}
					}
				}
				// 查询 出 
				//统一部门的
				msg = "yes";
			}
			try {
				getResponse().getWriter().print(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	
	/**
	 * 单个收取xml解析入库的数据
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:季振华
	 * 创建时间:2017-1-6 下午1:50:33
	 */
	public void updateReceiveAll() {
		// 获取主键id
		String id = getRequest().getParameter("id");
		String jrdb = getRequest().getParameter("jrdb");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		if (doFileReceive != null) { // 做更新操作
			Integer updateType = doFileReceive.getUpdateType();
			if(null!=updateType && 2 == updateType){
				//xml解析入库的数据
				List<SendAttachments> attlist = 
						attachmentService.findAllSendAtts(doFileReceive.getInstanceId()+"fj");
				for(SendAttachments att:attlist){
					//插入 附件流
					HashMap<String, String> keyValueSet = new HashMap<String, String>();
					keyValueSet.put("ATTFLOW",  SystemParamConfigUtil.getParamValueByParam("filePath")+att.getLocalation());
					flowService.geneSql("OA_DOC_ATTACHMENTS", keyValueSet, "id", att.getId());
				}
			}
			
			Integer status = doFileReceive.getStatus();
			String msg = "";
			if(status!=null && status==1){
				msg = "over";
			}else{
				// 获取部门 
				String currentDeptId = doFileReceive.getToDepartId();
				String linkDeptIds = currentDeptId;
				List<WfDictionary> keys = dictionaryService.getDictionaryByName("linkDept");
				for(int index = 0 ; index <keys.size() ; index++){
					WfDictionary dic = keys.get(index);
					String[] dicKeys = dic.getVc_key().split(",");
					String[] dicValues = dic.getVc_value().split(",");
					for(int j = 0 ; j < dicValues.length ; j++){
						String temp = SystemParamConfigUtil.getParamValueByParam(dicValues[j]);
						if(temp != null && temp.indexOf(linkDeptIds)>-1){
							linkDeptIds = temp ;
							break;
						}
					}
				}
				if(currentDeptId.equals(linkDeptIds)){
					doFileReceive.setStatus(1); // 表示签收
					doFileReceive.setRecDate(new Date());
					if(jrdb.equals("false")&&!"2".equals(doFileReceive.getReceiveType())){
						createRecTrue(doFileReceive);
					}
					tableInfoService.updateDoFileReceive(doFileReceive);
				}else{
					// 根据to 部门id，instanceid 查询 数据
					if (!StringUtils.isBlank(linkDeptIds)) {  
						linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
					}
					List<DoFileReceive> receivers = tableInfoService.getDoFileReceiveByPIdAndDeptIds(doFileReceive.getpInstanceId(),linkDeptIds);
					Date currentDate = new Date();
					if(receivers != null&&receivers.size()>0){
						for(int i = 0 ; i < receivers.size(); i++){
							DoFileReceive rece = receivers.get(i);
							rece.setStatus(1); // 表示签收
							rece.setRecDate(currentDate);
							if(jrdb.equals("false")&&!"2".equals(rece.getReceiveType())){
								createRecTrue(rece);
							}
							tableInfoService.updateDoFileReceive(rece);
						}
					}
				
				}
				// 查询 出 
				//统一部门的
				msg = "yes";
			}
			try {
				getResponse().getWriter().print(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 
	 * 描述：批量收取办件
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午10:32:54
	 */
	public void batchUpdateStatus(){
		String recIds = getRequest().getParameter("recIds");
		String jrdb = getRequest().getParameter("jrdb");
		if(recIds!=null && !recIds.equals("")){
			String[] ids = recIds.split(",");
			DoFileReceive doFileReceive = null;
			String id = "";
			for(int i=0; i <ids.length; i++){
				id = ids[i];
				doFileReceive = tableInfoService.getDoFileReceiveById(id);
				doFileReceive.setStatus(1); // 表示签收
				doFileReceive.setRecDate(new Date());
				if(jrdb.equals("false")){
					createRecTrue(doFileReceive);
				}
				tableInfoService.updateDoFileReceive(doFileReceive);
			}
			
		}
		try {
			getResponse().getWriter().print("yes");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * 描述：非政府办的人员需要生成办文单,重新生成true文件
	 * @param doFileReceive void
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午10:30:47
	 */
	public void createRecTrue(DoFileReceive doFileReceive){
		String pdfPath = doFileReceive.getPdfpath();	//附件
		//获取单子
		String fProcessId = doFileReceive.getfProcessId();
		WfProcess wf = tableInfoService.getProcessById(fProcessId);
		String instanceId = doFileReceive.getInstanceId();
		//String fInstanceId = wf.getWfInstanceUid();
		String formId = wf.getFormId();
		String value = getGwjhValue(formId, instanceId);
		//String nodeId = wf.getNodeUid();
		try {
			/*String htmlpath = getGwjhHtml(formId,	nodeId, 
					value, fInstanceId, false ,false);*/
			String htmlpath = getGwjhHtml(value);
			String recId = 	doFileReceive.getId();
			//html转换成pdf且,且与true附件合并起来
			ToPdfThread thread = new ToPdfThread(htmlpath, recId,
					pdfPath, tableInfoService, "createRecTrue",flowService);
			thread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 
	 * 描述：根据表单Id与实例Id, 生成公文交换元素
	 * @param formId
	 * @param instanceId
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-6-28 下午5:15:58
	 */
	public  String getGwjhValue(String formId, String instanceId){
		List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
		List<Map> mapList = zwkjFormService.getSwByInstanceId(instanceId);
		String docValue = "";
	    //查找对应关系,入库收文表
		for (FormTagMapColumn ft : list) {
			String tagValue = "";
			boolean isFwh = false;
			if(("lwbt").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("yfdw").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("lwdw").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("fs").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("lwh").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("fwh").equals(ft.getDocColumn())){
				isFwh = true;
				tagValue += mapList.get(0).get("LWH");
			}
			else if(("gwlx").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("swsj").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("fwsj").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("zsdw").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("csdw").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("ztc").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}else if(("jjcd").equals(ft.getDocColumn())){
				tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
			}
			if(!tagValue.equals("")){
				if(isFwh){
					docValue +=  "lwh:"+  tagValue +";";
				}else{
					docValue +=  ft.getDocColumn() +":"+  tagValue +";";
				}
				
			}
		}
		return docValue;
	}
	
	
	/**
	 * 
	 * 描述：获取公文交换表单(已经填值)
	 * @param docValue
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午11:55:21
	 */
	public String getGwjhHtml(String docValue){
		String formPath = PathUtil.getWebRoot() + "form/html/swform.html";
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录


		String htmlPath = pdfRoot+dstPath;
		// 对象，其日历字段已由当前日期和时间初始化
		Calendar calendar = Calendar.getInstance();
		String newHtmlPath = htmlPath + String.valueOf(calendar.getTimeInMillis()) + ".html";
		//读取html
		String htmlString = readHTML(formPath);	//源数据
		List<TagBean> tags = getTagFromHTMLString(htmlString);// 返回页面taglist
		List<FormTagMapColumn> mapList = new ArrayList<FormTagMapColumn>();
		if (tags != null) {
			for (int i = 0; i < tags.size(); i++) {
				FormTagMapColumn m = new FormTagMapColumn();
				m.setFormtagname(tags.get(i).getTagName());
				m.setFormtagtype(tags.get(i).getTagType());
				m.setSelectDic(tags.get(i).getSelect_dic());
				m.setListId(tags.get(i).getListId());
				m.setColumnCname(tags.get(i).getCommentDes());
				mapList.add(m);
			}
		}
		OutputStreamWriter osw = null;
		try {
			FileInputStream fileinputstream = new FileInputStream(formPath);
			// 下面四行：获得输入流的长度，然后建一个该长度的数组，然后把输入流中的数据以字节的形式读入到数组中，然后关闭流
			int length = fileinputstream.available();
			byte bytes[] = new byte[length];
			fileinputstream.read(bytes);
			fileinputstream.close();
			String templateContent = "";
			templateContent = new String(bytes, "UTF-8");
			templateContent =templateContent.replace("<html>", "<html><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />");
			// ------------------------------进行内容替换-------start----------------------------------------
			UrlCatcher u = new UrlCatcher();
			
			// 获取所有input类型标签
			String reg_input = "<INPUT[^<]*>";
			String[] inputs = u.getStringByRegEx(htmlString, reg_input, true);
			
			// 获取所有textarea类型标签
			String reg_textarea = "<TEXTAREA[^<]*</TEXTAREA>";
			String[] textareas = u.getStringByRegEx(htmlString, reg_textarea,
					true);
			if(docValue != null && !docValue.equals("")){
				String[] vals = docValue.split(";");
				String name = "";
				String value = "";
				int i = 0;// 跳出循环标志位
				for (String val : vals) {
					if (val.split(":").length > 1) {
						name = val.split(":")[0].trim();
						value = val.split((name+":"))[1];
					} else {
						name = val.split(":")[0].trim();
						value = "";
					}
					Pattern p = Pattern.compile("<div class=\""+name.toLowerCase()+"\">(.*?)</div>",Pattern.DOTALL);
					Matcher m =  p.matcher(templateContent);
						if(m.find()){
							templateContent = templateContent.replace(m.group(1),"");
						}
					if(!("").equals(value) && value != null){
					for (FormTagMapColumn ftm : mapList) {
						if(name.equals(ftm.getFormtagname())){	// 公文交换元素中的名称与html中tagName匹配
							if(("text").equals(ftm.getFormtagtype())){
								for(int j=0; j<inputs.length; j++){
									if(inputs[j].indexOf(name)>0){
										templateContent = templateContent.
												replaceFirst(inputs[j],value);
										/*templateContent = templateContent.
												replaceFirst(inputs[j],"<input name='"+name+"' value='"+value+"' />");*/
									}
								}
							}else if(("textarea").equals(ftm.getFormtagtype())){
								for(int j=0; j<textareas.length; j++){
									if(textareas[j].indexOf(name)>0){
										templateContent = templateContent.replace
											(textareas[j],"<textare name='"+name+"'>"+value+"</textarea>");
									}
								}
							}
						}
					}
					}
				}
			}else{
				if(inputs!= null){
					for(int i = 0 ; i <inputs.length ; i ++ ){
						templateContent = templateContent.replace(inputs[i],"");
				    }
				}
				if(textareas != null){
					for(int i = 0 ; i <textareas.length ; i ++ ){
						templateContent = templateContent.replace(textareas[i],"");
					}
				}
			}
			
			//值已经替换完成
			if(inputs!= null){
				for(int i = 0 ; i <inputs.length ; i ++ ){
					templateContent = templateContent.replace(inputs[i],"");
			    }
			}
			if(textareas != null){
				for(int i = 0 ; i <textareas.length ; i ++ ){
					templateContent = templateContent.replace(textareas[i],"");
				}
			}
			// ----------------------------------进行内容替换--------end----------------------------------------
			// 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。
			// byte tag_bytes[] = templateContent.getBytes();
			byte[] tag_bytes = null;
			tag_bytes = templateContent.getBytes("utf-8");
			FileOutputStream fileoutputstream = new FileOutputStream(newHtmlPath);// 建立文件输出流
			osw = new OutputStreamWriter(fileoutputstream,"UTF-8");
			osw.write(templateContent);
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
            if (osw != null) {
                try {
                	osw.close();
                } catch (IOException e1) {
                }
            }
        }
		return newHtmlPath;
	}
	
	
	
	/**
	 * 
	 * 描述：已办列表中选择事项进入待办
	 * @throws IOException void
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午11:20:58
	 */
	public void innerPending() throws IOException {
		String processId = getRequest().getParameter("processId");
		if(processId!=null && !processId.equals("")){
			processId = processId.trim();
		}
		String receiveType = "1";
		//String id = getRequest().getParameter("id");
		//获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		Date nowTime = new Date();
		if (wfProcess != null) {
			//将推送信息中的记录修改成自己的
			tableInfoService.updatePushMessage(emp.getEmployeeGuid(), wfProcess);
			//将推送记录修改下userid
			tableInfoService.updateWfProcessByTs(emp.getEmployeeGuid(),wfProcess);
			String itemId = getRequest().getParameter("itemId");
			WfItem wfItem = itemService.getItemById(itemId);
			String workFlowId = getRequest().getParameter("workFlowId");
			WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
			wfProcess.setIsExchanging(0);
			if(("1").equals(receiveType)){
				//查找流程中第一步的节点信息
				if(wfNode==null){
					getResponse().getWriter().print("noNode");
					return ;
				}
				//---------------期限日期---------------
				String deadline = wfNode.getWfn_deadline();
				String deadlineunit = wfNode.getWfn_deadlineunit();
				Date jdqxDate = tableInfoService.getEndDate(nowTime, deadline, deadlineunit );
				Date apply_date = wfProcess.getApplyTime();
				String wcsx = wfItem.getVc_wcsx();		//办件完成期限
				Date zhqxDate = tableInfoService.getEndDate(apply_date, wcsx, "0");	//默认为工作日
				wfProcess.setFromNodeid("发文过来的");
				wfProcess.setToNodeid(wfNode.getWfn_id());
				wfProcess.setNodeUid(wfNode.getWfn_id());
				wfProcess.setOwner(userId);
				wfProcess.setUserUid(userId);
				wfProcess.setFromUserId(userId);
				wfProcess.setItemId(itemId);
				wfProcess.setWfUid(workFlowId);
				wfProcess.setApplyTime(nowTime);
				wfProcess.setFinshTime(nowTime);
				wfProcess.setFormId(wfNode.getWfn_defaultform());
				wfProcess.setOldFormId(wfNode.getWfn_defaultform());
				wfProcess.setIsOver(Constant.NOT_OVER);
				wfProcess.setIsMaster(1);
				wfProcess.setIsShow(1);
				wfProcess.setJdqxDate(jdqxDate);
				wfProcess.setZhqxDate(zhqxDate);
				Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
				sw.setItem_id(itemId);
				sw.setSwsj(nowTime);
				tableInfoService.updateSw(sw);
				//需要更新下关于pdf路径
				String wf_uid = wfProcess.getWfUid(); //流程
				WfNode firstNode = workflowBasicFlowService.findFirstNodeId(wf_uid);
				String formId = firstNode.getWfn_defaultform();
				String json = wfProcess.getCommentJson();
				json = getJsonValue(json);
				wfProcess.setCommentJson("");
				try {
					//生成 收取的办文事项pdf(只读)
					List<Map> mapList = zwkjFormService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					// 获取表单对应关系(主要是获取中文名)
					List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
					String docValue = "";
				    //查找对应关系,入库收文表
					for (FormTagMapColumn ft : list) {
						String tagValue = "";
						if(("lwbt").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("yfdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fs").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwh").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("gwlx").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("swsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fwsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}
							docValue +=  ft.getFormtagname() +":"+  tagValue +";";
					}
					
					String htmlpath = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							"", wfProcess.getWfInstanceUid(), false ,true);
					String htmlpath2 = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							docValue, wfProcess.getWfInstanceUid(), false ,false);
					String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,"");
					wfProcess.setPdfPath(pdfPath);
					String instanceId = wfProcess.getWfInstanceUid();
					ToPdfThread toPdf = new ToPdfThread(htmlpath+","+htmlpath2, "", instanceId, attachmentService , "htmlToPdf",wfProcess,tableInfoService,json,flowService);
					toPdf.start();
					addDoFile(wfProcess, wfItem, wfNode);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}else{
				//公文交换
				//更新收文时间  走公文交换的
				Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
				sw.setSwsj(nowTime);
				tableInfoService.updateSw(sw);
				wfProcess.setUserUid(userId);
			}
			if(wfItem.getVc_sxlx().equals("1")){
				List<SendAttachments> sattList = attachmentService.findAllSendAtts(wfProcess.getWfInstanceUid() + ATT_SUFFIX_NAME,null);
				for(SendAttachments send: sattList){
					send.setDocguid(send.getDocguid().replace(ATT_SUFFIX_NAME, ATT_FJSUFFIX_NAME));
					attachmentService.updateSendAtt(send);
				}
			}
			
			tableInfoService.updateProcess(wfProcess);
		}
		//receive表中的id
		String id = getRequest().getParameter("id");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		doFileReceive.setJrdb(1);
		tableInfoService.updateDoFileReceive(doFileReceive);
		try {
			getResponse().getWriter().print("yes");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public String getJsonValue(String json){
		JSONObject obj = JSONObject.fromObject(json);
		String ServerUrl = obj.getString("ServerUrl");
		String docId = obj.getString("docId");
		JSONObject newJsObject = new JSONObject();
		JSONArray newJs = new JSONArray();
		JSONArray resource =new JSONArray();
		newJsObject.put("ServerUrl", ServerUrl);
		newJsObject.put("StampType", 1);
		newJsObject.put("docId", docId);
		newJsObject.put("pages", newJs);
		newJsObject.put("resource", resource);
		return newJsObject.toString();
	}
	

	
	/**
	 * 
	 * 描述：已办列表中选择事项进入待办
	 * @throws IOException void
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 上午11:20:58
	 */
	public void innerPending_allReceive() throws IOException {
		String processId = getRequest().getParameter("processId");
		String id = getRequest().getParameter("id");
		//receive表中的id
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		if(processId!=null && !processId.equals("")){
			processId = processId.trim();
		}
		String receiveType = "1";
		//String id = getRequest().getParameter("id");
		//获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		Date nowTime = new Date();
		if (wfProcess != null) {
			//将推送信息中的记录修改成自己的
			tableInfoService.updatePushMessage(emp.getEmployeeGuid(), wfProcess);
			//将推送记录修改下userid
			tableInfoService.updateWfProcessByTs(emp.getEmployeeGuid(),wfProcess);
			String itemId = getRequest().getParameter("itemId");
			WfItem wfItem = itemService.getItemById(itemId);
			String workFlowId = getRequest().getParameter("workFlowId");
			WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
			wfProcess.setIsExchanging(0);
			if(("1").equals(receiveType)){
				//查找流程中第一步的节点信息
				if(wfNode==null){
					getResponse().getWriter().print("noNode");
					return ;
				}
				//---------------期限日期---------------
				String deadline = wfNode.getWfn_deadline();
				String deadlineunit = wfNode.getWfn_deadlineunit();
				Date jdqxDate = tableInfoService.getEndDate(nowTime, deadline, deadlineunit );
				Date apply_date = wfProcess.getApplyTime();
				String wcsx = wfItem.getVc_wcsx();		//办件完成期限
				Date zhqxDate = tableInfoService.getEndDate(apply_date, wcsx, "0");	//默认为工作日
				
				wfProcess.setFromNodeid("发文过来的");
				wfProcess.setToNodeid(wfNode.getWfn_id());
				wfProcess.setNodeUid(wfNode.getWfn_id());
				wfProcess.setOwner(userId);
				wfProcess.setUserUid(userId);
				wfProcess.setFromUserId(userId);
				wfProcess.setItemId(itemId);
				wfProcess.setWfUid(workFlowId);
				wfProcess.setApplyTime(nowTime);
				wfProcess.setFinshTime(nowTime);
				wfProcess.setFormId(wfNode.getWfn_defaultform());
				wfProcess.setOldFormId(wfNode.getWfn_defaultform());
				wfProcess.setIsOver(Constant.NOT_OVER);
				wfProcess.setIsMaster(1);
				wfProcess.setIsShow(1);
				wfProcess.setJdqxDate(jdqxDate);
				wfProcess.setZhqxDate(zhqxDate);
				
				Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
				sw.setItem_id(itemId);
				sw.setSwsj(nowTime);
				tableInfoService.updateSw(sw);
				//需要更新下关于pdf路径
				String wf_uid = wfProcess.getWfUid(); //流程
				WfNode firstNode = workflowBasicFlowService.findFirstNodeId(wf_uid);
				String formId = firstNode.getWfn_defaultform();
				String json = wfProcess.getCommentJson();
				wfProcess.setCommentJson("");
				try {
					//生成 收取的办文事项pdf(只读)
					List<Map> mapList = zwkjFormService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					// 获取表单对应关系(主要是获取中文名)
					List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
					String docValue = "";
				    //查找对应关系,入库收文表
					for (FormTagMapColumn ft : list) {
						String tagValue = "";
						if(("lwbt").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("yfdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fs").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwh").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("gwlx").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("swsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fwsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}
							docValue +=  ft.getFormtagname() +":"+  tagValue +";";
					}
					
					String htmlpath = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							"", wfProcess.getWfInstanceUid(), false ,true);
					String htmlpath2 = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							docValue, wfProcess.getWfInstanceUid(), false ,false);
					
					String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,"");
					wfProcess.setPdfPath(pdfPath);
					String instanceId = wfProcess.getWfInstanceUid();
					ToPdfThread toPdf = new ToPdfThread(htmlpath+","+htmlpath2, "",
							instanceId, attachmentService , "htmlToPdf",wfProcess,tableInfoService,json,flowService);
					toPdf.start();
					addDoFile(wfProcess, wfItem, wfNode);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}else{
				//公文交换
				//更新收文时间  走公文交换的
				Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
				sw.setSwsj(nowTime);
				tableInfoService.updateSw(sw);
				wfProcess.setUserUid(userId);
			}
			
			tableInfoService.updateProcess(wfProcess);
		}
		doFileReceive.setJrdb(1);
		tableInfoService.updateDoFileReceive(doFileReceive);
		try {
			getResponse().getWriter().print("yes");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void addDoFile(WfProcess wfProcess,WfItem wfItem, WfNode wfNode){
		DoFile doFile = new DoFile();
		doFile.setDoFile_title(wfProcess.getProcessTitle());
		doFile.setItemId(wfItem.getId());
		doFile.setWorkflowId(wfProcess.getWfUid());
		doFile.setInstanceId(wfProcess.getWfInstanceUid());
		doFile.setFormId(wfNode.getWfn_defaultform());
		doFile.setItemName(wfItem.getVc_sxmc());
		doFile.setNodeId(wfNode.getWfn_id());
		tableInfoService.saveDoFile(doFile);
	}

	//打印pdf
	public void printPdf() throws Exception{
		String instanceId = getRequest().getParameter("instanceId");
		//获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		//存表单属性对应关系
		String oldformId = getRequest().getParameter("formId");
		//当前节点Id
		String nodeId = getRequest().getParameter("nodeId");
		String json = getRequest().getParameter("json");
		//流程Id
		String workFlowId = getRequest().getParameter("workFlowId");
		String value =	this.saveForm(oldformId,1,instanceId,oldformId,nodeId,workFlowId,"","","");
		String pdfPath = getHtmlToNewOfPath(oldformId,nodeId, value, instanceId, false,false);
		// 执行
		//获取exe文件路径
		String newPdfPath = pdfPath.substring(0,pdfPath.length()-4)+"new" + ".pdf";
		GenePdfUtil genePdf = GenePdfUtil.getInstance();
		genePdf.genePdf(pdfPath, json, newPdfPath);
	    String serverUrl = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getLocalPort() +getRequest().getContextPath();
	    String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
	    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
	    if(pdfPath.startsWith(oldpdfRoot)){
		    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
	    }else if(pdfPath.startsWith(newPdfRoot)){
	    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
	    }else{
		    pdfPath = serverUrl + "/form/html/" + pdfPath.substring(pdfPath.lastIndexOf("/")+1);
	    }
	    getResponse().getWriter().print(newPdfPath);
	}
	
	public void getFirstOfMoblie() {
		long startTime = System.currentTimeMillis();
		long endTime ;
		System.out.println("--------进入getFirstOfMoblie--------");
		// 判断是否子流程
		try {
			String itemId = getRequest().getParameter("itemId");
			String userId = getRequest().getParameter("userId");
			String needFj = getRequest().getParameter("needFj");
			String jsonType = getRequest().getParameter("jsonType");
			if(jsonType == null || "".equals(jsonType)){
				jsonType = "old";
			}
			if(needFj == null){
				needFj = "0";
			}
			WfItem wfItem = itemService.getItemById(itemId);
			// 第一步节点
			WfNode wfNode = workflowBasicFlowService.findFirstNodeId(wfItem.getLcid());
			// 当前节点所绑定的表单Id
			String formId = wfNode.getWfn_defaultform();
			List<NodeInfo> nodeInfoList = getNodeList(wfItem.getLcid(), "", wfNode.getWfn_id(),"", userId);
			// 根据当前节点Id查找下一节点Id
			List<EmpData> empDataList = new ArrayList<EmpData>();
			// 步骤记录
			String processId = UuidGenerator.generate36UUID();
			String instanceId = UuidGenerator.generate36UUID();
			// 子流程节点
			// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			List<WfChild> childList = workflowBasicFlowService.showChildOfWf(
					wfItem.getLcid(), wfNode.getWfn_id());
			String no = getRequest().getParameter("no");		//关联外部系统的唯一标示
			String params = getRequest().getParameter("params");
			String webId = getDocNumWebId("mobile", userId);
			List<Trueform> trueList = new ArrayList<Trueform>();//getFormValAndLocation("out",userId, wfItem.getLcid(), wfNode.getWfn_id(), processId, instanceId, formId, formId,"", no,params,webId);
			// 生成一个空的pdf
//			String pdfPath = getHtmlToNewOfPath(formId, wfNode.getWfn_id(), "",instanceId, false, false);
			String serverUrl = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getLocalPort() +getRequest().getContextPath();
	        String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
		    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	

		    endTime = System.currentTimeMillis() ;
			System.out.println("--------getFirstOfMoblie断点1--------"+(endTime-startTime)/1000.0);
		    String pdfPath ="";
//			PDFToTrue pdfToTrue = new PDFToTrue();
//			pdfPath = pdfToTrue.pdfToTrue(pdfPath, "");
//			// PDFToPNGImage(pdfPath);
//	        if(pdfPath!=null && !"".equals(pdfPath)){
//	        	if(pdfPath.startsWith(oldpdfRoot)){
//				    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
//			    }else if(pdfPath.startsWith(newPdfRoot)){
//			    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
//			    }else{
//				    pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
//
//			    }
//	        }
	        if(wfNode!=null && wfNode.getNode_startJb() != null){
				String jbWorkFlowId = wfNode.getNode_startJb();
				// 获取流程的第一个节点
				WfNode firstJbNode = workflowBasicFlowService.findFirstNodeId(jbWorkFlowId);
				NodeInfo jbNodeInfo = new NodeInfo();
				jbNodeInfo.setFormId(firstJbNode.getWfn_defaultform());
				jbNodeInfo.setRouteType(firstJbNode.getWfn_route_type());
				jbNodeInfo.setNodeId(firstJbNode.getWfn_id());
				jbNodeInfo.setNodeName(firstJbNode.getWfn_name());
				jbNodeInfo.setIsHaveGdPerson("0");
				jbNodeInfo.setM_userIds("");
				jbNodeInfo.setC_userIds("");
				nodeInfoList.add(jbNodeInfo);
				// ++++++待特殊处理
				// ++ by yuxl 处理节点为交办类型
				// 获取流程的第一个节点
				pdfPath = pdfPath.replace(serverUrl, PathUtil.getWebRoot());
				tableInfoService.insertFirstTempProcess(processId, "0", instanceId, wfNode.getWfn_id(),userId, "", wfItem.getLcid(), itemId, pdfPath+","+pdfPath, "",formId);
			}
	          
	         JSONObject flowInfo = new JSONObject();
	         	  flowInfo.put("isFisrtStep", true);
	         	  flowInfo.put("instanceId", instanceId);
	         	  flowInfo.put("processId", processId);
		          flowInfo.put("fprocessId", "");
		          flowInfo.put("workflowId", wfItem.getLcid());
		          flowInfo.put("nodeId", wfNode.getWfn_id());
		          flowInfo.put("formId", formId);
		          flowInfo.put("isMaster", "1");
		          flowInfo.put("isChildWf", false);
		          flowInfo.put("finstanceId", "");
		          flowInfo.put("cType", "");
		          flowInfo.put("relation", "");
		          flowInfo.put("itemId", itemId);
		          flowInfo.put("pdfNewPath","");
		          flowInfo.put("no",no);   //获取外部关联数据
			String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
			String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
			int  StampType = 0;
			if(usbkey == "yiyuan"){
				StampType = 0;
			}else{
				StampType = 1;
			}
			
			endTime = System.currentTimeMillis() ;
			System.out.println("--------getFirstOfMoblie断点2--------"+(endTime-startTime)/1000.0);
			String commentJson ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+instanceId+"\",\"pages\": [{\"basicOS\": \"ios\",\"company\": \"trueway\",\"height\": 1448,\"processes\": [],\"version\": 2,\"width\": 1024}],\"resources\": []}";
			List<String> json  = new ArrayList<String>();
			json.add(commentJson);
			if("old".equals(jsonType)){
				AllDetailElement ade = new AllDetailElement();
				ade.setExistJsonList(json);
				ade.setTrueList(trueList);
				ade.setEmpDataList(empDataList);
				ade.setNodeInfoList(nodeInfoList);
				ade.setChildList(childList);
				ade.setPdfPath(pdfPath);
				ade.setFlowInfo(flowInfo);
				ade.setProcessUrl("");
				ade.setMsgInfo("0");
				ade.setNeedFj(needFj);
				String sb = "";
				HttpServletResponse response = getResponse();
				response.setCharacterEncoding("utf-8");
				//			 打开流
				PrintWriter out =  getResponse().getWriter();
				sb = JSONObject.fromObject(ade).toString();
				out.print(sb);
				out.close();
			}else{
			    TrueJSON trueJson = new TrueJSON();
			    trueJson.setChildList(childList);
			    trueJson.setFlowInfo(flowInfo);
			    trueJson.setTrueform(trueList);
			    trueJson.setTruepaper(commentJson);
			    trueJson.setNodeInfoList(nodeInfoList);
			    trueJson.setPdfurl(pdfPath);
			    trueJson.setProcessUrl("");
			    trueJson.setNeedFj(needFj);
			    trueJson.setMsgInfo("0");
			    String isFlexibleForm = wfItem.getIsFlexibleForm();
			    trueJson.setIsFlexibleForm(isFlexibleForm);
			    if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
					ZwkjForm zwkjForm = zwkjFormService.getOneFormById(formId);
					endTime = System.currentTimeMillis() ;
					System.out.println("--------getFirstOfMoblie断点4--------"+(endTime-startTime)/1000.0);
					List<TrueformData> trueFormList = getTrueformdata("out",userId, wfItem.getLcid(), wfNode.getWfn_id(), processId, instanceId, formId,formId,"", params, "", "0");
					trueJson.setTrueformdata(trueFormList);
					trueJson.setFormPage(zwkjForm.getFormPageJson());
					trueJson.setFormPages("0");
			    }
			   
				String leaderIds = SystemParamConfigUtil.getParamValueByParam("pw_leader_id");
				String hideOpt_siteId = SystemParamConfigUtil.getParamValueByParam("hideOpt_siteId");
				Employee emp = tableInfoService.findEmpByUserId(userId);
				if(CommonUtil.stringNotNULL(hideOpt_siteId) && hideOpt_siteId.contains(emp.getSiteId())){
					if(CommonUtil.stringNotNULL(leaderIds) && leaderIds.contains(emp.getEmployeeGuid())){
						trueJson.setNeedHideOperate("false");
					}else{
						trueJson.setNeedHideOperate("true");
					}
				}else{
					trueJson.setNeedHideOperate("false");
				}
			    endTime = System.currentTimeMillis() ;
				System.out.println("--------getFirstOfMoblie断点3--------"+(endTime-startTime)/1000.0);
			    String sb = "";
			    HttpServletResponse response = getResponse();
			    response.setCharacterEncoding("utf-8");
//				打开流
			    PrintWriter out =  getResponse().getWriter();
			    sb = JSONObject.fromObject(trueJson).toString();
			    endTime = System.currentTimeMillis() ;
				System.out.println("--------getFirstOfMoblie结束--------"+(endTime-startTime)/1000.0);
			    out.print(sb);
			    out.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	
	public void getChildFirstOfMoblie() {
		// 非子流程 ， 根据流程id,得到 nodeId,用户,表单 
		//${ctx}/table_openFirstForm.do?isChildWf=true&isWriteNewValue=false&workflowid='+nextNodeId+'&itemid=${itemId}&&processId='+processId+'&finstanceId='+instanceId+
		try {
			
			JSONObject jsonObject = getJSONObjectHederAndBody1(); 
			//++ 获取json 类型  old 是原先的 类型  new 为新的类型
			String jsonType ="";
			try {
				jsonType = (String)jsonObject.get("jsonType");
			} catch (Exception e1) {
				// 默认为old  
				jsonType = "old";
			}
			
			String userId = (String)jsonObject.get("userId");
			String itemId = (String)jsonObject.get("itemId");
			String workflowId = (String)jsonObject.get("workflowId");
			String cType = (String)jsonObject.get("cType");
			String proceId = (String)jsonObject.get("processId");
			String relation = (String)jsonObject.get("relation");
			String finstanceId = (String)jsonObject.get("finstanceId");
			String oldformId = (String)jsonObject.get("oldformId");
			// 意见 县级子流程 带意见
			String writeJson = jsonObject.get("truepaper")+"";
			
			JSONArray trueForm = new JSONArray().fromObject(jsonObject.get("trueform"));
			//WfItem wfItem = itemService.getItemById(itemId);
			// 第一步节点
			WfChild  wfChild =	workflowBasicFlowService.getWfChildByCid(workflowId);
			WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workflowId);
			// 当前节点所绑定的表单Id
			String formId = wfNode.getWfn_defaultform();
			List<NodeInfo> nodeInfoList = getNodeList(workflowId, "", wfNode.getWfn_id(),proceId, userId);
			// 根据当前节点Id查找下一节点Id
			List<WfNode> nodes = workflowBasicFlowService.showNode(workflowId,wfNode.getWfn_id(),"");
			List<EmpData> empDataList = new ArrayList<EmpData>();
			// 0 单人 人员从人员接口获取
			String processId = UuidGenerator.generate36UUID();
			String instanceId = UuidGenerator.generate36UUID();
			// save 父流程的原来的值
			String value = this.saveTrueForm(oldformId,finstanceId,formId,trueForm,workflowId,processId);
			// 查找当前待办的Process实体
			WfProcess wfProcess = pendingService.getProcessByID(proceId);
			// 是否是子流程的第一步
			// 换表单从前到尾的总附件的instanceId
			String allInstanceId = wfProcess.getAllInstanceid();
			// 生成的pdf地址
			String pdfPath = "";
			boolean	isFirst = false;
			WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(finstanceId);
			String pdfNewPath = "";
		    String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

			if(pWfProcess!=null){
				String path = pWfProcess.getPdfPath();
				if(path!=null && !path.equals("")){
					String pdfpath = path.split(",")[1];
					try {
						// 暂不合并意见
						//拉线程生成给下一步使用
						pdfNewPath = pdfRoot+"/"+dstPath+pdfpath.substring(pdfpath.lastIndexOf("/")+1,pdfpath.length()-4)+"new" + ".pdf";
						GenePdfUtil gene = GenePdfUtil.getInstance();
						gene.genePdf(pdfpath,writeJson,pdfNewPath);
						/*Thread genePdf = new Thread(new GenePdfUtilThread(pdfpath,writeJson,pdfNewPath));
						//GenePdfUtilThread genePdf = new GenePdfUtilThread(pdfpath,writeJson,pdfNewPath);
						genePdf.start();*/
						//	genePdf.genePdf();
					} catch (Exception e) {
						e.printStackTrace();
					}
					pdfPath = pdfpath;
				}
			}
			// 生成pdf
			if(wfNode.getWfn_form_continue()!=null && ("1").equals(wfNode.getWfn_form_continue())){
				//生成空的表单给子流程第一步
				pdfPath = getHtmlToNewOfPath(wfNode.getWfn_defaultform(), wfNode.getWfn_id(), "", wfNode.getWfn_defaultform(), false, true);
				 // pdf 转成 png 图片 +++ 2/21
			     PDFToPNGImage(pdfPath);
			     writeJson = "";
			}else{
				//GenePdfUtil genePdf = new GenePdfUtil();
				// 暂不合意见
				//genePdf.genePdf(pdfPath, writeJson, pdfNewPath);
			}
			// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
			String params = getRequest().getParameter("params");
			List<WfChild> childList = workflowBasicFlowService.showChildOfWf(workflowId, wfNode.getWfn_id());
			String webId = getDocNumWebId("mobile", userId);
			List<Trueform> trueList = getFormValAndLocation("out",userId, workflowId, wfNode.getWfn_id(), processId, finstanceId,formId ,oldformId,value, "", params, webId);
	        Employee emp = employeeService.findEmployeeById(userId);
			
	        //换表单从前到尾的总附件的instanceId
	        if(pdfPath!=null && !"".equals(pdfPath)){
	        	// 生成pdf 
	        	 String serverUrl = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getLocalPort() +getRequest().getContextPath();
	 	        String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
	 		    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
	 		    if(pdfPath.startsWith(oldpdfRoot)){
	 			    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
	 		    }else if(pdfPath.startsWith(newPdfRoot)){
	 		    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
	 		    }else{
	 			    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
	 		    }
	        	pdfPath = serverUrl + "/form/html/" + pdfPath.substring(pdfPath.lastIndexOf("/")+1,pdfPath.length());
	   	    }
	        //入库--附件上传
	        if(allInstanceId != null&&!("").equals(allInstanceId) && !("null").equals(allInstanceId)){
				if(wfNode.getWfn_form_continue()!=null&&"1".equals(wfNode.getWfn_form_continue())){
					if(pdfNewPath!=null && !pdfNewPath.equals("")){
						wfProcess.setPdfPath(pdfNewPath+","+pdfNewPath);
					}
					if((wfProcess.getIsManyInstance()!=null&&wfProcess.getIsManyInstance().equals("1"))&&wfProcess.getStepIndex()==1){
						this.addAllAtt2(wfProcess, wfProcess.getWfInstanceUid(), emp);
					}else{
						this.addAllAtt2(wfProcess, instanceId, emp);
					}
				}else{
					List<SendAttachments> list = attachmentService.findSendAttsByDocguid(finstanceId+"fj");
					List<SendAttachments> oldlist = attachmentService.findSendAttsByDocguid(finstanceId+"oldfj");
					if(list!=null&&list.size()>0){
							for(int i=0;i<list.size();i++){
								SendAttachments sendAttachments = list.get(i);
								SendAttachments newSendAttachments = new SendAttachments();
								newSendAttachments.setDocguid(instanceId+"oldfj");
								newSendAttachments.setFilename(sendAttachments.getFilename());
								newSendAttachments.setFiletype(sendAttachments.getFiletype());
								newSendAttachments.setFilesize(sendAttachments.getFilesize());
								newSendAttachments.setLocalation(sendAttachments.getLocalation());
								newSendAttachments.setFileindex(sendAttachments.getFileindex());
								newSendAttachments.setFiletime(sendAttachments.getFiletime());
								newSendAttachments.setEditer(sendAttachments.getEditer());
								newSendAttachments.setTitle(sendAttachments.getTitle());
								newSendAttachments.setType(sendAttachments.getType());
								attachmentService.addSendAtts(newSendAttachments);
							}
						}
						if(oldlist!=null&&oldlist.size()>0){
							for(int i=0;i<oldlist.size();i++){
								SendAttachments sendAttachments = oldlist.get(i);
								SendAttachments newSendAttachments = new SendAttachments();
								newSendAttachments.setDocguid(instanceId+"oldfj");
								newSendAttachments.setFilename(sendAttachments.getFilename());
								newSendAttachments.setFiletype(sendAttachments.getFiletype());
								newSendAttachments.setFilesize(sendAttachments.getFilesize());
								newSendAttachments.setLocalation(sendAttachments.getLocalation());
								newSendAttachments.setFileindex(sendAttachments.getFileindex());
								newSendAttachments.setFiletime(sendAttachments.getFiletime());
								newSendAttachments.setEditer(sendAttachments.getEditer());
								newSendAttachments.setTitle(sendAttachments.getTitle());
								newSendAttachments.setType(sendAttachments.getType());
								attachmentService.addSendAtts(newSendAttachments);
							}
						}
					}
				}
	        JSONObject flowInfo = new JSONObject();
	        flowInfo.put("isFisrtStep", true);
	        flowInfo.put("instanceId", instanceId);
	        flowInfo.put("processId", processId);
	        flowInfo.put("fprocessId", proceId);
	        flowInfo.put("workflowId", workflowId);
	        flowInfo.put("nodeId", wfNode.getWfn_id());
	        flowInfo.put("formId", formId);
	        flowInfo.put("isMaster", "1");
	        flowInfo.put("isChildWf", true);
	        flowInfo.put("finstanceId", finstanceId);
	        flowInfo.put("cType", wfChild.getWfc_ctype());
	        flowInfo.put("relation", wfChild.getWfc_relation());
	        flowInfo.put("itemId", itemId);
	        flowInfo.put("pdfNewPath",pdfNewPath);
	        if("old".equals(jsonType)){
	        	List<AllDetailElement> adeList = new ArrayList<AllDetailElement>();
				AllDetailElement ade = new AllDetailElement();
				ade.setTrueList(trueList);
				ade.setEmpDataList(empDataList);
				//// 意见 县级子流程 带意见
				List<String> existJsonList = new ArrayList<String>();
				existJsonList.add(writeJson);
				ade.setExistJsonList(existJsonList);
				// end
				ade.setNodeInfoList(nodeInfoList);
				ade.setChildList(childList);
				ade.setPdfPath(pdfPath);
				ade.setFlowInfo(flowInfo);
				ade.setProcessUrl("");
				ade.setNeedFj("0");
				ade.setMsgInfo("0");
				adeList.add(ade);
				String sb = "";
				HttpServletResponse response = getResponse();
				response.setCharacterEncoding("utf-8");
//			 	打开流
				PrintWriter out =  getResponse().getWriter();
				sb = JSONArray.fromObject(adeList).toString();
				out.print(sb);
				out.close();
	        }else{
	        	TrueJSON trueJson = new TrueJSON();
	        	trueJson.setChildList(childList);
	        	trueJson.setFlowInfo(flowInfo);
	        	trueJson.setTrueform(trueList);
	        	trueJson.setTruepaper(writeJson);
	        	trueJson.setNodeInfoList(nodeInfoList);
				trueJson.setPdfurl(pdfPath);
				trueJson.setProcessUrl("");
				trueJson.setNeedFj("0");
				trueJson.setMsgInfo("0");
				String sb = "";
				HttpServletResponse response = getResponse();
				response.setCharacterEncoding("utf-8");
//			 	打开流
				PrintWriter out =  getResponse().getWriter();
				sb = JSONObject.fromObject(trueJson).toString();
				out.print(sb);
				out.close();
	        }
		
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 县主 分发给县子时保存 父流程的值
	public String saveTrueForm(String oldformId,String instanceId,String formId,JSONArray trueForm,String workflowId,String processId){
		boolean changed = false;
		// 解析 trueForm
		JSONObject formJson = new JSONObject();
		for(int t = 0 ; t < trueForm.size() ; t++){
			String tempType = (String)trueForm.getJSONObject(t).get("type");
			String tempName = (String)trueForm.getJSONObject(t).get("name");
			String tempValue = (String)trueForm.getJSONObject(t).get("value");
/*			if(tempType.equals("checkbox")){
				tempValue = tempValue.replaceAll(";", "^");
			}else if(tempType.equals("radio")){
				if(tempValue.equals("undefined")){
					tempValue = "";
				}
			}*/
			if(tempType.equals("checkbox")){
				tempValue = tempValue.replaceAll(";", "^");
				String value = "";
				String[] vals = tempValue.split("^");
				for(int tt = 0 ; tt < vals.length; tt++){
					String tempVal = null;
					if(vals[tt].indexOf("*") == -1){
						tempVal = vals[tt];
					}else{
						tempVal = vals[tt].split("*")[1];
					}
					if(tempVal != "undefined"){
						if(tt==0){
							value = tempVal;
						}else{
							value += "^"+tempVal;
						}
					}else{
						value = vals[tt];
					}
				}
				tempValue = value;
			}else if(tempType.equals("radio")){
				if(tempValue.equals("undefined")){
					tempValue = "";
				}else{
					String value = "";
					String[] vals = tempValue.split("^");
					for(int tt = 0 ; tt < vals.length; tt++){
						String tempVal = null;
						if(vals[tt].indexOf("*") == -1){
							tempVal = vals[tt];
						}else{
							tempVal = vals[tt].split("*")[1];
						}
						if(tempVal != "undefined"){
							if(tt==0){
								value = tempVal;
							}else{
								value += "^"+tempVal;
							}
						}else{
							value = vals[tt];
						}
					}
					tempValue = value;
				}
			}
			formJson.put(tempName.toLowerCase(), tempValue);
		}
		formJson.put("instanceid", instanceId);
		formJson.put("workflowid", workflowId);
		formJson.put("processid", processId);
		formJson.put("formid", formId);
		  // 读取表单所设定的所有表
	     List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(oldformId);
	     // ========================非列表类型=============================//
	     String value = "";
	     List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
	     List<String> tableNameList = new ArrayList<String>();
	     // 列表和非列表类型的分开存入list中
	     for (FormTagMapColumn ft : tableNameAllLists) {
	      lists.add(ft);
	     }
	     // 读取list中的tableName(去重之后的)
	     for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
	      if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
	       tableNameList.add(lists.get(i).getAssignTableName());
	      }
	     }
	     List<FormTagMapColumn> ftmcList = new ArrayList<FormTagMapColumn>();

		
		// ========================非列表类型=============================//
		if (tableNameList.size() != 0 && !("").equals(tableNameList)&& tableNameList != null) {
			for (String tableName : tableNameList) {
				 StringBuffer tagName = new StringBuffer();
				 String tabName = tableName;
				 // 取出带值的表
			     for(int i =  0; i < ftmcList.size() ; i ++){
					if(ftmcList.get(i).getTablename()!= null &&!ftmcList.get(i).getTablename().equalsIgnoreCase(ftmcList.get(i).getAssignTableName())){
								tabName = ftmcList.get(i).getTablename();
					}
				 }
			      // oldValue
			      List<Map> mapList = zwkjFormService.findTableByFormId(tableName, oldformId, instanceId);
			      if((mapList == null || mapList.size() == 0)&&!tableName.equalsIgnoreCase(tabName)){
						mapList = zwkjFormService.findTableByFormId(tabName, formId, instanceId);
						changed = true;
					}
			      ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableName, 1, "false");
			      // 字段名称集合
			      String columnName = "";
				   List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
				      tagName = new StringBuffer("");
				      for (FormTagMapColumn ftmc : ftmcList) {
				       //列名
				       String columnnameAll = "";
				       // 列所对应的的值--未换表单
				       if(oldformId.equals(formId)){
				        columnnameAll = ftmc.getAssignColumnName();
				       }else{
				         columnnameAll = ftmc.getAssignColumnName();
				       }
				       // 处理 表单元素和数据库字段名字不一样的问题 , 以“，” 分割 getFormtagname 表单元素， Columnname 数据库名称
				       if(ftmc.getColumnname()!=null && !("").equals(ftmc.getColumnname())){
				        if(!ftmc.getColumnname().equalsIgnoreCase(ftmc.getFormtagname())){
				         columnnameAll += ";"+ftmc.getFormtagname(); //列名 
				        }
				       }
				       
				       // =================保存或更新和点“完成”时=================
				       if (columnnameAll != null && !("").equals(columnnameAll)) {
				        columnName += columnnameAll + ","; // 列名
				        
				        // 表里的一类数据
				        String columnValue = "";
				       
				        if(!("").equals(formJson)){
				         String formName = "";
				         if(columnnameAll.toLowerCase().indexOf(";") > -1){
				        	 formName = columnnameAll.toLowerCase().split(";")[0];
				        	 //  formName = columnnameAll.toLowerCase().split(";")[1];
				          // 将 columnName里面  数据库和 表单元素不一样的 元素替换掉 
				          columnName = columnName.replace(columnnameAll, columnnameAll.toLowerCase().split(";")[0]);
				          columnnameAll = columnnameAll.toLowerCase().split(";")[0];
				          
				         }else{
				          formName = columnnameAll.toLowerCase();
				         }
				         columnValue = (String)formJson.get(formName)!=null?(String)formJson.get(formName):"";
				         if(("undefined").equals(columnValue)){
				          columnValue = "";
				         }
				         if(columnValue.equals("")&&mapList != null && mapList.size()>0){ // json 中只显示 读写的json , 只读的取一下数据库
				           // 从maplist取值
				          if(mapList.get(0).get(columnnameAll.toUpperCase()) != null)
				          {
				        	     // 没有换数据表 或者
							    if(changed == false || !tableName.equalsIgnoreCase(ftmc.getTablename())){
							    	columnValue = mapList.get(0).get(columnnameAll.toUpperCase()).toString();
							    }
				        	     // maplist 里面clob 显示 为org.hibernate.lob.SerializableClob
								if(columnValue.indexOf("org.hibernate.lob.SerializableClob")>-1){
									columnValue = tableInfoService.getClob(tableName, instanceId, columnnameAll.toLowerCase(),formId);
								}
				          }
				         }
				         value += formName + ":" + columnValue + ";";
				        }else{
				        	value += columnnameAll.toLowerCase().indexOf(";") > -1?columnnameAll.toLowerCase().split(";")[1]:columnnameAll + ":" + columnValue + ";";
				        }
				        
				        String colVal = "'" + columnValue + "',";
				        if (wfFieldInfoList != null&& wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
				         for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
				          // 日期型
				          if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase())&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
				           colVal = "to_date('" + columnValue + "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
				          }
				         }
				        }
				        tagName.append(colVal);
				       }
				      }
				      				         
				       //更新--先删除再重新插库
				       //需要入库的表
				       ZwkjForm zf = zwkjFormService.getOneFormById(formId);
				       String saveTableName = zf.getInsert_table();
				       if(!("").equals(saveTableName) && tableName.equals(saveTableName)){
				        // 更新--先删除再重新插库
				        zwkjFormService.deleteForm(tableName, formId, instanceId);
				        zwkjFormService.saveForm(tableName, columnName.substring(0, columnName.length() - 1), tagName.substring(0, tagName.length() - 1));
				        String newJBProcessIds = (String) getRequest().getAttribute("newJBProcessIds");
						
						if(newJBProcessIds != null && !newJBProcessIds.equals("")){
							String[] processList = newJBProcessIds.split(",");
							for(int k = 0; k < processList.length; k++){
								WfProcess wfProcess = tableInfoService.getProcessById(processList[k]);
								zwkjFormService.saveFormByOther(tableName, columnName.substring(0, columnName.length() - 1), 
							 			 tagName.substring(0, tagName.length() - 1),wfProcess);
								
							}
							getRequest().setAttribute("newJBProcessIds", "");
						}
				       }
				      
				 }
		}
		if(value!= null && value.length()>0){
			value = value.substring(0,value.length()-1);
		}
		return value;
	}
	
	
	public String  isGoExChangeOfMobile(String xtoName,String xccName,String nodeId,
			String workFlowId,String currentUserId,String oldProcessId,
			String writeJson) throws IOException {
		String userId = xtoName+"," + xccName;
		String[] userIds = userId.split(",");
		// 是否合并节点--即下一节点下面有多个子流程
		// 具体详细信息
		String info = "";// 格式：isMerge,empId,instanceId,processId,formId,workflowId;.....
		Integer isMerge = 0;
		String instanceId = "";
		String processId = "";
		String formId = "";
		String childWorkflowId = "";
		String childNodeId = "";
		String doType = "";//主办协办
		List<String> unCheckedUserList = new ArrayList<String>();
		List<String> choiceUserList = new ArrayList<String>();
		List<WfChild> childList = new ArrayList<WfChild>();
		if (!("").equals(userId)) {
		// 根据当前节点Id查找下一子流程和当前节点中间的线
		List<WfLine> wflines = workflowBasicFlowService.findNextWfLineByNodeId(nodeId, workFlowId);
		if (wflines.size() > 0 && wflines != null) {
			// 获取线上面的人及当前线的下一端的位置
			for (WfLine wfLine : wflines) {
				for (String empId : userIds) {
					for(String id:userIds){
						unCheckedUserList.add(id);
					}
					// 针对收文只有一个人
					String wfLineCondition = wfLine.getWfl_conditions();
					if(wfLineCondition!=null&&wfLineCondition.contains(",")){
						String[] wfLConditionEmps = wfLineCondition.split(",");
						for (String wfce : wfLConditionEmps) {
							if (empId.equals(wfce)) {
								choiceUserList.add(empId);
								Employee emp = employeeService.findEmployeeById(empId);
								Department dep = null;
								if(emp==null){
									isMerge = 2;
									dep = departmentService.findDepartmentById(empId);
								}else{
									dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
									isMerge = dep.getIsExchange();
								}
								// ---------是否合并---------
								//isMerge = dep.getIsExchange();
								// 获取下一模块名---节点或者子流程
								String moduleId = wfLine.getWfl_wBaseMode();
								// 根据模块名查找对应的子流程
								WfChild wfChild = workflowBasicFlowService.getWfChildByModuleId(moduleId, workFlowId);
								// ---------子流程id---------
								childWorkflowId = wfChild.getWfc_cid();
								if (wfChild != null) {
									// 获取子流程第一步节点
									WfNode childWfFirstNode = workflowBasicFlowService.findFirstNodeId(wfChild.getWfc_cid());
									// ---------子流程节点绑定的表单id---------
									formId = childWfFirstNode.getWfn_defaultform();
									// ---------子流程第一步节点id---------------
									childNodeId = childWfFirstNode.getWfn_id();
								}
								instanceId = UuidGenerator.generate36UUID();
								processId = UuidGenerator.generate36UUID();
								if(!("").equals(xtoName) && xtoName.indexOf(wfce) > -1){
									doType = "1";
								}else if(!("").equals(xccName) && xccName.indexOf(wfce) > -1){
									doType = "2";
								}
								info += isMerge  + "," + empId + "," + instanceId + "," + processId + "," + formId + ","
									   		+ childWorkflowId + "," + childNodeId + "," + doType + ";";
								break;
							}
						}
					}
				}
			}
		 }
		}
		unCheckedUserList.removeAll(choiceUserList);
		if (!("").equals(info)) {
			info = info.substring(0, info.length() - 1);
		}
		WfProcess oldProcess = pendingService.getProcessByID(oldProcessId);
		oldProcess.setCommentJson(writeJson);
		String oldNodeId = oldProcess.getNodeUid();
		tableInfoService.addNewProcessOfFake(oldProcess,nodeId);
		//获取当前登录用户
		Employee emp = employeeService.findEmployeeById(currentUserId);
		//把当前正文作为附件插入到子流程里面
		this.addAllAtt(oldProcess, oldProcess.getAllInstanceid(), emp);
		//1. 辨别类别
		boolean outparwf = true;
		for(WfChild child: childList){
			if(child.getWfc_outparwf()!=null && child.getWfc_outparwf().equals("1")){
			}else{
				outparwf = false;
			}
		}
		if(childList==null ||childList.size() ==0){
			outparwf = false;
		}
		//2.发送下一步
		if(outparwf){	//脱离父流程
			String nodeinfo = getNextNodeInfo(oldNodeId, unCheckedUserList);		//获取连接的下一节点
			try {
				automaticToNext(info, oldProcessId, nodeId, oldProcess.getNodeUid(),emp, writeJson);
			} catch (Exception e) {
				e.printStackTrace();
			}		//分发子流程
			info = "outparwf:"+nodeinfo;
		}
		return info;
	}
	
	public String getNextIsMergeOfMobile(JSONObject params,boolean first) throws Exception {
		// 获取当前登录用户
		Employee emp = employeeService.findEmployeeById( params.getString("currentUserId"));
		String oldProcessId = params.getString("oldProcessId");
		WfProcess oldProcess = pendingService.getProcessByID(oldProcessId);
		// 是否合并节点--即下一节点下面有多个子流程
		String fromNodeId =params.getString("nextNodeId");
		String toNodeId = params.getString("childNodeId");
		String childWorkflowId = params.getString("workFlowId");
		String isLast = params.getString("isLast");
		String nodeId = params.getString("nodeId");
		String commentJson = params.getString("json");
		// 获取子流程第一步节点
		WfNode childWfFirstNode = workflowBasicFlowService.findFirstNodeId(childWorkflowId);
		String oldInstanceId = oldProcess.getWfInstanceUid();
		List<SendAttachments> list = attachmentService.findSendAttsByDocguid(oldInstanceId+"fj");
		List<SendAttachments> newlist = attachmentService.findSendAttsByDocguid(oldInstanceId+"newfj");
		List<SendAttachments> oldlist = attachmentService.findSendAttsByDocguid(oldInstanceId+"oldfj");
		
		// 针对只有一个人处理--xtoName、xccName
		String userId = params.getString("userId");
		// 是否合并
		String isMerge = params.getString("isMerge");
		//String formId = params.getString("formId");
		// 主办协办
		String doType = params.getString("docType");
		// 标题用主流程的
		String vc_title = getTitle(oldProcess.getWfUid(),oldProcess.getFormId(), oldProcess.getWfInstanceUid()).split(";")[0];
		String newInstanceId = params.getString("instanceId");
		JSONObject formJson = (JSONObject) params.get("formJson");
		String newFormId = childWfFirstNode.getWfn_defaultform();
		//String newFormId = formJson.getString("formid");
		//String newProcessId = formJson.getString("processid");
		String  instanceId= formJson.getString("instanceid");
		//String newWorkFlowId = formJson.getString("workflowid");
		// 页面回值--保存

		String value = "";
		// 保存市主 分发市子和县主
		value = saveFormOfMobile(oldProcess.getFormId(), oldProcessId,oldProcess.getFormId(),newInstanceId,instanceId,formJson,newFormId,"true");
		String path = "";
		String pdfOldPath = "";
		WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(oldInstanceId);
	
		
		if(pWfProcess!=null){
			path = pWfProcess.getPdfPath();
		}	
		String[] pdfPaths = null; 
		if(path!=null){
			pdfPaths = path.split(",");
		}
	
		// 入步骤记录及待收库
		String pdfPath = "";
		String htmlpath = "";
		String combinepdf = "";
		if(childWfFirstNode.getWfn_form_continue()!=null
					&&("1").equals(childWfFirstNode.getWfn_form_continue())){
			if(newlist!=null&&newlist.size()!=0){
				for(int i=0;i<newlist.size();i++){
					SendAttachments sendAttachments = newlist.get(i);
					SendAttachments newSendAttachments = new SendAttachments();
					newSendAttachments.setDocguid(newInstanceId+"oldfj");
					newSendAttachments.setFilename(sendAttachments.getFilename());
					newSendAttachments.setFiletype(sendAttachments.getFiletype());
					newSendAttachments.setFilesize(sendAttachments.getFilesize());
					newSendAttachments.setLocalation(sendAttachments.getLocalation());
					newSendAttachments.setFileindex(sendAttachments.getFileindex());
					newSendAttachments.setFiletime(sendAttachments.getFiletime());
					newSendAttachments.setEditer(sendAttachments.getEditer());
					newSendAttachments.setTitle(sendAttachments.getTitle());
					newSendAttachments.setType(sendAttachments.getType());
					SendAttachments sAtt =  attachmentService.addSendAtts(newSendAttachments);

				}
			}else{
				if(oldlist!=null&&oldlist.size()==1){
					for(int i=0;i<oldlist.size();i++){
						SendAttachments sendAttachments = oldlist.get(i);
						SendAttachments newSendAttachments = new SendAttachments();
						newSendAttachments.setDocguid(newInstanceId+"oldfj");
						newSendAttachments.setFilename(sendAttachments.getFilename());
						newSendAttachments.setFiletype(sendAttachments.getFiletype());
						newSendAttachments.setFilesize(sendAttachments.getFilesize());
						newSendAttachments.setLocalation(sendAttachments.getLocalation());
						newSendAttachments.setFileindex(sendAttachments.getFileindex());
						newSendAttachments.setFiletime(sendAttachments.getFiletime());
						newSendAttachments.setEditer(sendAttachments.getEditer());
						newSendAttachments.setTitle(sendAttachments.getTitle());
						newSendAttachments.setType(sendAttachments.getType());
						SendAttachments sAtt =  attachmentService.addSendAtts(newSendAttachments);
					}
				}
			}
			pdfOldPath = pdfPaths[0];
			//生成空的表单给子流程第一步html
			htmlpath = getHtmlToNewHtml(newFormId, toNodeId, "", childWfFirstNode.getWfn_defaultform(), false, true);
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			String pdfNewPath = pdfRoot+dstPath+(htmlpath.substring(htmlpath.lastIndexOf("/")+1,htmlpath.length()-5)+"merge")+".pdf";
			//String pdfNewPath =  htmlpath.substring(0, htmlpath.length() - 4) + "pdf";	//将html转换为pdf的地址
			//合并后的pdf地址
			String mergePath = "";
			if(pdfOldPath!=null && !pdfOldPath.equals("")){	
				 mergePath = pdfNewPath.substring(0, pdfNewPath.length() - 4) + "mergeNew" + ".pdf";
			}else{
				 mergePath = pdfNewPath;
			}
			pdfPath = mergePath + "," + mergePath;
			combinepdf = pdfOldPath;
		}else{
				if(list!=null&&list.size()!=0){
					for(int i=0;i<list.size();i++){
						SendAttachments sendAttachments = list.get(i);
						SendAttachments newSendAttachments = new SendAttachments();
						newSendAttachments.setDocguid(newInstanceId+"fj");
						newSendAttachments.setFilename(sendAttachments.getFilename());
						newSendAttachments.setFiletype(sendAttachments.getFiletype());
						newSendAttachments.setFilesize(sendAttachments.getFilesize());
						newSendAttachments.setLocalation(sendAttachments.getLocalation());
						newSendAttachments.setFileindex(sendAttachments.getFileindex());
						newSendAttachments.setFiletime(sendAttachments.getFiletime());
						newSendAttachments.setEditer(sendAttachments.getEditer());
						newSendAttachments.setTitle(sendAttachments.getTitle());
						newSendAttachments.setType(sendAttachments.getType());
						attachmentService.addSendAtts(newSendAttachments);
					}
				}
				if(oldlist!=null&&oldlist.size()!=0){
					for(int i=0;i<oldlist.size();i++){
						SendAttachments sendAttachments = oldlist.get(i);
						SendAttachments newSendAttachments = new SendAttachments();
						newSendAttachments.setDocguid(newInstanceId+"oldfj");
						newSendAttachments.setFilename(sendAttachments.getFilename());
						newSendAttachments.setFiletype(sendAttachments.getFiletype());
						newSendAttachments.setFilesize(sendAttachments.getFilesize());
						newSendAttachments.setLocalation(sendAttachments.getLocalation());
						newSendAttachments.setFileindex(sendAttachments.getFileindex());
						newSendAttachments.setFiletime(sendAttachments.getFiletime());
						newSendAttachments.setEditer(sendAttachments.getEditer());
						newSendAttachments.setTitle(sendAttachments.getTitle());
						newSendAttachments.setType(sendAttachments.getType());
						attachmentService.addSendAtts(newSendAttachments);
					}
				}
				
				pdfOldPath = pdfPaths[1];
			    htmlpath = getHtmlToNewHtml(newFormId, toNodeId, value, childWfFirstNode.getWfn_defaultform(), false, false);
			    String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
				String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
				String pdfOldPath1 = pdfRoot+dstPath+(htmlpath.substring(htmlpath.lastIndexOf("/"),htmlpath.length()-5)+"merge")+".pdf";
				// 既然沿用就不要重新生成 重新生成的表单因为表单元素不一样 可能值不同
				pdfPath = pdfOldPath+","+pdfOldPath;
			  }
		 if(isLast!=null&&isLast.equals("1")){
				if(newlist!=null&&newlist.size()!=0){
					for(int i=0;i<newlist.size();i++){
						SendAttachments sendAttachments = newlist.get(i);
						attachmentService.deleteAtts(sendAttachments.getId(), true);
					}
				}
		}
		//-----------------------------------------入收文表----------------------start-zj------------------
		Sw sw = new Sw();
		if(("1").equals(isMerge) || isMerge.equals("2")){
			sw = addSwOfFakeNode(oldProcess);
		}
		//-----------------------------------------入收文表----------------------end-zj------------------
		//插入的待办信息
		SendNextProcess sendNextProcess = new SendNextProcess();
		sendNextProcess.setTitle(vc_title);
		sendNextProcess.setM_userId(userId);
		sendNextProcess.setUserId(emp.getEmployeeGuid());
		sendNextProcess.setInstanceId(newInstanceId);
		sendNextProcess.setChildWorkflowId(childWorkflowId);
		sendNextProcess.setNodeId(nodeId);
		sendNextProcess.setFromNodeId(fromNodeId);
		sendNextProcess.setNextNodeId(toNodeId);
		sendNextProcess.setOldProcess(oldProcess);
		sendNextProcess.setChildWfFirstNode(childWfFirstNode);
		sendNextProcess.setIsMerge(isMerge);
		sendNextProcess.setTrueJson(commentJson);
		sendNextProcess.setPdfPath(pdfPath);
		sendNextProcess.setcType(doType);
		sendNextProcess.setSw(sw);
		ToPdfThread toPdfThread = new ToPdfThread(htmlpath, combinepdf, "ffnext", sendNextProcess,tableInfoService,flowService);
		toPdfThread.start();
		return "success";
	}


	
	
	
	
	
	// 保存市主 分发市子和县主
	public String saveFormOfMobile(String oldformId,String f_proceId,String processId,String instanceId,String finstanceId,JSONObject formJson ,String formId,String isFirstChildWf ){
		boolean changed = false ;
		// ----------------------------保存表单数据----------start----------------------
		  // 读取表单所设定的所有表
	    List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(oldformId);
	    // ========================非列表类型=============================//
	    String value = "";
	    List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
	    List<String> tableNameList = new ArrayList<String>();
	    // 列表和非列表类型的分开存入list中
	    for (FormTagMapColumn ft : tableNameAllLists) {
	     lists.add(ft);
	    }
	    // 读取list中的tableName(去重之后的)
	    for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
	     if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
	      tableNameList.add(lists.get(i).getAssignTableName());
	     }
	    }
	    WfProcess oldProcess = tableInfoService.getProcessById(processId);
	    if(oldProcess== null && f_proceId!= null && !f_proceId.equals("")){
	     oldProcess = tableInfoService.getProcessById(f_proceId);
	    }
	    if(finstanceId == null||finstanceId.equals("")){
	     finstanceId = oldProcess.getfInstancdUid();
	    }else{
	     if(oldProcess!= null &&!finstanceId.equals( oldProcess.getfInstancdUid())){
	      finstanceId = oldProcess.getfInstancdUid();
	     }
	    }
	    // ========================非列表类型=============================//
	     List<FormTagMapColumn> ftmcList = new ArrayList<FormTagMapColumn>();
		for (String tableName : tableNameList) {
			 StringBuffer tagName = new StringBuffer();
			 String tabName = tableName;
			// 取出带值的表
			for(int i =  0; i < ftmcList.size() ; i ++){
				if(ftmcList.get(i).getTablename()!= null &&!ftmcList.get(i).getTablename().equalsIgnoreCase(ftmcList.get(i).getAssignTableName())){
							tabName = ftmcList.get(i).getTablename();
				}
			}
		      // oldValue
		      List<Map> mapList = zwkjFormService.findTableByFormId(tableName, oldformId, instanceId);
		      if(mapList == null ||mapList.size()==0){
		       if(finstanceId == null ||finstanceId.equals("")){
		        finstanceId = oldProcess.getWfInstanceUid();
		       }
		       mapList = zwkjFormService.findTableByFormId(tableName, oldformId, finstanceId);
		      }
		      if((mapList == null || mapList.size() == 0)&&!tableName.equalsIgnoreCase(tabName)){
					mapList = zwkjFormService.findTableByFormId(tabName, formId, instanceId);
					changed = true;
			  }
		      ftmcList = zwkjFormService.getFormTagMapColumnByFormId(oldformId, formId, tableName, 1, isFirstChildWf);

			   String columnName = "";
			   List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
			      tagName = new StringBuffer("");
			      for (FormTagMapColumn ftmc : ftmcList) {
			       //列名
			       String columnnameAll = "";
			       // 列所对应的的值--未换表单
			       if(oldformId.equals(formId)){
			        columnnameAll = ftmc.getAssignColumnName();
			       }else{
			        if(!("true").equals(isFirstChildWf)){
			         columnnameAll = ftmc.getColumnname();
			        }else{
			         columnnameAll = ftmc.getAssignColumnName();
			        }
			       }
			       if(ftmc.getColumnname()!=null && !("").equals(ftmc.getColumnname())){
			        if(!ftmc.getColumnname().equalsIgnoreCase(ftmc.getFormtagname())){
			         columnnameAll += ";"+ftmc.getFormtagname(); //列名 
			        }
			       }
			       
			       // =================保存或更新和点“完成”时=================
			       if (columnnameAll != null && !("").equals(columnnameAll)) {
			        columnName += columnnameAll + ","; // 列名
			        
			        // 表里的一类数据
			        String columnValue = "";
			        if(!("").equals(formJson)){
			         String formName = "";
			         if(columnnameAll.toLowerCase().indexOf(";") > -1){
			          formName = columnnameAll.toLowerCase().split(";")[1];
			          columnName = columnName.replace(columnnameAll, columnnameAll.toLowerCase().split(";")[0]);
			          columnnameAll = columnnameAll.toLowerCase().split(";")[0];
			          
			         }else{
			          formName = columnnameAll.toLowerCase();
			         }
			         columnValue = (String)formJson.get(formName)!=null?(String)formJson.get(formName):"";
			         if(("undefined").equals(columnValue)){
			          columnValue = "";
			         }
			         if(columnValue.equals("")&&mapList != null && mapList.size()>0){ // json 中只显示 读写的json , 只读的取一下数据库
			           // 从maplist取值
			          if(mapList.get(0).get(columnnameAll.toUpperCase()) != null)
			          {
			        	  	// 没有换数据表 或者
							if(changed == false || !tableName.equalsIgnoreCase(ftmc.getTablename())){
								columnValue = mapList.get(0).get(columnnameAll.toUpperCase()).toString();
							}
							if(columnValue.indexOf("org.hibernate.lob.SerializableClob")>-1){
								columnValue = tableInfoService.getClob(tableName, instanceId, columnnameAll.toLowerCase(),formId);
							}
			          }
			         }
			         value += formName + ":" + columnValue + ";";
			        }else{
			        	 value += columnnameAll.toLowerCase().indexOf(";") > -1?columnnameAll.toLowerCase().split(";")[1]:columnnameAll + ":" + columnValue + ";";
			        }

			    
			        
			        String colVal = "'" + columnValue + "',";
			        if (wfFieldInfoList != null
			          && wfFieldInfoList.size() != 0
			          && !("").equals(wfFieldInfoList)) {
			         for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
			          // 日期型
			          if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(columnnameAll.toLowerCase())&& Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 1) {
			           colVal = "to_date('" + columnValue+ "','yyyy-MM-dd'),"; // 列所对应的的值，重新拼接
			          }
			         }
			        }
			        tagName.append(colVal);
			       }
			      }
			      
			      if(ftmcList.size() >0){
			          for (WfFieldInfo wfColumn : wfFieldInfoList) {
			           // 基础字段(换表单如果有新的表加入，需加上基础字段)
			           if (wfColumn.getI_tableid() == null || ("").equals(wfColumn.getI_tableid())) {
			            if (columnName.toLowerCase().indexOf(wfColumn.getVc_fieldname().toLowerCase()) < 0) {
			             columnName += wfColumn.getVc_fieldname().toUpperCase() + ",";
			             // 入库为新的formId
			             if (("formid").equals(wfColumn.getVc_fieldname().toLowerCase())) {
			              tagName.append("'" + formId + "',");
			             } else {
			              tagName.append("'" + getRequest().getParameter(wfColumn.getVc_fieldname()) + "',");
			             }
			            }
			           }
			          }
			         }
			         
			       //更新--先删除再重新插库
			       //需要入库的表
			       ZwkjForm zf = zwkjFormService.getOneFormById(formId);
			       String saveTableName = zf.getInsert_table();
			       if(!("").equals(saveTableName) && tableName.equals(saveTableName)){
			        // 更新--先删除再重新插库
			        zwkjFormService.deleteForm(tableName, formId, instanceId);
			        zwkjFormService.saveForm(tableName, columnName.substring(0, columnName.length() - 1), tagName.substring(0, tagName.length() - 1));
			       }
			      
			      }

		if(value.length()>1){
			value = value.substring(0,value.length()-1);
		}
		
		return value;
	}
	
	/**
	 * 打印pdf
	 * @throws Exception
	 */
	public void fileExist() throws Exception{
		String path = getRequest().getParameter("newPdfPath");
		// 判断文件是否存在
		boolean flag = false;
		File file = null;
		while(!flag){
			file = new File(path);
			flag =file.exists();
		}
		// adobe 打印
		String serverUrl = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getLocalPort() +getRequest().getContextPath();
	    String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
	    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
	    if(path.startsWith(oldpdfRoot)){
	    	path = serverUrl+ "/form/html/data/"+path.substring(path.lastIndexOf("/") + 1);
	    }else if(path.startsWith(newPdfRoot)){
	    	path = serverUrl+ "/form/html/workflow/"+path.substring(newPdfRoot.length());
	    }

		getResponse().getWriter().print(path);
	}
	/**
	* 办件列表
	* 
	* @return
	*/
	public String getSwdrList() {
		getRequest().setAttribute("uuid", UUID.randomUUID().toString());
		return "swdr";
	}
	
	/**
	 * 获取office业务表
	 * @return
	 */
	public String getOfficeTableList(){
		String vc_name = getRequest().getParameter("vc_name");
		String vc_tablename = getRequest().getParameter("vc_tablenames");
		Map<String,String> searchMap = new HashMap<String,String>();
		searchMap.put("vc_name", vc_name);
		searchMap.put("vc_tablename", vc_tablename);
		List<WfTableInfo> list = tableInfoService.getOfficeTableList(searchMap);
		getRequest().setAttribute("list", list);
		return "officeTableList";
	}
	
	public String getCoreTableList(){
		List<Object[]> tablelist = tableInfoService.getAllTableList();
		List<WfTableInfo> list = new ArrayList<WfTableInfo>();
		WfTableInfo wfTableInfo = null;
		for(Object[] data : tablelist){
			wfTableInfo = new WfTableInfo();
			String vc_tableName = data[0]==null?"":data[0].toString();
			String vc_name = data[1]==null?"":data[1].toString();
			if(!vc_tableName.contains("T_WF_OFFICE_")){
				wfTableInfo.setVc_tablename(vc_tableName);
				wfTableInfo.setVc_name(vc_name);
				list.add(wfTableInfo);
			}
		}
		//获取emp
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		getRequest().setAttribute("employeeGuid", emp.getEmployeeGuid());
		getRequest().setAttribute("list", list);
		return "coreTableList";
	}
	
	/**
	 * 清除表中的数据
	 */
	public void clearTableData(){
		String tableNames = getRequest().getParameter("tableNames");
		//调用备份数据库方法
		String result = dataBaseOracle.createDmp();
		//状态位置: flag, 0:备份失败不予删除;   1:备份成功,予以删除
		String flag = "0";
		//清空制定表中的数据
		if(result!=null && result.equals("success")){
			String[] tableName = tableNames.split(",");
			tableInfoService.clearTableData(tableName);
			flag = "1";
		}
		try {
			getResponse().getWriter().print(flag);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 删除制定的业务表
	 */
	public void deleteOfficeTables(){
		//调用备份数据库方法
		String result = dataBaseOracle.createDmp();
		//状态位置: flag, 0:备份失败不予删除;   1:备份成功,予以删除
		String flag = "0";
		
		String tableNames = getRequest().getParameter("tableNames");
		
		if(tableNames!=null && tableNames.length()>0){
			if(result!=null && result.equals("success")){
				String[] tableName = tableNames.split(",");
				tableInfoService.removeOfficeTable(tableName);
				flag = "1";
			}
		}
		try {
			getResponse().getWriter().print(flag);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	
	public String addFw() throws Exception{
		Employee emp = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		String swh=getRequest().getParameter("lwh");
		String lwdw=getRequest().getParameter("lwdw");
		String swsj=getRequest().getParameter("swsj");
		String title=getRequest().getParameter("lwbt");
		String cwsj=getRequest().getParameter("fwsj");
		String approveitem_id=getRequest().getParameter("sx");
		String instanceid=getRequest().getParameter("id");
		String yfdw=getRequest().getParameter("yfdw");
		String fs=getRequest().getParameter("fs");
		String gwlx=getRequest().getParameter("gwlx");
		Sw sw = new Sw();
		sw.setFs(fs);
		sw.setLwdw(lwdw);
		sw.setLwh(swh);
		sw.setGwlx(gwlx);
		sw.setYfdw(yfdw);
		sw.setInstanceid(instanceid);
		sw.setItem_id(approveitem_id);
		sw.setLwbt(title);
		try {
			if(cwsj!=null&&!"".equals(cwsj)){
				sw.setFwsj(new SimpleDateFormat("yyyy-MM-dd").parse(cwsj));
			}
			if(swsj!=null&&!"".equals(swsj)){
				sw.setSwsj(new SimpleDateFormat("yyyy-MM-dd").parse(swsj));
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}

		tableInfoService.addSw(sw);
		WfItem wfItem = itemService.getItemById(approveitem_id);
		WfMain wfMain = workflowBasicFlowService.getWfMainById(wfItem.getLcid());
		WfNode wfNode = workflowBasicFlowService.findFirstNodeId(wfItem.getLcid());
		DoFile doFile = new DoFile();
		doFile.setDoFile_title(title);
		doFile.setItemId(approveitem_id);
		doFile.setInstanceId(instanceid);
		doFile.setItemName(wfItem.getVc_sxmc());
		doFile.setWorkflowId(wfItem.getLcid());
		doFile.setNodeId(wfNode.getWfn_id());
		doFile.setFormId(wfMain.getWfm_defaultform());
		if(cwsj!=null&&!"".equals(cwsj)){
			try {
				doFile.setDo_time(new SimpleDateFormat("yyyy-MM-dd").parse(cwsj));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		tableInfoService.addDoFile(doFile);
		DoFileReceive doFileReceive = new DoFileReceive();
		doFileReceive.setInstanceId(instanceid);
		doFileReceive.setpInstanceId(instanceid);
		doFileReceive.setStatus(1);
		doFileReceive.setType(1);
		if(cwsj!=null&&!"".equals(cwsj)){
			try {
				doFileReceive.setApplyDate(new SimpleDateFormat("yyyy-MM-dd").parse(cwsj));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		doFileReceive.setFormUserId(emp.getEmployeeGuid());
		doFileReceive.setToUserId(emp.getEmployeeGuid());
		tableInfoService.addDoFileReceive(doFileReceive);
		WfProcess wfProcess = new WfProcess();
		wfProcess.setWfProcessUid(UuidGenerator.generate36UUID());
		wfProcess.setWfInstanceUid(instanceid);
		wfProcess.setNodeUid(wfNode.getWfn_id());
		wfProcess.setUserUid(emp.getEmployeeGuid());
		wfProcess.setFromUserId(emp.getEmployeeGuid());
		wfProcess.setApplyTime(new Date());
		wfProcess.setOwner(emp.getEmployeeGuid());
		wfProcess.setIsOver("NOT_OVER");
		wfProcess.setProcessTitle(title);
		wfProcess.setIsEnd(0);
		wfProcess.setIsMaster(1);
		wfProcess.setWfUid(wfItem.getLcid());
		wfProcess.setIsShow(1);
		wfProcess.setStepIndex(1);
		wfProcess.setItemId(approveitem_id);
		wfProcess.setFormId(wfNode.getWfn_defaultform());
		wfProcess.setStatus("0");
		wfProcess.setAction_status(0);
		wfProcess.setIsExchanging(0);
		wfProcess.setAllInstanceid(instanceid);
		List<WfNode> nodes = workflowBasicFlowService.showNode(wfItem.getLcid(),
				wfNode.getWfn_id(), "");
		wfProcess.setToNodeid(nodes.get(0).getWfn_id());
		Map<String,String> map = new HashMap<String,String>();
		map.put("SWH", swh);
		map.put("LWDW", lwdw);
		map.put("SWSJ", cwsj);
		map.put("WH", swh);
		map.put("CWSJ", cwsj);
		map.put("TITLE", title);
		map.put("WORKFLOWID", wfItem.getLcid());
		map.put("INSTANCEID", instanceid);
		map.put("FORMID", wfNode.getWfn_defaultform());
		map.put("PROCESSID", wfProcess.getWfProcessUid());
		tableInfoService.addWSPBD(map);
		// 页面回值--保存
		String value = saveForm(wfProcess.getFormId(), 1, wfProcess.getWfInstanceUid(),
				 wfNode.getWfn_defaultform(), wfNode.getWfn_id(), wfItem.getLcid(),"","",emp.getEmployeeGuid());
		// 生成pdf
		String pdfPath = getHtmlToNewOfPath(wfNode.getWfn_defaultform(), wfNode.getWfn_id(), value,
				instanceid, false, true);
		wfProcess.setPdfPath(pdfPath);
		Date jdqxDate = tableInfoService.getEndDate(wfProcess.getApplyTime(), wfItem.getVc_wcsx(), wfNode.getWfn_defaultform());
		Date zhqxDate = tableInfoService.getEndDate(wfProcess.getApplyTime(), wfItem.getVc_wcsx(), "0");	//默认为工作日
		wfProcess.setJdqxDate(jdqxDate);
		wfProcess.setZhqxDate(zhqxDate);
		tableInfoService.saveProcess(wfProcess);
		title="";
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		String conditionSql = " and (p.action_status is null or p.action_status!=2) ";
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));

		List<Pending> list;
		// 区分工作流的待办列表获取
		int count = pendingService.getCountOfPending(conditionSql,
				emp.getEmployeeGuid(), "");
		Paging.setPagingParams(getRequest(), pageSize, count);
		// 包含是否显示推送按钮
		list = pendingService.getPendingList(conditionSql,
				emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize);
		pendingService.initRemainTime(list);// 设定节点期限
		pendingService.initDelayItem(list);
		getRequest().setAttribute("list", list);
		return "pendingList";
	}
	
	/**
	 * 办件列表
	 * 
	 * @return
	 */
	public String getSwdrlbList() {
		// 分页相关，代码执行顺序不变
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getCountSwdrlbList();
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<Sw> list = tableInfoService.getSwdrlbList(Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("list", list);
		return "swdrlb";
	}
	
	/**
	 * 办件列表
	 * 
	 * @return
	 */
	public String getSwdrList1() {
		getRequest().setAttribute("uuid", UUID.randomUUID().toString());
		return "swdr1";
	}
	
	public String toAndroidDepartmentJsp() {
		String routType = getRequest().getParameter("routType");
		String nodeId = getRequest().getParameter("nodeId");
		String userId = getRequest().getParameter("userId");
		String status = getRequest().getParameter("status");
		String siteId = getRequest().getParameter("siteId");
		String pleaseOrWatch = getRequest().getParameter("pleaseOrWatch");
		if(StringUtils.isNotBlank(nodeId)){
			WfNode node =  workflowBasicFlowService.findFormIdByNodeId(nodeId);
			getRequest().setAttribute("isExchange", node.getIsExchange());
		}
		String mc = getRequest().getParameter("mc");
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("userId", userId);
		getRequest().setAttribute("siteId", siteId);
		getRequest().setAttribute("mc", mc);
		getRequest().setAttribute("routType", routType);//1,3,4,5多选，2主送抄送，其它单选
		getRequest().setAttribute("status", status);
		/*if(routType!=null){
			if("1".equals(routType)||"3".equals(routType) || "4".equals(routType) || "5".equals(routType)){
				return "toAndroidDepartment1Jsp";
			}
			if("2".equals(routType)){
				return "toAndroidDepartment2Jsp";
			}
		}*/
		if(CommonUtil.stringNotNULL(pleaseOrWatch)&&"1".equals(pleaseOrWatch)){
			getRequest().setAttribute("pleaseOrWatch", true);
			return "toAndroidDepartmentJspPw";
		}
		return "toAndroidDepartmentJsp";
	}
			
	/**
	 * 软删除办件
	 * 
	 * @throws IOException
	 */
	public void deleteDoFile() throws IOException {
		String id = getRequest().getParameter("id");
		  String[] ids = id.split(",");
		  for (String strId : ids) {
		   DoFile doFile = tableInfoService.getDoFileById(strId);
		   if(doFile != null){
			   tableInfoService.deleteDoFile(doFile);

		   }
		  }
	}
	
	/**
	 * 
	 * 描述：假删除办件
	 * @throws IOException void
	 * 作者:蔡亚军
	 * 创建时间:2015-6-9 下午2:04:16
	 */
	public void falseDeleteDoFile() throws IOException {
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String id = getRequest().getParameter("id");
		String fromExcute = getRequest().getParameter("fromExcute");
		String[] ids = id.split(",");
		WebSocketUtil webSocket = new WebSocketUtil();
		for (String strId : ids) {
			DoFile doFile = tableInfoService.getDoFileById(strId);
			// 更新 instance 对应的 doFile 和 T_wf_process 值搬到 T_wf_process_temp
			if(doFile != null){
				//webSocket推送消息
				String instanceId = doFile.getInstanceId();
				List<WfProcess> list = tableInfoService.getAllProcessList(instanceId);
				WfProcess wfp = null;
				for(int i=0; i<list.size(); i++){
					wfp = list.get(i);
					String is_over = wfp.getIsOver();
					Integer is_show = wfp.getIsShow();
					String isBack = wfp.getIsBack();
					if(is_over!=null && is_over.equals("NOT_OVER")
							  && is_show!=null && is_show==1 && (isBack==null || !isBack.equals("2"))){
						try {
							webSocket.delBadge(wfp.getUserUid(), "", "");
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}
				}
				tableInfoService.falseDeleteDoFile(doFile.getDoFile_id(),doFile.getInstanceId(),emp);
				
				//保存日志信息表
				TrueJsonLog entity = new TrueJsonLog();
				entity.setInstanceId(instanceId);
				entity.setProcessId("");
				entity.setUserId(emp.getEmployeeGuid());
				entity.setExcute("falseDeleteDoFile");
				entity.setReadOrWrite("2");
				entity.setReadOrWriteDate(new Date());
				entity.setFromExcute(fromExcute);
				trueJsonService.saveTrueJsonLog(entity);
				
				//同时删除文号
				WfItem wfItem = itemService.getItemById(doFile.getItemId());
				if(wfItem!=null){
					if (wfItem.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) {
						//TODO:发文删除文号
						DocNumberWhFw docNumberWhFw = docNumberService.findDocNumFw(instanceId);
						if(docNumberWhFw!=null){
							tableInfoService.deleteWhOfFw(instanceId);
						}
					} else if ((wfItem.getVc_sxlx().equals(Constant.DEFINE_TYPE_DO) || ("2").equals(wfItem.getVc_sxlx()))) { // 办文和传阅
						//TODO:收文删除文号
						DocNumberWhBw docNumberWhBw = docNumberService.findDocNumBw(instanceId);
						if(docNumberWhBw!=null){
							tableInfoService.deleteWhOfBw(instanceId);
						}
					}
				}
			}
		}
	}
	
	/**
	 * 彻底删除办件
	 * 
	 * @throws IOException
	 */
	public void deleteCdDoFile() throws IOException {
		String id = getRequest().getParameter("id");
		DoFile doFile = tableInfoService.getDoFileById(id);
		if(doFile!=null){
			List<WfProcess> list = tableInfoService.getAllProcessList(doFile.getInstanceId());
			if(list!=null){
				tableInfoService.deleteWfProcesss(list);
			}
			tableInfoService.deleteDoFile(doFile);
		}
	}
	
	/**
	 * 恢复办件
	 * 
	 * @throws IOException
	 */
	public void huifuDoFile() throws IOException {
		String id = getRequest().getParameter("id");
		tableInfoService.updateDoFileIsDelete(id,"0");
	}
	
	
	/**
	 * 恢复办件
	 * 
	 * @throws IOException
	 */
	public void recoverDoFile() throws IOException {
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String id = getRequest().getParameter("id");
		String[] ids = id.split(",");
		WebSocketUtil webSocket = new WebSocketUtil();
		for(String strId : ids) {
			DoFile doFile = tableInfoService.getDoFileById(strId);
			// 更新 instance 对应的 doFile 和 T_wf_process
			if(doFile != null){
				tableInfoService.recoverDoFile(doFile.getDoFile_id(),doFile.getInstanceId());
				//webSocket推送消息: 恢复待办（添加消息提醒）
				String instanceId = doFile.getInstanceId();
				List<WfProcess> list = tableInfoService.getProcessList(instanceId);
				WfProcess wfp = null;
				for(int i=0; i<list.size(); i++){
					wfp = list.get(i);
					String is_over = wfp.getIsOver();
					Integer is_show = wfp.getIsShow();
					String isBack = wfp.getIsBack();
					if(is_over!=null && is_over.equals("NOT_OVER")
							&& is_show!=null && is_show==1 && (isBack==null || !isBack.equals("2"))){
						try {
							webSocket.apnsPush(wfp.getProcessTitle(), emp.getEmployeeGuid(), "", "", "", wfp.getUserUid());
						} catch (JSONException e) {
							e.printStackTrace();
						}
					 }
				}
			  }
		  }
	}
	
	/**
	 * 办件回收站列表
	 * 
	 * @return
	 */
	public String getHszDoFileList() {
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemId = getRequest().getParameter("itemId");
		if(itemId!=null&&!itemId.equals("")){
			WfItem wfItem = itemService.getItemById(itemId);
			if(wfItem!=null){
				itemName = wfItem.getVc_sxmc();
			}
		}
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = "";// 查询条件
		if (CommonUtil.stringNotNULL(title)) {
			conditionSql = " and t.DOFILE_TITLE like '%" + title + "%' ";
		}
		if (CommonUtil.stringNotNULL(itemName)) {
			conditionSql += " and i.vc_sxmc = '" + itemName + "' ";
		}

		// 城管局定制
		String itemIds = getRequest().getParameter("itemIds");
		if (CommonUtil.stringNotNULL(itemIds)) {
			itemIds = "'" + itemIds.replaceAll(",", "','") + "'";
			conditionSql = " and t.ITEM_ID in (" + itemIds + ") ";
		}

		String bigDepId = getSession().getAttribute(MyConstants.DEPARMENT_IDS) == null ? null
				: ((List) getSession().getAttribute(MyConstants.DEPARMENT_IDS))
						.get(0).toString();

		Employee employee = (Employee) getSession().getAttribute(
				MyConstants.loginEmployee);
		Department department = departmentService.findDepartmentById(employee
				.getDepartmentGuid());

		if (department != null
				&& CommonUtil.stringNotNULL(department.getSuperiorGuid())
				&& department.getSuperiorGuid().equals("1")) {
			// 超管查看所有事项
			bigDepId = null;
		}
		bigDepId = null;
		int pageSize = Integer.parseInt(SystemParamConfigUtil
				.getParamValueByParam("pagesize"));
		int count = tableInfoService.getCountHszDoFiles(bigDepId, conditionSql);
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<DoFile> doFileList = tableInfoService.getHszDoFileList(bigDepId,
				conditionSql, Paging.pageIndex, Paging.pageSize);
		if(doFileList!=null){
			for(int i=0;i<doFileList.size();i++){
				DoFile doFile = doFileList.get(i);
				if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
					WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
					if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
						 WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
						 doFile.setNodeName(node.getWfn_name());
					}
				}
			}
		}
		getRequest().setAttribute("doFileList", doFileList);
		getRequest().setAttribute("wfTitle", title);
		getRequest().setAttribute("itemName", itemName);
		getRequest().setAttribute("itemId", itemId);
		return "getHszDoFileList";
	}
			
			/**
			 * 
			 * 描述：生成打印的文件
			 * @throws Exception void
			 * 作者:蔡亚军
			 * 创建时间:2015-6-25 下午4:54:00
			 */
			public void generatePdf() throws Exception{
				String instanceId = getRequest().getParameter("instanceId");
				//获取当前登录用户
				String oldformId = getRequest().getParameter("formId");
				//当前节点Id
				String nodeId = getRequest().getParameter("nodeId");
				String json = getRequest().getParameter("json");
				//流程Id
				String workFlowId = getRequest().getParameter("workFlowId");
				// 增加processid
				// processId
				String processId = getRequest().getParameter("processId");
				WfProcess currentProcess = tableInfoService.getProcessById(processId);
				String isOver = getRequest().getParameter("isOver");
				String value = "";
				String pdfPath = "";
				if(currentProcess!=null){
					String fInstanceId = currentProcess.getfInstancdUid();			//父流程的实例id
					String wf_uid = currentProcess.getWfUid();
					List<WfProcess> list = tableInfoService.getProcessList(fInstanceId);
					if(list!=null && list.size()>0){
						String wf_f_uid = list.get(0).getWfUid();
						WfChild child =  workflowBasicFlowService.getWfChildByPidAndCid(wf_uid, wf_f_uid);
						if(child!=null){
							String wfc_outparwf = child.getWfc_outparwf();
							if(wfc_outparwf!=null && wfc_outparwf.equals("1")){
								isOver = "1";
							}
						}
					}
				}
				// 待办
				if(isOver != null && isOver.equals("0")){
					if(currentProcess != null && currentProcess.getpStepIndex() !=null &&currentProcess.getpStepIndex() ==1){
						pdfPath = currentProcess.getPdfPath().split(",")[1];
					}else if(currentProcess != null && "1".equalsIgnoreCase(currentProcess.getIsChildWf()) &&currentProcess.getStepIndex() ==1){
						pdfPath = currentProcess.getPdfPath().split(",")[1];
					}else{
						value =	this.saveForm(oldformId,2,instanceId,oldformId,nodeId,workFlowId,"","","");
						pdfPath= getHtmlToNewOfPath(oldformId,nodeId, value, instanceId, false,false);
					}
				}
				// 已办
				if(isOver != null && isOver.equals("1")){
					if(currentProcess != null){
						DoFile d = tableInfoService.getDoFileByElements(null,instanceId);
						if(CommonUtil.stringNotNULL(currentProcess.getPdfPath())){
							pdfPath = currentProcess.getPdfPath().split(",")[0];
							String pdfNewPath = pdfPath.substring(0, pdfPath.length() - 4)+ "merge" + ".pdf";
							int num = 0;
							if(d!=null){
								num = d.getCopyNumber()==null?0:d.getCopyNumber();
							}
							attachmentService.mergerAttToPdf(pdfPath, null, instanceId, pdfNewPath,num);
							pdfPath = pdfNewPath;
						}else{
							value =	this.saveForm(oldformId,2,instanceId,oldformId,nodeId,workFlowId,"","","");
							pdfPath= getHtmlToNewOfPath(oldformId,nodeId, value, instanceId, false,false);
						}
						
						
					}
				}
		        String serverUrl = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getLocalPort() +getRequest().getContextPath();
		        String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
			    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			    String realId = SystemParamConfigUtil.getParamValueByParam("readIp");
				String[] realIds = realId.split("##");
				if(serverUrl.indexOf(realIds[1]) != -1){
					serverUrl = serverUrl.replace(realIds[1], realIds[0]);
				}
			    if(pdfPath.startsWith(oldpdfRoot)){
				    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
			    }else if(pdfPath.startsWith(newPdfRoot)){
			    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
			    }
		        getResponse().getWriter().print(pdfPath);
			}
			
	/**
	* 获取会议管理中子流程的步骤
	* @return
	*/
	public  String getMeetingPending(){
		String title = getRequest().getParameter("wfTitle");
		
		String itemName = getRequest().getParameter("itemName");
		
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));	
				
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		
		//String itemid = "A6695247-68A5-412B-8915-C96FB1C6A519";	 
		
		String conditionSql ="";
		
		if (CommonUtil.stringNotNULL(title) || CommonUtil.stringNotNULL(itemName)) {
			conditionSql += "and p.process_title like '%" + title
					+ "%' and i.vc_sxmc like '%" + itemName + "%'";
		}
		
		//conditionSql = " and p.wf_item_uid ='"+itemid+"'";
		//conditionSql+=" and (p.dotype = 1 or p.dotype=2)";
		
		conditionSql+=" and t.wfn_id = '7EB6A646-FA9A-44C0-9AB6-7CCCE7E72573' ";	//国土局_市局_会议通知 
		
		int count = pendingService.getCountOfPending(conditionSql,emp.getEmployeeGuid(), "");	
		
		Paging.setPagingParams(getRequest(), pageSize, count);
			
		List<Pending> list = pendingService.getPendingList(conditionSql,emp.getEmployeeGuid(), Paging.pageIndex, Paging.pageSize);
		
		pendingService.initRemainTime(list);// 设定节点期限
		
		pendingService.initDelayItem(list);
		
		getRequest().setAttribute("list", list);
		
		return "meetingPendingList";
	}
	
	public void PDFToPNGImage(String pdfPath){
		
		PDFToPNGImageThread ppThread = new PDFToPNGImageThread(pdfPath);
		ppThread.start();
		
		/*if(pdfPath != null && !pdfPath.equals("")){
			//String pdfDir = pdfPath.substring(0,pdfPath.lastIndexOf("/")+1);
			String pdfDir = pdfPath.substring(0,pdfPath.lastIndexOf("."))+"/";
			// 创建目录
			try
			{
				if(!(new File(pdfDir).isDirectory()))
				{
					new File(pdfDir).mkdir();
				}
			}
			catch(SecurityException e)
			{
			        e.printStackTrace();
			}
			// 设置 pdf 页数
			
			//int imageCount  =1;
			ExecDll exceDll = new ExecDll();
			try {
				exceDll.PDFToPNGImage(pdfPath, pdfDir);
			} catch (NativeException e) {
					e.printStackTrace();
			} catch (IllegalAccessException e) {
					e.printStackTrace();
			}
		}*/
		
	}

	/**
	 * 获取待收列表页面
	 * @return
	 */
	public String getDofileReceiveList(){
		String wfTitle = getRequest().getParameter("wfTitle");
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String	userId = emp.getEmployeeGuid();	//用户id
		String login_name = emp.getEmployeeLoginname();
		String deptId = getRequest().getParameter("deptId");
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
		Map<String,String> map = new HashMap<String,String>();
		map.put("userId", userId);
		map.put("wfTitle", wfTitle);
		if(deptId != null && !deptId.equals("")){
			map.put("deptId", deptId);
		}
		int count = tableInfoService.getDofileReceiveCount(map);
		Paging.setPagingParams(getRequest(), pageSize, count);
		//getDofileReceiveCount
		List<Object[]> list  = tableInfoService.getDofileReceiveList(map, Paging.pageIndex, Paging.pageSize);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("wfTitle", wfTitle);
		getRequest().setAttribute("deptId", deptId);
		String sycnToTzggUser = SystemParamConfigUtil.getParamValueByParam("sycnToTzggUser");
		if(sycnToTzggUser!=null && !sycnToTzggUser.equals("")){
			String[] userIds = sycnToTzggUser.split(",");
			boolean isSync = false;
			for(String id:userIds){
				if(id.equals(login_name)){
					isSync = true;
					break;
				}
			}
			getRequest().setAttribute("isSync", isSync);
		}
		return "sendList";
	}
	
	/**
	 * 查看待收情况
	 * @return
	 */
	public String getDetailReceiveInfo(){
		String fprocessid = getRequest().getParameter("fprocessid"); 
		String applydate = getRequest().getParameter("applydate"); 
		String title = getRequest().getParameter("title");
		//获取已收,待收
		List  list = tableInfoService.getReceiveInfo(fprocessid,applydate);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("title", title);
		return "showReceiveInfo";
	}
	
	/**
	 * 手机端获取待办列表
	 */
	public void getItemsCountOfMoblie() {
		// 打开流
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String type = "";
			String userId = "";
			String containsMail =  SystemParamConfigUtil.getParamValueByParam("containsMail");			//是否包含邮件等内容信息

			if(jsonObject != null){
				type= (String) jsonObject.get("type");
				// 用户id
				userId = (String) jsonObject.get("userId");
			}else{
				type= getRequest().getParameter("type");
				// 用户id
				userId =  getRequest().getParameter("userId");
			}
			
			// 获取所有的事项
			List<WfItem> items = itemService.getAllWfItem();
			Map<String,Integer> itemCount = new HashMap<String,Integer>();
			// 待办
			if ("0".equals(type)) {
				// 总条数downloadTure
				String conditionSql = "";
				for(int i = 0 ; i < items.size() ; i++){
					conditionSql =" and i.id = '"+items.get(i).getId()+"'";
					int count = pendingService.getCountOfPending(conditionSql, userId, "");
					itemCount.put(items.get(i).getId(), count);
				}
				
				if(containsMail!=null && containsMail.equals("1")){
					int count2 = integrateService.findMailCount(conditionSql, userId);
					itemCount.put("id4mail", count2);
				}
				
			} else if ("1".equals(type)) {// 已办
				String conditionSql = "";
				for(int i = 0 ; i < items.size() ; i++){
					conditionSql =" and i.id = '"+items.get(i).getId()+"'";
					int count = tableInfoService.getCountOfOver(conditionSql, userId,"1");
					itemCount.put(items.get(i).getId(), count);
				}
			}else if("8".equals(type)){			//前置机待收
				String conditionSql = "";
				int count = toRecDocService.findToRecDocCount(conditionSql);
				itemCount.put("idRec", count);
			}else if("9".equals(type)){			//前置机已收
				String conditionSql = "";
				int count = toRecDocService.findToRecedDocCount(userId, conditionSql);
				itemCount.put("idReced", count);
			}
			
			jsonStr = 	JSONArray.fromObject(itemCount).toString();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 输出json
		out.print(jsonStr);
		out.close();
	}
	
	public void getSessionByCommentJson(){
		String commentJson = this.getRequest().getParameter("commentJson");
		getRequest().getSession().setAttribute("commentJson1", commentJson);
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write("yes");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	
	}
	
	public void getWfProess(){
		
		String instanceid = this.getRequest().getParameter("instanceid");
		WfProcess wfProcess = tableInfoService.getMaxWfProcessIdByInstanceId(instanceid);
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(JSONObject.fromObject(wfProcess).toString());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 获取待办目前处于的步骤信息
	 * @return
	 */
	public String getRedirectDetail(){
		String allInstanceId = getRequest().getParameter("instanceId");
		List list = tableInfoService.getNewestWfProcess(allInstanceId);
		List returnList = new ArrayList();
		for(int i=0; i<list.size(); i++){
			Object[] data = (Object[])list.get(i);
			Integer stepIndex =  Integer.parseInt(data[8].toString());
			data[10] = 1;
			if(stepIndex==1){	//校验是否为0
				String instanceId = data[0].toString();
				WfProcess wfProcess = new WfProcess();
				wfProcess.setWfInstanceUid(instanceId);
				wfProcess.setStepIndex(stepIndex);
				List<WfProcess> wflist = tableInfoService.getWfProcessList(wfProcess);
				WfProcess wfp = null;
				for(int j=0; wflist!=null && j<wflist.size(); j++){
					wfp = wflist.get(j);
					String userid = wfp.getUserUid();
					Department department = departmentService.queryDepartmentById(userid);
					if(department!=null){
						data[10] = 0;
					}
				}
			}
			returnList.add(data);
		}
		getRequest().setAttribute("list", returnList);
		return "redirectDetail";
	}
	
	/**
	 * 获取该步骤信息的详细信息
	 * @return
	 */
	public String getProcessDeatil(){
		String instanceId = getRequest().getParameter("instanceId");
		String step = getRequest().getParameter("stepIndex");
		Integer stepIndex = step==null?0:Integer.parseInt(step);
		WfProcess wfProcess = new WfProcess();
		wfProcess.setWfInstanceUid(instanceId);
		wfProcess.setStepIndex(stepIndex);
		List<WfProcess> list = tableInfoService.getWfProcessList(wfProcess);
		String nodeid = "";
		Integer exchange = null;
		if(stepIndex!=null && stepIndex==1){		//校验父流程的节点
			if(list!=null && list.size()>0){
				String pWfInstanceId = list.get(0).getfInstancdUid();
				if(pWfInstanceId!=null && !pWfInstanceId.equals("")){
					WfProcess pro = new WfProcess();
					pro.setWfInstanceUid(pWfInstanceId);
					pro.setIsOver("OVER");
					List<WfProcess> plist = tableInfoService.getWfProcessList(pro);
					if(plist!=null && plist.size()>0){
						 nodeid = plist.get(0).getNodeUid();
					}
				}
			}
		}
		List<WfProcess> processList = new ArrayList<WfProcess>();
		WfProcess wfp = null;
	
		for(int i=0; list!=null && i<list.size(); i++){
			wfp = list.get(i);
			if(nodeid==""){
				nodeid = wfp.getNodeUid();
			}
			String userid = wfp.getUserUid();
			Employee emp = employeeService.findEmployeeById(userid);
			if(emp!=null){
				String userName = emp.getEmployeeName();
				wfp.setUserName(userName);
			}else{
				Department department = departmentService.queryDepartmentById(userid);
				String depName = department.getDepartmentName();
				wfp.setUserName(depName);
			}
			processList.add(wfp);
		}
		WfNode wfNode = workflowBasicFlowService.findNodeById(nodeid);
		getRequest().setAttribute("list", processList);
		getRequest().setAttribute("exchange", wfNode.getIsExchange());
		getRequest().setAttribute("nodeid", nodeid);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("stepIndex", stepIndex);
		return "processDetail";
	}
	
	public String getUserInfoByNode(){
		String nodeId = getRequest().getParameter("nodeId");
		WfNode wfNode = workflowBasicFlowService.findNodeById(nodeId);
		String click = getRequest().getParameter("click");
		String exchange = getRequest().getParameter("exchange");
		String route_type= wfNode.getWfn_route_type();
		if (Boolean.parseBoolean(click) == true) {// 点击节点才有人显示
			wfNode = workflowBasicFlowService.findFormIdByNodeId(nodeId);
		} else {
			wfNode = null;
		}
		String send = getRequest().getParameter("send");
		String routType = getRequest().getParameter("routType");
		String groupId = "";
		List<InnerUserMapEmployee> innerUserList = new ArrayList<InnerUserMapEmployee>();
		if (!("").equals(wfNode) && wfNode != null) {
			// 获取人员组的id
			groupId = wfNode.getWfn_staff();
			// 获取人员组的人员信息
			innerUserList = groupService.getListByInnerUserId(groupId,null, "");
		}
		// 重定向时
		if (routType == null || ("").equals(routType)
				|| ("null").equals(routType)) {
			getRequest().setAttribute("routType", 0);
		} else {
			getRequest().setAttribute("routType", routType);
		}
		getRequest().setAttribute("userList", innerUserList);
		String userid = null;
		if (innerUserList != null) {
			for (int i = 0; i < innerUserList.size(); i++) {
				InnerUserMapEmployee innerUserMapEmployee = innerUserList
						.get(i);
				if (userid != null) {
					userid += ("," + innerUserMapEmployee.getEmployee_id());
				} else {
					userid = innerUserMapEmployee.getEmployee_id();
				}

			}
		}
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("send", send);
		//getRequest().setAttribute("exchange", exchange);
		getRequest().setAttribute("routType", route_type);
		return "userInfoByNode";
	}
	
	/**
	 * 重新定向
	 */
	public void addProcessInfo(){
		String instanceId = getRequest().getParameter("instanceId");
		//待办的步骤数
		String step = getRequest().getParameter("stepIndex");
		//节点类型
		String routType = getRequest().getParameter("routType");
		Integer stepIndex =  step==null?0:Integer.parseInt(step);
		WfProcess wfProcess = new WfProcess();
		wfProcess.setWfInstanceUid(instanceId);
		wfProcess.setStepIndex(stepIndex);
		//此步的过程信息
		List<WfProcess> list = tableInfoService.getWfProcessList(wfProcess);
		//获取人员信息
		String userId = getRequest().getParameter("userId");
		String[] name = userId.split(";");
		String xtoName = "";
		String xccName = "";
		//有主送,有抄送
		if(name!=null && name.length>1){
			xtoName = name[0];
			xccName = name[1];
		}else if(name.length==0){
			//未选择任何人员信息
		}else{
			xtoName = name[0];
		}
		WfProcess wfp = null;
		String isOver= "";
		//将原先的数据重新处理
		WfProcess mainProcess = null;
		for(int i=0; list!=null && i<list.size(); i++){
			wfp = list.get(i);
			isOver = wfp.getIsOver();
			if(routType!=null && routType.equals("2")){	//完全式
				Integer isMaster = wfp.getIsMaster();
				if(isMaster!=null && isMaster==1){
					mainProcess = wfp;
					continue;
				}
			}
			if(isOver.equals("NOT_OVER")){
				wfp.setIsRedirect(1);
				wfp.setIsOver("OVER");
				tableInfoService.updateProcess(wfp);
			}
		}
		//重新插入数据
		if(routType!=null && routType.equals("2")){	//完全式
			if(xtoName!=null && !xtoName.equals("")){
				if(mainProcess!=null){
					String isover = mainProcess.getIsOver();
					if(isover!=null && isover.equals("NOT_OVER")){	//废弃下一步
						WfProcess pro = new WfProcess();
						pro.setWfInstanceUid(mainProcess.getWfInstanceUid());
						pro.setIsShow(0);
						pro.setStepIndex(mainProcess.getStepIndex()+1);
						List<WfProcess> nextList = tableInfoService.getWfProcessList(pro); 
						if(nextList!=null && nextList.size()>0){
							WfProcess pro1 = nextList.get(0);
							pro1.setIsRedirect(1);
							tableInfoService.updateProcess(pro1);
						}
					}
					mainProcess.setIsRedirect(1);
					mainProcess.setIsOver("OVER");
					tableInfoService.updateProcess(mainProcess);
				}
			}
		}
			if(xtoName!=null && !xtoName.equals("")){
				String[] ids = xtoName.split(",");
				for(int i=0; ids!=null && i<ids.length; i++){
					String userUid = ids[i];
					wfp.setApplyTime(new Date());
					wfp.setUserUid(userUid);
					wfp.setIsOver("NOT_OVER");
					wfp.setIsShow(1);
					wfp.setIsRedirect(0);
					wfp.setIsMaster(1);
					wfp.setJssj(null);
					wfp.setWfProcessUid(UuidGenerator.generate36UUID());
					tableInfoService.addProcess(wfp);
				}
			}
		if(xccName!=null && !xccName.equals("")){
			String[] ids = xccName.split(",");
			for(int i=0; ids!=null && i<ids.length; i++){
				String userUid = ids[i];
				wfp.setApplyTime(new Date());
				wfp.setUserUid(userUid);
				wfp.setIsOver("NOT_OVER");
				wfp.setIsMaster(0);
				wfp.setIsRedirect(0);
				wfp.setJssj(null);
				wfp.setWfProcessUid(UuidGenerator.generate36UUID());
				tableInfoService.addProcess(wfp);
			}
		}
		PrintWriter out = null;
		String flag = "success";
		try {
			out = this.getResponse().getWriter();
			out.write(flag);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 并行完全式时,校验主办是否已经办理过了
	 */
	public void canSelect(){
		try {
			String instanceId = getRequest().getParameter("instanceId");
			String step = getRequest().getParameter("stepIndex");
			Integer stepIndex = step == null ? 0 : Integer.parseInt(step);
			WfProcess wfProcess = new WfProcess();
			wfProcess.setWfInstanceUid(instanceId);
			wfProcess.setStepIndex(stepIndex);
			List<WfProcess> list = tableInfoService.getWfProcessList(wfProcess);
			WfProcess wfp = null;
			for (int i = 0; list != null && i < list.size(); i++) {
				wfp = list.get(i);
				String isOver = wfp.getIsOver();
				Integer mater = wfp.getIsMaster();
				if (isOver.equals("OVER") && mater != null && mater == 1) {
					getResponse().getWriter().print("success");
					return;
				}
			}
			getResponse().getWriter().print("false");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	//获取哪些数据是超期的并且推送信息出去
	public void sendMessageByCQ(){
		//获取所有快超期的信息 p.wf_process_uid,p.tonodeid,p.user_uid,i.vc_xxlx,t.wfn_txnr,t.txnr_txnrids,p.wf_instance_uid
		List<Object[]> list = tableInfoService.getKcqWfProcess();
		//一条一条发信息
		for(int i=0;i<list.size();i++){
			Object[] obj = list.get(i);
			String userid=(String)obj[2];
			String processId=(String)obj[0];
			String instanceid=(String)obj[6];
			//验证是人员还是部门
			Employee employee =employeeService.findEmployeeById(userid);
			if(employee==null){
				userid="#"+userid;
			}
			//把获取的内容拼成数据
			String wfn_txnr = (String)obj[4];
			String wfn_txnrids = (String)obj[5];
			WfProcess wfProcess = pendingService.getProcessByID(processId);
			if(wfn_txnrids!=null){
				//获取该事项的表结构并且获取表中所有数据
				WfMain wfMain=workflowBasicFlowService.getWfMainById(wfProcess.getWfUid());
				String table = wfMain.getWfm_title_table();
				WfTableInfo wfTableInfo = tableInfoService.getTableById(table);
				List<WfFieldInfo> wfFieldInfo = tableInfoService.getFieldByTableid(table);
				String culoum="";
				String culoumName="";
				String type="";
				if(wfFieldInfo!=null){
					for(int z=0;z<wfFieldInfo.size();z++){
						if(z!=0){
							culoum +=",";
							culoumName +=",";
							type +=",";
						}
						culoum +=wfFieldInfo.get(z).getVc_fieldname();
						culoumName +=wfFieldInfo.get(z).getVc_name();
						type +=wfFieldInfo.get(z).getI_fieldtype();
					}
					Object[] zhi = tableInfoService.getYwbList(instanceid,wfTableInfo.getVc_tablename(),culoum);
					String[] culoumNames = culoumName.split(",");
					String[] types = type.split(",");
					for(int z=0;z<culoumNames.length;z++){
						String value="";
						if(types[z]!=null&&types[z].equals("0")){
							value = (String)zhi[z];
						}else if(types[z]!=null&&types[z].equals("1")){
							value = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format((Date)zhi[z]);
						}else if(types[z]!=null&&types[z].equals("2")){
							value = ((BigDecimal)zhi[z]).toString();
						}else if(types[z]!=null&&types[z].equals("3")){
							try {
								value=Utils.parseClob(type);
							} catch (Exception e) {
								value="";
								e.printStackTrace();
							};
							
						}
						wfn_txnr =wfn_txnr.replace("{"+culoumNames[z]+"}", value==null?"":value);
					}
					
				}
			}else{
				wfn_txnr = "您有一条关于《"+wfProcess.getProcessTitle()+"》的待办件，于“"+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(wfProcess.getJdqxDate())+"”到期，请速办";
			}
			wfn_txnr=wfn_txnr.replace("${到期时间}", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(wfProcess.getJdqxDate()));
			wfn_txnr=wfn_txnr.replace("${办件期限}", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(wfProcess.getZhqxDate()));
			/*try{
				messageCenterService.insertNewMessage(userid, 
					wfn_txnr,
					userid, obj[3] != null ? Integer.parseInt((String)obj[3]) : 2, 0, 0, 1, 1, 0, new Date(System.currentTimeMillis()+300000), 1);
			}catch (Exception e) {
				LOGGER.error("----发送短信失败,请检查短信接口系统---");
				
			}*/
			//wfProcess.setIscqfs(1);
			tableInfoService.update(wfProcess);
		}
	}
	
	/**
	 * 将pdf合并意见生成新的pdf
	 * @param pdfPath	pdf地址
	 * @param json		被合并的意见
	 * @param newPdfPath	合并意见后的pdf
	 * @return	
	 * @throws Exception
	 */
	public String genePdf(String pdfPath, String json, String newPdfPath) throws Exception {
		if(json==null){
			json = "";
		}
		GenePdfUtil generUtil = GenePdfUtil.getInstance();
		String jsonPath =  generUtil.writeFile(newPdfPath, json);
		int success =  0;
		//获取exe文件路径
		String jsonAddToPDF = SystemParamConfigUtil.getParamValueByParam("JsonAddToPDF");
		String tempPngPath = SystemParamConfigUtil.getParamValueByParam("tempPngPath");
		String[] params = new String[6];
		params[0] = jsonAddToPDF;
		params[1] = jsonPath;
		params[2] = pdfPath;
		params[3] = newPdfPath;
		params[4] = tempPngPath;
		params[5] = "5";
		if(new File(newPdfPath).exists()){
			new File(newPdfPath).delete();
		}
		Runtime rt = Runtime.getRuntime();
		Process p = null;
		try {
			p = rt.exec(params); // 生成附件存在时间偏差
		} catch (Exception e) {
			e.getStackTrace();
			p.destroy();
			System.out.println("Error my exec ");
		}
		return newPdfPath;
	}
	
	
	/**
	 * 跟踪(即步骤记录)
	 */
	public String getProcessOfMobile() {
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String isPrint = getRequest().getParameter("isPrint");
		Employee emp = null;
		String userId = getRequest().getParameter("userId");
		getRequest().setAttribute("userId", userId);
		if(userId != null && !"".equals(userId)){
			emp = employeeService.findEmployeeById(userId);
		}
		
		// 跟踪
		List<GetProcess> proList = tableInfoService.findProcessList(instanceId);
		if (proList != null && proList.size() != 0) {
			TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
			//判断当前list里面是否有假节点,如果有,+号显示在假节点后面
			boolean isHaveFakeNode = false;
			//假节点的id
			String fakeNodeProcessId = "";
			for (GetProcess getProcess : proList) {
				if (Integer.parseInt(getProcess.getIsEnd()) == 1) {
					getProcess.setNodeName("办结");// 最后一步设置为办结
				}
				String commentText = tableInfoExtendService.getTextValue(trueJson.getTrueJson(), getProcess.getWfProcessUid());
				getProcess.setCommentText(commentText);		
			}
		}

		getRequest().setAttribute("processList", proList);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("isPrint", isPrint);
		return "getProcessOfMobile";
	}
	
	/**
	 * 跟踪(即步骤记录)(主办、协办)
	 */
	public String getZxProcessOfMobile() {
		String instanceId = getRequest().getParameter("instanceId");
		String workFlowId = getRequest().getParameter("workFlowId");
		String doType = getRequest().getParameter("doType");
		if(Utils.isNotNullOrEmpty(doType)&&"1".equals(doType)){
			doType="2";
		}else if(Utils.isNotNullOrEmpty(doType)&&"2".equals(doType)){
			doType="1";
		}
		String[] instanceIds= tableInfoService.getIntanceIdByZxIntanceId(instanceId,doType);

		Map map = new HashMap();
		Map map2 = new HashMap();
		List<List<GetProcess>> processList = new ArrayList<List<GetProcess>>();
		if(instanceIds!=null){
			for(int i=0;i<instanceIds.length;i++){
				// 跟踪
				List<GetProcess> proList = tableInfoService.findProcessList(instanceIds[i]);
				
				if (proList != null && proList.size() != 0) {
					//判断当前list里面是否有假节点,如果有,+号显示在假节点后面
					boolean isHaveFakeNode = false;
					//假节点的id
					String fakeNodeProcessId = "";
					for (GetProcess getProcess : proList) {
						String formNodeId = getProcess.getFromNodeId();
						String toNodeId = getProcess.getToNodeId();
						if(formNodeId==null || ("null").equals(formNodeId)){
							formNodeId = "";
						}
						if(toNodeId==null || ("null").equals(toNodeId)){
							toNodeId = "";
						}
						List<GetProcess> getProcessList = tableInfoService
								.getChildWfProcessList(getProcess.getWfInstanceUid(),getProcess.getWfProcessUid());
						if(getProcessList!=null&&getProcessList.size()!=0){
							isHaveFakeNode = true;
							fakeNodeProcessId += getProcess.getWfProcessUid()+",";
						}
						// //查询当前节点下是否有子流程
						// String f_instanceId = getProcess.getF_instanceId();
						// //查询当前发送出的节点
						// String toNodeId = getProcess.getToNodeId();
						// List<GetProcess> proceList =
						// tableInfoService.findProcessList(f_instanceId,toNodeId);
						if (Integer.parseInt(getProcess.getIsEnd()) == 1) {
							getProcess.setNodeName("办结");// 最后一步设置为办结
						}
						// 获取当前步骤,当前人所填的意见
						List<Comment> commentList = commentService.findCommentsByElements(getProcess.getUserId(),
										getProcess.getWfInstanceUid(), getProcess.getWfProcessUid());
						getProcess.setCommentList(commentList);
						getRequest().setAttribute("commentCount", commentList.size());

						String stepIndex = getProcess.getStepIndex();
						GetProcess process = tableInfoService.findGetProcessByPInstanceID(instanceIds[i], stepIndex);
						if (process != null) {
							map.put(stepIndex, process);
							// 获取子流程的若干实例
							String pinstanceId = process.getWfInstanceUid();
							List list = tableInfoService.findProcess(pinstanceId);
							map2.put(stepIndex, list);
						}
						if (getProcess.getIs_merge() != null && !("null").equals(getProcess.getIs_merge())) {
							if (Integer.parseInt(getProcess.getIs_merge()) == 2) {
								getProcess.setNodeName("推送");// 是否被推送
							}
						}
						
						//添加路径
						//String serverUrl = "http://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
						//serverUrl+ "/form/html/" + 
						getProcess.setPdfPath(getProcess.getPdfPath().split(",")[1].substring(getProcess.getPdfPath().split(",")[1].lastIndexOf("/")+1));
					}
					//更新非假节点的isHaveChild为0
					if(isHaveFakeNode == true){
						for (GetProcess getProcess : proList) {
							if(fakeNodeProcessId.indexOf(getProcess.getWfProcessUid())==-1){
								getProcess.setIsHaveChild("0");
							}
						}
					}
					
					processList.add(proList);
				}
			}
			
		}
		
		getRequest().setAttribute("processList", processList);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("workFlowId", workFlowId);
		getRequest().setAttribute("map", map);
		getRequest().setAttribute("map2", map2);
		return "getZxProcessOfMobile";
	}
	
	public String getPushMessageOfMobile(){
			JSONObject jsonObject = getJSONObject(); 
			String userId = "";
			String processId ="";
			if(jsonObject != null){
				userId = (String) jsonObject.getString("userId");
				processId = (String) jsonObject.getString("processId");
			}else{
				userId = getRequest().getParameter("userId");
				processId = getRequest().getParameter("processId");
			}
			// 获取当前登录用户
			Employee emp = employeeService.findEmployeeById(userId);
			 
			WfProcess wfProcess = pendingService.getProcessByID(processId);
			List<PushMessage> pushMessageList = new ArrayList<PushMessage>();
			if(wfProcess!=null){
				//获取所有的主办协办
				//获取同等级里所有的主办人员
				List<WfProcess> wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"1");
				List<WfProcess> wfProcessList1 = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"2");
				boolean iszb=false;
				boolean isxb=false;
				if(wfProcessList!=null){
					for(int i=0;i<wfProcessList.size();i++){
						WfProcess wfProcess2 = wfProcessList.get(i);
						if(wfProcess2.getUserUid().equals(emp.getEmployeeGuid())){
							iszb=true;
							break;
						}
					}
				}
				if(wfProcessList1!=null){
					for(int i=0;i<wfProcessList1.size();i++){
						WfProcess wfProcess2 = wfProcessList1.get(i);
						if(wfProcess2.getUserUid().equals(emp.getEmployeeGuid())){
							isxb=true;
							break;
						}
					}
				}
				//获取人家推送给他的信息
				List<String> users = new	ArrayList<String>();
				// 获取被推送的消息--可能会多条--先只做一条处理,若需要,需修改
				List<PushMessage> pmList = tableInfoService.getPushMessageList(emp.getEmployeeGuid(),wfProcess.getWfInstanceUid());
				if(pmList.size() > 0){
					for(int j=0;j<pmList.size();j++){
						PushMessage pM = pmList.get(j);
						users.add(pM.getPushEmpId());
						List<SendAttachments> attList = attachmentService .findSendAttsByIdAndUserName(pM.getFjid(), pM.getPushEmpId());
						// 复制附件到 form/html 下面
						if(attList.size()>0){
							String oldbasePath = SystemParamConfigUtil.getParamValueByParam("filePath");
							String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");

							for(int t = 0 ; t < attList.size(); t++){
								// 复制文件
								String fileNameWithPath =basePath+attList.get(t).getLocalation();
								if(!new File(fileNameWithPath).exists()){
									 fileNameWithPath =oldbasePath+attList.get(t).getLocalation();
								}
								File dest = new File(PathUtil.getWebRoot() + "form/html/"+attList.get(t).getLocalation().substring(attList.get(t).getLocalation().lastIndexOf("/")+1));
								if(!dest.exists()){
									FileUploadUtils.copy(new File(fileNameWithPath),dest);
								}
								// 修改路径
								String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
								attList.get(t).setLocalation(serverUrl+"/form/html/"+attList.get(t).getLocalation().substring(attList.get(t).getLocalation().lastIndexOf("/")+1));
							}
						}
						pM.setAttList(attList);
						pushMessageList.add(pM);
					}
				}
				//获取他这个流程发给别人的推送信息
				List<PushMessage> pmList1 = tableInfoService.getPushMessage(emp.getEmployeeGuid(),wfProcess.getWfInstanceUid());
				if(pmList1!=null&&pmList1.size()>0){
					for(int j=0;j<pmList1.size();j++){
						PushMessage pM = pmList1.get(j);
						List<SendAttachments> attList = attachmentService .findSendAttsByIdAndUserName(pM.getFjid(), pM.getPushEmpId());
						pM.setAttList(attList);
						pushMessageList.add(pM);
					}
				}else{
					if(iszb||isxb){
						PushMessage pushMe = new PushMessage();
						pushMe.setPushEmpId(emp.getEmployeeGuid());
						Employee employee = tableInfoService.findEmpByUserId(emp.getEmployeeGuid());
						if(employee!=null){
							pushMe.setPushEmpName(employee.getEmployeeName());
						}
						Department department =departmentService.findDepartmentById(employee==null?emp.getEmployeeGuid():employee.getDepartmentGuid());
						pushMe.setPushKs(department.getDepartmentName());
						pushMessageList.add(pushMe);
					}
				}
				//如果是主办
				if(iszb){
					//获取同等级里所有的协办人员
					wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getfInstancdUid(),"2");
					if(wfProcessList!=null){
						for(int i=0;i<wfProcessList.size();i++){
							WfProcess wfProcess2 = wfProcessList.get(i);
							//验证有没有已经获取过值
							boolean flag=false;
							for(int j=0;j<users.size();j++){
								if(users.get(j).equals(wfProcess2.getUserUid())){
									flag=true;
								}
							}
							if(!flag){
								PushMessage pushMe = new PushMessage();
								pushMe.setPushEmpId(wfProcess2.getUserUid());
								Employee employee = tableInfoService.findEmpByUserId(wfProcess2.getUserUid());
								if(employee!=null){
									pushMe.setPushEmpName(employee.getEmployeeName());
								}
								Department department =departmentService.findDepartmentById(employee==null?wfProcess2.getUserUid():employee.getDepartmentGuid());
								pushMe.setPushKs(department.getDepartmentName());
								pushMessageList.add(pushMe);
							}
						}
					}
				}
				//获取子流程的值
				wfProcessList = pendingService.findProcessListByFIdAndDoType(wfProcess.getWfInstanceUid(),"1");
				if(wfProcessList!=null){
					for(int i=0;i<wfProcessList.size();i++){
						WfProcess wfProcess2 = wfProcessList.get(i);
						//验证有没有已经获取过值
						boolean flag=false;
						for(int j=0;j<users.size();j++){
							if(users.get(j).equals(wfProcess2.getUserUid())){
								flag=true;
							}
						}
						if(!flag){
							PushMessage pushMe = new PushMessage();
							pushMe.setPushEmpId(wfProcess2.getUserUid());
							Employee employee = tableInfoService.findEmpByUserId(wfProcess2.getUserUid());
							if(employee!=null){
								pushMe.setPushEmpName(employee.getEmployeeName());
							}
							Department department =departmentService.findDepartmentById(employee==null?wfProcess2.getUserUid():employee.getDepartmentGuid());
							pushMe.setPushKs(department.getDepartmentName());
							pushMessageList.add(pushMe);
						}
					}
				}
			}
			tableInfoService.updatePushMessageZt(emp.getEmployeeGuid(),wfProcess);
			List<PushMessage> msgs = new ArrayList<PushMessage>();
			for(int i = 0; i < pushMessageList.size() ; i++){
				if(pushMessageList.get(i).getPushedEmpId() != null &&!"".equals(pushMessageList.get(i).getPushedEmpId())){
					msgs.add(pushMessageList.get(i));
				}
			}
			getRequest().setAttribute("pmList", msgs);
			return "getPushMessageOfMobile";
			
			/*List<PushMobileMsg> msgs = new ArrayList<PushMobileMsg>();
			for(int i = 0; i < pushMessageList.size() ; i++){
				PushMessage pushMe = pushMessageList.get(i);
				if(pushMe.getPushedEmpId() != null &&!"".equals(pushMe.getPushedEmpId())){
					PushMobileMsg  pushMsg = new PushMobileMsg();
					pushMsg.setFinstanceid(pushMe.getFinstanceid());
					pushMsg.setInstanceId(pushMe.getInstanceId());
					pushMsg.setPushEmpId(pushMe.getPushEmpId());
					pushMsg.setPushedEmpId(pushMe.getPushedEmpId());
					pushMsg.setPushEmpName(pushMe.getPushEmpName());
					pushMsg.setPushKs(pushMe.getPushKs());
					pushMsg.setMessage(pushMe.getMessage());
					pushMsg.setPushTime(new SimpleDateFormat("yyyy-MM-dd HH:mm").format(pushMe.getPushTime()));
					pushMsg.setId(pushMe.getId());
					List<SendAttachments> sends = pushMe.getAttList();
					
					if(sends.size()>0){
						List<AttElement> atts = new ArrayList<AttElement>();
						for(int t = 0; t< sends.size(); t++){
							SendAttachments send = sends.get(t);
							AttElement  att = new AttElement();
							att.setDocguid(send.getDocguid());
							att.setFilename(send.getFilename());
							att.setFileLoaction(send.getLocalation());
							atts.add(att);
						}
						pushMsg.setAtts(atts);
					}
					msgs.add(pushMsg);
				}
			}
			String sb = "";
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			// 打开流
			PrintWriter out = getResponse().getWriter();
			sb = JSONArray.fromObject(msgs).toString();
			out.print(sb);
			out.close();*/
		//	getRequest().setAttribute("pmList", pushMessageList);
		
	
	}
	
	public void receiveDoFileByMobile(){
		JSONArray jsonArray = getJSONArray(); 
		// 获取主键id
		String id = "";
		String processId ="";
		String receiveType = "";
		String itemId = "";
		String workFlowId = "";
		String userId =  "";
		//jsonObject
		//JSONArray jsonArray = JSONArray.fromObject(object);
		for(int i = 0; i <jsonArray.size() ; i++ ){
			JSONObject	jsonObject = (JSONObject) jsonArray.get(i);
			if(jsonObject != null && !"".equals(jsonObject)){
				id = (String) jsonObject.get("id");
				processId = (String) jsonObject.get("processId");
				receiveType = (String) jsonObject.get("receiveType");
				itemId = (String) jsonObject.get("itemId");
				userId = (String) jsonObject.get("userId");
			}else{
				id = getRequest().getParameter("id");
				processId = getRequest().getParameter("processId");
				receiveType = getRequest().getParameter("receiveType");
				itemId = getRequest().getParameter("itemId");
				userId = getRequest().getParameter("userId");
			}
			// for  批量
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
			if (doFileReceive != null) { // 做更新操作
				doFileReceive.setStatus(1); // 表示签收
				tableInfoService.updateDoFileReceive(doFileReceive);
			}

			WfItem item = itemService.getItemById(itemId);
			if(item != null){
				workFlowId = item.getLcid();
			}
			if(processId!=null && !processId.equals("")){
				processId = processId.trim();
			}
			Employee emp = employeeService.findEmployeeById(userId);
			WfProcess wfProcess = tableInfoService.getProcessById(processId);
			Date nowTime = new Date();
			if (wfProcess != null) {
				
				//将推送信息中的记录修改成自己的
				tableInfoService.updatePushMessage(emp.getEmployeeGuid(), wfProcess);
				//将推送记录修改下userid
				tableInfoService.updateWfProcessByTs(emp.getEmployeeGuid(),wfProcess);
				
				wfProcess.setIsExchanging(0);
				if(("1").equals(receiveType)){
					//查找流程中第一步的节点信息
					WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
					if(wfNode==null){
						try {
							getResponse().getWriter().print("{\"success\":\"noNode\"}");
						} catch (IOException e) {
							e.printStackTrace();
						}
						return ;
					}
					//---------------期限日期---------------
					String deadline = wfNode.getWfn_deadline();
					String deadlineunit = wfNode.getWfn_deadlineunit();
					Date jdqxDate = tableInfoService.getEndDate(nowTime, deadline, deadlineunit );
					Date apply_date = wfProcess.getApplyTime();
					WfItem wfItem = itemService.getItemById(itemId);
					String wcsx = wfItem.getVc_wcsx();		//办件完成期限
					Date zhqxDate = tableInfoService.getEndDate(apply_date, wcsx, "0");	//默认为工作日
					
					wfProcess.setFromNodeid("发文过来的");
					wfProcess.setToNodeid(wfNode.getWfn_id());
					wfProcess.setNodeUid(wfNode.getWfn_id());
					wfProcess.setOwner(userId);
					wfProcess.setUserUid(userId);
					wfProcess.setFromUserId(userId);
					wfProcess.setItemId(itemId);
					wfProcess.setWfUid(workFlowId);
					wfProcess.setApplyTime(nowTime);
					wfProcess.setFinshTime(nowTime);
					wfProcess.setFormId(wfNode.getWfn_defaultform());
					wfProcess.setOldFormId(wfNode.getWfn_defaultform());
					wfProcess.setIsOver(Constant.NOT_OVER);
					wfProcess.setIsMaster(1);
					wfProcess.setIsShow(1);
					wfProcess.setJdqxDate(jdqxDate);
					wfProcess.setZhqxDate(zhqxDate);
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setItem_id(itemId);
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					//需要更新下关于pdf路径
					String wf_uid = wfProcess.getWfUid(); //流程
					WfNode firstNode = workflowBasicFlowService.findFirstNodeId(wf_uid);
					String formId = firstNode.getWfn_defaultform();
					wfProcess.setCommentJson("");
					try {
						//待办的pdf
						String pdfNewPath = getHtmlToNewOfPath(formId,firstNode.getWfn_id(), 
								"", wfProcess.getWfInstanceUid(), false ,true);
						
						//生成 收取的办文事项pdf(只读)
						List<Map> mapList = zwkjFormService.getSwByInstanceId(wfProcess.getWfInstanceUid());
						// 获取表单对应关系(主要是获取中文名)
						List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
						String docValue = "";
					    //查找对应关系,入库收文表
						for (FormTagMapColumn ft : list) {
							String tagValue = "";
							if(("lwbt").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("yfdw").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("lwdw").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("fs").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("lwh").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("gwlx").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("swsj").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}else if(("fwsj").equals(ft.getDocColumn())){
								tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
							}
								docValue +=  ft.getFormtagname() +":"+  tagValue +";";
						}
						String pdfNewPath2 = getHtmlToNewOfPath(formId,firstNode.getWfn_id(), 
								docValue, wfProcess.getWfInstanceUid(), false ,false);
						
						wfProcess.setPdfPath(pdfNewPath+","+pdfNewPath2);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}else{
					//公文交换
					//更新收文时间  走公文交换的
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					wfProcess.setUserUid(userId);
				}
				tableInfoService.updateProcess(wfProcess);
			}
		}
		try {
			getResponse().getWriter().print("{\"success\":\"yes\"}");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 发送
	 * @throws IOException
	 */
	@SuppressWarnings("unchecked")
	public void checkSendDoc(String gwjh_mUserId, String gwjh_cUserId, String itemId) throws IOException{
		String workFlowId = getRequest().getParameter("workFlowId");
		String instanceId = getRequest().getParameter("instanceId");
		String formId = getRequest().getParameter("formId");
		//创建一个临时类
		Doc doc = new Doc();//为了和交换平台交互信息
		doc.setSender(((List<String>)getSession().getAttribute(MyConstants.DEPARMENT_IDS)).get(0).toString());
		doc.setInstanceId(instanceId);
		doc.setFormid(formId);
		
		//获取字段的匹配关系
		List<DocxgFieldMap>  maplist  = fieldMatchingService.getDocxgFieldMapList(itemId);
		
		//获取匹配的value值
		DocxgFieldMap map = null;
		String tableName = "";
		String fieldName = "";
		String tagName = "";
		List<String> tagList = new ArrayList<String>();
		tagList.add("xtoname");
		tagList.add("xccname");
		tagList.add("xto");
		tagList.add("xcc");
		tagList.add("title");
		tagList.add("keyword");
		tagList.add("doctype");
		tagList.add("priority");
		tagList.add("yfdw");
		tagList.add("qfr");
		tagList.add("priority");
		tagList.add("yfrq");
		Map<String, String> fmap = new HashMap<String, String>();
		List<String> tableNameList = new ArrayList<String>();
		for(int i=0; i<maplist.size() ; i++){
			map = maplist.get(i);
			fieldName = map.getFieldName();
			tableName = map.getTableName();
			tagName = map.getTagName();
			for(int j=0; j<tagList.size(); j++){
				String gwjhfield = tagList.get(j);
				if(tagName.equals(gwjhfield)){	//需要到数据库中查询数据
					if(!tableNameList.contains(tableName)){
						tableNameList.add(tableName);
					}
					fmap.put(fieldName+";"+tagName, tableName);
					break;
				}
			}
		}
		
		Map<String,String> valueMap = new HashMap<String,String> ();
		
		if(tableNameList!=null && tableNameList.size()>0){
			for(int i=0; i<tableNameList.size(); i++){
				tableName = tableNameList.get(i);
				List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
				for(String key: fmap.keySet()){
					String field = key.split(";")[0];
					String tag = key.split(";")[1];
					String tab = fmap.get(key);
					if(tab.equals(tableName)){
						//遍历map
						for(int j=0; j<mapList.size(); j++){
							Map relaship = mapList.get(j);
							//遍历map
							String value = "";
							try{
								 value = (String) relaship.get(field);	//可以为数据库字段
							}catch (Exception e) {
								//clob字段
								value = tableInfoService.getClob(tableName, instanceId, field ,formId);
							}
							//relaship
							valueMap.put(tag, value);
						}
					}
				}
			}
		}
		
		String title = valueMap.get("title");
		String xtoName = valueMap.get("xtoName");
		String xccName = valueMap.get("xccname");
		String xtoFull = valueMap.get("xto");
		String xccFull = valueMap.get("xco");
		String keyword = valueMap.get("keyword");
		String doctype = valueMap.get("doctype");
		String priorityStr = valueMap.get("priority");
		if(xtoFull != null && !("").equals(xtoFull)){
			xtoName = splitDepIdAndName(xtoFull, 1);
		}
		if(xccFull != null && !("").equals(xccFull)){
			xccName = splitDepIdAndName(xccFull, 1);
		}
		doc.setXtoName(xtoName);
		doc.setXccName(xccName);
		String xtt = "";
		String ctt = "";
		if(gwjh_mUserId!=null && !gwjh_mUserId.equals("")){
			String[] depIds = gwjh_mUserId.split(",");
			for(String depid: depIds){
				xtt = depid+";";
			}
		}
		
		if(gwjh_cUserId!=null && !gwjh_cUserId.equals("")){
			String[] depIds = gwjh_cUserId.split(",");
			for(String depid: depIds){
				ctt = depid+";";
			}
		}
		if(xtt.length()>0){
			xtt = xtt.substring(0,xtt.length()-1);
		}
		
		if(ctt.length()>0){
			ctt = ctt.substring(0,ctt.length()-1);
		}
		doc.setXto(xtt);
		doc.setXcc(ctt);
		//doc.setXto(splitDepIdAndName(xtoFull, 0));
		//doc.setXcc(splitDepIdAndName(xccFull, 0));
		doc.setTitle(title);
		doc.setKeyword(keyword);
		doc.setDoctype(doctype);
		
		Long priority = DocXgConst.getPriorityCodeByName(priorityStr);
		doc.setPriority(priority);
		//doc.setPriority(Long.parseLong(CommonUtil.stringIsNULL(priority)?"0":priority));
		//取文号--start--
		DocNumberWhFw docNumberWhFw = docNumberManagerService.findDocNumWhFw(workFlowId,instanceId);
		if(docNumberWhFw != null){
			doc.setJgdz(docNumberWhFw.getJgdz());
			doc.setFwnh(docNumberWhFw.getFwnh());
			doc.setFwxh(docNumberWhFw.getFwxh());
		}else{
			DocNumberWhBw docNumberWhBw = docNumberManagerService.findDocNumWhBw(workFlowId, instanceId);
			if(docNumberWhBw != null){
				doc.setJgdz(docNumberWhBw.getBwlx());
				doc.setFwnh(docNumberWhBw.getBwnh());
				doc.setFwxh(docNumberWhBw.getBwxh());
			}
		}
		
		//取文号---end---
		doc.setYfdw(getRequest().getParameter("yfdw")); 
		doc.setQfr(getRequest().getParameter("qfr"));
		//String yffs = getRequest().getParameter("priority");
		//doc.setYffs(Long.parseLong(CommonUtil.stringIsNULL(yffs)?"0":yffs));
		doc.setYfrq(getRequest().getParameter("yfrq"));
		String docguid = UuidGenerator.generate36UUID();
		doc.setDocguid(docguid);
			String bodyxml = "<root><docguid>" + docguid
				+ "</docguid><xto>" + xtoName + "</xto><xcc>" + xccName
				+ "</xcc><title>" + getRequest().getParameter("title")
				+ "</title><keyword>" + getRequest().getParameter("keyword")
				+ "</keyword><type>" + getRequest().getParameter("doctype")
				+ "</type><priority>" + getRequest().getParameter("priority")
				+ "</priority></root>";
		doc.setBodyxml(bodyxml);
		List<SendAttachments> sendAttachmentList = attachmentService.findSendAttsByDocguid(instanceId+"attzw");
		sendAttachmentList.addAll(attachmentService.findSendAttsByDocguid(instanceId+"fj"));
		doc.setAtts(sendAttachmentList);
		// 发文
		getResponse().setCharacterEncoding("UTF-8");
		sendDocService.saveDoc(doc);
		try {
			SendDocToGwjhpt();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String splitDepIdAndName(String oriStr, int index) {
		if (oriStr != null && oriStr.trim().length() > 0) {
			StringBuilder sb = new StringBuilder();
			String[] str = oriStr.split("[*]");
			sb.append(str[index]);
			sb.append(";");
			return sb.toString();
		}
		return "";
	}
	
	
	/**
	 * 发送数据到公文交换平台
	 */
	public void SendDocToGwjhpt() throws Exception{
		String instanceId = getRequest().getParameter("instanceId");
		//根据instanceId查出att对象和attext对象及doc对象
		Doc oldDoc = sendDocService.findFullDocByInstanceId(instanceId);
		
		//根据instanceId查询
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(instanceId + ATT_FJSUFFIX_NAME,null);
		for(SendAttachments att :sattExtList){
			sattList.add(att);
		}
		
		Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		Department dep = departmentService.findDepartmentById(employee.getDepartmentGuid());
		String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
		List<String> deps = new ArrayList<String>();
		//获取机构匹配
		List<DepRelationShip> list = fieldMatchingService.getDepRelationShipListByDepId("'"+departId+"'");
		DepRelationShip ship = null;
		String docxg_depId = "";
		for(int i=0; list!=null && i<list.size(); i++){
			ship = list.get(i);
			if(ship!=null){
				docxg_depId = ship.getDocxg_depId();
				deps.add(docxg_depId);
			}
		}
		String depId = "";
		if(deps!=null && deps.size()>0){
			depId = deps.get(0);
		}
		//签发人员id与姓名
		Map<String,String> mapbak = new HashMap<String,String>();
		mapbak.put("userId", employee.getEmployeeGuid());
		mapbak.put("userName", employee.getEmployeeName());
		
		//发送机构
		oldDoc.setDocguid(instanceId);
		oldDoc.setInstanceId(instanceId);
		//oldDoc = this.fullData(oldDoc);
		oldDoc = sendDocService.paserDocNum(oldDoc, oldDoc.getFwxh());
		// 保存Doc对象,掉用接口向公文交换平台发送
		oldDoc.setAtts(sattList);
		//oldDoc.setAttExts(sattExtList);
		String docInfoXml = AnalyzeWSXml.getSendToGwjhptXml(oldDoc,mapbak);
		String userKey = GenUserKey.genUserKey(depId);
		String result = docExchangeClient.sendDoc(userKey,docInfoXml);
		if(result.toUpperCase().indexOf(Constant.SUCCESS)>-1){
			//接收成功
			
			
		}else{
			//接收失败
			
			
		}
	}
	/**
	 * 填充Doc的相关属性
	 * 
	 * @param oldDoc
	 */
	private Doc fullData(Doc oldDoc) {
		Doc doc = oldDoc;
		// 填充数据
		//doc = oldDoc;
		if (doc != null) {
			// 填充Doc的属性
			String xtoFull = doc.getXtoFull();
			String xccFull = doc.getXccFull();
			String xto = splitString(xtoFull, 1);
			String xcc = splitString(xccFull, 1);
			String xtoName = doc.getXtoName();
			if(xtoFull != null && !("").equals(xtoFull)){
				xtoName = splitString(xtoFull, 0);
			}
			String xccName = doc.getXccName();
			if(xccFull != null && !("").equals(xccFull)){
				xccName = splitString(xccFull, 0);
			}
			String bodyxml = "<root><docguid>" + doc.getDocguid()
					+ "</docguid><xto>" + xtoName + "</xto><xcc>" + xccName
					+ "</xcc><title>" + doc.getTitle()
					+ "</title><keyword>" + doc.getKeyword()
					+ "</keyword><type>" + doc.getDoctype()
					+ "</type><priority>" + doc.getPriority()
					+ "</priority></root>";
			oldDoc.setXtoName(xtoName);
			oldDoc.setXccName(xccName);
			oldDoc.setXto(xto);
			oldDoc.setXcc(xcc);
			oldDoc.setXtoFull(xtoFull);
			oldDoc.setXccFull(xccFull);
			oldDoc.setTitle(doc.getTitle());
			oldDoc.setKeyword(doc.getKeyword());
			oldDoc.setJgdz(doc.getJgdz());
			oldDoc.setFwnh(doc.getFwnh());
			oldDoc.setFwxh(doc.getFwxh());
			oldDoc.setFwjg(doc.getFwjg());
			oldDoc.setYfdw(doc.getYfdw());
			/*
			 * 判断QFR里面是否除了“,”没有其他数据
			 * 如果只有“,”设置为空，不是还设置原值
			 * */
			if(doc.getQfr()!=null){
				String qfrStr = doc.getQfr().replace(",","").trim();
				if(qfrStr!=null&&qfrStr.equals("")){
					oldDoc.setQfr("");
				}else{
					oldDoc.setQfr(doc.getQfr());
				}
			}else{
				oldDoc.setQfr(doc.getQfr());
			}
			oldDoc.setYfrq(doc.getYfrq());
			oldDoc.setYffs(doc.getYffs());
			oldDoc.setDoctype(doc.getDoctype());
			oldDoc.setCebid(doc.getCebid());
			oldDoc.setPriority(doc.getPriority());
			oldDoc.setSender(doc.getSender());
			oldDoc.setBodyxml(bodyxml);			
			oldDoc.setGkfw(doc.getGkfw());
			oldDoc.setHgr(doc.getHgr());
			oldDoc.setFzbhgr(doc.getFzbhgr());
			oldDoc.setRecord(doc.getRecord());
			oldDoc.setGzdbt(doc.getGzdbt());
			oldDoc.setGkfs(doc.getGkfs());
		   oldDoc.setSenderId(doc.getSenderId());//
			Employee employee=null;
			try {
				if(oldDoc.getNgr()==null || oldDoc.getNgr().equals("") || oldDoc.getNgrbm()==null || oldDoc.getNgrbm().equals("")){					
					//employee =(Employee)selectTreeService.findEmployeeById((String)getSession().getAttribute("userId"));
					employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
					oldDoc.setNgr(employee.getEmployeeName());
					Department dept = selectTreeService.findDepartmentById(employee.getDepartmentGuid());
					oldDoc.setNgrbm(dept.getDepartmentName());
				}			 
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return oldDoc;
	}
	
	public String splitString(String oriStr, int index) {
		if (oriStr != null && oriStr.trim().length() > 0) {
			StringBuilder sb = new StringBuilder();
			String[] str = oriStr.split(";");
			for (int i = 0, l = str.length; i < l; i++) {
				sb.append(str[i].split("\\|")[index]);
				sb.append(";");
			}
			return sb.toString();
		}
		return "";
	}
	
	

	/**
	 * 
	 * 描述：移除待阅的办件信息
	 * 作者:蔡亚军
	 * 创建时间:2016-12-12 上午11:19:57
	 */
	public void removeToReadDofile(){
		PrintWriter out = null;
		try{
			JSONObject jsonObject = getJSONObject(); 
			String processId = "";
			String userId = "";
			if(jsonObject!= null){
				processId = (String)jsonObject.get("processId");
				userId = (String)jsonObject.get("userId");
			}else{
				processId = getRequest().getParameter("processId");
				userId = getRequest().getParameter("userId");
			}
			WfProcess wfProcess = tableInfoService.getProcessById(processId);
			ReadedEndPending entity  = new ReadedEndPending();
			entity.setInstanceId(wfProcess.getWfInstanceUid());
			entity.setUserId(userId);
			entity.setStatus("1");
			integrateService.saveReadedEndPending(entity);
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			// 打开流
			out = getResponse().getWriter();
			out.print("success");
		} catch (IOException e) {
			out.print("fail");
			e.printStackTrace();
		}finally{
			if(out!=null){
				out.close();
			}
		}
	}
	
	public void getdownLoad(){
		 try {
			 	String processId = getRequest().getParameter("processId");
				WfProcess wfProcess_ = tableInfoService.getProcessById(processId);
				WfProcess wfProcess = pendingService.checkInstanceIsOver(wfProcess_);
				if(wfProcess==null || wfProcess.getPdfPath()==null || "".equals(wfProcess)){
					wfProcess = wfProcess_;
				}
				ZwkjForm zf = zwkjFormService.getOneFormById(wfProcess.getFormId());
				String filename = zf.getForm_caption()+".pdf";
				String downpdf = "";
				if(wfProcess!=null){
					String pdfPath = wfProcess.getPdfPath();
					String pdf = pdfPath.split(",")[1];
					String commonJson  = wfProcess.getCommentJson();
					// 办结这一步不需要和意见
						//随机生成pdf的地址: 非规则命名,避免与办件的附件冲突
						String uuid = UUID.randomUUID()+"" ;
						downpdf = uuid+".pdf";	
						String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
						String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
						String path = pdfRoot+dstPath;

						GenePdfUtil gene = GenePdfUtil.getInstance();
						gene.genePdf(pdf,commonJson,path+downpdf);
						/*Thread th = new Thread(new GenePdfUtilThread(pdf,commonJson,path+downpdf));
						//GenePdfUtilThread th = new GenePdfUtilThread(pdf,commonJson,path+downpdf);
						th.start();*/
						/*GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
						ArrayList<String> list = new ArrayList<String>();
						list.add(pdf);
						list.add(commonJson);
						list.add(path+downpdf);
						Constant.queue.offer(list);
						pdfUtil.genePdf(pdf,commonJson,path+downpdf);*/
						getResponse().getWriter().print(uuid+";"+zf.getForm_caption()+";"+path);
						return;
				}
			} catch (Exception e) {
				e.printStackTrace();
				try {
					getResponse().getWriter().print("no");
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		}
	
	public String getCombinedPendList(){
		return "combinedPendList";
	}
	
	public String getCombinedRecPendList(){
		return "combinedRecPendList";
	}
	public String dycs(){
		return "dycs";
	}
	
	/**
	 * 根据itemid以及人员名字获取已办待办数字
	 */
	public void  getOverPendingCount()  throws Exception{
		String jsoncallback = getRequest().getParameter("callbackparam");
		String itemid = getRequest().getParameter("itemid");
		//检索条件
		String conditionSql = "";
		if(CommonUtil.stringNotNULL(itemid)){
			String[] itemIds = itemid.split(",");
			String pendingItemId = "";
			for(String itemId: itemIds){
				pendingItemId += "'"+itemId+"',";
			}
			if(pendingItemId!=null && pendingItemId.length()>0){
				pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
			}
			conditionSql += " and i.id  in ("+pendingItemId+")";
		}
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		int count = tableInfoService.getCountOfOver(conditionSql,emp.getEmployeeGuid(),"1");
		StringBuffer sb = new StringBuffer();
			sb.append("[{");
			sb.append("\"count\":\"");// 此id,用于级联操作,保证唯一
			sb.append(count);
			sb.append("\"}]");
		String jsonStr = sb.toString();
		String renderStr = jsoncallback+ "("+jsonStr+")";
		getResponse().setContentType("text/plain");
    	getResponse().getWriter().write(renderStr);
		getResponse().getWriter().close();
	}
	
	//验证url存在不存在
	public void checkUrl(){
		String url = getRequest().getParameter("pdfurl");
		boolean flag = new File(url).exists();
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(flag+"");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	public void tuomi(){
		String url = getRequest().getParameter("pdfurl");
		String receiveId = getRequest().getParameter("receiveId");
		//验证有没有脱密
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(receiveId+ "tm",null);
		boolean havaFj=true;
		if(sattExtList!=null&&sattExtList.size()>0){
			havaFj=false;
		}
		if(havaFj){
			String name = getRequest().getParameter("name");
			File file = new File(url);
			TrueToPdf trueToPdf = new TrueToPdf();
			String[] ret = trueToPdf.trueToPdf(url);
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path"); // 得到上传文件在服务器上的基路径
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

			dstPath = pdfRoot+dstPath+UUID.randomUUID().toString() + ".pdf";; 
			try {
				String newJSON = "";
				String json =ret[1];
				if(!"".equals(json)){
						if(json.indexOf("\"resources\"") == -1 && json.startsWith("[")){
							JSONArray jsonArray =JSONArray.fromObject(json);
							for(int z=0;z<jsonArray.size();z++){
								JSONObject jsonObject = jsonArray.getJSONObject(z);
								Object obj= jsonObject.get("stamps");
								JSONArray jArray =null;
								if(obj!=null){
									jArray=(JSONArray) obj;
								}
								if(jArray!=null){
									for(int i=0;i<jArray.size();i++){
										JSONObject jObject = jArray.getJSONObject(i);
										jObject.put("stamp_color", 0);
									}
								}
							}
							newJSON = jsonArray.toString();
						}else{
							JSONObject jsonObj = JSONObject.fromObject(json);
							JSONArray jsonArray =JSONArray.fromObject(jsonObj.getJSONArray("pages"));
							for(int z=0;z<jsonArray.size();z++){
								JSONObject jsonObject = jsonArray.getJSONObject(z);
								Object obj= jsonObject.get("stamps");
								JSONArray jArray =null;
								if(obj!=null){
									jArray=(JSONArray) obj;
								}
								if(jArray!=null){
									for(int i=0;i<jArray.size();i++){
										JSONObject jObject = jArray.getJSONObject(i);
										jObject.put("stamp_color", 0);
									}
								}
							}
							newJSON = jsonObj.toString();
						}
					
				
				}
				GenePdfUtil genePdf = GenePdfUtil.getInstance();
				genePdf.geneStampPdf(ret[0], newJSON, dstPath,"0");
				// 完成上传文件，就是将本地文件复制到服务器上
				SendAttachments atts = new SendAttachments();
				atts.setDocguid(receiveId + "tm");
				Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				atts.setEditer(emp.getEmployeeGuid() + ";" +  emp.getEmployeeName());
				atts.setFiletime(new Timestamp(new Date().getTime()));
				atts.setFilename(name
						+ "(脱密).pdf");// 设置文件名属性
				atts.setFileindex(0L);
				atts.setFiletype("pdf");// 设置文件类型(后缀名)的属性
				File dstFile = new File(dstPath);
				atts.setFilesize(dstFile.length());// 设置文件大小的属性
				atts.setLocalation(dstPath.replace(pdfRoot, ""));// 设置上传后在服务器上保存路径的属性
				atts.setTitle(name + "(脱密).pdf");// 设置上传附件所属类别
				atts.setType("pdf");// 设置上传附件标题
				SendAttachments sAtt =	attachmentService.addSendAtts(atts);		
				} catch (Exception e) {
				e.printStackTrace();
				
			}finally{
			}
		}
		
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(havaFj+"");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 跳转到收文登记页面
	 * @return
	 */
	public String getSwdjList(){
		String djh = getRequest().getParameter("djh");
		String wjbt = getRequest().getParameter("wjbt");
		String lwdw = getRequest().getParameter("lwdw");
		String beginTime = getRequest().getParameter("beginTime");
		String endTime = getRequest().getParameter("endTime");
		String swdj = "";
		String swdjlx =  getRequest().getParameter("swdjlx");
		//swdjlx 1.中央 2.省级机关 3.市委市政府 4.市相关部门 5.区相关部门 6.办文 7.人民来信 8 市政府领导批示
		String[] swdjlxArry = SystemParamConfigUtil.getParamValueByParam("swdjlx").split(";");
		Map<String, String> swdjlxMap = new HashMap<String, String>();
		for (int i = 0; i < swdjlxArry.length; i++) {
			String keyVale = swdjlxArry[i];
			swdjlxMap.put(keyVale.split(",")[0], keyVale.split(",")[1]);
		}
		if(Utils.isNotNullOrEmpty(swdjlx)){
			swdj=swdjlxMap.get(swdjlx);
		}
		String conditionSql = "";
		String conditionSql2 = "";
		
		if(Utils.isNotNullOrEmpty(djh)){
			String nf = new SimpleDateFormat("yyyy").format(new Date(System.currentTimeMillis()));
			conditionSql +=	" and '"+nf+"年'||v.swdjh||'号' like '%"+djh.trim()+"%'";
			conditionSql2+= " and '"+nf+"年'||v.swdjh||'号' like '%"+djh.trim()+"%'";
		}
		if(Utils.isNotNullOrEmpty(wjbt)){
			conditionSql +=" and t.lwbt like '%"+wjbt.trim()+"%'";
			conditionSql2 +=" and v.wjbt like '%"+wjbt.trim()+"%'";
		}
		if(Utils.isNotNullOrEmpty(lwdw)){
			conditionSql +=" and v.lwdw like '%"+lwdw.trim()+"%'";
			conditionSql2 +=" and v.lwdw like '%"+lwdw.trim()+"%'";
		}
		if(Utils.isNotNullOrEmpty(beginTime)){
			conditionSql +=" and t.swsj >= to_date('"+beginTime+"', 'yyyy-MM-dd HH24:mi:ss')";
			conditionSql2 +=" and v.swsj >= to_date('"+beginTime+"', 'yyyy-MM-dd HH24:mi:ss')";
		}
		if(Utils.isNotNullOrEmpty(endTime)){
			conditionSql +=" and t.swsj	<= to_date('"+endTime+"', 'yyyy-MM-dd HH24:mi:ss')";
			conditionSql2 +=" and v.swsj<= to_date('"+endTime+"', 'yyyy-MM-dd HH24:mi:ss')";
		}
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String departId = emp.getDepartmentGuid();
		List<DocXgDepartment> depList = selectTreeService.getDocXgDeptById(departId);
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
		String deptName = "";
		for(int i=0; i<depList.size(); i++){
			DocXgDepartment dep = depList.get(i);
			deptName = dep.getName()+",";
		}
		if(deptName!=null && !deptName.equals("")){
			deptName = deptName.substring(0, deptName.length()-1);
		}
		String topName = getLoginDepName(emp.getEmployeeGuid());
		
		if(topName!=null && !topName.equals("")){
			conditionSql2 +=" and v.lwdw = '"+topName+"'";
		}
		// 分为办理和已办结 加上 流程名
		int count = tableInfoService.findCountSw(deptName,swdj,conditionSql,conditionSql2);
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<Object[]> sws  = tableInfoService.findSw( Paging.pageIndex, Paging.pageSize, 
				deptName,swdj, conditionSql, conditionSql2);
		getRequest().setAttribute("sws", sws);
		getRequest().setAttribute("nf", new SimpleDateFormat("yyyy").format(new Date(System.currentTimeMillis())));
		getRequest().setAttribute("swdjlx", swdjlx);
		getRequest().setAttribute("djh", djh);
		getRequest().setAttribute("wjbt", wjbt);
		getRequest().setAttribute("lwdw", lwdw);
		getRequest().setAttribute("beginTime", beginTime);
		getRequest().setAttribute("endTime", endTime);
		return "swdj";
	}
	
	
	public String getLoginDepName(String userId){
		Employee employee=null;
		try {
			employee = employeeService.findEmployeeById(userId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		Department department=null;
		try {
			//人员当前机构
			department = departmentService.queryDepartmentById(employee.getDepartmentGuid());
			String zfbDepId  = SystemParamConfigUtil.getParamValueByParam("zfbDepId");
			//当前人员处于政府办一层子机构下,获取政府办的dep
			if(department!=null && department.getSuperiorGuid().equals(zfbDepId)){
				department = departmentService.queryDepartmentById(zfbDepId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(department != null){
			return department.getDepartmentName();
		}else{
			return null;
		}
	}
	
	
	//根据实例id获取路径
	public void getPathByInstanceid(){
		String instanceid = getRequest().getParameter("instanceid");
		DoFileReceive dfr = tableInfoService.getDoFileReceive(instanceid);
		JSONObject js = new JSONObject();
		if(dfr!=null){
			js.put("path", dfr.getPdfpath());
			js.put("receiveId", dfr.getId());
		}
		PrintWriter out = null;
		try {
			out = this.getResponse().getWriter();
			out.write(js.toString());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 
	 * 描述：根据收文登记类型获取收文登记号,自动加上1
	 * 作者:蔡亚军
	 * 创建时间:2014-7-2 下午2:37:20
	 */
	public void createSwdjh(){
		PrintWriter out = null;
		try {
			// 获取参数值 value = {{cs::::value}}
			JSONObject jsonObject  = getJSONObject();
			String value = "";
			if(jsonObject != null){
				try {
					value = jsonObject.getString("value");
				} catch (Exception e) {
					System.out.println("无默认数据");
				}
			}else{
				value = getRequest().getParameter("value");
			}
			if(value == null ||value.equals("undefined")){
				value = "";
			}
			value = value.replace("{{cs::::value}}", "");
			//swdjh获取最大值, 将收文登记号+1;
			int swdjh = 0;
			if(value!=null && !value.equals("")){
				String re = tableInfoService.getSwdjh(value);
				swdjh = re==null?1:Integer.parseInt(re)+1;
			}
			out = this.getResponse().getWriter();
			out.write(swdjh+"");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 
	 * 描述：获取签批的form
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-7-1 下午6:35:31
	 */
	public String getQphjForm(){
		String processId = getRequest().getParameter("processId");
		//查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(processId);
		if(wfProcess!=null){
			Integer master = wfProcess.getIsMaster();
			String commentJson = "";
			if(master!=null && master==0){	//该办件为抄送办件
				//查找抄送办件的主送办件
				WfProcess masterProcess = tableInfoService.getMasterProcess(wfProcess);
				commentJson = masterProcess.getCommentJson();
			}else{
				commentJson = tableInfoService.getClobOfWfProcess("T_WF_PROCESS", processId, "commentjson");
			}
			getRequest().setAttribute("commentJson", commentJson.replace("'", "’"));
			
			String pdfPath = "";
			if(wfProcess.getPdfPath()!=null && wfProcess.getPdfPath().length()>0){
				pdfPath =  wfProcess.getPdfPath().split(",")[0];
			}
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
			if (pdfPath != null && !"".equals(pdfPath)) {
				int imageCount  =1;
				try {
					imageCount = PdfPage.getPdfPage(pdfPath);
				} catch (Exception e) {
				}
				String oldpdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf/";	
			    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			    if(pdfPath.startsWith(oldpdfRoot)){
				    pdfPath = serverUrl+ "/form/html/data/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
			    }else if(pdfPath.startsWith(newPdfRoot)){
			    	 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
			    }else{
			    	pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
			    }
				getRequest().setAttribute("imageCount", imageCount);
				getRequest().setAttribute("pdfPath", pdfPath);
			}
			getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
			getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
			String workFlowId = wfProcess.getWfUid();
			String formId = wfProcess.getFormId();
			String oldFormId = wfProcess.getOldFormId();
			String nodeId = wfProcess.getNodeUid();
			String instanceId = wfProcess.getWfInstanceUid();
			getRequest().setAttribute("workFlowId", workFlowId);
			getRequest().setAttribute("formId", formId);
			getRequest().setAttribute("oldFormId", oldFormId);
			getRequest().setAttribute("processId", processId);
			getRequest().setAttribute("instanceId", instanceId);
			getRequest().setAttribute("nodeId", nodeId);
			// 获取当前登录用户
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = emp.getEmployeeGuid();
			getRequest().setAttribute("userId", userId);
		}
		return "showQphjForm";
	}
	
	public void getUserById(){
		PrintWriter out = null;
		String userId = getRequest().getParameter("userId");
		String empInfo = employeeService.getUserNameAndDept(userId);
		try {
			out = this.getResponse().getWriter();
			this.getResponse().getWriter().print(empInfo);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			out.flush();
			out.close();
		}
	}
	
	
	public void getUserByIdByMoblie(){
		PrintWriter out = null;
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			String userId;
			try {
				userId = jsonObject.getString("userId");
			} catch (Exception e) {
				userId = getRequest().getParameter("userId");
			}
			String empInfo = employeeService.getUserNameAndDept(userId);
			JSONObject emp = JSONObject.fromObject(empInfo);
			//confirm("确定要发送给 "+ emp['departmentName'] + " " +emp['employeeName']+" 吗？")
			String ret = "确定要发送给 "+ emp.getString("departmentName") + " " +emp.getString("employeeName")+" 吗？";
			out = this.getResponse().getWriter();
			this.getResponse().getWriter().print(ret);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			out.flush();
			out.close();
		}
	}
	
	
	
	/**
	 * 
	 * 描述：办文中   发文
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2015-6-26 上午8:57:17
	 */
	public void doFileDoc() throws Exception{
		// 获取  主送  抄送 人员
		String xtoName = getRequest().getParameter("xtoName");
		String xccName = getRequest().getParameter("xccName");
		// 获取  instanceid
		String instanceId =  getRequest().getParameter("instanceId");
		// 获取  workflow 
		String workFlowId =  getRequest().getParameter("workFlowId");
		// 获取  process
		String processId =  getRequest().getParameter("processId");
		// 获取 stepindex
		String stepIndex =  getRequest().getParameter("stepIndex");
		
		String itemId = getRequest().getParameter("itemId");
		
		String formId = getRequest().getParameter("formId");
		
		String nodeId = getRequest().getParameter("nodeId");
		
		String writeJson = getRequest().getParameter("json");
		
		String rebacker = getRequest().getParameter("rebacker");
		
		String dffss =  getRequest().getParameter("dffss");			//打印的分数们
		
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(formId);
				// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 非列表类型的存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() == null || ("").equals(ft.getListId())) {
				lists.add(ft);
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			//发送前先入库---取值用赋值字段
			if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
				tableNameList.add(lists.get(i).getAssignTableName());
			}
		}
		// 不是保存再打开,更新json标志位
		writeJson = writeJson.replaceAll("\"isWrite\":1", "\"isWrite\":0").replaceAll("\"isSignWrite\":1", "\"isSignWrite\":0").replaceAll("\"isSignWrite\":\"1\"", "\"isSignWrite\":0");
		// 修改后正文,传标志位给前台，用于显示
		writeJson = writeJson.replace("\"resources\":[\"\"]", "\"resources\":[]");
		writeJson = writeJson.replace("\"newfile\":\"true\"", "\"newfile\":\"false\""); 
		// save 表单 
		String value = this.saveForm(formId, 1, instanceId, formId, nodeId,workFlowId,"","",xtoName);
		Sw sw = new Sw();
		if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
			String tableName = tableNameList.get(0);
			//默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
			int t = 1;
			while(mapList.size() == 0 && tableNameList.size()>t){
				mapList = zwkjFormService.findTableByFormId(tableNameList.get(t), formId, instanceId);
				t++;
			}
			//查找对应关系,入库收文表
			if(mapList.size()>0){
				for (FormTagMapColumn ft : tableNameAllLists) {
					if(("lwbt").equals(ft.getDocColumn())){
						sw.setLwbt(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("yfdw").equals(ft.getDocColumn())){
						sw.setYfdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwdw").equals(ft.getDocColumn())){
						sw.setLwdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fs").equals(ft.getDocColumn())){
						sw.setFs(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == null ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == null ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("gwlx").equals(ft.getDocColumn())){
						sw.setGwlx(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("zsdw").equals(ft.getDocColumn())){
						String zsdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						//截取name
						sw.setZsdw(xtoName);
					}else if(("csdw").equals(ft.getDocColumn())){
						String csdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						sw.setCsdw(xccName);
					}else if(("ztc").equals(ft.getDocColumn())){
						sw.setZtc(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("jjcd").equals(ft.getDocColumn())){
						sw.setJjcd(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? null: mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}
				}
			}
		}
		String nbUserId = "";
		String gwjh_mUserId = "";
		String gwjh_cUserId = "";
		String dyfs = "";
		if(xtoName!=null && !xtoName.equals("")){
				String[] xto = xtoName.split(",");
				String[] fs = dffss.split(",");
				for(int i=0; i<xto.length; i++){
					String xtoUser = xto[i];
					String dfs = fs[i];
					List<DocXgDepartment> list = selectTreeService.getDocXgDeptById(xtoUser);
					DocXgDepartment dep = null;
					if(list!=null && list.size()>0){
						dep =  list.get(0);
					}
					if(dep==null){
						gwjh_mUserId += xtoUser+",";
					}else{
						nbUserId += xtoUser+",";
						dyfs += dfs+",";
					}
				}
			}
			if(xccName!=null && !xccName.equals("")){
				String[] xco = xccName.split(",");
				for(int i=0; i<xco.length; i++){
					String xcoUser = xco[i];
					List<DocXgDepartment> list = selectTreeService.getDocXgDeptById(xcoUser);
					DocXgDepartment dep = null;
					if(list!=null && list.size()>0){
						dep =  list.get(0);
					}
					if(dep==null){
						gwjh_cUserId += xcoUser+",";
					}else{
						nbUserId += xcoUser+",";
					}
				}
			}
			boolean flag = false;
			//公文交换平台系统
			if(!gwjh_mUserId.equals("") || !gwjh_cUserId.equals("")){
				flag = true;
				if(gwjh_mUserId.length()>0){
					gwjh_mUserId = gwjh_mUserId.substring(0,gwjh_mUserId.length()-1);
				}
				if(gwjh_cUserId.length()>0){
					gwjh_cUserId = gwjh_cUserId.substring(0,gwjh_cUserId.length()-1);
				}
				checkSendDoc(gwjh_mUserId, gwjh_cUserId,itemId);
			}
			
			String htmlpath = getHtmlToNewOfPath(formId, nodeId, value, instanceId,false, false);
			String error="yes";
			List<String> list = new ArrayList<String>();
			Employee emp = (Employee) getSession().getAttribute(
					MyConstants.loginEmployee);
			//发送内部机构人员
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String pdfpath = pdfRoot + UuidGenerator.generate36UUID()+".true";
			try {
				List<DoFileReceive> dfrs = new ArrayList<DoFileReceive>();
				if(!("").equals(nbUserId)){
					String[] empId = nbUserId.split(",");
					String[] ufs = dyfs.split(",");
					if(empId != null && empId.length > 0){
						Date nowTime = new Date();
						//来文单位
						String bigDepId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
						//此处获取事项,从最小的部门开始递归,开始查询出第一个在docexchange_department存在
						String exchangeDepid =  "";
						if(bigDepId!=null && !bigDepId.equals("")){
							String[] depids = bigDepId.split(",");
							for(int i=0; depids!=null && i<depids.length; i++){
								String depid = depids[i];
								if(depid!=null && depid.length()>0){
									depid = depid.substring(1,depid.length()-1);
								}
								List<DocXgDepartment> deplist = tableInfoService.getDocXgDepartmentListByDepId(depid);
								if(deplist!=null && deplist.size()>0){
									sw.setLwdw(deplist.get(0).getName());
									break;
								}
							}
						}

						for(int i=0; i<empId.length; i++){
							String uId = empId[i];
							String newInstanceId= UuidGenerator.generate36UUID();
							list.add(newInstanceId);
							// 判断 uid 是否在 rebacker 中
							boolean isReback = false;
							if(rebacker != null  && !"".equals(rebacker)&&rebacker.indexOf(uId)>-1){
								isReback = true;
							}
							tableInfoService.addNewProcessOfSend(wfProcess,uId,sw, pdfpath,emp,newInstanceId, ufs[i],nowTime, "dofile_send", emp.getEmployeeGuid());
							//点击发送按钮发送,插待办并入待收表
							//DoFileReceive dfr =	tableInfoService.addSend(uId,sw, "",emp,newInstanceId,wfProcess,isReback,nowTime)
							//dfrs.add(dfr);
						}
					}
				}else{
					if(!flag){
						error="no";
						System.out.println("---------------未选择主送或者抄送--------------");
					}
				}
				// 处理 T_WF_CORE_RECEIVE 放在  线程里面 --toAndCombToPdf
				WfItem wfItem =  itemService.getItemById(itemId);
				String isFlexForm = "";//是否弹性表单
				TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
				String commentJson = "";
				if(trueJson!=null){
					commentJson = trueJson.getTrueJson();
				}
				String formAttPath = "";
				String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
				if(wfItem != null){
				    isFlexForm = wfItem.getIsFlexibleForm();
				    if("1".equals(isFlexForm)){
					String userId = emp.getEmployeeGuid();
					List<TrueformData> outList = getTrueformdata("out",userId, workFlowId, nodeId, processId, instanceId, formId,formId,"", null, "", "1");
					String formVal = "";//弹性表单值
					try {
					    FlexibleFormJson json = new FlexibleFormJson(outList);
					    formVal = JSONObject.fromObject(json).toString();
					}catch (Exception e) {
					}
					ZwkjForm form = zwkjFormService.getOneFormById(formId);
					String pageJson = "";
					if(form!=null){
					    pageJson = form.getFormPageJson();
					}
					String jsonStr = "{\"location\":" + formVal + ",\"pageJson\":" + pageJson + ",\"commentJson\":"+commentJson+"}";
					//弹性表单转成pdf
					GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
					String flexPdfPath = pdfRoot + dstPath + UuidGenerator.generate36UUID()+"flexWithComt.pdf";
					//获取页面风格相关参数
					Map<String, String> map = new HashMap<String, String>();
					List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
					String fontSize = "";
					String verSpacing = "";
					String dateFmt = "";
					String font = "";
					if(formStylelist != null && formStylelist.size() > 0){
					    FormStyle formStyle = formStylelist.get(0);
					    if(formStyle != null){
						fontSize = formStyle.getFontSize();
						verSpacing = formStyle.getVerticalSpacing();
						dateFmt = formStyle.getDateFormat();
						font = formStyle.getFont();
					    } 
					}
					pdfUtil.geneFlexFormWithStamp(flexPdfPath, jsonStr, fontSize, verSpacing, dateFmt, font);
					File file = new File(flexPdfPath);
					if(file.exists() && file.length() > 0){
					    formAttPath = flexPdfPath;
					}else{
					    ToPdfUtil toPdfUtil = new ToPdfUtil();
					    String imgPath = flexPdfPath.replace(pdfRoot, "");
					    imgPath = imgPath + "0.png";
					    String newPath = toPdfUtil.imgToPdf(imgPath, "png");
					    formAttPath = newPath;
					}
					/*ToPdfUtil toPdfUtil = new ToPdfUtil();
					String imgPath = flexPdfPath.replace(pdfRoot, "");
					imgPath = imgPath + "0.png";
					String newPath = toPdfUtil.imgToPdf(imgPath, "png");
					formAttPath = newPath;*/
				    }else{
					try {
					    String formPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"withComt.pdf";
					    String newHtmlPath = getHtmlToNewHtml(formId,nodeId, value, instanceId,false,false);
					    String pdfFormPath = pdfRoot+dstPath+(newHtmlPath.substring(newHtmlPath.lastIndexOf("/"),newHtmlPath.length()-5)+"merge")+".pdf";
					    HtmlToPdf htp = new HtmlToPdf();
					    htp.htmlToPdf(newHtmlPath, pdfFormPath);
					    String pdfNewPath = pdfFormPath.substring(0, pdfFormPath.length() - 4)+ "merge" + ".pdf";
					    //带章合并
					    GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
					    pdfUtil.geneStampPdf(pdfNewPath, commentJson, formPdfPath, "0");
					    formAttPath = formPdfPath;
					} catch (Exception e) {
						e.printStackTrace();
					}
				
				    }
				}
				ToPdfThread toPdf = new ToPdfThread(wfProcess.getWfInstanceUid(), pdfpath, attachmentService, "toAndCombToPdf",wfProcess,tableInfoService,list,emp,flowService, nbUserId, "1", writeJson, htmlpath, formAttPath);
				toPdf.start();
				getResponse().getWriter().print(error);
			} catch (IOException e) {
				e.printStackTrace();
			}finally{
				getResponse().getWriter().close();
			}
		}
	
	/**
	 * 
	 * 描述：修改回复信息
	 * 作者:蔡亚军
	 * 创建时间:2016-8-23 下午2:37:08
	 */
	public void  updateReply(){
		String id = getRequest().getParameter("id");
		String processId =  getRequest().getParameter("processId");
		String instanceId = getRequest().getParameter("instanceId");
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		if (doFileReceive != null ) { // 做更新操作
			String msg = "";
				doFileReceive.setStatus(4);
				doFileReceive.setProcessId(processId);
				doFileReceive.setInstanceId(instanceId);
				doFileReceive.setReplyDate(new Date());
				tableInfoService.updateDoFileReceive(doFileReceive);
				//获取发文表  更新instanceId
				msg = "yes";
			try {
				getResponse().getWriter().print(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * 
	 * 描述：获取办件列表for中威通讯录
	 * 作者:Yuxl
	 * 创建时间:2014-7-14 上午9:19:51
	 */
	public void getDofileOfTrueChat(){
		// 打开流
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			JSONObject jsonObject = getJSONObject();
			// 0 为待办 1 为已办
			String type = "";
			String loginName = "";
			if(jsonObject != null){
				// 用户登录名
				loginName = (String) jsonObject.get("loginName");
				// 待办类型
				type= (String) jsonObject.get("type");
			}else{
				// 用户登录名
				loginName =  getRequest().getParameter("loginName");
				//待办类型
				type= getRequest().getParameter("type");
			}
			String conditionSql = "";
			// 根据用户登录名 获取 用户id
			Employee emp = employeeService.getEmployeeByLoginName(loginName);
			// 获取父部门id
			Department dept = departmentService.findDepartmentById(emp.getDepartmentGuid());
			// 待办
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			String userId = emp.getEmployeeGuid();
			if ("0".equals(type)) {
				// 总条数
				int count = pendingService.getCountOfPending(conditionSql, userId, "");
				jsonStr = pendingService.getPendListOfMobile(dept.getSuperiorGuid(),userId, count, "",serverUrl);// 待办json（根据itemId获得）
			} else if ("1".equals(type)) {// 已办
				List<Pending> list = tableInfoService.getOverList(conditionSql, userId, null, null,"1");
				jsonStr = pendingService.getOverListOfMobile(dept.getSuperiorGuid(), userId, list, "", "",serverUrl);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 输出json
		out.print(jsonStr);
		out.close();
	
	}
		
	public void getUsersByIds(){
		PrintWriter out = null;
		// 获取路由类型
		String type = getRequest().getParameter("type");
		String name = getRequest().getParameter("name");
		String cName = "";
		if(type.equals("2")){
			cName = getRequest().getParameter("cname");
		}
		// 获取主送的人员
		String nameParam = "";
		if (CommonUtil.stringNotNULL(name)) {  
			name = "'" + name.replaceAll(",", "','") + "'";
		}
		// 抄送的人员
		if (CommonUtil.stringNotNULL(cName)) {  
			cName = "'" + cName.replaceAll(",", "','") + "'";
		}
		
		String retName = employeeService.getUserNamesByIds(name);
		String retCName = "";
		if(!"".equals(cName)){
			retCName =	employeeService.getUserNamesByIds(cName);
		}
		try {
			out = this.getResponse().getWriter();
			String ret ="";
			if(type.equals("2")){
				ret = "主送给 "+retName;
				if(!"".equals(retCName)){
					ret +=	",抄送给 "+retCName;
				}
			}else{
				ret = "发送给 "+retName;
			}
			this.getResponse().getWriter().print(ret);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			out.flush();
			out.close();
		}
	}
	
	/**
	 * 描述：校验该办件步骤是否有权限进行处理
	 * 作者:蔡亚军
	 * 创建时间:2014-8-11 上午10:11:28
	 */
	public void checkIsDealIng(){
		PrintWriter out = null;
		String processId = getRequest().getParameter("processId");
		WfProcess wfp = tableInfoService.getProcessById(processId);
		String userName = "";
		if(wfp!=null){
			String nodeId = wfp.getNodeUid();
			WfNode wfNode = workflowBasicFlowService.findNodeById(nodeId);
			if(wfNode!=null){
				String route_type = wfNode.getWfn_route_type();
				if(route_type!=null && route_type.equals("3")){
					userName = tableInfoService.findPendDealIngUser(processId);
					//获取当前的用户Emp
					String userId = getRequest().getParameter("userId");
					Employee emp = null;
					if(userId!=null && !userId.equals("")){
						emp = employeeService.findEmployeeById(userId);
					}else{
						emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
					}
					if(emp.getEmployeeName().equals(userName)){
						userName = "";
					}
				}
			}
		}
		try {
			out = this.getResponse().getWriter();
			this.getResponse().getWriter().print(userName);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			out.flush();
			out.close();
		}
	}
	/**
	 * 
	 * 描述：校验该办件步骤是否有权限进行处理--首页
	 * 作者:蔡亚军
	 * 创建时间:2014-8-11 上午10:11:28
	 */
	public void checkIsDealIngForHomePage(){
		PrintWriter out = null;
		String jsoncallback = getRequest().getParameter("callback");
		String processId = getRequest().getParameter("processId");
		String userName = tableInfoService.findPendDealIngUser(processId);
		//获取当前的用户Emp
		String userId = getRequest().getParameter("userId");
		Employee emp =  employeeService.findEmployeeById(userId);
		if(emp.getEmployeeName().equals(userName)){
			userName = "";
		}
		StringBuffer sb = new StringBuffer();
		 	sb.append("[{");
			sb.append("\"userName\":\"");
			sb.append(userName);
			sb.append("\"}]");
		String jsonStr = sb.toString();
		String renderStr = jsoncallback+ "("+jsonStr+")";
		
		try {
			out = this.getResponse().getWriter();
			this.getResponse().getWriter().print(renderStr);
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			out.flush();
			out.close();
		}
	}
	
	
	/**
	 * 
	 * 描述：获取全部公文查询列表
	 * @return String
	 * 作者:蔡亚军
	 * 创建时间:2014-8-11 上午11:42:45
	 */
	public String getAllDofileList(){
		String startTime = getRequest().getParameter("startTime");
		String endTime = getRequest().getParameter("endTime");
		String wfTitle = getRequest().getParameter("wfTitle");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if(startTime==null && endTime==null){
			Calendar currcal = Calendar.getInstance();
			int currentYear = currcal.get(currcal.YEAR);
			startTime = currentYear+"-01-01";
			Date date = new Date();
			
			endTime = sdf.format(date);
		}
		String conditionSql = "";// 查询条件
		if (CommonUtil.stringNotNULL(wfTitle)) {
			conditionSql += " and t.DOFILE_TITLE like '%" + wfTitle.trim() + "%' ";
		}
		if(CommonUtil.stringNotNULL(startTime)){
			conditionSql +=" and t.dotime >= to_date('"+startTime+" 00:00:00', 'yyyy-MM-dd HH24:mi:ss')";
		}
		
		if(CommonUtil.stringNotNULL(endTime)){
			conditionSql +=" and t.dotime <= to_date('"+endTime+" 23:59:59', 'yyyy-MM-dd HH24:mi:ss')";
		}
		
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
		int count = tableInfoService.findAllDofileListCount(conditionSql);
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<DoFile> doFileList = tableInfoService.findAllDofileList(conditionSql, Paging.pageIndex, Paging.pageSize);
		if(doFileList!=null){
			for(int i=0;i<doFileList.size();i++){
				DoFile doFile = doFileList.get(i);
				if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
					WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
					if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
						 WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
						 doFile.setNodeName(node.getWfn_name());
					}
				}
			}
		}
		getRequest().setAttribute("doFileList", doFileList);
		getRequest().setAttribute("startTime", startTime);
		getRequest().setAttribute("endTime", endTime);
		getRequest().setAttribute("wfTitle", wfTitle);
		return "gwcxlblist";
	}
	
	public String openReply(){
		String receiveId = getRequest().getParameter("receiveId");
		String lwh =  getRequest().getParameter("lwh");
		String itemId = getRequest().getParameter("itemId");
		String processId = getRequest().getParameter("processId");
		String instanceId= getRequest().getParameter("instanceId");
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("id", receiveId);
		getRequest().setAttribute("bh", lwh);
		getRequest().setAttribute("itemId", itemId);
		return "reply";
	}
	
	
	public void reply(){
		PrintWriter out = null;
		try{
			String title = getRequest().getParameter("title");
			String bh = getRequest().getParameter("bh");
			String instanceId = getRequest().getParameter("instanceId");
			String receiveId = getRequest().getParameter("id");
			String processId = getRequest().getParameter("processId");
			String itemId = getRequest().getParameter("itemId");
			Reply reply = new Reply();
			reply.setBh(bh);
			reply.setInstanceId(instanceId);
			reply.setProcessId(processId);
			reply.setTitle(title);
			tableInfoService.addRely(reply);
			String filePathOfSys = SystemParamConfigUtil.getParamValueByParam("filePath");
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

			// 更新附件
					List<SendAttachments> sattList = attachmentService.findAllSendAtts(reply.getInstanceId()+"fj",null);
					// 附件合并
					String[] fjPath = new String[sattList.size()];
					String fileStrs = "";
					String wordPath = "";		//doc,docx
					String cebPath = "";		//ceb
					String pdfPath = "";		//pdf
					String xlsPath = "";		//xls,xlsx
					String imgpath ="";		//jpg\png\jpeg
					String fileTyle = "";		
					ToPdfUtil pdfUtil = new ToPdfUtil();
					if (sattList.size() != 0 && !("").equals(sattList)) {
						for (SendAttachments sat : sattList) {
							//正文中存在同名ceb则不合入ceb
							boolean isSatt_ceb = pdfUtil.listIsHaveSameDocName(sattList,sat);
							
							fileTyle = sat.getFiletype();
							if (("doc").equalsIgnoreCase(fileTyle) || fileTyle.equalsIgnoreCase("docx")) {
								if(sat.getTopdfpath()!=null && !sat.getTopdfpath().equals("")){//直接获取
									wordPath += sat.getTopdfpath()+ ",";
								}else{	//word转换为pdf,并且update数据
									wordPath += pdfUtil.docToPdf(sat.getLocalation(),fileTyle, instanceId, sat.getId()) + ",";
								}
								fileStrs+=wordPath;
							}else if (("ceb").equals(sat.getFiletype()) && isSatt_ceb) {
								CebToPdf cp = new CebToPdf();
								// 文件路径
								cp.cebToPdf(pdfRoot +sat.getLocalation());
								cebPath += pdfRoot+sat.getLocalation().substring(0,sat.getLocalation().length() - 3) + "pdf,";
								fileStrs+=cebPath;
							}else if (("pdf").equalsIgnoreCase(sat.getFiletype())){
								if(new File(filePathOfSys + sat.getLocalation()).exists()){
									pdfPath += filePathOfSys+sat.getLocalation() + ",";
								}else{
									pdfPath += pdfRoot+sat.getLocalation() + ",";
								}
								fileStrs+=pdfPath;
							}else if(("xlsx").equalsIgnoreCase(fileTyle) || fileTyle.equalsIgnoreCase("xls")){
								if(sat.getTopdfpath()!=null && !sat.getTopdfpath().equals("")){	
									xlsPath += sat.getTopdfpath()+ ",";
								}else{
									xlsPath += pdfUtil.xlsToPdf(sat.getLocalation(), fileTyle,  instanceId, sat.getId())+ ",";
								}
								fileStrs+=xlsPath;
							}else if(("jpg").equalsIgnoreCase(fileTyle) || fileTyle.equalsIgnoreCase("png") || 
									fileTyle.equalsIgnoreCase("jpeg") || fileTyle.equalsIgnoreCase("bmp")
									|| fileTyle.equalsIgnoreCase("tif")){
								imgpath+= pdfUtil.imgToPdf(sat.getLocalation(), fileTyle)+ ",";
								fileStrs+=imgpath;
							}else if(("true").equals(fileTyle)){
								if(new File(filePathOfSys + sat.getLocalation()).exists()){
									fileStrs +=filePathOfSys+sat.getLocalation() + ",";
								}else{
									fileStrs += pdfRoot+sat.getLocalation() + ",";
								}	
							}
						}
					}
					
					MergePdf mp = new MergePdf();
					fileStrs = removeLastComma(fileStrs);
					String saveMergePath =pdfRoot+dstPath+ UUID.randomUUID().toString()+".pdf";
					String[] files = null;
					if (!("").equals(fileStrs) && fileStrs.length() > 0) {
						files = new String[fileStrs.split(",").length];
						for (int i = 0; i < fileStrs.split(",").length; i++) {
							files[i] = fileStrs.split(",")[i];
						}
						mp.mergePdfFiles(files, saveMergePath);
						String truePath = new PDFToTrue().pdfToTrue(saveMergePath, "");
						
						DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
						// pdf to true
						// update 附件地址
						Employee emp = (Employee) getSession().getAttribute(
								MyConstants.loginEmployee);
						Date nowTime = new Date();
						String newInstanceId= UuidGenerator.generate36UUID();
						// 插入 收文表
						Sw sw = new Sw();
						sw.setLwbt(title); // 来文标题
						sw.setLwh(bh);  // 来文号
						sw.setInstanceid(newInstanceId);
						sw.setFwsj(nowTime); // 发文日期
						// 根据 部门id 获取  部门名称
						List<DocXgDepartment> list = selectTreeService.getDocXgDeptById(doFileReceive.getToDepartId());
						DocXgDepartment dep = null;
						if(list!=null && list.size()>0){
							dep =  list.get(0);
						}
						sw.setLwdw(dep.getName());                  // 来文单位
						//sw.setLwdw(lwdw)
						WfProcess wfProcess = new WfProcess();
						wfProcess.setWfInstanceUid(instanceId);
						wfProcess.setWfProcessUid(processId);
						wfProcess.setItemId(itemId);
						//根据itemid 获取 item 得到 lcid 
						WfItem  item = itemService.getItemById(itemId);
						wfProcess.setWfUid(item.getLcid());
						// 获取流程的第一个节点
						WfNode node = workflowBasicFlowService.findFirstNodeId(item.getLcid());
						wfProcess.setNodeUid(node.getWfn_id());
						
						// 从当前人 
						wfProcess.setUserUid(emp.getEmployeeGuid());
						// 获取 接受人员 ， 部门id   T_WF_CORE_RECEIVE 的 fromuserId 
						Employee sendEmp = employeeService.findEmployeeById(doFileReceive.getFormUserId());
						String uId = sendEmp.getDepartmentGuid();
						//点击发送按钮发送,插待办并入待收表
						DoFileReceive dfr =	tableInfoService.addSend(uId,doFileReceive.getFormUserId(),sw, truePath,emp,newInstanceId,wfProcess,false,nowTime); 
						
					}
					out = this.getResponse().getWriter();
					out.write("yes");
		}catch(Exception e){
			out.write("no");
		}
		out.flush();
		out.close();
	}
	
	// 根据 processId 判断步骤是否完成
		public void judgeIsOver(){
			String processId = getRequest().getParameter("processId");
			WfProcess process = tableInfoService.getProcessById(processId);
			PrintWriter out = null;
			
			try {
				out = this.getResponse().getWriter();
				if(process != null){
					String isOver =	process.getIsOver();
					if(isOver != null && isOver.equalsIgnoreCase("OVER")){
						out.write("1");
					}else if(isOver != null && isOver.equalsIgnoreCase("NOT_OVER")){
						out.write("0");
					}
				}else{
					out.write("-1");
				}
			} catch (IOException e) {
			} finally {
				out.flush();
				out.close();
			}
			
		}
		
		
		/**
		 * 
		 * 描述：根据收文登记号获取 编号
		 * 作者:蔡亚军
		 * 创建时间:2014-7-2 下午2:37:20
		 */
		public void createBh(){
			PrintWriter out = null;
			try {
				// 获取参数值 value = {{cs::::value}}
				JSONObject jsonObject  = getJSONObject();
				String value = "";
				if(jsonObject != null){
					try {
						value = jsonObject.getString("value");
					} catch (Exception e) {
						System.out.println("无默认数据");
					}
				}else{
					value = getRequest().getParameter("value");
				}
				if(value == null ||value.equals("undefined")){
					value = "";
				}
				//swdjh获取最大值, 将收文登记号+1;
				int swdjh = 0;
				if(value!=null && !value.equals("")){
					String nf = new SimpleDateFormat("yyyy").format(new Date(System.currentTimeMillis()));
					value = "["+nf+"]"+value;
				}
				out = this.getResponse().getWriter();
				out.write(value+"");
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				out.flush();
				out.close();
			}
		}
		
		
		public void getUsersByIdsByMobile(){
			PrintWriter out = null;
			
			try {
				HttpServletResponse response = getResponse();
				response.setCharacterEncoding("utf-8");
				JSONObject jsonObject = getJSONObject();
				out = this.getResponse().getWriter();
				// 获取路由类型
				String type = "";
				String name = "";
				if(jsonObject != null){
					type = jsonObject.getString("type");
					name = jsonObject.getString("name");
				}else{
					type = getRequest().getParameter("type");
					name = getRequest().getParameter("name");
				}
				String cName = "";
				if(jsonObject != null && type.equals("2")){
					if(name.indexOf(";") > -1){
						
						cName = name.substring(name.indexOf(";")+1);
						name = name.split(";")[0];
					}
				}
				if(jsonObject == null && type.equals("2")){
					if(name.indexOf(";") > -1){
					
						cName = name.substring(name.indexOf(";")+1);
						name = name.split(";")[0];
					}
					
				}
				// 获取主送的人员
				String nameParam = "";
				if (CommonUtil.stringNotNULL(name)) {  
					if(name.indexOf(",")> -1){
						name = "'" + name.replaceAll(",", "','") + "'";
					}else{
						name = "'" + name.replaceAll(";", "','") + "'";
					}
					
				}
				// 抄送的人员
				if (CommonUtil.stringNotNULL(cName)) {  
					cName = "'" + cName.replaceAll(",", "','") + "'";
				}
				String retName = "";
				if(!"".equals(name)){
					retName= employeeService.getUserNamesByIds(name);
				}
				String retCName = "";
				if(!"".equals(cName)){
					retCName =	employeeService.getUserNamesByIds(cName);
				}
				String ret ="";
				if(!"".equals(name)){
					if(type.equals("2")){
						ret = "主送给 "+retName;
						if(!"".equals(retCName)){
							ret +=	",抄送给 "+retCName;
						}
					}else{
						ret = "发送给 "+retName;
					}
					this.getResponse().getWriter().print(ret+"？");
				}else{
					this.getResponse().getWriter().print("完成");
				}
				
			} catch (IOException e) {
				e.printStackTrace();
			}finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 
		 * 描述：校验该办件步骤是否有权限进行处理
		 * 作者:蔡亚军
		 * 创建时间:2014-8-11 上午10:11:28
		 */
		public void checkIsDealIngOfMobile(){
			PrintWriter out = null;
			String processId = getRequest().getParameter("processId");
			String userName = tableInfoService.findPendDealIngUser(processId);
			//获取当前的用户Emp
			String userId = getRequest().getParameter("userId");
			Employee emp = null;
			if(userId!=null && !userId.equals("")){
				emp = employeeService.findEmployeeById(userId);
			}else{
				emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			}
			if(emp.getEmployeeName().equals(userName)){
				userName = "";
			}
			try {
				out = this.getResponse().getWriter();
				this.getResponse().getWriter().print(userName);
			} catch (IOException e) {
				e.printStackTrace();
			}finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 
		 * 描述：清除session
		 *
		 * 作者:Zhaoj☭
		 * 创建时间:2014-9-16 下午01:53:43
		 */
		public void clearSession(){
			super.getSession().invalidate();
		}
		
		/**
		 * 描述：发起事项
		 * 作者:Yuxl
		 * 创建时间:2015-1-14 上午11:38:27
		 */
		public void startItem(){
			// 1 获取参数
			// 获取当前登录用户
			try {
				Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				String processId = getRequest().getParameter("processId");
				WfProcess oldProcess = pendingService.getProcessByID(processId);
				String zsName = getRequest().getParameter("xtoName");
				String csName = getRequest().getParameter("xccName");
				String nextNodeId = getRequest().getParameter("nextNodeId");
				String workFlowId = getRequest().getParameter("workFlowId");
				// 当前节点id
				String nodeId = getRequest().getParameter("nodeId");
				// 当前步骤的json
				String commentJson = getRequest().getParameter("json");
				commentJson = JSONReplaceUtil.replaceJson(commentJson);
				String userId = emp.getEmployeeGuid();
				String oldInstanceId = "";
				if(oldProcess != null){
					oldInstanceId = oldProcess.getWfInstanceUid();
				}else{
				}

				//获取原先
				WfProcess pWfProcess = tableInfoService.getParentProcessByInstanceid(oldInstanceId);
				// 3. 发起新步骤
				String userIds = zsName;
				if(csName != null && !"".equals(csName)){
					userIds += ","+csName;
				}
				
				String exsitJson = commentJson;
				if(oldProcess.getFjbProcessId() != null){
					String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
					String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
					int  StampType = 0;
					if(usbkey == "yiyuan"){
						StampType = 0;
					}else{
						StampType = 1;
					}
					JSONArray ja = JSONReplaceUtil.getJSONByProcessId(commentJson, oldProcess.getWfProcessUid());
					exsitJson ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+oldProcess.getWfInstanceUid()+"\",\"pages\": "+ja.toString()+",\"resources\": []}";
				}
				
				List<String> processList = tableInfoService.sendFirstProcess(userIds,nextNodeId,oldProcess,exsitJson);
				if(processList != null && processList.size()>0){
					String newJBProcessIds = "";
					for(int i = 0; i < processList.size(); i++){
						if(i==0){
							newJBProcessIds = processList.get(i);
						}else{
							newJBProcessIds += ","+ processList.get(i);
						}
					}
					getRequest().setAttribute("newJBProcessIds", newJBProcessIds);
				}
				// 1. save 本步骤的值
				String value = this.saveForm(oldProcess.getFormId(), 1, oldInstanceId, oldProcess.getFormId(), nodeId, workFlowId, "" ,"false",userId);		
				String vc_title = getTitle(oldProcess.getWfUid(), oldProcess.getFormId(), oldProcess.getWfInstanceUid()).split(";")[0];
				oldProcess.setProcessTitle(vc_title);
				// 插入值到新表 待办
				// 2. save 本步骤的process
				WfProcess pro = oldProcess;
				if(pro!=null){
					pro.setAction_status(2);
					pro.setCommentJson(commentJson);
					pro.setProcessTitle(vc_title);
					tableInfoService.updateProcess(pro);
					
					//获取当前节点
				//	String overhtml = getHtmlToNewHtml(formId, nodeId, value , oldInstanceId, fa, false);
					String overhtml = getHtmlToNewHtml(pro.getFormId(), nodeId, value , oldInstanceId, false, false);
					String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
					String dstPath = FileUploadUtils.getRealFolderPath(newPdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录

					String overPdfPath = newPdfRoot+dstPath+ (overhtml.substring
							(overhtml.lastIndexOf("/")+1,overhtml.length()-5)+"merge")+".true";
					WfProcess tempProcess1  = pendingService.getProcessByID(processList.get(0));
					
					ToPdfThread toPdf = new ToPdfThread(overhtml, "",
							tempProcess1.getWfInstanceUid(), attachmentService , "htmlToTrue",tempProcess1,tableInfoService,"",flowService);
					toPdf.start();
					for(int i = 0; i < processList.size(); i++){
						WfProcess tempProcess  = pendingService.getProcessByID(processList.get(i));
						tempProcess.setProcessTitle(vc_title);
						tempProcess.setPdfPath(overPdfPath+","+overPdfPath);
						tableInfoService.updateProcess(tempProcess);
						DoFile  dofile = tableInfoService.getDoFileByElements(tempProcess.getWfUid(),tempProcess.getWfInstanceUid());
						
						if(dofile!= null){
							dofile.setDoFile_title(vc_title);
							// 更新dofile
							tableInfoService.updateDoFile(dofile);
						}
					
					}
				}
				
				getResponse().getWriter().print("success");
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		/**
		 * 描述：发起事项
		 * 作者:Yuxl
		 * 创建时间:2015-1-14 上午11:38:27
		 */
		public void startItemForMobile(JSONObject jsonObject){
			// 1 获取参数
			// 获取当前登录用户
			try {
				//表单元素json
				JSONArray trueForm = new JSONArray().fromObject(jsonObject.get("trueform"));//;
				//用户id
				String userId = (String)jsonObject.get("userId");
				//步骤id
				String processId =  (String)jsonObject.get("processId");
				//流程id
				String workFlowId =  (String)jsonObject.get("workFlowId");
				
				WfProcess oldProcess = pendingService.getProcessByID(processId);
				// 主送
				String zsName = (String) jsonObject.get("m_userIds");
				// 抄送
				String csName = (String) jsonObject.get("c_userIds");

				String nextNodeId = (String)jsonObject.get("nextNodeId");
				// 当前步骤的json
				String commentJson = jsonObject.get("truepaper") + "";
				commentJson = JSONReplaceUtil.replaceJson(commentJson);
				
				JSONObject flowInfo = (JSONObject) jsonObject.get("flowInfo");
				
				String oldInstanceId = oldProcess.getWfInstanceUid();
				// 当前节点id
				String nodeId =  (String) jsonObject.get("nodeId");
				// 3. 发起新步骤
				String userIds = zsName;
				if(csName != null && !"".equals(csName)){
					userIds += ","+csName;
				}
				
				String exsitJson = commentJson;
				if(oldProcess.getFjbProcessId() != null){
					String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
					String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
					int  StampType = 0;
					if(usbkey == "yiyuan"){
						StampType = 0;
					}else{
						StampType = 1;
					}
					JSONArray ja = JSONReplaceUtil.getJSONByProcessId(commentJson, oldProcess.getWfProcessUid());
					exsitJson ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+oldProcess.getWfInstanceUid()+"\",\"pages\": "+ja.toString()+",\"resources\": []}";
				}
				
				List<String> processList = tableInfoService.sendFirstProcess(userIds,nextNodeId,oldProcess,exsitJson);
				if(processList != null && processList.size()>0){
					String newJBProcessIds = "";
					for(int i = 0; i < processList.size(); i++){
						if(i==0){
							newJBProcessIds = processList.get(i);
						}else{
							newJBProcessIds += ","+ processList.get(i);
						}
					}
					getRequest().setAttribute("newJBProcessIds", newJBProcessIds);
				}
				// 1. save 本步骤的值
				String value = saveTrueForm(oldProcess.getFormId(),oldInstanceId,oldProcess.getFormId(), trueForm,workFlowId,processId);
				
				//标题的值
				String title = getTitle(workFlowId,oldProcess.getFormId(),oldInstanceId);
				if(title != null && !title.equals("")){
					title = title.split(";")[0];
				}
				oldProcess.setProcessTitle(title);
				// 插入值到新表 待办
				// 2. save 本步骤的process
				WfProcess pro = oldProcess;
				if(pro!=null){
					pro.setAction_status(2);
					pro.setCommentJson(commentJson);
					tableInfoService.updateProcess(pro);
					
					//获取当前节点
					String overhtml = getHtmlToNewHtml(pro.getFormId(), nodeId, value , oldInstanceId, false, false);
					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_process")+"/pdf";
					String overPdfPath = pdfRoot+ (overhtml.substring
							(overhtml.lastIndexOf("/"),overhtml.length()-5)+"merge")+".true";
					WfProcess tempProcess1  = pendingService.getProcessByID(processList.get(0));
					
					ToPdfThread toPdf = new ToPdfThread(overhtml, "",
							tempProcess1.getWfInstanceUid(), attachmentService , "htmlToTrue",tempProcess1,tableInfoService,"",flowService);
					toPdf.start();
					for(int i = 0; i < processList.size(); i++){
						WfProcess tempProcess  = pendingService.getProcessByID(processList.get(i));
						tempProcess.setProcessTitle(title);
						tempProcess.setPdfPath(overPdfPath+","+overPdfPath);
						tableInfoService.updateProcess(tempProcess);
						
						DoFile  dofile = tableInfoService.getDoFileByElements(tempProcess.getWfUid(),tempProcess.getWfInstanceUid());
						
						if(dofile!= null){
							dofile.setDoFile_title(title);
							// 更新dofile
							tableInfoService.updateDoFile(dofile);
					}
						}
				}
				getResponse().getWriter().print("success");
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		
		/**
		 * 
		 * 描述：选择部门的页面
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-3-2 下午1:52:52
		 */
		public String departmentGroup(){
			return "departmentGroup";
		}
		
		public String getAllOverList(){
			String title = getRequest().getParameter("title");
			String finishTimeFrom = getRequest().getParameter("finishTimeFrom");
			String finishTimeTo = getRequest().getParameter("finishTimeTo");
			String conditionSql ="";
			if(CommonUtil.stringNotNULL(title)){
				// 标题不为空
				conditionSql = " and t.DOFILE_TITLE like '%" + title.trim() + "%' ";
			}
			if(CommonUtil.stringNotNULL(finishTimeFrom)){
				// 结束时间开始不为空
				conditionSql += " and p.apply_time  >=  to_date('"+finishTimeFrom.trim().replaceAll("'","\\'\\'")+"','yyyy-MM-dd HH24:mi:ss') ";
			}
			if(CommonUtil.stringNotNULL(finishTimeTo)){
				// 结束时间结束不为空
				conditionSql += " and p.apply_time <=  to_date('"+finishTimeTo.trim().replaceAll("'","\\'\\'")+"','yyyy-MM-dd HH24:mi:ss') ";
			}
			
			int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
			int count = 0;
			List<DoFile> doFileList = null;
			count = tableInfoService.getNewCountDoFiles(conditionSql);
			if(count != 0){
				Paging.setPagingParams(getRequest(), pageSize, count);
				String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
				doFileList = tableInfoService.getNewDoFileList(serverUrl,conditionSql, Paging.pageIndex, Paging.pageSize);
				getRequest().setAttribute("doFileList2", doFileList);
			}else{
				getRequest().setAttribute("doFileList2", null);
			}
			
			getRequest().setAttribute("title", title);
			getRequest().setAttribute("finishTimeFrom", finishTimeFrom);
			getRequest().setAttribute("finishTimeTo", finishTimeTo);
			
			return  "allOverList";
		}
		
		
		/**
		 * 
		 * 描述：跳转到补发页面
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-5-25 上午10:21:02
		 */
		public String  toReissueJsp(){
			String fprocessid = getRequest().getParameter("fprocessid");	//属于的分发流程的processId
			String title = getRequest().getParameter("title");
			getRequest().setAttribute("fprocessid", fprocessid);
			getRequest().setAttribute("title", title);
			//getRequest().setAttribute("valueOfSend", valueOfSend);
			return "toReissueJsp";
		}
		
		/**
		 * 
		 * 描述：补发办件
		 * 作者:蔡亚军
		 * 创建时间:2015-5-25 上午10:38:31
		 */
		public void reissueDofileReceive() throws Exception{
			String fprocessid = getRequest().getParameter("fprocessid");	//属于的分发流程的processId
			String zsdwId = getRequest().getParameter("zsdwId");		//主送单位id
			String csdwId = getRequest().getParameter("csdwId");		//抄送单位id
			//随意取出id
			List<DoFileReceive>  list = tableInfoService.getDofileFavouriteByFprocessId(fprocessid);
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			if(list!=null && list.size()>0){
				DoFileReceive receive = list.get(0);
				//替换reveive的值
				String[] dwIds = new String[]{zsdwId, csdwId};
				for(int i=0; i<dwIds.length; i++){
					String id = dwIds[i];
					if(id!=null && id.length()>0){
						String[] depIds = id.split(",");
						if(depIds!=null && depIds.length>0){
							for(int j=0; j<depIds.length; j++){
								String depId = depIds[j];
								String toDepId = depId.substring(0, depId.indexOf("["));
								String dyfs =  depId.substring(depId.indexOf("[")+1, depId.indexOf("]"));
								tableInfoService.saveReissueDofileOfSend(fprocessid, toDepId, emp, dyfs, 
										 receive);
							}
						}
					}
				}
			}
			try {
				getResponse().getWriter().print("success");
			} catch (IOException e) {
				getResponse().getWriter().print("fail");
			} finally {
				getResponse().getWriter().close();
			}
		}
		
		/**
		 * 
		 * 描述：已发列表收回
		 * 创建时间:2015-5-27 下午01:49:48
		 * @throws IOException 
		 */
		public void reback() throws IOException{
			String fprocessid = getRequest().getParameter("fprocessid");	//属于的分发流程的processId
			try {
				//receive表的isback修改状态为，sw表删除数据
				tableInfoService.saveAndModifyData(fprocessid);
				getResponse().getWriter().print("success");
			} catch (IOException e) {
				getResponse().getWriter().print("fail");
			} finally {
				getResponse().getWriter().close();
			}
		}
		
		
		/**
		 * 
		 * 描述：已发送列表数据收回： 1,删除各个待办，办件，业务数据，sw，receive数据
		 * 作者:蔡亚军
		 * 创建时间:2015-7-31 下午12:05:11
		 */
		public void rebackSendInfo(){
			String fprocessid = getRequest().getParameter("fprocessid");	//属于的分发流程的processId
			JSONObject error = tableInfoService.deleteSendInfo(fprocessid);
			PrintWriter out = null;
			try {
				out = this.getResponse().getWriter();
				out.write(error.toString());
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 
		 * 描述：解析意见存在表单中的页码
		 * @param json
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-7-8 上午11:01:10
		 */
		public String findCommonPageList(String json){
			if(json==null || json.equals("")|| json.equals("{}") || json.equals("[]")){
				return "";
			}
			List<Integer> pages = new ArrayList<Integer>();
			//解析意见
			JSONArray js;
			JSONObject obj = JSONObject.fromObject(json);
			try{
				if(obj.containsKey("pages")){
					js	= obj.getJSONArray("pages");
					int size = js.size();
					for(int i = 0; i<size; i++){
						JSONObject jsonObject = js.getJSONObject(i);
						int pa = jsonObject.getInt("page");
						JSONArray arr = null;
						JSONArray arr2 = null;
						try{
							arr = jsonObject.getJSONArray("processes");
							arr2 = jsonObject.getJSONArray("stamps");
						}catch (Exception e) {
						}
						
						//意见处理这个模块发送变化(ios端传输的意见格式有误)
						if((arr!=null && arr.size()>0)){
							boolean exist = false;			//是否存在有效的意见内容
							for(int j=0; j<arr.size(); j++){
								JSONObject ob = (JSONObject)arr.get(j);
								Object object = ob.get("datas");
								if(object!=null){
									String comment = object.toString();
									if(comment.equals("") || comment.equals("[]") || comment.equals("{}")){
										
									}else{
										exist = true;
									}
								}
							}
							if(exist){
								pages.add(pa);
							}
						}
						if((arr2!=null && arr2.size()>0)){
							if(!pages.contains(pa)){
								pages.add(pa);
							}
						}
					}
					String page = "";
					if(pages!=null && pages.size()>0){
						for(Integer i : pages){
							page += i+",";
						}
					}
					if(page!=null && page.length()>0){
						page =page.substring(0, page.length()-1);
					}
					return page;
				}else{
					return "";
				}
			}catch (Exception e) {
				return "";
			}
		}
		/**
		 * 
		 * 描述：获取红章打印的文件路径
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-7-8 上午11:03:40
		 */
		public void getRedChapterPdf(){
			String fprocessid = getRequest().getParameter("fprocessid");
			String title = getRequest().getParameter("title");
			List<DoFileReceive>  list = tableInfoService.getDeptIdByFprocessId(fprocessid);
			DoFileReceive entity = null;
			if(list!=null && list.size()>0){
				entity = list.get(0);
			}
			//1.获取系统中存储的pdf文件
			String instanceId = "";
			if(entity!=null){
				instanceId = entity.getInstanceId();
			}
			String attFjSuffixName = SystemParamConfigUtil.getParamValueByParam("attFjSuffixName");		// 附加附件的后缀
			List<SendAttachments> attList = attachmentService.findAllSendAtts(instanceId + attFjSuffixName,null);
			String pdfPath ="";
			String fileName = "";
			SendAttachments attachment = null;
			for(int i=0; i<attList.size(); i++){
				attachment = attList.get(i);
				if(attachment.getTitle().equals(title+"."+attachment.getFiletype())){
					pdfPath = attachment.getLocalation();
					fileName = attachment.getFilename();
					break;
				}
			}
			//获取type类型
			String type = getRequest().getParameter("type");
			if(type!=null && type.equals("1")){
				System.out.println("黑章文件="+pdfPath);
				pdfPath = pdfPath.substring(0, pdfPath.length()-4)+"_red.pdf";
				System.out.println("红章文件="+pdfPath);
			}
			String filePath = SystemParamConfigUtil.getParamValueByParam("filePath");
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			File file = new File(filePath+pdfPath);
			if(!file.exists()){
				if(!new File(pdfRoot+pdfPath).exists()){
					LOGGER.error("下载提供的文件不存在,正在重新生成");		//文件不存在
					//重新生成文件
					if(entity!=null && (type!=null && type.equals("1"))){
						WfProcess wfp = tableInfoService.getProcessById(fprocessid);
						if(wfp!=null){
							String itemId = wfp.getItemId();
							WfItem wfItem = itemService.getItemById(itemId);
							GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
							if(wfItem.getVc_sxlx().equals("0")){		//发文流程,直接合并
								String truePath = entity.getPdfpath();
								TrueToPdf trueToPdf = new TrueToPdf();
								String[] data = trueToPdf.trueToPdf(truePath);
								//String newPdfPath = pdfPath.substring(0, pdfPath.length()-4)+"_red.pdf";
								String newPdfPath = pdfPath;
								if(data!=null && data.length>1){
									pdfUtil.geneStampPdf(data[0], entity.getTrueJson(), pdfRoot+newPdfPath, "1");
								}
							}
						}
					}
				}
			}
			String filepath = pdfPath+";"+fileName;
			PrintWriter out = null;
			try {
				out = this.getResponse().getWriter();
				out.write(filepath);
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 
		 * 描述：获取true文件以及相应的意见,将两者进行合并,生成对应的true文件
		 * 作者:蔡亚军
		 * 创建时间:2015-7-13 上午11:23:47
		 * @throws Exception 
		 */
		public void changeTrueToPdf() throws Exception{
			String processId = getRequest().getParameter("processId");
			String xto_names = getRequest().getParameter("xto_names");
			WfProcess wfprocess = tableInfoService.getProcessById(processId);
			String groupId = getRequest().getParameter("groupId");
			String groupName = getRequest().getParameter("groupName");
			if(wfprocess!=null){
				//获取所有的附件
				String fileName = wfprocess.getProcessTitle()+".pdf";
				String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
				String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
				String newPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"BlackChapter.pdf";
				String pdfPath = getPDFPath(processId,newPdfPath,"");
				
				
				 //下载的pdf文件加水印
				String encodedText = "";
				Employee cEmp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				String waterText = cEmp.getEmployeeLoginname()+" "+sdf.format(new Date());
				try {
					WordAndWaterMarkTool wTool = new WordAndWaterMarkTool();
					wTool.addWaterMark(pdfPath, waterText);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				
				File file = new File(pdfPath);
				long fileSize = 0;
				if(file.exists()){
					fileSize = file.length();
				}
				
				//4.将文件用http方式传输到中威通讯录的服务器
				String url = SystemParamConfigUtil.getParamValueByParam("filePostToChatUrl");
				if(groupId!=null && !groupId.equals("")){
					url = url+"uploadfile";
				}else{
					url = url+"postdata";
				}
				//5.通知客户端发送的文件
				Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				RemoteLogin remote = new RemoteLogin();
				boolean checkUser = RemoteLogin.checkPassed;
				String szText = "";
				String userId = emp.getEmployeeGuid();
				String userName = emp.getEmployeeName();
				String filePath =  "";
				System.out.println("------------12-----------------");
				if(xto_names==null || xto_names.equals("")){
					System.out.println("------------13-----------------");
					if(groupId!=null && !groupId.equals("")){
						filePath = sendPdfToChat(pdfPath, url, groupId, userId);
						System.out.println("----filePath--分享群组--="+filePath);
						JSONObject obj = JSONObject.fromObject(filePath);
						JSONObject obj2 = (JSONObject)obj.get("message");
						String path =  obj2.get("filepath")!=null?obj2.get("filepath").toString():"";
						szText = path+"||"+fileName+"||"+fileSize+"||";
						if(checkUser){
							remote.ThirdGroupFileMsg(groupId, groupName, userId, userName, szText, "");
						}
					}else{
						LOGGER.error("请选择转发中威通讯录的人员");
					}
				}else{
					System.out.println("------------14-----------------");
					filePath = sendPdfToChat(pdfPath, url, "", userId);
					System.out.println("----filePath---分享个人--="+filePath);
					filePath = filePath.replace("||", "");
					if(checkUser){
						StrList v = new StrList();
						String[] ids = xto_names.split(",");
						for(String id : ids){
							v.add(id);
						}
						szText = filePath+"||"+fileName+"||"+fileSize+"||";
						remote.OnThirdFileMsg(userId, userName, szText, v, UuidGenerator.generate36UUID());
					}
				}
			}
		}
		
		/**
		 * 
		 * 描述：移动端获取需要转换给其他通讯的文件地址
		 * @throws Exception void
		 * 作者:蔡亚军
		 * 创建时间:2016-12-5 下午4:48:53
		 */
		public  void getPdfPathForChatMobile() throws Exception {
			JSONObject jsonObject = getJSONObjectHederAndBody1();
			String writeJson = jsonObject.get("truepaper") + "";
			writeJson = getRequest().getParameter("commentJson");
			writeJson = JSONReplaceUtil.replaceJson(writeJson);
			String processId = (String) jsonObject.get("processId");
			String userId = (String) jsonObject.get("userId");
			Integer chatType = (Integer) jsonObject.get("chatType");		//转发群组或者个人
			JSONArray chatId = new JSONArray().fromObject(jsonObject.get("chatId"));		
			WfProcess wfp = tableInfoService.getProcessById(processId);
			String pdfPath = "";
			long fileSize = 0;
			try {
				String fileName = wfp.getProcessTitle()+".pdf";
				//替换掉其中的字符串
				
			    if(wfp!=null){
			    	String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
					String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
					String newPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"BlackChapter.pdf";
			    	pdfPath = getPDFPath(processId,newPdfPath,"");
			    }
			    File file = new File(pdfPath);
				if(file.exists()){
					fileSize = file.length();
				}
				//4.将文件用http方式传输到中威通讯录的服务器
				String url = SystemParamConfigUtil.getParamValueByParam("filePostToChatUrl");
				if(chatType!=null && chatType ==1 ){
					url = url+"uploadfile";
				}else{
					url = url+"postdata";
				}
			    String filePath = "";
			    String szText = "";
				RemoteLogin remote = new RemoteLogin();
				boolean checkUser = RemoteLogin.checkPassed;
				System.out.println("checkUser:"+checkUser);
				Employee emp = employeeService.findEmployeeById(userId);
				String userName = emp.getEmployeeName();
			    if(chatType!=null && chatType==1){
			    	String groupId = "";			//解析jsonArray
		    		String groupName = "";
		    		if(chatId!=null && chatId.size()==2){
		    			groupId = chatId.get(0).toString();
		    			groupName = chatId.get(1).toString();
		    		}
			    	if(groupId!=null && !groupId.equals("")){
						filePath = sendPdfToChat(pdfPath, url, groupId, userId);
						System.out.println("----filePath--分享群组--="+filePath);
						JSONObject obj = JSONObject.fromObject(filePath);
						JSONObject obj2 = (JSONObject)obj.get("message");
						String path =  obj2.get("filepath")!=null?obj2.get("filepath").toString():"";
						szText = path+"||"+fileName+"||"+fileSize+"||";
						if(checkUser){
							remote.ThirdGroupFileMsg(groupId, groupName, userId, userName, szText, "");
						}
					}else{
						LOGGER.error("请选择转发中威通讯录的人员");
					}
			    }else{
			    	filePath = sendPdfToChat(pdfPath, url, "", userId);
					System.out.println("----filePath---分享个人--="+filePath);
					filePath = filePath.replace("||", "");
					if(checkUser){
						StrList v = new StrList();
						String id = "";			//解析jsonArray
				    	for(int i=0; i<chatId.size(); i++){
				    		id = chatId.get(i).toString();
				    		v.add(id);
				    	}
						szText = filePath+"||"+fileName+"||"+fileSize+"||";
						remote.OnThirdFileMsgOfPhone(userId, userName, szText, v, UuidGenerator.generate36UUID());
					}
			    }
				getResponse().getWriter().print("success");
			} catch (Exception e) {
				e.printStackTrace();
				getResponse().getWriter().print("fail");
			} finally {
				getResponse().getWriter().close();
			}
		}
		

		/**
		 * 
		 * 描述：sendFileToChat,将文件从工作流通过http上传到远程服务器中(chat后台)
		 * @param pdfPath
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-7-13 下午2:41:45
		 */
		public String sendPdfToChat(String pdfPath,String url, String groupId, String userId){
			String filePath = "";
			try{
				FileBody bin = null;
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost(url);
				File file = new File(pdfPath);
				if(file != null) {
					bin  = new FileBody(file);
				}
				StringBody type = new StringBody("file");
			    MultipartEntity reqEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE,null,Charset.forName("UTF-8"));
			    reqEntity.addPart("type", type);
			    reqEntity.addPart("attachment", bin);
			    if(groupId!=null && !groupId.equals("")){
			    	 reqEntity.addPart("groupid", new StringBody(groupId,Charset.forName("UTF-8")));
					 reqEntity.addPart("userid", new StringBody(userId,Charset.forName("UTF-8")));
			    }
				String result=null;
				HttpParams params = httpclient.getParams();
				params.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, Charset.forName("UTF-8"));//關鍵的一句,讓Api识别到charset
				HttpConnectionParams.setConnectionTimeout(params, 20*1000);	//连接超时
				HttpConnectionParams.setSoTimeout(params, 20*1000);				//读取数据超时
				httppost.setEntity(reqEntity);
				HttpResponse response = httpclient.execute(httppost);
				HttpEntity resEntity = response.getEntity();
				if(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
				    result = EntityUtils.toString( resEntity, HTTP.UTF_8);
					return result;
				}
				if(resEntity!=null){
				   resEntity.consumeContent();
				}
				httpclient.getConnectionManager().shutdown();
				return result;		    
			} catch (Exception e) {
				e.printStackTrace();
			}
			return filePath;
		}
		
		
		
		/**
		 * 
		 * 描述：sendFileToChat,将文件从工作流通过http上传到远程服务器中(chat后台)
		 * @param pdfPath
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2015-7-13 下午2:41:45
		 */
		public String sendPdfToChat(String pdfPath,String url){
			String filePath = "";
			try{
				FileBody bin = null;
				HttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost(url);
				File file = new File(pdfPath);
				if(file != null) {
					bin = new FileBody(file);
				}
				StringBody type = new StringBody("file");
			    MultipartEntity reqEntity = new MultipartEntity();
			    reqEntity.addPart("type", type);
			    reqEntity.addPart("attachment", bin);
			    httppost.setEntity(reqEntity);
			  // System.out.println("执行: " + httppost.getRequestLine());
			    HttpResponse response = httpclient.execute(httppost);
			    System.out.println("statusCode is " + response.getStatusLine().getStatusCode());
			    HttpEntity resEntity = response.getEntity();
			  //  System.out.println(response.getStatusLine());
			    HttpParams par= response.getParams();
			    if (resEntity != null) {
			    	String ret = 	EntityUtils.toString(resEntity, HTTP.UTF_8);
			    	if(ret!=null && !ret.equals("")){
			    		filePath = ret.split("[||]")[0];
			    	}
			    	//System.out.println("返回长度: " + resEntity.getContentLength());
			    	//System.out.println("返回类型: " + resEntity.getContentType());
			    	//InputStream in = resEntity.getContent();
			    }
			    if (resEntity != null) {
			      resEntity.consumeContent();
			    }
			}catch (Exception e) {
				e.printStackTrace();
			}
			return filePath;
		}
		
		/**
		 * 
		 * 描述：获取红章列表
		 * @return String
		 * 作者:蔡亚军
		 * 创建时间:2016-8-19 下午3:48:22
		 */
		public String getRelatedDoFile() {
			String instanceId = getRequest().getParameter("instanceId");
			//先确定是子流程还是父流程
			String fInstanceId = tableInfoService.getFinstanceIdByInstanceId(instanceId);
			HashMap<String, String> map = new HashMap<String, String>();
			List<WfProcess> wfList = new ArrayList<WfProcess>();
			if(CommonUtil.stringNotNULL(fInstanceId)){
				//子流程
				map.put("instanceId", instanceId);
				map.put("fInstanceId", fInstanceId);
				wfList = tableInfoService.getWfProcessList(map);
			}else{
				//主流程
				map.put("instanceId", instanceId);
				map.put("fInstanceId", fInstanceId);
				wfList = tableInfoService.getWfProcessList(map);
			}
			getRequest().setAttribute("wfList", wfList);
			return "relatedDoFileList";
		}
		
		
		/**
		 * 
		 * 描述：选择被选择的节点名称
		 * 作者:蔡亚军
		 * 创建时间:2015-1-6 上午11:40:12
		 */
		public void choiceCondition(){
			String workflowId = getRequest().getParameter("workflowId");
			String nodeId = getRequest().getParameter("nodeId");
			//获取nodeIdList
			List<WfNode> list = workflowBasicFlowService.showNextNodeList(workflowId, nodeId);
			//节点,查询出,节点之间的线条信息
			WfNode wfNode = null;
			for(int i=0; i<list.size(); i++){
				wfNode = list.get(i);
				String nextNodeId = list.get(i).getWfn_id();
				WfLine wfLine = workflowBasicFlowService.findWfLineByNodeId(workflowId, nextNodeId, nodeId);		//两个节点之间的线条信息
				if(wfLine!=null){
					String choice_condition = wfLine.getWfl_choice_condition();		//线条上判断条件
					String choice_rule = wfLine.getWfl_choice_rule();
					if(choice_condition!=null && !choice_condition.equals("")){		//存在线上条件
						boolean fhtj = checkNodeCondition(choice_condition, choice_rule, workflowId, nodeId);	//是否符合条件
						if(fhtj){
							break;
						}else{
							wfNode = null;
						}
					}else{
						wfNode = null;
					}
				}else{
					wfNode = null;
				}
			}
			String value = "";
			if(wfNode!=null){
				String wfn_id = wfNode.getWfn_id();
				String wfl_child_merge = wfNode.getWfl_child_merge();
				value =  wfn_id+","+wfl_child_merge;
			}
			//将node转换为json
			PrintWriter out = null;
			try {
				out = this.getResponse().getWriter();
				this.getResponse().getWriter().print(value);
			} catch (IOException e) {
				e.printStackTrace();
			}finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 
		 * 描述：检查node是否符合条件
		 * @param condition
		 * @param choice_rule
		 * @param workflowId
		 * @param nodeId
		 * @return boolean
		 * 作者:蔡亚军
		 * 创建时间:2015-1-6 下午2:16:58
		 */
		public boolean checkNodeCondition(String condition, 
				String choice_rule, String workflowId, String nodeId){
			String[] rules = choice_rule.split(";");
			WfNode node = workflowBasicFlowService.getWfNode(nodeId);
			if(node!=null){
				String formId = node.getWfn_defaultform();		//表单
				for(int i=0; i<rules.length; i++){
					String[] rule = rules[i].split("=");		//re=hyrs(int)[FFF284B7-1836-48A5-80DB-7B8E1F7C6720]
					String rel_name = rule[0];
					String[] field = rule[1].split("[|]");
					String fieldName = field[0];				//字段名称
					String tableName  =  field[1];				//表名
					//获取该字段的值
					List<FormTagMapColumn> list = zwkjFormService.findFormTagMapColumnList(formId, fieldName);
					if(list!=null && list.size()>0){
						String tagName = list.get(0).getFormtagname();
						String value = getRequest().getParameter(tagName);
						if(value==null || value.equals("")){
							return false;
						}else{
							//辨认字符串是否为int类型
							boolean isNum = false;
							try{
								Integer.parseInt(value);
								isNum = true;
							}catch(Exception e){
								e.getMessage();
							}
							if(isNum){
								condition = condition.replace(rel_name, value);
							}else{
								condition = condition.replace(rel_name, "\""+value+"\"");
							}
						}
					}
				}
			}
			//判断逻辑是否正确
			try {
				Object eval = new ScriptEngineManager().getEngineByName("js").eval(condition);
				return (Boolean)eval;
			} catch (ScriptException e) {
				e.printStackTrace();
			}
			return false;
		}
		
		
		/**
		 * 
		 * 描述：获取聊天群组列表数据
		 * 作者:蔡亚军
		 * 创建时间:2015-10-16 下午1:58:25
		 */
		public String getGroupDataList(){
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = emp.getEmployeeGuid();	//用户id
			RemoteLogin remote = new RemoteLogin();
			boolean checkUser = RemoteLogin.checkPassed;
			if(checkUser){
				remote.GroupDataList2(userId);			//发送消息,获取群组列表
			}
			getRequest().setAttribute("checkUser", checkUser);
			return "groupDataList";
		}
		
		
		public void getGroupChatList(){
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = emp.getEmployeeGuid();	//用户id
			String groupInfo = RemoteLogin.groupMap.get(userId);
			if(groupInfo!=null && !groupInfo.equals("")){
				RemoteLogin.groupMap.remove(userId);
			}
			getRequest().setAttribute("groupInfo", groupInfo);
			PrintWriter out = null;
			try {
				out = this.getResponse().getWriter();
				out.write(groupInfo);
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				out.flush();
				out.close();
			}
		}
		
		/**
		 * 获取原办件的单子并作为新单子的附件上传
		 * @return
		 */
		private String uploadOrigDofileAttachment(String origProcId, String instanceId, String nodeId){
			WfProcess origLastProc = pendingService.getProcessByID(origProcId);
			
			String pdfPath = "";
			if(origLastProc != null){
				String pdfsPath = origLastProc.getPdfPath();
				String pdfPathArr[] = pdfsPath.split(",");
				if(pdfPathArr != null && pdfPathArr.length > 1)
					pdfPath =  pdfPathArr[1];
			}
			String uploadfilename = pdfPath.substring(pdfPath.lastIndexOf("/") + 1, pdfPath.length());
			File origDofileTrueForm = new File(pdfPath);//原办件的true表单
			String fileType=FileUploadUtils.getExtension(uploadfilename);
			String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFilePath(uploadfilename, basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			File dstFile = new File(basePath + dstPath);// 创建一个服务器上的目标路径文件对象
			SendAttachments atts = new SendAttachments();
			atts.setDocguid(instanceId + "fj");
			//获取当前登录用户
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = emp.getEmployeeGuid();
			String userName = emp.getEmployeeName();
			atts.setEditer(userId+";"+userName);
			atts.setFiletime(new Timestamp(new Date().getTime()));
			FileUploadUtils.copy(origDofileTrueForm, dstFile);// 完成上传文件，就是将本地文件复制到服务器上
			atts.setFilename(uploadfilename);// 设置文件名属性
			atts.setFileindex(0L);
			atts.setFiletype(fileType);// 设置文件类型(后缀名)的属性
			atts.setFilesize(origDofileTrueForm.length());// 设置文件大小的属性
			atts.setLocalation(dstPath);// 设置上传后在服务器上保存路径的属性
			atts.setTitle("原办件表单");// 设置上传附件标题
			atts.setType("原办件true表单");// 设置上传附件所属类别
			atts.setNodeId(nodeId);//设置上传附件的节点ID
		
			SendAttachments sAtt =	attachmentService.addSendAtts(atts);
			return sAtt.getLocalation();
		
		}
		
		/**
		 * 获取原办件表单值
		 * @param origProcId
		 * @param instanceId
		 * @return
		 */
		private String getOrigFormValue(String origProcId, String instanceId){
			WfProcess origLastProc = pendingService.getProcessByID(origProcId);
			String docValue = "";
			if(origLastProc != null){
				String formId = origLastProc.getFormId();
				String origInstanceId = origLastProc.getWfInstanceUid();
				Sw sw = findSwInfo(formId, origInstanceId);
				
				List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
				for (FormTagMapColumn ft : list) {
					String tagValue = "";
					if(("lwbt").equals(ft.getDocColumn())){
						tagValue += sw.getLwbt();
					}else if(("yfdw").equals(ft.getDocColumn())){
						tagValue += sw.getYfdw();
					}
					else if(("lwdw").equals(ft.getDocColumn())){
						tagValue += sw.getLwdw();
					}
					else if(("fs").equals(ft.getDocColumn())){
						tagValue += sw.getFs();
					}
					else if(("fwh").equals(ft.getDocColumn())){
						tagValue += sw.getLwh();
					}
					else if(("lwh").equals(ft.getDocColumn())){
						tagValue += sw.getLwh();
					}
					else if(("gwlx").equals(ft.getDocColumn())){
						tagValue += sw.getGwlx();
					}
					else if(("zsdw").equals(ft.getDocColumn())){
						tagValue += sw.getZsdw();
					}
					else if(("csdw").equals(ft.getDocColumn())){
						tagValue += sw.getCsdw();
					}
					else if(("ztc").equals(ft.getDocColumn())){
						tagValue += sw.getZtc();
					}
					else if(("jjcd").equals(ft.getDocColumn())){
						tagValue += sw.getJjcd();
					}
					else if(("wh").equals(ft.getDocColumn())){
						int num = getContinueDocNum(origProcId);
						String docNum = "";
						String orginDocNum = sw.getWh();
						if(CommonUtil.stringNotNULL(orginDocNum) && orginDocNum.contains("-")){
							orginDocNum = orginDocNum.substring(0, orginDocNum.indexOf("-"));
						}
						if(num > 0){
							docNum = orginDocNum + "-" + num;
						}
						tagValue += docNum;
					}
					else if(("lwrq").equals(ft.getDocColumn())){
						tagValue += sw.getLwrq();
					}
					else if(("wjbh").equals(ft.getDocColumn())){
						tagValue += sw.getWjbh();
					}
					else if(("wjnr").equals(ft.getDocColumn())){
						tagValue += sw.getWjnr();
					}
					if(!tagValue.equals("")){
						docValue +=  ft.getAssignColumnName() +":"+  tagValue +";";
					}
				}
			}
			return docValue;
		}
		
		/**
		 * 
		 * @param formId
		 * @param instanceId
		 * @return
		 */
		private Sw findSwInfo(String formId, String instanceId){
			List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(formId);
			List<String> tableNameList = new ArrayList<String>();
			List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
			// 非列表类型的存入list中
			for (FormTagMapColumn ft : tableNameAllLists) {
				if (ft.getListId() == null || ("").equals(ft.getListId())) {
					lists.add(ft);
				}
			}
			for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
				//发送前先入库---取值用赋值字段
				if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
					tableNameList.add(lists.get(i).getAssignTableName());
				}
			}
			Sw sw = new Sw();
			if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
				String tableName = tableNameList.get(0);
				List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
				//查找对应关系,入库收文表
				for (FormTagMapColumn ft : tableNameAllLists) {
					if(("lwbt").equals(ft.getDocColumn())){
						sw.setLwbt(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("yfdw").equals(ft.getDocColumn())){
						sw.setYfdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwdw").equals(ft.getDocColumn())){
						sw.setLwdw(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fs").equals(ft.getDocColumn())){
						sw.setFs(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("fwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == "" ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("lwh").equals(ft.getDocColumn())){
						sw.setLwh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? (mapList.get(0).get(ft.getAssignColumnName().toUpperCase()) == "" ? null:mapList.get(0).get(ft.getAssignColumnName().toUpperCase())+ "") : mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("gwlx").equals(ft.getDocColumn())){
						sw.setGwlx(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("zsdw").equals(ft.getDocColumn())){
						String zsdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						if(zsdw!=null && zsdw.indexOf("org.hibernate.lob.SerializableClob")>-1){
							zsdw = tableInfoService.getClob(tableName, instanceId, ft.getColumnname(),formId);
						}
						sw.setZsdw(zsdw);
					}else if(("csdw").equals(ft.getDocColumn())){
						String csdw = mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "";
						if(csdw!=null && csdw.indexOf("org.hibernate.lob.SerializableClob")>-1){
							csdw = tableInfoService.getClob(tableName, instanceId, ft.getColumnname(),formId);
						}
						sw.setCsdw(csdw);
					}else if(("ztc").equals(ft.getDocColumn())){
						sw.setZtc(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if(("jjcd").equals(ft.getDocColumn())){
						sw.setJjcd(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if("wh".equals(ft.getDocColumn())){
						sw.setWh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if("lwrq".equals(ft.getDocColumn())){
						sw.setLwrq(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if("wjbh".equals(ft.getDocColumn())){
						sw.setWjbh(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}else if("wjnr".equals(ft.getDocColumn())){
						sw.setWjnr(mapList.get(0).get(ft.getColumnname().toUpperCase()) == null ? "": mapList.get(0).get(ft.getColumnname().toUpperCase())+ "");
					}
					
				}
			}
			return sw;
		}
		
		/**
		 * 续办成功后更新原办件最后一条过程中，续办办件的ID
		 */
		public void updateOrigProcState(){
			//原办件最后一条过程信息ID
			String origProcId = getRequest().getParameter("origProcId");
			//新办件ID
			String instanceId = getRequest().getParameter("instanceId");
			WfProcess origLastProc = pendingService.getProcessByID(origProcId);
			if(origLastProc != null){
				origLastProc.setContinueInstanceId(instanceId);
				tableInfoService.update(origLastProc);
			}
		}
		
		/**
		 * 获取续办件的问号后缀
		 */
		private int getContinueDocNum(String origProcId){
			WfProcess origLastProc = pendingService.getProcessByID(origProcId);
			int num = 0;
			if(origLastProc != null){
				String origInstanceId = origLastProc.getWfInstanceUid();
				HashMap<String, String> map = new HashMap<String, String>();
				map.put("continueInstanceId", origInstanceId);
				List<WfProcess> procList = tableInfoService.getProcessListByParams(map);
				for(int i = 0; procList != null && procList.size() > 0; i++){
					map = new HashMap<String, String>();
					map.put("continueInstanceId", origInstanceId);
					procList = tableInfoService.getProcessListByParams(map);
					if(procList != null && procList.size() > 0){
						WfProcess proc = procList.get(0);
						if(proc != null){
							origInstanceId = proc.getWfInstanceUid();
							num += 1;
						}
					}else{
						break;
					}			
				}
			}else{
				num = 0;
			}
			num = num + 2;
			return num;
		}
		
	/**                                                                                                                                    	
	 *                                                                                                                                     	
	 * 描述：推送消息内容到通讯服务器中                                                                                                                    	
	 * @param oldProcess void                                                                                                              	
	 * 作者:蔡亚军                                                                                                                              	
	 * 创建时间:2016-7-12 上午9:57:52                                                                                                            	
	 */                                                                                                                                    	
	public void sycnPendToChat(WfProcess wfp, String userId){                                                                              	
		RemoteLogin remote = new RemoteLogin();                                                                                            	
		Employee emp = null;                                                                                                               	
		if(userId!=null){                                                                                                                  	
			emp = employeeService.findEmployeeById(userId);                                                                                	
		}else{                                                                                                                             	
			emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);                                                         	
		}                                                                                                                                  	
		boolean checkUser = RemoteLogin.checkPassed;
		if(checkUser){
			//发送到第三方短信接口                                                                                                                   	
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();	
			String url = serverUrl+"/table_openPendingForm.do";                                                                            	
			String json = "";                                                                                                              	
			String itemId =	wfp.getItemId();                                                                                               	
			WfItem wfItem = itemService.getItemById(itemId);                                                                               	
			String itemName = wfItem.getVc_sxmc();
			//String msgContent = "您有一条待办,标题为'"+title+"',地址为："+url;
			String xxlx = wfItem.getVc_xxlx();
			String xmlxName = getXxlx(xxlx);
			String title = wfp.getProcessTitle();                                                                                          	
			json += "{\"name\":\""+ title+"\",\"itemId\":\""+itemId+"\",\"xxlx\":\""                                                       	
					+xmlxName+"\",\"itemName\":\""+itemName+"\",";                                                                         	
			//获取processId                                                                                                                  	
			String commentJson = json + "\"processId\":\""+wfp.getWfProcessUid()+"\",";                                                    	
			Employee emp_xto = employeeService.findEmployeeById(wfp.getUserUid());                                                         	
			String pendingUrl = url +"?processId="+wfp.getWfProcessUid()+"&isDb=true&itemId="+wfp.getItemId()+"&formId="+wfp.getFormId();  	
			MsgSend	msgSend = new MsgSend();
			/*if(StringUtils.isNotBlank(superItemId) && superItemId.equals(item.getId())){
				msgSend.setType("5");
			}*/
			msgSend.setSendUserId(emp.getEmployeeGuid());                                                                                  	
			msgSend.setSendUserName(emp.getEmployeeLoginname());                                                                           	
			msgSend.setRecUserId(emp_xto.getEmployeeGuid());                                                                               	
			msgSend.setRecUserName(emp_xto.getEmployeeLoginname());                                                                        	
			msgSend.setSendDate(new Date());                                                                                               	
			msgSend.setProcessId(wfp.getWfProcessUid());                                                                                   	
			msgSend.setStatus(2);                                                                                                          	
			commentJson += "\"url\":\""+pendingUrl+"\"}";                                                                                  	
			msgSend.setContent(commentJson);
			msgSend.setTitle(wfp.getProcessTitle());
			msgSend.setItemType(wfItem.getVc_sxmc());
			tableInfoService.saveMsgSend(msgSend); 
			JSONObject obj = new JSONObject();
			obj = MsgToObj.msgToObj(msgSend, serverUrl);
			remote.SendUsersMessage(msgSend.getSendUserId(), emp.getEmployeeName(), obj.toString(), emp_xto.getEmployeeGuid(), "");
		}
	}   
	
	public void saveOriginalHistroy(String docguid, String attId, SendAttachments att){/*
		List<SendAttachmentsHistory> attHistoryList = attachmentService.findAllSendAttHistory(docguid,"", "");
		if(attHistoryList==null || attHistoryList.size()==0){
			SendAttachmentsHistory attHistory = new SendAttachmentsHistory();
			attHistory.setDocguid(docguid);
			attHistory.setEditer(att.getEditer()); 
			attHistory.setFileindex(att.getFileindex());
			attHistory.setFiletype(att.getFiletype());
			attHistory.setFilename(att.getFilename());
			attHistory.setFjid(attId);
			attHistory.setEditer(att.getEditer());
			attHistory.setLocalation(att.getLocalation());
			attHistory.setFiletime(att.getFiletime());
			attHistory.setFilesize(att.getFilesize());
			//判断是否有编辑---用于pdf领导签批意见后重新生成正文,意见需不显示，下次签而又要显示的标识位判断
			attHistory.setIsHaveEdit("1");
			attachmentService.addSendAttHistory(attHistory);
		}
	*/}
	
	/**
	 * 
	 * 描述：开始新的办件流程事项
	 * @param senduserId
	 * @param formId
	 * @param instanceId
	 * @param trueJson
	 * @param wfp
	 * @param userId void
	 * 作者:蔡亚军
	 * 创建时间:2016-7-5 下午3:53:56
	 */
	public void toStartNewInstanceId(String iscountersign, String isoverfirststep, String formId, String instanceId, 
				String trueJson, WfProcess wfp, String userId, String itemId){
		Employee emp = employeeService.findEmployeeById(userId);
		if(StringUtils.isNotBlank(iscountersign) && iscountersign.equals("1")){
			Sw sw = findSwInfo(formId, instanceId);
			String newInstanceId = UuidGenerator.generate36UUID();
			//意见信息的更换;
			//1、取出当前步骤签批的意见
//			JSONArray array = tableInfoService.findJsonContentByProcessId(wfp.getWfProcessUid(), trueJson);
			//JSONArray array = null;
			//2、将该意见进行特别处理
			String ServerUrl = SystemParamConfigUtil.getParamValueByParam("sealUrl");
			String usbkey = SystemParamConfigUtil.getParamValueByParam("usbkey");
			int  StampType = 0;
			if(usbkey == "yiyuan"){
				StampType = 0;
			}else{
				StampType = 1;
			}
			String exsitJson ="{\"ServerUrl\": \""+ServerUrl+"\",\"StampType\": "+StampType+",\"docId\": \""+newInstanceId+"\",\"pages\": [{\"basicOS\": \"ios\",\"company\": \"trueway\",\"height\": 1448,\"processes\": [],\"version\": 2,\"width\": 1024, \"isShow\": 1}],\"resources\": []}";
			String commentJson = exsitJson;
			String newWfrocessId = UuidGenerator.generate36UUID();
			//查询新流程节点步骤的信息内容
			String new_nodeId = "";
			if(itemId!=null){
				WfItem wfitem = itemService.getItemById(itemId);
				if(wfitem!=null){
					String lcId = wfitem.getLcid();
					WfNode wfNode = workflowBasicFlowService.findFirstNodeId(lcId);
					new_nodeId = wfNode.getWfn_id();
					commentJson = "";
				}
				//正文附件的迁移
				List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId,null);
				//文件copy下.数据库新添加一条数据
				SendAttachments atts = null;
				for(int i=0; i<sattList.size(); i++){
					atts = sattList.get(i);
					String location = atts.getLocalation();
					String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");		
					File src = new File(basePath+location);
					String tolocation = FileUploadUtils.getRealFilePath(src.getName(), basePath, Constant.UPLOAD_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
					File dst = new File(basePath + tolocation);// 创建一个服务器上的目标路径文件对象
					String attSuffixName = atts.getDocguid().substring(36, atts.getDocguid().length());
					atts.setDocguid(newInstanceId+attSuffixName);
					atts.setId(null);
					atts.setNodeId(new_nodeId);
					atts.setLocalation(tolocation);
					FileUploadUtils.copy(src, dst);
					attachmentService.addSendAtts(atts);
				}
			}
			//3、执行新增流程的操作
			wfp.setCommentJson(commentJson);
			wfp.setUserUid(wfp.getOwner());
			WfProcess first_wfp = tableInfoService.saveWfProcessToNewItem(wfp, userId, sw, emp, newInstanceId, userId, itemId, newWfrocessId);
			WfProcess wfProcess = first_wfp;
			List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), wfProcess.getWfInstanceUid());
			//继续插入第二步骤的数据
			if(null != nodeList && nodeList.size()==1){//如果第二步骤有多个节点，无法自动发送至第二步
				if(first_wfp!=null && StringUtils.isNotBlank(isoverfirststep) && isoverfirststep.equals("1")){
					
					//查询第二个节点待办
					WfNode formNode = workflowBasicFlowService.getWfNode(new_nodeId);
					String nextNodeId = nodeList.get(0).getWfn_id();
					WfNode nextNode = workflowBasicFlowService.getWfNode(nextNodeId);
					String route_type = nextNode.getWfn_route_type(); 
					//获取formValue值
					String value = "";		//需要保存入库
					String docValue = "";
					List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
					for (FormTagMapColumn ft : list) {
						String tagValue = "";
						if(("lwbt").equals(ft.getDocColumn())){
							tagValue += sw.getLwbt();
						}else if(("yfdw").equals(ft.getDocColumn())){
							tagValue += sw.getYfdw();
						}else if(("lwdw").equals(ft.getDocColumn())){
							tagValue += sw.getLwdw();
						}else if(("fs").equals(ft.getDocColumn())){
							tagValue += sw.getFs();
						}else if(("lwh").equals(ft.getDocColumn())){
							tagValue += sw.getLwh();
						}else if(("gwlx").equals(ft.getDocColumn())){
							tagValue += sw.getGwlx();
						}else if(("swsj").equals(ft.getDocColumn())){
							tagValue += sw.getSwsj();
						}else if(("fwsj").equals(ft.getDocColumn())){
							tagValue += sw.getFwsj();
						}else if(("zsdw").equals(ft.getDocColumn())){
							tagValue += sw.getZsdw();
						}else if(("csdw").equals(ft.getDocColumn())){
							tagValue += sw.getCsdw();
						}else if(("jjcd").equals(ft.getDocColumn())){
							tagValue += sw.getJjcd();
						}
						if(!tagValue.equals("")){
							docValue +=  ft.getAssignColumnName() +":"+  tagValue +";";
						}
					}
					
					value = "instanceId:"+wfProcess.getWfInstanceUid()+";processId:"+wfProcess.getWfProcessUid()+";formId:"+formNode.getWfn_defaultform()
								+";workFlowId:"+wfProcess.getWfUid();
					if(docValue!=null && !docValue.equals("")){
						value = value+";"+docValue;
					}
					//将value值进行入库操作
					ZwkjForm zf = zwkjFormService.getOneFormById(first_wfp.getFormId());
					String tableName = zf.getInsert_table();
					// 更新--先删除再重新插库
					zwkjFormService.saveForm(tableName, value);
					
					String vc_title  = wfProcess.getProcessTitle();
					String xtoUserId = userId;
					String xccUserId = "";
					String workFlowId = wfProcess.getWfUid();
					String nodeId = new_nodeId;
					String processId = wfProcess.getWfProcessUid();
					String oldformId = formNode.getWfn_defaultform(); 
					String isChildWf = "false";
					String cType = "0";
					String relation = "";
					String finstanceId = "";
					String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"
								+ getRequest().getLocalPort() + getRequest().getContextPath();
					SendNextProcess	 sendNextProcess = new SendNextProcess(vc_title, xtoUserId, xccUserId, emp.getEmployeeGuid(), workFlowId,
							nodeId, "", processId, nextNodeId, newInstanceId, itemId, formId, oldformId , "", "", "",
							isChildWf, cType, relation, finstanceId, "", "", "", "", serverUrl);
					sendNextProcess.setTrueJson(commentJson);
					try {
						String htmlpath = getHtmlToNewHtml(formNode.getWfn_defaultform(), nextNodeId, value, newInstanceId, false , true);
						String htmlpath2 = getHtmlToNewHtml(formNode.getWfn_defaultform(), nextNodeId, value, newInstanceId, false, false);
						String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2, "");
						sendNextProcess.setPdfPath(pdfPath);
						//调用线程: 处理的事情如下, 1, 插入待办; 2,待收已收; 3,over竞争步骤; 4,下一步状态show改为1, 5,执行存储过程
						ToPdfThread topdf = new ToPdfThread(htmlpath+","+htmlpath2,attachmentService,
								newInstanceId, "","","middle", sendNextProcess, 0,
								"2", tableInfoService,route_type, employeeService, departmentService,
								emp, wfProcess, workflowBasicFlowService,zwkjFormService, "",
								flowService,itemService, "", "", null,nextNode.getWfn_self_loop());
						topdf.start();
					} catch (Exception e) {
						e.printStackTrace();
					}
					/*//设置中心发文和厅发文的关联关系
					InstanceIdShip entity = new InstanceIdShip();
					entity.setOldInstanceid(instanceId);
					entity.setNewInstanceid(newInstanceId);
					businessService.addShip(entity);*/
				}
			}
		}		
	}
	
	/**
	 * 
	 * 描述：获取页面中地址路径相对路径
	 * @param formId
	 * @param userId
	 * @param nodeId
	 * @param workflowid void
	 * 作者:蔡亚军
	 * 创建时间:2016-7-4 上午9:39:34
	 */
	public List<Integer> getFormInputElement(String formId, String userId, String nodeId, String workflowid){
		List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
		ZwkjForm form = zwkjFormService.getOneFormById(formId);
		String locations = form.getElementLocationJson();
		JSONArray jsonArray = JSONArray.fromObject(locations);
		Integer x= 0;
		Integer y= 0;
		Integer width = 0;
		Integer height = 0;
		Map<String, String> perLimit = formPermitService.getEmployeeLimit(userId, "", nodeId, workflowid);// linkPhone=1,text
		if (perLimit != null && !("").equals(perLimit) && perLimit.size() != 0) {
			for (Map.Entry<String, String> entry : perLimit.entrySet()) { // 格式---VC_SQR:0,text
				if (entry.getValue().split(",")[0].equals("2")){
					for (FormTagMapColumn ftm : list) {
						if(ftm.getFormtagname().equalsIgnoreCase(entry.getKey())){
							if(("true").equals(ftm.getFormtagtype())){
								for (int j = 0; j < jsonArray.size(); j++) {
									JSONObject jo = jsonArray.getJSONObject(j);
									if(jo.isNullObject()){
										continue;
									}
									String name = jo.get("name").toString();
									if (ftm.getFormtagname().equalsIgnoreCase(name)) {
										x = Integer.valueOf(String.valueOf(jo.get("startX")));
										y = jo.getInt("startY");
										y = y%1362;
										width = Integer.valueOf(String.valueOf(jo.get("width")));
										height = Integer.valueOf(String.valueOf(jo.get("height")));
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		List<Integer> int_list = new ArrayList<Integer>();
		int_list.add(x);
		int_list.add(y);
		int_list.add(width);
		int_list.add(height);
		return int_list;
	}
	
	/**
	 * 描述：判断办件是否能删除
	 * 作者:蒋烽
	 * 创建时间:2017-2-6 下午6:08:44
	 */
	public void checkCanDel(){
		String id = getRequest().getParameter("id");
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		WfProcess wfp = tableInfoService.getProcessById(id);
		WfNode node = tableInfoService.getWfNodeById(wfp.getNodeUid());
		List<String> plist = tableInfoService.getDelPendingList(" and p.wf_process_uid = '"+id+"' ", emp.getEmployeeGuid(), null, null);
		if(null != plist && plist.size()>0 || (node.getWfn_sortNumber() != null && node.getWfn_sortNumber().equals(1))){
			toPage("success");
		}else{
			toPage("fail");
		}
	}
	
	public String getXxlx(String xxlx){                                                                                                    	
		String lxmc = "";                                                                                                                  	
		switch(Integer.valueOf(xxlx)){                                                                                                     	
		case 2:                                                                                                                            	
			lxmc  = "公文管理";                                                                                                                	
			break;                                                                                                                         	
		case 4:                                                                                                                            	
			lxmc = "工作任务";                                                                                                                 	
			break;                                                                                                                         	
		case 5:                                                                                                                            	
			lxmc = "工作计划";                                                                                                                 	
			break;                                                                                                                         	
		case 8:                                                                                                                            	
			lxmc = "工作动态";                                                                                                                 	
			break;                                                                                                                         	
		case 11:                                                                                                                           	
			lxmc = "依申请公开";                                                                                                                	
			break;                                                                                                                         	
		case 17:                                                                                                                           	
			lxmc = "工作日志";                                                                                                                 	
			break;                                                                                                                         	
		case 19:                                                                                                                           	
			lxmc = "车辆管理";                                                                                                                 	
			break;                                                                                                                         	
		case 20:                                                                                                                           	
			lxmc = "会议管理";                                                                                                                 	
			break;                                                                                                                         	
		case 21:                                                                                                                           	
			lxmc = "资产管理";                                                                                                                 	
			break;                                                                                                                         	
		case 22:                                                                                                                           	
			lxmc = "资产管理";                                                                                                                 	
			break;                                                                                                                         	
		}                                                                                                                                  	
		return lxmc;                                                                                                                       	
	}                             
	
	
	/**
	 * 获取本系统以及webservice接口入库的办件
	 * 描述：TODO 对此方法进行描述
	 * @return String
	 * 作者:季振华
	 * 创建时间:2017-1-5 下午8:40:17
	 */
	public String getReceiveAllList(){
		String status_do = getRequest().getParameter("status");
		String status = getRequest().getParameter("status");
		if(CommonUtil.stringNotNULL(status) && "2".equals(status)){
			status_do = "1";
		}
		String wfTitle = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String lwdw = getRequest().getParameter("lwdw");
		
		String lwh = getRequest().getParameter("lwh");
		String startTime = getRequest().getParameter("startTime");
		String endTime = getRequest().getParameter("endTime");
		
		Map<String, String> searchmap = new HashMap<String, String>();
		searchmap.put("wfTitle", wfTitle);
		searchmap.put("itemName", itemName);
		searchmap.put("lwh", lwh);
		searchmap.put("startTime", startTime);
		searchmap.put("endTime", endTime);
		searchmap.put("lwdw", lwdw);
		
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		String userId = emp.getEmployeeGuid();	//人员id
		Department dep = departmentService.findDepartmentById(emp.getDepartmentGuid());
		getRequest().setAttribute("deptName", dep.getDepartmentName());
		String departId = dep.getSuperiorGuid();	//获取当前人员的父机构Id
		String linkDeptIds = dep.getDepartmentGuid();
		// 获取sys 查看部门是否在
		// 从字段表获取 sys 的keys
		List<WfDictionary> keys = dictionaryService.getDictionaryByName("linkDept");
		for(int index = 0 ; index <keys.size() ; index++){
			WfDictionary dic = keys.get(index);
			String[] dicKeys = dic.getVc_key().split(",");
			String[] dicValues = dic.getVc_value().split(",");
			for(int j = 0 ; j < dicValues.length ; j++){
				String temp = SystemParamConfigUtil.getParamValueByParam(dicValues[j]);
				if(temp != null && temp.indexOf(linkDeptIds)>-1){
					linkDeptIds = temp ;
					break;
				}
			}
		}
//			if(CommonUtil.stringNotNULL(emp.getJobcode())){
//				String[] jobCodes = emp.getJobcode().split(",");
//				String jobCode = "";
//				for (String s:jobCodes){
//					jobCode += s + ",";
//				}
//				linkDeptIds = jobCode + linkDeptIds;
//			}
		if (!StringUtils.isBlank(linkDeptIds)) {  
			linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
		}
		searchmap.put("departId", linkDeptIds);
		
		int pageSize = Integer.parseInt(SystemParamConfigUtil.getParamValueByParam("pagesize"));
		int count = tableInfoService.getReceiveAllCount(userId,Integer.parseInt(status_do), searchmap);
		Paging.setPagingParams(getRequest(), pageSize, count);
		List<DoFileReceive> list = tableInfoService.getReceiveAllList(
				userId, Paging.pageIndex, Paging.pageSize,Integer.parseInt(status_do), searchmap);
		//down地址
		String downloadUrl = SystemParamConfigUtil.getParamValueByParam("truedownloadUrl");
		getRequest().setAttribute("filedownloadUrl",  SystemParamConfigUtil.getParamValueByParam("filedownloadUrl"));
		getRequest().setAttribute("downloadUrl", downloadUrl);

		getRequest().setAttribute("list", list);
		getRequest().setAttribute("status", status);
		getRequest().setAttribute("wfTitle", wfTitle);
		getRequest().setAttribute("itemName", itemName);
		
		getRequest().setAttribute("lwh", lwh);
		getRequest().setAttribute("startTime", startTime);
		getRequest().setAttribute("endTime", endTime);
		getRequest().setAttribute("lwdw", lwdw);
		
		String zfbDepId = SystemParamConfigUtil.getParamValueByParam("zfbDepId");
		if(zfbDepId!=null && (zfbDepId.equals(dep.getDepartmentGuid())
				|| zfbDepId.equals(departId))){
			//jrdb	进入待办
			getRequest().setAttribute("jrdb", true);
		}else {
			getRequest().setAttribute("jrdb", false);
		}
		
		List<WfItem> itemList = itemService.getItemList(emp.getDepartmentGuid());
		getRequest().setAttribute("itemList", itemList);
		getSession().setAttribute("usbkey", SystemParamConfigUtil.getParamValueByParam("usbkey"));
		getSession().setAttribute("sealurl", SystemParamConfigUtil.getParamValueByParam("sealurl"));
		if (status != null && status.equals("1")) {
			return "toDoFileReceivedList";
		}else if(status != null && status.equals("2")){
			return "receiveAllList_do";
		}
		return "toReceiveAllList";
	}
    
	/**
	 * 测试使用
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:季振华
	 * 创建时间:2017-1-4 上午10:45:33
	 */
	public void getToBeReceivedList(){
		
		String xml2 = docExchangeClient.getLowReceivedList("{7F000001-FFFF-FFFF-8F91-6A6E00000077}","0","2");
		
		
//		String xml3= docExchangeClient.updateLowDoFileReceive("01374A70-E37B-4957-9043-0B40A602ACBE");
//
//		System.out.println(xml3);
		
		String xml4 = docExchangeClient.receiveSendXml(xml2);
		
		System.out.println(xml4);
			
	}
	
	/**
	 * 描述：目录页面数据初始化
	 * @return String
	 * 作者:蒋烽
	 * 创建时间:2017-3-23 上午9:43:59
	 */
	public String getCatalog(String instanceId){
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(instanceId + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(instanceId + "oldfj",null);
		JSONArray jArr = new JSONArray();
		JSONObject jObj = new JSONObject();
		jObj.put("name", "文单");
		jObj.put("pageCount", "1");
		jArr.add(jObj);
		sattExtList.addAll(oldExtList);
		sattList.addAll(sattExtList);
		Integer i = 1;
		for (SendAttachments sendAttachments : sattList) {
			JSONObject obj = new JSONObject();
			obj.put("name", "正文"+i);
			obj.put("pageCount", sendAttachments.getPagecount());
			jArr.add(obj);
			i++;
		}
		return jArr.toString();
	}
	
	/**
	 * 描述：目录页面数据初始化
	 * @return String
	 * 作者:蒋烽
	 * 创建时间:2017-3-23 上午9:43:59
	 */
	public void getCatalog(String allPdfPath,String instanceId){
		String withForm = getRequest().getParameter("withForm");
		JSONArray jArr = new JSONArray();
		if(StringUtils.isNotBlank(allPdfPath)){
			JSONArray jsonArray = JSONArray.fromObject(allPdfPath);
			Integer i = 1;
			for (Object object : jsonArray) {
				JSONObject obj = JSONObject.fromObject(object);
				JSONObject obj2 = new JSONObject();
				obj2.put("name", "正文"+i);
				obj2.put("pageCount", obj.get("pageCount"));
				jArr.add(obj2);
				i++;
			}
		}else{
			List<SendAttachments> sattList = getAttListByInstanceId(instanceId);
			JSONObject jObj = new JSONObject();
			if(!"false".equals(withForm)){
			    jObj.put("name", "文单");
			    jObj.put("pageCount", "1");
			    jArr.add(jObj);
			}
			Integer i = 1;
			Integer j = 1;
			if(null!=sattList && sattList.size()>0){
				attachmentService.updateAttsToPageCount(sattList);
			}
			for (SendAttachments sendAttachments : sattList) {
				String skipFileType = "rar,zip,cebx";
				if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
					JSONObject obj = new JSONObject();
					if(CommonUtil.stringNotNULL(sendAttachments.getDocguid())){
						String docguid = sendAttachments.getDocguid();
						if(docguid.indexOf(ATT_SUFFIX_NAME)>-1){
							obj.put("name", "正文");
							obj.put("pageCount", sendAttachments.getPagecount());
							jArr.add(obj);
							i++;
						}
						if(docguid.indexOf(ATT_FJSUFFIX_NAME)>-1){
							obj.put("name", "附件"+j);
							obj.put("pageCount", sendAttachments.getPagecount());
							jArr.add(obj);
							j++;
						}
						
					}
				}
			}
		}
		getRequest().setAttribute("filePages", jArr.toString());
	}
	
	/**
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:蒋烽
	 * 创建时间:2018-3-12 下午6:51:02
	 */
	public String toCatalog(){
		String allPdfPath = getRequest().getParameter("allPdfPath");
		String instanceId = getRequest().getParameter("allInstanceId");
		String withForm = getRequest().getParameter("withForm");
		JSONArray jArr = new JSONArray();
		if(StringUtils.isNotBlank(allPdfPath)){
			JSONArray jsonArray = JSONArray.fromObject(allPdfPath);
			Integer i = 1;
			for (Object object : jsonArray) {
				JSONObject obj = JSONObject.fromObject(object);
				JSONObject obj2 = new JSONObject();
				obj2.put("name", "正文"+i);
				obj2.put("pageCount", obj.get("pageCount"));
				jArr.add(obj2);
				i++;
			}
		}else{
			List<SendAttachments> sattList = getAttListByInstanceId(instanceId);
			JSONObject jObj = new JSONObject();
			if(!"false".equals(withForm)){
			    jObj.put("name", "文单");
			    jObj.put("pageCount", "1");
			    jArr.add(jObj);
			}
			Integer i = 1;
			Integer j = 1;
			if(null!=sattList && sattList.size()>0){
				attachmentService.updateAttsToPageCount(sattList);
			}
			for (SendAttachments sendAttachments : sattList) {
				String skipFileType = "rar,zip,cebx";
				if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
					JSONObject obj = new JSONObject();
					if(CommonUtil.stringNotNULL(sendAttachments.getDocguid())){
						String docguid = sendAttachments.getDocguid();
						if(docguid.indexOf(ATT_SUFFIX_NAME)>-1){
							obj.put("name", "正文");
							obj.put("pageCount", sendAttachments.getPagecount());
							jArr.add(obj);
							i++;
						}
						if(docguid.indexOf(ATT_FJSUFFIX_NAME)>-1){
							obj.put("name", "附件"+j);
							obj.put("pageCount", sendAttachments.getPagecount());
							jArr.add(obj);
							j++;
						}
						
					}
				}
			}
		}
		getRequest().setAttribute("filePages", jArr.toString());
		getRequest().setAttribute("pages", getRequest().getParameter("pages"));
		return "toCatalog";
	}
	
	
	/**
	 * 描述：根据实例id获取附件列表
	 * @param instanceId
	 * @return List<SendAttachments>
	 * 作者:蒋烽
	 * 创建时间:2017-5-4 上午9:16:45
	 */
	private List<SendAttachments> getAttListByInstanceId(String instanceId){
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId + ATT_SUFFIX_NAME,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(instanceId + ATT_FJSUFFIX_NAME,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(instanceId + "oldfj",null);
		sattExtList.addAll(oldExtList);
		sattList.addAll(sattExtList);
		return sattList;
	}
	
	/**                                                                                                        	
	 *                                                                                                         	
	 * 描述：获取通讯中图片头像                                                                                            	
	 * @param httpurl                                                                                          	
	 * @param userId                                                                                           	
	 * @return String                                                                                          	
	 * 作者:蔡亚军                                                                                                  	
	 * 创建时间:2016-8-18 下午4:42:06                                                                                	
	 */
	public Map<String, String> getRemotePhoto(String httpurl, String userPhoneNum){
		org.apache.commons.httpclient.HttpClient client=new org.apache.commons.httpclient.HttpClient();
		HttpMethod method = getPostMethod(httpurl);
		method.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");
		Map<String, String> map = new HashMap<String, String>();
		try {
			client.executeMethod(method);
			String result = method.getResponseBodyAsString();
			if(result!=null){
				JSONObject obj = JSONObject.fromObject(result);
				String res = obj.getString("success");
				if(StringUtils.isNotBlank(res) && res.equals("true")){
					JSONArray dataArr = obj.getJSONArray("data");
					for (int i=0;i<dataArr.size();i++) {
						JSONObject object = dataArr.getJSONObject(i);
						map.put(object.getString("uname"), object.getString("icon"));
					}
				}
			}
		} catch (HttpException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			method.releaseConnection();
		}
		return map;
	}
	
	private  HttpMethod getPostMethod(String url){
		PostMethod post=new PostMethod(url);
		return post;
	}
	
	private JSONObject setValue(JSONObject obj, JSONObject valueObj, String isFlexible){
		String titleKey = valueObj.getString("title");
		String userNameKey = valueObj.getString("username");
		String title = valueObj.getString(titleKey);
		String userName = valueObj.getString(userNameKey);
		JSONObject outObj = new JSONObject();
		if(isFlexible.equals("1")){
			JSONArray outArr = new JSONArray();
			JSONArray arr = obj.getJSONArray("flexibleForm");
			for(int i = 0; i<arr.size(); i++){
				JSONObject obj2 = arr.getJSONObject(i);
				if(obj2.get("id").equals(titleKey)){
					obj2.put("value", title);
				}
				if(obj2.get("id").equals(userNameKey)){
					obj2.put("value", userName);
				}
				outArr.add(obj2);
			}
			outObj.put("flexibleForm", outArr);
		}else if(isFlexible.equals("0")){
			JSONArray outArr = new JSONArray();
			JSONArray arr = obj.getJSONArray("trueform");
			for(int i = 0; i<arr.size(); i++){
				JSONObject obj2 = arr.getJSONObject(i);
				if(obj2.get("name").equals(titleKey)){
					obj2.put("value", title);
				}
				if(obj2.get("name").equals(userNameKey)){
					obj2.put("value", userName);
				}
				outArr.add(obj2);
			}
			outObj.put("trueform", outArr);
		}
		return outObj;
	}
	
	public List<File> getAttPdfFile(List<SendAttachments> list) throws Exception{
		List<File> outList = new ArrayList<File>();
		for (SendAttachments att : list) {
			String pdfPath = att.getTopdfpath();
			if(StringUtils.isBlank(pdfPath)){
				ToPdfUtil util = new ToPdfUtil();
				String path = util.fileToPdf(att,attachmentService);
				att.setTopdfpath(path);
				attachmentService.updateSendAtt(att);
				pdfPath = path;
			}
			File file = new File(pdfPath);
			outList.add(file);
		}
		return outList;
	} 
	
	/**
	 * 
	 * 描述：检查办件的状态是否被打开过
	 * 作者:蔡亚军
	 * 创建时间:2016-12-5 下午6:08:06
	 */
	public void checkWfpIsOverById(){
		try {
			JSONObject jsonObject = getJSONObject(); 
			String mobileUrl = SystemParamConfigUtil.getParamValueByParam("mobileUrl");
			String serverUrl = mobileUrl+ getRequest().getContextPath();
			String processId = "";
			String client = "";
			if(jsonObject!= null){
				processId = (String)jsonObject.get("processId");
				client = (String)jsonObject.get("client");
			}else{
				processId =getRequest().getParameter("processId");
				client =getRequest().getParameter("client");
			}
			WfProcess wfp = tableInfoService.getProcessById(processId);
			String jsonStr = "";
			jsonStr = pendingService.getChatInfoJson(wfp, serverUrl, wfp.getIsOver(), client);
			//写日志
			String filePath = "";
			TxtUtil txtUtil = new TxtUtil();
			String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path"); // 得到上传文件在服务器上的基路径
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddhhssmm");
			String fileName = sdf.format(new Date())+"_processByIdJson.txt";
			filePath = basePath+"/log/"+fileName;
			FileUploadUtils.mkDirectory(basePath+"/log/"); // 根据路径创建一系列的目录
			txtUtil.writeFile(filePath, jsonStr);
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			PrintWriter out = getResponse().getWriter();
			out.print(jsonStr);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 描述：校验是否能补发
	 * 作者:蒋烽
	 * 创建时间:2017-5-18 下午5:56:52
	 */
	private boolean checkCanReissue(WfProcess wfp){
		if(null != wfp){
			wfp.setStepIndex(wfp.getStepIndex()+1);
			List<WfProcess> wfps = tableInfoService.findWfProcessListByIsOver(wfp);
//			List<WfProcess> wfps = tableInfoService.findWfProcessList(wfp.getWfInstanceUid(), wfp.getStepIndex()+1);
			if(null != wfps && wfps.size()>0){
				boolean flag = false;
				for (WfProcess wfProcess : wfps) {
					if(wfProcess.getIsOver().equals("NOT_OVER")){
						flag = true;
						break;
					}
				}
				if(flag){
					return true;
				}else{
					return false;
				}
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
	/**
	 * 当前页复制功能
	 * 赵坚
	 * 2017年6月6日11:13:06
	 * @throws IOException 
	 */
	public void copyForm() throws IOException{
		String instanceId = this.getRequest().getParameter("instanceId");
		JSONObject jo = this.pendingService.addFormPage(instanceId);
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		String pdfPath = (String) jo.get("pdfPath");
		if(pdfPath.startsWith(newPdfRoot)){
			 pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		}else{
			 pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		}
		jo.put("pdfPath", pdfPath);
		this.getResponse().getWriter().print(jo.toString());
	}
	/**
	 * 盖章打印信息到方正电子签章系统中获取部门名称和打印份数
	 * xiep
	 * 2017-09-04 15:30
	 * @throws IOException 
	 */
	public void getSendDeptNameAndPrintNum(){
		String instanceId = getRequest().getParameter("instanceId");
		String formId = getRequest().getParameter("formId");
		String sendDept = getRequest().getParameter("sendDept");//"发送"按钮选择的发送部门
		String zsbm = getRequest().getParameter("zsbm");//页面获取主送部门
		String csbm = getRequest().getParameter("csbm");//页面获取抄送部门
		
		// 读取表单所设定的所有表
		List<FormTagMapColumn> tableNameAllLists = zwkjFormService.getTableNameByFormId(formId);
		// ========================非列表类型=============================//
		List<FormTagMapColumn> lists = new ArrayList<FormTagMapColumn>();
		List<String> tableNameList = new ArrayList<String>();
		// 非列表类型的存入list中
		for (FormTagMapColumn ft : tableNameAllLists) {
			if (ft.getListId() == null || ("").equals(ft.getListId())) {
				lists.add(ft);
			}
		}
		for (int i = 0, n = lists.size(); i < n; i++) { // 非列表型
			//发送前先入库---取值用赋值字段
			if (!tableNameList.contains(lists.get(i).getAssignTableName())) {
				tableNameList.add(lists.get(i).getAssignTableName());
			}
		}
		String xtoIdColumn = "";
		String xccIdColumn = "";
		//主送抄送值
		String xtoId = "";
		String xccId = "";
		if(CommonUtil.stringNotNULL(sendDept)){
			xtoId = sendDept;
		}else{
			//主送/抄送字段名
			xtoIdColumn = SystemParamConfigUtil.getParamValueByParam("xtoId");
			xccIdColumn = SystemParamConfigUtil.getParamValueByParam("xccId");
		}
		if (tableNameList.size() != 0 && !("").equals(tableNameList) && tableNameList != null) {
			String tableName = tableNameList.get(0);
			//默认一张表-----*************如果多张表,需修改*************-----
			List<Map> mapList = zwkjFormService.findTableByFormId(tableName, formId, instanceId);
			if (mapList.size() != 0 && !("").equals(mapList) && mapList != null) {
				// 查找字段类型 Date/varchar...
				List<WfFieldInfo> wfFieldInfoList = zwkjFormService.findWfFileldInfoByTableName(tableName);
				if (wfFieldInfoList != null && wfFieldInfoList.size() != 0 && !("").equals(wfFieldInfoList)) {
					for (WfFieldInfo wfFieldInfo : wfFieldInfoList) {
						// clob类型装换成String
						if (xtoIdColumn != null && !("").equals(xtoIdColumn)) {
							if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(xtoIdColumn.toLowerCase())) {
								if(Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3){// 此处已可以查出大字段内容
									xtoId = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
								}else{
									//遍历map
									for(int i=0; i<mapList.size(); i++){
										Map map = mapList.get(i);
										//遍历map
										Iterator<Map.Entry<String, String>> iterator =  map.entrySet().iterator();
									    while (iterator.hasNext()){
									        Map.Entry<String, String> entry = iterator.next();
									            String key = entry.getKey();
									            String value = entry.getValue();
									          if(key.equalsIgnoreCase(xtoIdColumn)){
									        	  xtoId = value ;//获取主送单位信息
									          }
									    }
									}
								}
							}
						}
						if (xccIdColumn != null && !("").equals(xccIdColumn)) {
							if ((wfFieldInfo.getVc_fieldname().toLowerCase()).equals(xccIdColumn.toLowerCase())){
								if(Integer.parseInt(wfFieldInfo.getI_fieldtype()) == 3){// 此处已可以查出大字段内容
									xccId = tableInfoService.getClob(tableName, instanceId, wfFieldInfo.getVc_fieldname(),formId);
								}else{
									//遍历map
									for(int i=0; i<mapList.size(); i++){
										Map map = mapList.get(i);
										//遍历map
										Iterator<Map.Entry<String, String>> iterator =  map.entrySet().iterator();
									    while (iterator.hasNext()){
									        Map.Entry<String, String> entry = iterator.next();
									            String key = entry.getKey();
									            String value = entry.getValue();
									          if(key.equalsIgnoreCase(xccIdColumn)){
									        	  xccId = value ;//获取抄送单位信息
									          }
									    }
									}
								}
							}
						}
					}
				}
			}
		}
		String deptNames = "";
		String copyNums = "";
		String xToNames = "";//主送部门名称
		String xccNames = "";//抄送部门名称
		if(CommonUtil.stringNotNULL(zsbm)){
			xToNames = getDeptNames(zsbm);
		}else if(CommonUtil.stringNotNULL(xtoId)){
			xToNames = getDeptNames(xtoId);
		}
		if(CommonUtil.stringNotNULL(csbm)){
			xToNames = getDeptNames(csbm);
		}else if(CommonUtil.stringNotNULL(xccId)){
			xccNames = getDeptNames(xccId);
		}
		if(CommonUtil.stringNotNULL(xToNames) && xToNames.contains("~~")){
			String[] xToArr = xToNames.split("~~");
			if(xToArr != null && xToArr.length > 1){
				deptNames = xToArr[0];
				copyNums = xToArr[1];
			}
		}
		if(CommonUtil.stringNotNULL(xccNames) && xccNames.contains("~~")){
			String[] xccArr = xccNames.split("~~");
			if(xccArr != null && xccArr.length > 1){
				deptNames = deptNames + ";" + xccArr[0];
				copyNums = copyNums + ";" + xccArr[1];
			}
		}
		try {
			getResponse().getWriter().print(deptNames + "~~" + copyNums);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 获取3级部门名称
	 * xiep
	 * 2017-03-23
	 * @param dwStrs
	 * @return
	 */
	private String getDeptNames(String dwStrs){
		String deptNames = "";//部门名称集合
		String copyNums = "";//打印份数
		if(CommonUtil.stringNotNULL(dwStrs)){
			String[] totIds = dwStrs.split("[*]");
			if(totIds != null && totIds.length > 1){
				String deptIdAndNums = totIds[0];
				int begin = deptIdAndNums.indexOf("[");
				int end =  deptIdAndNums.indexOf("]");
				String copyNum = deptIdAndNums.substring(begin+1, end);
				String[] deptIdArr = deptIdAndNums.split(",");
				if(deptIdArr != null && deptIdArr.length > 0){
					for(int i = 0; i < deptIdArr.length; i++){
						String deptId = deptIdArr[i];
						if(CommonUtil.stringNotNULL(deptId)){
							deptId = deptId.replace("["+copyNum+"]", "");
							deptId = deptId.replace("{","");
							deptId = deptId.replace("}","");
							Department dept = departmentService.findDepartmentById(deptId);
							if(dept != null){
								String stmpName = dept.getStampDeptName();//根据部门顺序选取3级部门名称
								if(CommonUtil.stringIsNULL(stmpName)){
								    stmpName = dept.getDepartmentName();
								}
								if(CommonUtil.stringNotNULL(stmpName)){
									/*String[] deptHieraArr = deptHiera.split(",");
									String deptName = "";
									if(deptHieraArr != null && deptHieraArr.length > 2){
										deptName = deptHieraArr[deptHieraArr.length - 1] + deptHieraArr[deptHieraArr.length - 3];
									}else if(deptHieraArr != null && deptHieraArr.length == 2){
										deptName = deptHieraArr[deptHieraArr.length - 1] + deptHieraArr[deptHieraArr.length - 2];
									}
									deptName = deptName.replace("o=", "");
									deptName = deptName.replace("ou=", "");*/
									String deptName = "";
									deptName = stmpName;
									if(CommonUtil.stringNotNULL(deptNames)){
										deptNames = deptNames + ";" + deptName;
										copyNums = copyNums + ";" + copyNum;
									}else{
										deptNames = deptName;
										copyNums = copyNum;
									}
								}
							}
						}
					}
				}
			}
		}
		return deptNames + "~~" + copyNums;
	}
	
	/**
	 * * 获取最新附件信息
	 * xiep
	 * 2017-09-04
	 * @param dwStrs
	 * @return
	 */
	public void getAllPdfPath(){
		String instanceId = getRequest().getParameter("instanceId");
		String serverUrl = "http://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort() + getRequest().getContextPath();
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String attSuffixName = SystemParamConfigUtil.getParamValueByParam("attSuffixName");// 正文附件的后缀
		String attFjSuffixName = SystemParamConfigUtil.getParamValueByParam("attFjSuffixName");// 附加附件的后缀
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(instanceId + attSuffixName,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(instanceId + attFjSuffixName,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(instanceId + "oldfj",null);
		sattExtList.addAll(oldExtList);
		sattList.addAll(sattExtList);
		JSONArray jArr = new JSONArray();
		for (SendAttachments sendAttachments : sattList) {
			JSONObject obj = new JSONObject();
			obj.put("id", sendAttachments.getId());
			obj.put("name", sendAttachments.getFilename());
			String toPdfPath = sendAttachments.getTopdfpath();
			String attPdfPath = "";
			if(CommonUtil.stringNotNULL(toPdfPath)){
				attPdfPath = serverUrl+ "/form/html/workflow/"+sendAttachments.getTopdfpath().substring(newPdfRoot.length());
			}else if(CommonUtil.stringNotNULL(sendAttachments.getLocalation())){
				attPdfPath = serverUrl+ "/form/html/workflow/" + sendAttachments.getLocalation();
			}
			obj.put("pdfUrl", attPdfPath);
			obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
			jArr.add(obj);
		}
		try {
			getResponse().getWriter().print(jArr.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 根据收文id获取附件
	 * xiep
	 * 2017-09-04 16:45
	 */
	public void getAttachmentsByRecId(){
		String receiveId = getRequest().getParameter("receiveId");
		String instanceId = getRequest().getParameter("instanceId");
		String pInstanceId = "";
		int imageCount = 0;
		String ret = "";
		if(CommonUtil.stringNotNULL(instanceId)){
			pInstanceId = instanceId;
			imageCount = 1;
		}else{
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
			pInstanceId = doFileReceive.getpInstanceId();
		}
		String attSuffixName = SystemParamConfigUtil.getParamValueByParam("attSuffixName");// 正文附件的后缀
		String attFjSuffixName = SystemParamConfigUtil.getParamValueByParam("attFjSuffixName");// 附加附件的后缀
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(pInstanceId + attSuffixName,null);
		List<SendAttachments> sattExtList = attachmentService.findAllSendAtts(pInstanceId + attFjSuffixName,null);
		List<SendAttachments> oldExtList = attachmentService.findAllSendAtts(pInstanceId + "oldfj",null);
		JSONArray jArr = new JSONArray();
		//取出所有的附件的PDFPATH
		sattExtList.addAll(oldExtList);
		sattList.addAll(sattExtList);
		String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
		String serverUrl = "http://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
		for (SendAttachments sendAttachments : sattList) {
			if(null != sendAttachments.getPagecount() && sendAttachments.getPagecount() != 0){
				imageCount += sendAttachments.getPagecount();
			}else{
				String isSeal = sendAttachments.getIsSeal();
				String toPdfPath = sendAttachments.getTopdfpath();
				if(!"1".equals(isSeal)){
					if(CommonUtil.stringIsNULL(toPdfPath)){
						toPdfPath = newPdfRoot + sendAttachments.getLocalation();
					}
					if(CommonUtil.stringNotNULL(toPdfPath) && toPdfPath.endsWith("pdf")){
						Integer pageCount = PdfPage.getPdfPage(toPdfPath);
						sendAttachments.setPagecount(pageCount);
						attachmentService.updateSendAtt(sendAttachments);
						imageCount += pageCount;
					}
					
				}
			}
			JSONObject obj = new JSONObject();
			obj.put("id", sendAttachments.getId());
			obj.put("name", sendAttachments.getFilename());
			String attPdfPath = "";
			String toPdfPath = sendAttachments.getTopdfpath();
			if(CommonUtil.stringNotNULL(toPdfPath)){
				attPdfPath = serverUrl+ "/form/html/workflow/"+sendAttachments.getTopdfpath().substring(newPdfRoot.length());
			}else{
				attPdfPath = serverUrl+ "/form/html/workflow/" + sendAttachments.getLocalation();
			}
			obj.put("pdfUrl", attPdfPath);
			obj.put("pdfPath", sendAttachments.getTopdfpath());
			obj.put("tmPdfPath", sendAttachments.getTmPdfPath());//脱密文件路径
			obj.put("isSeal", StringUtils.isNotBlank(sendAttachments.getIsSeal())?sendAttachments.getIsSeal():"0");
			jArr.add(obj);
		}
		ret = jArr.toString();
		try {
			getResponse().getWriter().print(ret);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 合并未盖章文件供脱密或者红章打印
	 * xiep
	 * 2017-09-04 17:26
	 * @return
	 */
	public void mergeUnsealedFiles(){
		String filePaths =  getRequest().getParameter("pdfPaths");
		String mergedFileName = "mergePrint.pdf";
		String mergedPdfPath = "";
		filePaths = removeLastComma(filePaths);
		String[] files = null;
		if (!("").equals(filePaths) && filePaths.length() > 0) {
			files = new String[filePaths.split(",").length];
			for (int i = 0; i < filePaths.split(",").length; i++) {
				files[i] = filePaths.split(",")[i];
			}
			String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			mergedFileName = FileUploadUtils.getRealFilePath(mergedFileName, basePath,Constant.GENE_FILE_PATH);
			mergedFileName = basePath + mergedFileName;
			String serverUrl = "http://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
			// 合并需要打印的pdf
			MergePdf mp = new MergePdf();	
			mp.mergePdfFiles(files, mergedFileName);
			mergedPdfPath = serverUrl+ "/form/html/workflow/"+mergedFileName.substring(basePath.length());
		}
		try {
			getResponse().getWriter().print(mergedPdfPath);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 
	 * @Description: 
	 * @author: xiep
	 * @time: 2017-9-14 下午6:08:12
	 */
	public void getFormPageJson(){
	    String formId = getRequest().getParameter("formId");
	    String workflowId = getRequest().getParameter("workflowId");
	    String instanceId = getRequest().getParameter("instanceId");
	    String formPageJson = "";
	    ZwkjForm form = zwkjFormService.getFrom(workflowId, formId, instanceId);
	    if(form != null){
		formPageJson = form.getFormPageJson();
	    }
	    try {
		getResponse().getWriter().print(formPageJson);
	} catch (IOException e) {
		e.printStackTrace();
	}
	}
	
	
	/**
	 * 上级已收转待办
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:季振华
	 * 创建时间:2017-5-16 下午3:54:48
	 */
	public void innerPendingOfMobile2(){
		JSONObject jsonObject = getJSONObject();
		
		String id = "";
		String processId ="";
		String receiveType = "";
 		String userId = "";
		String itemId = "";
		String docguid = "";//上级已收docId
		String workFlowId = "";
		String state = "";
		String itemId2 = "";
		if(jsonObject != null && !"".equals(jsonObject)){
			id = (String) jsonObject.get("id");
			processId = (String) jsonObject.get("processId");
			receiveType = (String) jsonObject.get("receiveType");
			itemId = (String) jsonObject.get("itemId");
			userId = (String) jsonObject.get("userId");
			docguid = (String) jsonObject.get("docguid");
			state = (String) jsonObject.get("status");
			itemId2 = (String) jsonObject.get("itemId2");
		}else{
			id = getRequest().getParameter("id");
			processId = getRequest().getParameter("processId");
			receiveType = getRequest().getParameter("receiveType");
			itemId = getRequest().getParameter("itemId");
			userId = getRequest().getParameter("userId");
			docguid = getRequest().getParameter("docguid");
			state = getRequest().getParameter("status");
			itemId2 = getRequest().getParameter("itemId2");
		}
		
		this.receiveLowerByMobile3(id, processId, receiveType, itemId, userId, state);
		

		// 打开流
		PrintWriter out = null;
		String jsonStr = "";
		try {
			out = getResponse().getWriter();
			HttpServletResponse response = getResponse();
			response.setCharacterEncoding("utf-8");
			
			String message = "";
			String message_return = "";
			
			Employee emp = employeeService.findEmployeeById(userId);
			WfItem wfItem = new WfItem();
			if(CommonUtil.stringIsNULL(itemId2)){
				itemId2 = SystemParamConfigUtil.getParamValueByParam("defRecPendItemId");
			}
			wfItem = itemService.getItemById(itemId2);
			if(null!=wfItem){
				workFlowId = wfItem.getLcid();
			}
			//下级已收、部门下级已收
			DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
			String instanceId_r = doFileReceive.getInstanceId();
			String pinstanceId = doFileReceive.getpInstanceId();
			List<WfProcess> wfpList = tableInfoService.getProcessList(instanceId_r);
			WfProcess wfProcess = null;
			if(wfpList!=null && wfpList.size()>0){
				wfProcess = wfpList.get(0);
			}
			if(wfProcess == null){
				System.out.println("wfProcess为空,请检查！");
				List<WfProcess> list_p = tableInfoService.getProcessList(pinstanceId);
				if(list_p!=null && list_p.size()>0){
					wfProcess = list_p.get(0);
				}
			}
			
			processId = wfProcess.getWfProcessUid();
			if(processId!=null && !processId.equals("")){
				processId = processId.trim();
			}
			receiveType = "1";
			Date nowTime = new Date();
			WfProcess wfProcess_new = new WfProcess();
			if (wfProcess != null) {
				//将推送信息中的记录修改成自己的
				tableInfoService.updatePushMessage(emp.getEmployeeGuid(), wfProcess);
				//将推送记录修改下userid
				tableInfoService.updateWfProcessByTs(emp.getEmployeeGuid(),wfProcess);
				WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
				wfProcess.setIsExchanging(0);
				if(("1").equals(receiveType)){
					//查找流程中第一步的节点信息
					if(wfNode==null){
						getResponse().getWriter().print("noNode");
						return ;
					}
					//---------------期限日期---------------
					String deadline = wfNode.getWfn_deadline();
					String deadlineunit = wfNode.getWfn_deadlineunit();
					Date jdqxDate = tableInfoService.getEndDate(nowTime, deadline, deadlineunit );
					Date apply_date = wfProcess.getApplyTime();
					String wcsx = wfItem.getVc_wcsx();		//办件完成期限
					Date zhqxDate = tableInfoService.getEndDate(apply_date, wcsx, "0");	//默认为工作日
					wfProcess.setFromNodeid("下级已收移动端过来的");
					wfProcess.setToNodeid(wfNode.getWfn_id());
					wfProcess.setNodeUid(wfNode.getWfn_id());
					wfProcess.setOwner(userId);
					wfProcess.setUserUid(userId);
					wfProcess.setFromUserId(userId);
					wfProcess.setItemId(itemId2);
					wfProcess.setWfUid(workFlowId);
					wfProcess.setApplyTime(nowTime);
					wfProcess.setFinshTime(wfProcess_new.getFinshTime());
					wfProcess.setJssj(wfProcess_new.getJssj());
					wfProcess.setFormId(wfNode.getWfn_defaultform());
					wfProcess.setOldFormId(wfNode.getWfn_defaultform());
					wfProcess.setIsOver(Constant.NOT_OVER);
					wfProcess.setIsMaster(1);
					wfProcess.setIsShow(1);
					wfProcess.setJdqxDate(jdqxDate);
					wfProcess.setZhqxDate(zhqxDate);
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setItem_id(itemId2);
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					//需要更新下关于pdf路径
					String wf_uid = wfProcess.getWfUid(); //流程
					WfNode firstNode = workflowBasicFlowService.findFirstNodeId(wf_uid);
					String formId = firstNode.getWfn_defaultform();
					String json = wfProcess.getCommentJson();
					wfProcess.setCommentJson("");
					
					//生成 收取的办文事项pdf(只读)
					List<Map> mapList = zwkjFormService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					// 获取表单对应关系(主要是获取中文名)
					List<FormTagMapColumn> list = zwkjFormService.getFormTagMapColumnByFormId(formId);
					String docValue = "";
				    //查找对应关系,入库收文表
					for (FormTagMapColumn ft : list) {
						String tagValue = "";
						if(("lwbt").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("yfdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwdw").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fs").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("lwh").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("gwlx").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("swsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}else if(("fwsj").equals(ft.getDocColumn())){
							tagValue += mapList.get(0).get(ft.getDocColumn().toUpperCase()) == null ? "": mapList.get(0).get(ft.getDocColumn().toUpperCase());
						}
							docValue +=  ft.getFormtagname() +":"+  tagValue +";";
					}
					
					String htmlpath = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							"", wfProcess.getWfInstanceUid(), false ,true);
					String htmlpath2 = getHtmlToNewHtml(formId,firstNode.getWfn_id(), 
							docValue, wfProcess.getWfInstanceUid(), false ,false);
					String pdfPath = getWfProcessPdfPath(htmlpath,htmlpath2,"");
					wfProcess.setPdfPath(pdfPath);
					String instanceId = wfProcess.getWfInstanceUid();
					ToPdfThread toPdf = new ToPdfThread(htmlpath+","+htmlpath2, "",
							instanceId, attachmentService , "htmlToPdf", wfProcess, tableInfoService, json, flowService);
					toPdf.start();
					addDoFile(wfProcess, wfItem, wfNode);
				}else{
					//更新收文时间  走公文交换的
					Sw sw = tableInfoService.getSwByInstanceId(wfProcess.getWfInstanceUid());
					sw.setSwsj(nowTime);
					tableInfoService.updateSw(sw);
					wfProcess.setUserUid(userId);
				}
				tableInfoService.updateProcess(wfProcess);
				Todos todo = new Todos();
				todo.setProcessId(wfProcess.getWfProcessUid());
				todo.setInstanceId(wfProcess.getWfInstanceUid());
				todo.setItemId(wfProcess.getItemId());
				todo.setWorkFlowId(wfProcess.getWfUid());
				todo.setFormId(wfProcess.getFormId());
				todo.setNodeId(wfProcess.getNodeUid());
				todo.setTitle(wfProcess.getProcessTitle());
				todo.setAllInstanceId(wfProcess.getAllInstanceid());
				todo.setIsMaster(wfProcess.getIsMaster()==null?"1":wfProcess.getIsMaster().toString());
				message_return = JSONObject.fromObject(todo).toString();
			}
			doFileReceive.setJrdb(1);//已经进入待办
			tableInfoService.updateDoFileReceive(doFileReceive);
			getResponse().getWriter().print(message_return);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	
		
		
	}
	
	
	public void receiveLowerByMobile3(String id,String processId,String receiveType,String itemId,String usesrId,String state){
		String msg = "";
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
		if (doFileReceive != null) { // 做更新操作
			Integer status = doFileReceive.getStatus();
			if(status!=null && status==1){
				msg = "over";
			}else{
				// 获取部门 
				String currentDeptId = doFileReceive.getToDepartId();
				String linkDeptIds = currentDeptId;
				List<WfDictionary> keys = dictionaryService.getDictionaryByName("linkDept");
				for(int index = 0 ; index <keys.size() ; index++){
					WfDictionary dic = keys.get(index);
					String[] dicKeys = dic.getVc_key().split(",");
					String[] dicValues = dic.getVc_value().split(",");
					for(int j = 0 ; j < dicValues.length ; j++){
						String temp = SystemParamConfigUtil.getParamValueByParam(dicValues[j]);
						if(temp != null && temp.indexOf(linkDeptIds)>-1){
							linkDeptIds = temp ;
							break;
						}
					}
				}
				if(currentDeptId.equals(linkDeptIds)){
					System.out.println("receiveLowerByMobile---4---------------currentDeptId.equals(linkDeptIds)-------id=" + id);
					if(StringUtils.isNotBlank(state) && state.equals("4")){
						doFileReceive.setStatus(4); // 表示拒收
					}else{
						doFileReceive.setStatus(1); // 表示签收
					}
					doFileReceive.setRecDate(new Date());
					String commentJson = doFileReceive.getTrueJson();		//true意见
					String oldTruePath = doFileReceive.getPdfpath();
					if(oldTruePath!=null && !oldTruePath.equals("")){
						String[] args = new TrueToPdf().trueToPdf(oldTruePath);
						String  pdfPath= "";
						if(args!=null && args.length >0){
							pdfPath = args[0];
						}
						String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
						doFileReceive.setPdfpath(truePath);
					}
					//将意见合并到true文件中
					/*if(jrdb.equals("false")&&!"2".equals(doFileReceive.getReceiveType())){
						createRecTrue(doFileReceive);
					}*/
					tableInfoService.updateDoFileReceive(doFileReceive);
				}else{
					System.out.println("receiveLowerByMobile---5---------------!currentDeptId.equals(linkDeptIds)-------id=" + id);
					// 根据to 部门id，instanceid 查询 数据
					if (!CommonUtils.isEmpty(linkDeptIds)) {  
						linkDeptIds = "'" + linkDeptIds.replaceAll(",", "','") + "'";
					}
					List<DoFileReceive> receivers = tableInfoService.getDoFileReceiveByPIdAndDeptIds(doFileReceive.getpInstanceId(),linkDeptIds);
					Date currentDate = new Date();
					if(receivers != null&&receivers.size()>0){
						for(int j = 0 ; j < receivers.size(); j++){
							DoFileReceive rece = receivers.get(j);
							if(StringUtils.isNotBlank(state) && state.equals("4")){
								rece.setStatus(4); // 表示拒收
							}else{
								rece.setStatus(1); // 表示签收
							}
							rece.setRecDate(currentDate);
							String commentJson = doFileReceive.getTrueJson();		//true意见
							String oldTruePath = doFileReceive.getPdfpath();
							String[] args = new TrueToPdf().trueToPdf(oldTruePath);
							String  pdfPath= "";
							if(args!=null && args.length >0){
								pdfPath = args[0];
							}
							String truePath = new PDFToTrue().pdfToTrue(pdfPath, commentJson);
							doFileReceive.setPdfpath(truePath);
							/*if(jrdb.equals("false")&&!"2".equals(rece.getReceiveType())){
								createRecTrue(rece);
							}*/
							tableInfoService.updateDoFileReceive(rece);
						}
					}
				}
				msg = "yes";
				}
			}
	}
	
	/**
	 * 
	 */
	public void sendCbMsg(){
		String groupId = SystemParamConfigUtil.getParamValueByParam("groupId");
		List<CommonGroupUsers> list = ztreeService.findAllCommonGroupUsersByGid(groupId);
		String deptId = getRequest().getParameter("deptId");
		String id = getRequest().getParameter("id");
		Department dep = departmentService.findDepartmentById(deptId);
		String title = getRequest().getParameter("title");
		
		if(null != list && list.size()>0){
			String userId = "";
			for (CommonGroupUsers commonGroupUsers : list) {
				Employee emp = tableInfoService.findEmpByUserId(commonGroupUsers.getEmpId());
				if(emp.getDepartmentGuid().equals(dep.getDepartmentGuid())){
					userId = commonGroupUsers.getEmpId();
					break;
				}
			}
			if(StringUtils.isNotBlank(userId)){
				Employee emp = tableInfoService.findEmpByUserId(userId);
				SendMsgUtil msgUtil = new SendMsgUtil();
				msgUtil.sendMsg(emp.getEmployeeMobile(), "trueWorkflow", title);
				
				DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(id);
				if(null != doFileReceive){
					Integer count = doFileReceive.getCbcs();
					if(null == count || 0 == count){
						count = 1;
					}else{
						count = count + 1;
					}
					doFileReceive.setCbcs(count);
					tableInfoService.updateDoFileReceive(doFileReceive);
				}
				toPage("success");
			}
		}
	}
	
	/**
	 * @return
	 */
	public String getWfps() {
		String isCheck = getRequest().getParameter("isCheck");
		if("1".equals(isCheck)){
			toPage("success");
		}else{
			String instanceId = getRequest().getParameter("instanceId");
			String workFlowId = getRequest().getParameter("workFlowId");
			// 跟踪
			List<GetProcess> proList = tableInfoService.findProcessList(instanceId);
			if (proList != null && proList.size() != 0) {
				TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
				for (GetProcess getProcess : proList) {
					if (Integer.parseInt(getProcess.getIsEnd()) == 1) {
						getProcess.setNodeName("办结");// 最后一步设置为办结
					}
					String commentText = tableInfoExtendService.getTextValue(trueJson==null?"":trueJson.getTrueJson(), getProcess.getWfProcessUid());
					getProcess.setCommentText(commentText);
				}
			}
			getRequest().setAttribute("processList", proList);
			
			List<StepIndexVO> list1 = tableInfoService.getStepList(instanceId);
			JSONArray arr = new JSONArray();
			Integer i = 0;
			if(list1 != null && list1.size()>0){
				for (StepIndexVO stepIndexVO : list1) {
					String fromNodeId = "";
					if(i>0){
						fromNodeId = list1.get(i-1).getNodeId();
					}else if(i.equals(0)){
						fromNodeId = "first";
					}
					String toNodeId = "";
					if(i<(list1.size()-1)){
						toNodeId = list1.get(i+1).getNodeId();
					}
					JSONObject obj = new JSONObject();
					obj.put("stepIndex", stepIndexVO.getStepIndex());
					
					JSONArray arr2 = new JSONArray();
					for (WfProcessVO wfpVO : stepIndexVO.getStepUserList()) {
						JSONObject obj2 = new JSONObject();
						obj2.put("username", wfpVO.getUserName());
						obj2.put("isdo", "");
						arr2.add(obj2);
					}
					obj.put("userInfo", arr2);
					obj.put("fromNodeId", fromNodeId);
					if(StringUtils.isNotBlank(stepIndexVO.getIsEnd()) && stepIndexVO.getIsEnd().equals("1")){
						WfNode endNode = workflowBasicFlowService.getEndNode(workFlowId);
						obj.put("toNodeId", endNode.getWfn_id());
						obj.put("nodemodel", endNode.getWfn_moduleid());
						obj.put("nodeId", "办结");
					}else{
						obj.put("toNodeId", toNodeId);
						obj.put("nodemodel", stepIndexVO.getModuleid());
						obj.put("nodeId", stepIndexVO.getNodeName());
					}
					
					arr.add(obj);
					i++;
				}
			}
			getRequest().setAttribute("processes", arr.toString());
			WfXml wfXml=workflowBasicFlowService.getWfXml(workFlowId);
			if(null==wfXml){
				//没有流程图，则打开新流程图
				getRequest().setAttribute("xml", "");
			}else{
				//有流程图，取出xml，返还给workflow_img
				String xml = wfXml.getWfx_xml().replaceAll("\n", "");
				getRequest().setAttribute("xml", xml);
			}
			getRequest().setAttribute("instanceId", instanceId);
			getRequest().setAttribute("workFlowId", workFlowId);
			
		}
		return "getWfps";
	}
	
	public String showInfo(){
		String instanceId = getRequest().getParameter("instanceId");
		String fromNodeId = getRequest().getParameter("fromNodeId");
		String nodeId = getRequest().getParameter("nodeId");
		List<Object[]> list = tableInfoService.findeWfps(fromNodeId, nodeId, instanceId);
		if(null != list && list.size()>0){
			JSONArray arr = new JSONArray();
			for (Object[] objects : list) {
				JSONObject obj = new JSONObject();
				obj.put("name1", objects[0]);
				obj.put("name2", objects[1]);
				
				java.sql.Date time1 = objects[2] != null ? (java.sql.Date)objects[2]: null;
				obj.put("time1", time1 != null ? new Date(time1.getTime())  : null);
				java.sql.Date time2 = objects[3] != null ? (java.sql.Date)objects[3]: null;
				obj.put("time2", time2 != null ? new Date(time2.getTime())  : null);
				arr.add(obj);
			}
			getRequest().setAttribute("json", arr.toString());
		}
		return "showInfo";
	}
	
	/**
	 * 描述：TODO 对此方法进行描述
	 * TableInfoAction
	 * String
	 * 作者:蒋烽
	 * 创建时间:2017 下午2:53:52
	 */
	public String showSearch() throws UnsupportedEncodingException{
		String wfTitle = getRequest().getParameter("wfTitle");
		String itemType = getRequest().getParameter("itemType");
		String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
		String commitTimeTo = getRequest().getParameter("commitTimeTo");
		String wh = getRequest().getParameter("wh");
		String lwdw = getRequest().getParameter("lwdw");
		
		if(StringUtils.isNotBlank(wfTitle)){
			wfTitle = URLDecoder.decode(wfTitle,"UTF-8");
		}
		if(StringUtils.isNotBlank(wh)){
			wh = URLDecoder.decode(wh,"UTF-8");
		}
		if(StringUtils.isNotBlank(lwdw)){
			lwdw = URLDecoder.decode(lwdw,"UTF-8");
		}
		getRequest().setAttribute("wfTitle", wfTitle);
		getRequest().setAttribute("itemType", itemType);
		getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
		getRequest().setAttribute("commitTimeTo", commitTimeTo);
		getRequest().setAttribute("wh", wh);
		getRequest().setAttribute("lwdw", lwdw);
		return "searchPage";
	}
	
	/**
	 * 描述：至退回页面
	 * TableInfoAction
	 * String
	 * 作者:蒋烽
	 * 创建时间:2017 下午6:49:23
	 */
	public String toSendBackPage(){
		String instanceId = getRequest().getParameter("instanceId");
		String processId = getRequest().getParameter("processId");
		List<WfNode> list = workflowBasicFlowService.findWfNodeByInstanceId(instanceId, processId);
		getRequest().setAttribute("list", list);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("processId", processId);
		return "toSendBackPage";
	}
	
	/**
	 * 描述：执行退回操作
	 * TableInfoAction
	 * void
	 * 作者:蒋烽
	 * 创建时间:2017 上午9:41:09
	 */
	public void doSendBack(){
		JSONObject jsonObject = getJSONObject();
		String userId = "";
		String instanceId = "";
		String nodeId = "";
		String processId = "";
		String routeType = "";
		String sendMsg = "";
		String trueJson = "";
		WebSocketUtil util = new WebSocketUtil();
		if(null != jsonObject){
			userId = (String) jsonObject.get("userId");
			instanceId = (String) jsonObject.get("instanceId");
			nodeId = (String) jsonObject.get("nodeId");
			processId = (String) jsonObject.get("processId");
			routeType = (String) jsonObject.get("routeType");
			sendMsg = (String) jsonObject.get("sendMsg");//是否发短信标识
			trueJson = jsonObject.get("json") + "";
		}else{
			userId = getRequest().getParameter("userId");
			instanceId = getRequest().getParameter("instanceId");
			nodeId = getRequest().getParameter("nodeId");
			processId = getRequest().getParameter("processId");
			routeType = getRequest().getParameter("routeType");
			sendMsg = getRequest().getParameter("sendMsg");//是否发短信标识
			trueJson = getRequest().getParameter("json");
		}
		trueJson = JSONReplaceUtil.replaceJson(trueJson);
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if(null == emp){
			emp = tableInfoService.findEmpByUserId(userId);
		}
		
		JSONObject obj = new JSONObject();
		if(StringUtils.isNotBlank(routeType) && (routeType.equals("0") || routeType.equals("1") || routeType.equals("2") || routeType.equals("4") || routeType.equals("6"))){
			WfProcess wfp = pendingService.getProcessByID(processId);
			if(null != wfp){
				//保存日志信息表
				TrueJson entity = new TrueJson();
				entity.setInstanceId(instanceId);
				entity.setProcessId(processId);
				entity.setSaveDate(new Date());
				entity.setUserId(userId);
				entity.setTrueJson(trueJson);
				entity.setExcute("doSendBack");
				trueJsonService.saveTrueJson(entity);
				
				WfProcess lastWfp = tableInfoService.findLastProcess(instanceId, nodeId, "");
				String newProcessId = UuidGenerator.generate36UUID();
				lastWfp.setWfProcessUid(newProcessId);
				lastWfp.setIsOver("NOT_OVER");
				lastWfp.setApplyTime(new Date());
				lastWfp.setFinshTime(null);
				lastWfp.setJssj(null);
				lastWfp.setFromUserId(emp.getEmployeeGuid());
				lastWfp.setPdfPath(wfp.getPdfPath());
				lastWfp.setIsReturnStep(2);
				lastWfp.setStepIndex(wfp.getStepIndex()+1);
				lastWfp.setToNodeid(nodeId);
				lastWfp.setFromNodeid(wfp.getNodeUid());
				
				try {
					util.apnsPush(lastWfp.getProcessTitle(), emp.getEmployeeGuid(), "", "", "", lastWfp.getUserUid());
				} catch (JSONException e) {
					e.printStackTrace();
				}
				
				tableInfoService.addProcess(lastWfp);
				if(routeType.equals("0") || routeType.equals("1") || routeType.equals("2")){
					wfp.setFinshTime(new Date());
					wfp.setIsOver("OVER");
					wfp.setIsReturnStep(1);
					try {
						util.delBadge(wfp.getUserUid(), "", "");
					} catch (JSONException e) {
						e.printStackTrace();
					}
					tableInfoService.update(wfp);
				}else if(routeType.equals("4") || routeType.equals("6")){
					List<WfProcess> wfps = tableInfoService.findStepWfPListByUserId(wfp.getWfInstanceUid(), wfp.getStepIndex(),"");
					if(null != wfps && wfps.size()>0){
						for (WfProcess wfProcess : wfps) {
							if(wfProcess.getIsOver().equals("OVER") && null != wfProcess.getFinshTime()){
								continue;
							}
							wfProcess.setIsReturnStep(1);
							wfProcess.setFinshTime(new Date());
							wfProcess.setIsOver("OVER");
							try {
								util.delBadge(wfProcess.getUserUid(), "", "");
							} catch (JSONException e) {
								e.printStackTrace();
							}
							tableInfoService.update(wfProcess);
						}
					}
				}
				
				if(StringUtils.isNotBlank(sendMsg) && sendMsg.equals("1")){
					String userIds = lastWfp.getUserUid();
					List<Employee> empList = tableInfoService.findEmpsByUserIds(userIds);
					String numbers = "";
					if(null != empList && empList.size()>0){
						for (Employee employee : empList) {
							numbers += employee.getEmployeeMobile()+",";
						}
					}
					if(StringUtils.isNotBlank(numbers)){
						numbers = numbers.substring(0,numbers.length()-1);
					}
					SendMsgUtil msgUtil = new SendMsgUtil();
					Map<String, String> map = new HashMap<String, String>();
					map.put("isDoBack", "1");
					map.put("sendUserName", emp.getEmployeeName());
					map.put("title", wfp.getProcessTitle());
					map.put("senderId", userId);
					map.put("receiverName", "");
					msgUtil.sendMsg(numbers, "trueWorkflow", map);
				}
			}
			obj.put("result", "success");
			obj.put("returnCode", "10000");
		}else{//该节点不支持退回
			obj.put("result", "fail");
			obj.put("returnCode", "10001");
		}
		toPage(obj.toString());
	}
	
	/**
	 * 描述：TODO 对此方法进行描述
	 * TableInfoAction
	 * void
	 * 作者:蒋烽
	 * 创建时间:2017 下午3:39:24
	 */
	public void downloadPdf(){
		String title = getRequest().getParameter("title");
		String processId = getRequest().getParameter("processId");
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		String newPdfPath = "";
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		String instanceId = "";
		if(wfp!=null){
			instanceId = wfp.getWfInstanceUid();
			wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		WfProcess currentProcess = wfProcess;
		String pdfPath = "";
		
		if(currentProcess != null){
			if(CommonUtil.stringIsNULL(title)){
				title = currentProcess.getProcessTitle();
			}
			String oldFormId = currentProcess.getFormId();
			String nodeId = currentProcess.getNodeUid();
			String worflowId = currentProcess.getWfUid();
			String itemId = currentProcess.getItemId();
			String isFlexForm = "";
			if(CommonUtil.stringNotNULL(itemId)){
				WfItem item = itemService.getItemById(itemId);
				isFlexForm = item.getIsFlexibleForm();
			}
			//永远获取第一步的json数据
			TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
			String commentJson = "";
			if(trueJson!=null){
				commentJson = trueJson.getTrueJson();
			}else{		//针对于历史老办件、仍然获取原先的数据
				Integer master = currentProcess.getIsMaster();	//主办
				if(master!=null && master==0){	//协办人员
					WfProcess masterProcess = tableInfoService.getMasterProcess(currentProcess);
					commentJson = masterProcess.getCommentJson();
				}else{
					commentJson = currentProcess.getCommentJson();
				}
			}
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			newPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"BlackChapter.pdf";
			if("1".equals(isFlexForm)){
//				JSONObject result = new JSONObject();
				Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
				String userId = emp.getEmployeeGuid();
				String location = "";
				//List<TrueformData> outList = getTrueformdata("out",userId, worflowId, nodeId, processId, instanceId, oldFormId,oldFormId,"", null, "");
				List<TrueformData> outList = getValueForDownload(processId);
				try {
					FlexibleFormJson json = new FlexibleFormJson(outList);
					location = JSONObject.fromObject(json).toString();
				}catch (Exception e) {
				}
				ZwkjForm form = zwkjFormService.getOneFormById(oldFormId);
				String pageJson = "";
				if(form!=null){
					pageJson = form.getFormPageJson();
				}
				/*result.put("location", location);
				result.put("pageJson", pageJson);
				result.put("commentJson", commentJson);*/
				String jsonStr = "{\"location\":" + location + ",\"pageJson\":" + pageJson + ",\"commentJson\":"+commentJson+"}";
				//弹性表单转成pdf
				GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
				String flexPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"flexWithComt.pdf";
				//获取页面风格相关参数
				Map<String, String> map = new HashMap<String, String>();
				List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
				String fontSize = "";
				String verSpacing = "";
				String dateFmt = "";
				String font = "";
				if(formStylelist != null && formStylelist.size() > 0){
					FormStyle formStyle = formStylelist.get(0);
					if(formStyle != null){
						fontSize = formStyle.getFontSize();
						verSpacing = formStyle.getVerticalSpacing();
						dateFmt = formStyle.getDateFormat();
						font = formStyle.getFont();
					} 
				}
				pdfUtil.geneFlexFormWithStamp(flexPdfPath, jsonStr, fontSize, verSpacing, dateFmt, font);
				//所有附件合成pdf
				String attMergePdfPath = "";
				commentJson = editCommentJsonByPages(commentJson);
				List<SendAttachments> attList = attachmentService.findSendAttachmentListByInstanceId(instanceId);//所有附件
				List<SendAttachments> attList2 = new ArrayList<SendAttachments>();
				for (SendAttachments sendAttachments : attList) {
					String skipFileType = "rar,zip,cebx";
					if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
						attList2.add(sendAttachments);
					}
				}
				String mergePath = processId + "Att_merge.pdf";
				mergePath = FileUploadUtils.getRealFilePath(mergePath, pdfRoot,Constant.GENE_FILE_PATH);
				mergePath = pdfRoot + mergePath;
				try {
					attMergePdfPath = toAndCombToPdf(attList2, mergePath, commentJson, true);//合并文件
					// 合并正文附件的pdf和表单的pdf
					MergePdf mp = new MergePdf();
					String[] filePaths = new String[2];
					filePaths[0] = flexPdfPath;
					filePaths[1] = attMergePdfPath;
					mp.mergePdfFiles(filePaths, newPdfPath);
				} catch (Exception e) {
					e.printStackTrace();
					String errorPage = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath()+"/table_downloadError.do";
					toPage(errorPage);
					return;
				}
			}else{
				String value =	this.saveForm(oldFormId,2,instanceId,oldFormId,nodeId,worflowId,"","","");
				try {
					pdfPath= getHtmlToNewOfPath(oldFormId,nodeId, value, instanceId, false,false);//附件合成表单
					//带章合并
					GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
					pdfUtil.geneStampPdf(pdfPath, commentJson, newPdfPath, "0");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			}
		
		//下载的pdf文件加水印
		String encodedText = "";
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String waterText = emp.getEmployeeLoginname()+" "+sdf.format(new Date());
		try {
			WordAndWaterMarkTool wTool = new WordAndWaterMarkTool();
			wTool.addWaterMark(newPdfPath, waterText);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		//下载加日志
		DoFile doFile = new DoFile();
		doFile.setInstanceId(instanceId);
		doFile.setDoFile_title(wfp.getProcessTitle());
		tableInfoExtendService.addFileDownloadLog(doFile, emp, "2");
		
		String fileNameWithPath = "";
		FileInputStream fileinputstream =null;
		File file =null;
		try {
			fileNameWithPath = newPdfPath;
			file = new File(fileNameWithPath);
			fileinputstream = new FileInputStream(file);
			long l = file.length();
			int k = 0;
			byte abyte0[] = new byte[65000];
			getResponse().setContentType("application/x-msdownload");
			getResponse().setContentLength((int) l);
			title = URLEncoder.encode(title, "UTF-8");
			if(title!=null){
				title = title.replaceAll("%5B", "\\[").replaceAll("%5D", "\\]").replaceAll("%28", "(").replaceAll("%29", ")").replaceAll("%2F", "\\/").replaceAll("%2B", "+").replaceAll("%3D", "=");
			}
			getResponse().setHeader("Content-Disposition", "attachment; filename=" + title + ".pdf");
			while ((long) k < l) {
				int j;
				j = fileinputstream.read(abyte0, 0, 65000);
				k += j;
				getResponse().getOutputStream().write(abyte0, 0, j);
			}
			fileinputstream.close();
		} catch (IOException e) {
			LOGGER.error("下载失败,文件路径为："+fileNameWithPath, e);
			e.printStackTrace();
		}finally{
			if(null!=fileinputstream){
				try {
					fileinputstream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			file.delete();
		}
	}
	
	/**
	 * 
	 * @Description: pdf下载时获取数据
	 * @author: xiep
	 * @time: 2017-12-23 下午3:37:04
	 * @param workflowId
	 * @param instanceId
	 * @return
	 */
	public List<TrueformData> getValueForDownload(String processId){
		List<TrueformData> trueFormList = new ArrayList<TrueformData>();
		WfProcess process = tableInfoService.getProcessById(processId);
		if(process != null){
			String workflowId = process.getWfUid();
			String instanceId = process.getWfInstanceUid();
			String formId = process.getFormId();
			Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
			String userId = "";
			if(emp != null){
				userId = emp.getEmployeeGuid();	
			}
			String value = this.saveForm(formId, 2,instanceId,formId,null, workflowId,"","false","");
			List<FormTagMapColumn> colMapList = zwkjFormService.getFormTagMapColumnByFormId(formId);
			if(colMapList != null && colMapList.size() > 0){
				// 字典表
				Map<String, String> select_old = formAction.selectDicValuesForMobile(formId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
				Map<String, String>  dicMap = new HashMap<String, String>();
				Map<String, String> selects = new HashMap<String, String>();
				
				//map去除旧数据,添加新的dic
				if(dicMap!=null && dicMap.size()>0){
					//遍历dicMap
					for(String key : dicMap.keySet()){
						selects.put(key, dicMap.get(key));
					}
					//遍历原有的字典表选项
					for(String key : select_old.keySet()){
						if(!selects.containsKey(key)){
							selects.put(key, select_old.get(key));
						}
					}
				}else{
					selects = select_old;
				}
				for(FormTagMapColumn ftm : colMapList){
					TrueformData trueForm = new TrueformData();
					trueForm.setTextMaxLen(ftm.getTextMaxLen());//设置文本最大长度
					trueForm.setCollumnName(ftm.getColumnCname());
					trueForm.setId(ftm.getFormtagname());//表单页面的页面元素属性
					trueForm.setName(ftm.getFormtagname());
					trueForm.setZname(ftm.getColumnCname());
					trueForm.setIsWrite("0");		//设置表单的读写权限
					//字段规则
					trueForm.setAssociatedColumns(ftm.getAssociatedColumns());
					trueForm.setRegularExpression(ftm.getRegularExpression());
					trueForm.setRegularMeanings(ftm.getRegularMeanings());
					trueForm.setGenerationMode(ftm.getGenerationMode());
					
					
					if(("checkbox").equals(ftm.getFormtagtype())){
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "checkbox");
					} else if (("radio").equals(ftm.getFormtagtype())) {
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "radio");
					} else if (("select").equals(ftm.getFormtagtype())) {
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "select");
					} else {
						if (value != null && !("").equals(value)) {
							String[] values = value.split(";");
							for (String val : values) {
								String tagName = val.split(":")[0];
								String assignColName = ftm.getAssignColumnName();
								if(CommonUtil.stringNotNULL(tagName) && CommonUtil.stringNotNULL(assignColName) && tagName.equalsIgnoreCase(assignColName)){
									int index = val.indexOf(":");
									String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
									//String[] vals = val.split(":");
									if (vals.length > 1) {
										if(("").equals(vals[1])){
											if(!("").equals(ftm.getConstantValue())){
												String cval = getDefaultValue(ftm, userId, "", instanceId);
												trueForm.setValue(cval);
											}
										}else{
											trueForm.setValue(vals[1]);
										}
									} else {
										trueForm.setValue("");
									}
									String isTrueArea = ftm.getTrueArea();
									if(isTrueArea!=null && isTrueArea.equals("1")){
										trueForm.setType("true");
									}else if(isTrueArea!=null && isTrueArea.equals("2")){
										trueForm.setType("img");
									}else{
										trueForm.setType("text");
									}
									break;
								}
							}
						}
					}
					trueFormList.add(trueForm);
				}
			}
		}
		return trueFormList;
	}
	
	/**
	 * 编辑意见位置
	 * @param json
	 * @return
	 */
	private String editCommentJsonByPages(String json) {
		//1.意见为空
		if(json==null || json.equals("")||json.equals("{}") ||json.equals("[]")){
			return "";
		}
		//3.找寻相同节点,相同人员调整的内容(后续拓展)
		//2.检测processIdshifo
		Map<String, String> comment = new HashMap<String, String>();
		//解析意见
		net.sf.json.JSONArray js;
		try{
			net.sf.json.JSONObject obj = net.sf.json.JSONObject.fromObject(json);
			if(obj.containsKey("pages")){
				js	= obj.getJSONArray("pages");
				int size = js.size();
				for(int i = 0; i<size; i++){
					net.sf.json.JSONObject jsonObject = (net.sf.json.JSONObject)js.get(i);
					int page = 0;
					try{
						page = jsonObject.getInt("page");
						String old_json = jsonObject.toString();
						String new_json = old_json.replaceAll("\"page\":"+page+"", "\"page\":"+(page-1));
						comment.put(old_json, new_json);
					}catch (Exception e) {
						
					}
				}
			}
			//遍历map,将意见内容修改编辑权限修改调整
			for (String key : comment.keySet()) {
				String value = comment.get(key);
				json = json.replace(key, value);
			}
			return json;
		}catch (Exception e) {
			return json;
		}
	}
	
	/**
	 * 合成章到pdf上
	 * @param sattList
	 * @param saveMergePath
	 * @param trueJson
	 * @param withStamp
	 * @return
	 * @throws Exception
	 */
	public String toAndCombToPdf(List<SendAttachments> sattList, String saveMergePath, String trueJson, boolean withStamp) throws Exception{
		if(sattList==null || sattList.size()==0){
			return "";
		}
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		//合并的文件集合
		String fileStrs = "";
		String fileType = ""; //文件类型
		if (sattList!=null && sattList.size() > 0) {
			for (SendAttachments sat : sattList) {
				String skipFileType = "rar,zip,cebx";
				if((skipFileType.indexOf(sat.getFiletype()) == -1) || sat.getFiletype().equals("ceb")){
					fileType = sat.getFiletype().toLowerCase();	//小写
					if(CommonUtil.stringNotNULL(sat.getTopdfpath())){
						fileStrs += sat.getTopdfpath() + ",";
					}else if (("pdf").equalsIgnoreCase(fileType)){
						fileStrs += pdfRoot+sat.getLocalation() + ",";
					}
				}
			}
		}
		// 合并正文附件的pdf和表单的pdf
		MergePdf mp = new MergePdf();
		fileStrs = removeLastComma(fileStrs);
		String[] files = null;
		if (!("").equals(fileStrs) && fileStrs.length() > 0) {
			files = new String[fileStrs.split(",").length];
			for (int i = 0; i < fileStrs.split(",").length; i++) {
				String url =fileStrs.split(",")[i];
				files[i] = url;
			}
		}
		//trueJson = editCommentJsonByPages(trueJson);
		mp.mergePdfFiles(files, saveMergePath, trueJson);
		String newPdfPath = "";
		//带章合并
		if(withStamp){
			GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
			newPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"BlackChapter.pdf";
			pdfUtil.geneStampPdf(saveMergePath, trueJson, newPdfPath, "0");
		}else{
			newPdfPath = saveMergePath;
		}
		return newPdfPath;
	}
	
	public String getPDFPath(String processId,String newPdfPath,String instanceId){
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		if(wfp!=null){
			instanceId = wfp.getWfInstanceUid();
			wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		WfProcess currentProcess = wfProcess;
		String pdfPath = "";
		
		if(currentProcess != null){
			String oldFormId = currentProcess.getFormId();
			String nodeId = currentProcess.getNodeUid();
			String worflowId = currentProcess.getWfUid();
			String itemId = currentProcess.getItemId();
			String isFlexForm = "";
			processId = currentProcess.getWfProcessUid();
			if(CommonUtil.stringNotNULL(itemId)){
				WfItem item = itemService.getItemById(itemId);
				isFlexForm = item.getIsFlexibleForm();
			}
			//永远获取第一步的json数据
			TrueJson trueJson = trueJsonService.findNewestTrueJson(instanceId);
			String commentJson = "";
			if(trueJson!=null){
				commentJson = trueJson.getTrueJson();
			}else{		//针对于历史老办件、仍然获取原先的数据
				Integer master = currentProcess.getIsMaster();	//主办
				if(master!=null && master==0){	//协办人员
					WfProcess masterProcess = tableInfoService.getMasterProcess(currentProcess);
					commentJson = masterProcess.getCommentJson();
				}else{
					commentJson = currentProcess.getCommentJson();
				}
			}
			if("1".equals(isFlexForm)){
				String location = "";
				List<TrueformData> outList = getValueForDownload(processId);
				try {
					FlexibleFormJson json = new FlexibleFormJson(outList);
					location = JSONObject.fromObject(json).toString();
				}catch (Exception e) {
				}
				ZwkjForm form = zwkjFormService.getOneFormById(oldFormId);
				String pageJson = "";
				if(form!=null){
					pageJson = form.getFormPageJson();
				}
				String jsonStr = "{\"location\":" + location + ",\"pageJson\":" + pageJson + ",\"commentJson\":"+commentJson+"}";
				//弹性表单转成pdf
				GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
				String flexPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"flexWithComt.pdf";
				//获取页面风格相关参数
				Map<String, String> map = new HashMap<String, String>();
				List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);
				String fontSize = "";
				String verSpacing = "";
				String dateFmt = "";
				String font = "";
				if(formStylelist != null && formStylelist.size() > 0){
					FormStyle formStyle = formStylelist.get(0);
					if(formStyle != null){
						fontSize = formStyle.getFontSize();
						verSpacing = formStyle.getVerticalSpacing();
						dateFmt = formStyle.getDateFormat();
						font = formStyle.getFont();
					} 
				}
				pdfUtil.geneFlexFormWithStamp(flexPdfPath, jsonStr, fontSize, verSpacing, dateFmt, font);
				//所有附件合成pdf
				String attMergePdfPath = "";
				commentJson = editCommentJsonByPages(commentJson);
				List<SendAttachments> attList = attachmentService.findSendAttachmentListByInstanceId(instanceId);//所有附件
				String mergePath = processId + "Att_merge.pdf";
				mergePath = FileUploadUtils.getRealFilePath(mergePath, pdfRoot,Constant.GENE_FILE_PATH);
				mergePath = pdfRoot + mergePath;
				try {
					attMergePdfPath = toAndCombToPdf(attList, mergePath, commentJson, true);//合并文件
					// 合并正文附件的pdf和表单的pdf
					MergePdf mp = new MergePdf();
					String[] filePaths = new String[2];
					filePaths[0] = flexPdfPath;
					filePaths[1] = attMergePdfPath;
					mp.mergePdfFiles(filePaths, newPdfPath);
				} catch (Exception e) {
					e.printStackTrace();
					File file = new File(flexPdfPath);
					if(file.exists()){
						FileUploadUtils.copy(file, new File(newPdfPath));
					}
				}
			}else{
				String value =	this.saveForm(oldFormId,2,instanceId,oldFormId,nodeId,worflowId,"","","");
				try {
					pdfPath= getHtmlToNewOfPath(oldFormId,nodeId, value, instanceId, false,false);//附件合成表单
					//带章合并
					GenePdfUtil pdfUtil = GenePdfUtil.getInstance();
					pdfUtil.geneStampPdf(pdfPath, commentJson, newPdfPath, "0");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return newPdfPath;
	}
	
	/**
	 * 描述：TODO 对此方法进行描述
	 * TableInfoAction
	 * void
	 * 作者:蒋烽
	 * 创建时间:2018 上午9:56:22
	 */
	public void onlySave4List() throws Exception {
		long startTime = System.currentTimeMillis();
		long endTime;
		JSONObject jsonObject = getJSONObject();
		String processId = "";
		String json = "";
		String userId = "";
		//获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if(null != jsonObject){
			processId = (String) jsonObject.get("processId");
			json = jsonObject.get("json")+"";
			userId = (String) jsonObject.get("userId");
		}else{
			processId = getRequest().getParameter("processId");
			json = getRequest().getParameter("json");
			userId = getRequest().getParameter("userId");
		}
		if(StringUtils.isBlank(userId) && null != emp){
			userId = emp.getEmployeeGuid();
		}
		
		WfProcess wfp = pendingService.getProcessByID(processId);
		//1.查出当前所有该步骤未办的
		if(null != wfp){
			WfNode wfNode = tableInfoService.getWfNodeById(wfp.getNodeUid());
			if(wfNode!=null && wfNode.getWfn_autoNoname()!=null && wfNode.getWfn_autoNoname()==1){
				TrueJson trueJson = trueJsonService.findNewestTrueJsonByInstanceId(wfp.getWfInstanceUid());
				json = trueJson!=null?trueJson.getTrueJson():json;
			}
			
			json = json.replace("\r", "").replace("\n", "").replace("\r\n", "");
			//操作日志记录
			TrueJson entity = new TrueJson();
			entity.setInstanceId(wfp.getWfInstanceUid());
			entity.setProcessId(processId);
			entity.setSaveDate(new Date());
			entity.setUserId(userId);
			entity.setTrueJson(json);
			entity.setExcute("onlySave4List");
			trueJsonService.saveTrueJson(entity);
			
			//更新当前步骤为已办
			wfp.setIsOver("OVER");
			wfp.setFinshTime(new Date());
			tableInfoService.update(wfp);
			String instanceId = wfp.getWfInstanceUid();
			String formId = wfp.getFormId();
			String nodeId = wfp.getNodeUid();
			String workFlowId = wfp.getWfUid();
			String serverUrl = getRequest().getScheme() + "://" + getRequest().getServerName() + ":"+ getRequest().getLocalPort()+ getRequest().getContextPath();
			// 1,保存表单值
			String value = this.saveForm(wfp.getFormId(), 2, instanceId, formId, nodeId,workFlowId,"","",userId);
			OperateBatchThread operateBatchThread = new OperateBatchThread(tableInfoService, workflowBasicFlowService,this, "optBatch",
					nodeId, wfp, value, json, userId,serverUrl);
			operateBatchThread.start();
			
			// 标题
			/*String vc_title = wfp.getProcessTitle();
			
			WfNode  wfNode = tableInfoService.getWfNodeById(wfp.getNodeUid());
			if(wfNode!=null){
				String wfn_route_type = wfNode.getWfn_route_type();
				if(wfn_route_type!=null && wfn_route_type.equals("6")){//串行传阅式
//					List<WfProcess> list =  tableInfoService.findWfProcessList(wfp.getWfUid(), wfp.getWfInstanceUid(), wfp.getNodeUid(), wfp.getStepIndex());
					List<WfProcess> list =  tableInfoService.findWfProcessAnyInfo(wfp.getWfUid(), wfp.getWfInstanceUid(), wfp.getNodeUid(),wfp.getStepIndex());
					for(int i=0; i<list.size(); i++){
						if(list.get(i).getWfProcessUid().equals(processId)){
							if(i==list.size()-1){
								System.out.println("当前节点为并行传阅模式, 且传阅结束");
							}else{
								WfProcess wfpr = list.get(i+1);
//								wfpr.setIsShow(1);
								LOGGER.warn("将用户:"+wfp.getUserUid()+",待办'"+wfp.getProcessTitle()+"'展示出来");
//								tableInfoService.update(wfpr);
								tableInfoService.updateIsShowByProcessId(wfpr.getWfProcessUid());
								break;
							}
						}
					}
				}
				
				if(wfn_route_type!=null && (wfn_route_type.equals("4") || wfn_route_type.equals("6"))){		//并行传阅式样
					//检查该步骤信息是否已经被处理
//					List<WfProcess> sameStepWfList = tableInfoService.findWfProcessList(wfp);
					List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfp);
					int count = 0;
					for(int i=0; i<sameStepWfList.size(); i++){
						if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
							count ++;
							break;
						}
					}
					if(count==0){	//	count=0时表示该节点已经办结完成
						List<WfNode> nodeList = workflowBasicFlowService.showNode(wfp.getWfUid(), wfp.getNodeUid(), wfp.getWfInstanceUid());
						WfNode nextNode = null;		//下一节点
						if(nodeList!=null && nodeList.size()>0){
							for(WfNode node : nodeList){
								String xtoUserId = node.getWfn_bd_user();
								if(StringUtils.isNotBlank(xtoUserId)){
									nextNode = node;
									break;
								}
							}
							if(null == nextNode){
								nextNode = nodeList.get(0);
							}
						}
						sendNextProcess(nextNode, wfp, value, vc_title, json, "", false, userId);
					}
				}
			}*/
		}
		JSONObject resutObj = new JSONObject();
		resutObj.put("result", "success");
		toPage(resutObj.toString());
		endTime = System.currentTimeMillis();
		System.out.println("--------onlysave4List执行时间----------："+(endTime-startTime)/1000);
	}
	
	/**
	 * 描述：TODO 对此方法进行描述 void
	 * 作者:蒋烽
	 * 创建时间:2018-3-16 上午10:34:39
	 */
	public void downloadBatch(){
		String ids = getRequest().getParameter("ids");
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if(StringUtils.isNotBlank(ids)){
			String excelSpecial = getRequest().getParameter("excelSpecial");//机关事务局定制
			List<DoFile> list = tableInfoService.getDoFile(ids);
			//定义zip的路径
			String basePath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");
			String dstPath = FileUploadUtils.getRealFolderPath(basePath, Constant.GENE_ZIP_FILE_PATH); 
			String path = FileUploadUtils.getRealFolderPath(basePath, Constant.UPLOAD_FILE_PATH);
			String zipPath = basePath+dstPath;
			zipPath = zipPath + UuidGenerator.generate36UUID()+"/";
			File folder = null;
			try {
				folder = new File(zipPath);
				if (!folder.exists()) {
					folder.mkdirs();
				}
			} catch (RuntimeException e) {
				e.printStackTrace();
			} finally {
				folder = null;
			}
			for (DoFile doFile : list) {
				//将每个文件的pdf路径考入zip文件
				String pdfPath = doFile.getPdfPath();
				if(StringUtils.isNotBlank(pdfPath)){
					File file = new File(pdfPath);
					String title = doFile.getDoFile_title().replace("\r\n", "").replace("\r", "").replace("\n", "");;
					File newFile = null;
					if(CommonUtil.stringNotNULL(excelSpecial)&&"yes".equals(excelSpecial)){
						String bh = tableInfoService.getViewBhByInstanceId(doFile.getInstanceId());
						if(CommonUtil.stringIsNULL(bh)){
							bh = doFile.getDoFile_title();
						}
						newFile = new File(zipPath+bh+".pdf");
					}else{
						newFile = new File(zipPath+title+".pdf");
					}
					if(file.exists()){
						FileUploadUtils.copy(file, newFile);
					}else{
						//拿出流生成文件
						Blob pdfData = doFile.getPdfData();
						if(null != pdfData){
							FileUtils.byteArrayToFile(pdfData, pdfPath);
							FileUploadUtils.copy(file, newFile);
						}else{
							String instanceId = doFile.getInstanceId();
							String gdPath = FileUploadUtils.getRealFolderPath(basePath, Constant.GENE_GD_FILE_PATH);
							if(doFile != null){
								title = doFile.getDoFile_title().replace("\r\n", "").replace("\r", "").replace("\n", "");
								String gdPdfPath = getPDFPath("", basePath+gdPath+title+".pdf",instanceId);
								if(StringUtils.isNotBlank(gdPdfPath)){
									file = new File(gdPdfPath);
									if(file.exists()){
										doFile.setPdfPath(gdPdfPath);
										try {
											doFile.setPdfData(Hibernate.createBlob(new FileInputStream(file)));
										} catch (FileNotFoundException e) {
											e.printStackTrace();
										} catch (IOException e) {
											e.printStackTrace();
										}
										tableInfoService.updateDoFile(doFile);
										if(CommonUtil.stringNotNULL(excelSpecial)&&"yes".equals(excelSpecial)){
											String bh = tableInfoService.getViewBhByInstanceId(doFile.getInstanceId());
											if(CommonUtil.stringIsNULL(bh)){
												bh = doFile.getDoFile_title();
											}
											newFile = new File(zipPath+bh+".pdf");
										}else{
											newFile = new File(zipPath+doFile.getDoFile_title()+".pdf");
										}
										FileUploadUtils.copy(file, newFile);
									}
								}
							}
						}
					}
//					newFile.renameTo(new File(newFile.getPath().replaceAll(doFile.getDoFile_title(), "123")));
				}else{
					String instanceId = doFile.getInstanceId();
					String gdPath = FileUploadUtils.getRealFolderPath(basePath, Constant.GENE_GD_FILE_PATH);
					if(doFile != null){
						String title = doFile.getDoFile_title().replace("\r\n", "").replace("\r", "").replace("\n", "");
						String gdPdfPath = getPDFPath("", basePath+gdPath+title+".pdf",instanceId);
						if(StringUtils.isNotBlank(gdPdfPath)){
							File file = new File(gdPdfPath);
							if(file.exists()){
								doFile.setPdfPath(gdPdfPath);
								try {
									doFile.setPdfData(Hibernate.createBlob(new FileInputStream(file)));
								} catch (FileNotFoundException e) {
									e.printStackTrace();
								} catch (IOException e) {
									e.printStackTrace();
								}
								tableInfoService.updateDoFile(doFile);
								File newFile = null;
								if(CommonUtil.stringNotNULL(excelSpecial)&&"yes".equals(excelSpecial)){
									String bh = tableInfoService.getViewBhByInstanceId(doFile.getInstanceId());
									if(CommonUtil.stringIsNULL(bh)){
										bh = doFile.getDoFile_title();
									}
									newFile = new File(zipPath+bh+".pdf");
								}else{
									newFile = new File(zipPath+doFile.getDoFile_title()+".pdf");
								}
								FileUploadUtils.copy(file, newFile);
							}
						}
					}
				}
				
				tableInfoExtendService.addFileDownloadLog(doFile, emp, "1");
				
			}
			//调用zip的打包工具类，生成zip包，然后下载
			ZipUtil util = new ZipUtil();
			Calendar calendar = Calendar.getInstance();
			String zipFileName = ""+calendar.get(Calendar.YEAR)+(calendar.get(Calendar.MONTH)+1)+calendar.get(Calendar.DAY_OF_MONTH)+calendar.get(Calendar.HOUR_OF_DAY)+calendar.get(Calendar.MINUTE)+".zip";
			try{
				util.zip(zipPath, basePath+path, zipFileName);
				
				String realZipPath = basePath+path+zipFileName;
				try{  
                	String fileName = zipFileName;
                	File zipFile = new File(realZipPath);
                	FileInputStream fileinputstream = new FileInputStream(zipFile);
        			long l = zipFile.length();
        			int k = 0;
        			byte abyte0[] = new byte[65000];
        			getResponse().setContentType("application/x-msdownload");
        			getResponse().setContentLength((int) l);
        			String name = fileName;
        			getResponse().setHeader("Content-Disposition", "attachment; filename="+ name);
        			while ((long) k < l) {
        				int j;
        				j = fileinputstream.read(abyte0, 0, 65000);
        				k += j;
        				getResponse().getOutputStream().write(abyte0, 0, j);
        			}
                }catch(IOException e) {
                    e.printStackTrace();  
                }  
				
			}catch (Exception e){
				e.printStackTrace();
			}
			
		}else{
			toPage("10001");
		}
	}
	
	/**
	 * 
	 * 描述：格式化文件大小 得到对应的（BT,KB,MB,GB,TG）<br>
	 *
	 * @param filesize
	 * @return String
	 *
	 * 作者:王雪峰<br>
	 * 创建时间:2011-10-29 上午10:24:53
	 */
	private String getFormateFileSize(Long filesize){
		//单位
		final int M = 1024;
		//保留小数位
		final int N = 2;
		double KB = filesize/M;
		if(KB<1){
			return filesize+"Byte";
		}
		double MB = KB/M;
		if(MB<1){
			return new BigDecimal(String.valueOf(KB)).setScale(N, BigDecimal.ROUND_HALF_UP).toPlainString()+"KB";
		}
		double GB = MB/M;
		if(GB<1){
			return new BigDecimal(String.valueOf(MB)).setScale(N, BigDecimal.ROUND_HALF_UP).toPlainString()+"MB";
		}
		double TB = GB/M;
		if(TB<1){
			return new BigDecimal(String.valueOf(GB)).setScale(N, BigDecimal.ROUND_HALF_UP).toPlainString()+"GB";
		}
		return new BigDecimal(String.valueOf(TB)).setScale(N, BigDecimal.ROUND_HALF_UP).toPlainString()+"TB";
	}
	
	/**
	 * 
	 * 描述：Pc端办结流程
	 * @throws Exception void
	 * 作者:蔡亚军
	 * 创建时间:2016-8-19 下午3:12:08
	 */
	public void endAuto(Employee emp, String instanceId, String workFlowId, String formId, String processId, String nodeId, String trueJson) throws Exception{
		try {
			// 获取当前登录用户
			String userId = emp.getEmployeeGuid();
			
			//保存日志信息表
			TrueJson entity = new TrueJson();
			entity.setInstanceId(instanceId);
			entity.setProcessId(processId);
			entity.setSaveDate(new Date());
			entity.setUserId(userId);
			entity.setTrueJson(trueJson);
			entity.setExcute("endAuto");
			trueJsonService.saveTrueJson(entity);
			
			// 入库
			WfProcess wfp = tableInfoService.getProcessById(processId);
			// 标题的值
			String vc_title = wfp.getProcessTitle();
			
			//调用线程生成对应的pdf文件
			String newProcessId = UuidGenerator.generate36UUID();
			
			// 更新步骤(办结插一条数据) 这个是一般办结 加子流程第一步办结
			tableInfoService.updateInstanceOverAuto(workFlowId, instanceId, "",processId, nodeId, userId, vc_title, formId ,trueJson, "", "",newProcessId);
			
			String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
			if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && StringUtils.isNotBlank(nodeId) && autoEndNodeId.indexOf(nodeId) != -1)){
				String[] endNodeIds = autoEndNodeId.split(",");
				if(endNodeIds.length>1){
					for(int i=1;i<endNodeIds.length;i++){
						int count = 0;
						if(i==2){
							List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfp);
							for(int j=0; j<sameStepWfList.size(); j++){
								if(sameStepWfList.get(j).getIsOver().equals("NOT_OVER")){
									count ++;
								}
							}
						}
						System.out.println("----------自动办结节点id-----"+endNodeIds[i]+"------,未办理的流程数量-----"+count+"------");
						//if(endNodeIds[i]!=null&& endNodeIds[i].equals(nodeId)){
							System.out.println("-----开始执行自动办结逻辑------nodeId:"+nodeId+"---------");
							tableInfoService.updateOverByNodeId(workFlowId, instanceId, nodeId);
							tableInfoService.updateEndProcessStep(instanceId,nodeId);
						//}
					}
				}
			}
			
			WebSocketUtil webSocket = new WebSocketUtil();
			webSocket.delBadge(userId, "", "");
			
			getResponse().getWriter().print("yes");
			
			//--5,生成办件对应的pdf文件存流入库
			/*if(null != wfp && wfp.getAllInstanceid().equals(instanceId)){//主流程办结才生成pdf文件
				String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
				String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_GD_FILE_PATH);
				DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
				if(doFile != null){
					String gdPdfPath = getPDFPath(processId, pdfRoot+gdPath+wfp.getProcessTitle()+".pdf","");
					if(StringUtils.isNotBlank(gdPdfPath)){
						File file = new File(gdPdfPath);
						if(file.exists()){
							doFile.setPdfPath(gdPdfPath);
							doFile.setPdfData(Hibernate.createBlob(new FileInputStream(file)));
							tableInfoService.updateDoFile(doFile);
						}
					}
				}
			}*/
		} catch (IOException e) {
			getResponse().getWriter().print("no");
		}
	}
	
	/** 
	 * getIntersectItemId:(这里用一句话描述这个方法的作用). <br/> 
	 * 
	 * @author adolph.jiang
	 * @param itemIds
	 * @param siteId
	 * @return 
	 * @since JDK 1.6 
	 */
	private String getIntersectItemId(String itemIds,String siteId){
		String itemids = itemService.getItemIdsBydeptId(siteId);
		if(StringUtils.isNotBlank(itemids) && StringUtils.isNotBlank(itemIds)){
			String[] itemid = this.getIntersect(itemIds.split(","), itemIds.split(","));
			if(itemid.length>0){
				String itemId = "";
				for (int i = 0; i < itemid.length; i++) {
					itemId += itemid[i]+",";
				}
				itemId = itemId.substring(0,itemId.length()-1);
				return itemId;
			}else{
				return itemids;
			}
		}
		return "";
	}
	
	/** 
	 * getIntersect:(获取两个数组的交集). <br/> 
	 * 
	 * @author adolph.jiang
	 * @param str1
	 * @param str2
	 * @return 
	 * @since JDK 1.6 
	 */
	private String[] getIntersect(String[] arr1, String[] arr2){
		Map<String,Boolean> map = new HashMap<String,Boolean>();
        List<String> list = new LinkedList<String>();
        //取出str1数组的值存放到map集合中，将值作为key，所以的value都设置为false
        for (String str1:arr1){
        	if (!map.containsKey(str1)){
        		map.put(str1,Boolean.FALSE);
        	}
        }
        //取出str2数组的值循环判断是否有重复的key，如果有就将value设置为true
        for (String str2:arr2){
        	if (map.containsKey(str2)){
        		map.put(str2,Boolean.TRUE);
        	}
        }
        //取出map中所有value为true的key值，存放到list中
        for (Map.Entry<String,Boolean> entry:map.entrySet()){
        	if (entry.getValue().equals(Boolean.TRUE)){
        		list.add(entry.getKey());
        	}
        }
        //声明String数组存储交集
        String[] result={};
        return list.toArray(result);
	}
	
	//定时器扫描督办日志表，未完成的进行短信 督办
	public void sendDuBanMsg(){
		SendMsgUtil msgUtil = new SendMsgUtil();
		List<WfDuBanLog> list = tableInfoService.getDuBanMsg();
		for(WfDuBanLog dblog : list){
			Map<String, String> map = new HashMap<String, String>();
			map.put("msg", dblog.getContent());
			map.put("senderId", "123");
			map.put("receiverName", "");
			map.put("isDuBan", "1");
			msgUtil.sendMsg(dblog.getPhoneNum(), "定时器", map);
		}
	}
	
	/**
	 * 方法描述: [已收附件下载为zip]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-9-14-下午6:21:49<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @throws IOException
	 * void
	 */
	public void downloadTureReceive() throws IOException{
		String receiveId = getRequest().getParameter("receiveId");
		String name = getRequest().getParameter("name");
		System.out.println("----------文件名获取:"+name);
		name = toChinese(name);
		System.out.println("----------文件名解除乱码:"+name);
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		DoFileReceive doFileReceive = tableInfoService.getDoFileReceiveById(receiveId);
		List<SendAttachments> sattList = attachmentService.findAllSendAtts(doFileReceive.getpInstanceId() + "fj",null);
		List<SendAttachments> attzwList = attachmentService.findAllSendAtts(doFileReceive.getpInstanceId() + "attzw",null);
		//String path=SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+receiveId;
		String path=pdfRoot+FileUploadUtils.getRealFolderPathAndId(pdfRoot, Constant.GENE_ZIP_FILE_PATH)+receiveId;
		String zipPathTemp = path.substring(0,path.lastIndexOf("/")+1);
		File file1 = new File(path);
		if(!file1.exists()){
			file1.mkdirs();
		}
		if(sattList!=null&&sattList.size()>0){
			for(int i=0;i<sattList.size();i++){
//				String basePath = SystemParamConfigUtil.getParamValueByParam("filePath")+sattList.get(i).getLocalation();
//				File oldFile = new File(basePath);
//				if(!oldFile.exists()){
//					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
//					oldFile = new File(pdfRoot+sattList.get(i).getLocalation());
//				}
				File oldFile = new File(pdfRoot+sattList.get(i).getLocalation());
				File newFile = new File(file1, sattList.get(i).getFilename());
				FileUploadUtils.copy(oldFile, newFile);// 完成上传文件，就是将本地文件复制到服务器上
			}
		}
		if(attzwList!=null&&attzwList.size()>0){
			for(int i=0;i<attzwList.size();i++){
//				String basePath = SystemParamConfigUtil.getParamValueByParam("filePath")+attzwList.get(i).getLocalation();
//				File oldFile = new File(basePath);
//				if(!oldFile.exists()){
//					String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
//					oldFile = new File(pdfRoot+attzwList.get(i).getLocalation());
//				}
				File oldFile = new File(pdfRoot+attzwList.get(i).getLocalation());
				File newFile = new File(file1, attzwList.get(i).getFilename());
				FileUploadUtils.copy(oldFile, newFile);// 完成上传文件，就是将本地文件复制到服务器上
			}
		}
		FileInputStream fileinputstream =null;
		File file =null;
		try {
			ZipUtil util = new ZipUtil();
			//String zipPath = SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/";
			String zipPath = zipPathTemp;
			String dir = zipPath + receiveId;
			//String dir = zipPath + receiveId +"/";
			zipPath= zipPath.replace("/", "\\");
			//String dir = SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+receiveId+"/";
			dir= dir.replace("/", "\\");
			String zipFileName = name+".zip";
			try
			{
				util.zip(dir, zipPath, zipFileName);
			} 
			catch (Exception e){
				e.printStackTrace();
			}
			//file= new File(SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+name+".zip");
			file= new File(zipPathTemp+name+".zip");
			fileinputstream = new FileInputStream(file);
			long l = file.length();
			int k = 0;
			byte abyte0[] = new byte[65000];
			getResponse().setContentType("application/x-msdownload");
			getResponse().setContentLength((int) l);
			name = URLEncoder.encode(name, "UTF-8");
			//name = URLDecoder.decode(name, "ISO8859-1");*
			getResponse().setHeader("Content-Disposition", "attachment; filename="+ name+".zip");
			while ((long) k < l) {
				int j;
				j = fileinputstream.read(abyte0, 0, 65000);
				k += j;
				getResponse().getOutputStream().write(abyte0, 0, j);
			}
		} catch (IOException e) {
			//LOGGER.error("下载失败,文件路径为："+SystemParamConfigUtil.getParamValueByParam("workflow_file_path")+"download/"+name+".zip", e);
			//e.printStackTrace();
		} catch (Exception e) {
			//e.printStackTrace();
		}finally{
			if(null!=fileinputstream){
				fileinputstream.close();
			}
			file.delete();
			FileUploadUtils.delFiles(file1);
		}
	}
	
	/**
	 * 方法描述: [待办下载仅下载附件]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-9-28-上午9:50:51<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * void
	 */
	public void downloadPdfOnlyFj(){
		String title = getRequest().getParameter("title");
		String processId = getRequest().getParameter("processId");
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		String newPdfPath = "";
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		String instanceId = "";
		if(wfp!=null){
			instanceId = wfp.getWfInstanceUid();
			wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		WfProcess currentProcess = wfProcess;
		
		if(currentProcess != null){
			if(CommonUtil.stringIsNULL(title)){
				title = currentProcess.getProcessTitle();
			}
			String itemId = currentProcess.getItemId();
			String isFlexForm = "";
			if(CommonUtil.stringNotNULL(itemId)){
				WfItem item = itemService.getItemById(itemId);
				isFlexForm = item.getIsFlexibleForm();
			}
			String commentJson = "";
			String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
			String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
			newPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"BlackChapter.pdf";
			if("1".equals(isFlexForm)){
				//所有附件合成pdf
				String attMergePdfPath = "";
				List<SendAttachments> attList = attachmentService.findSendAttachmentListByInstanceId(instanceId);//所有附件
				List<SendAttachments> attList2 = new ArrayList<SendAttachments>();
				for (SendAttachments sendAttachments : attList) {
					String skipFileType = "rar,zip,cebx";
					if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
						attList2.add(sendAttachments);
					}
				}
				String mergePath = processId + "Att_merge.pdf";
				mergePath = FileUploadUtils.getRealFilePath(mergePath, pdfRoot,Constant.GENE_FILE_PATH);
				mergePath = pdfRoot + mergePath;
				try {
					//合并可转为pdf的附件
					attMergePdfPath = toAndCombToPdf(attList2, mergePath, commentJson, false);
					newPdfPath = attMergePdfPath;
				} catch (Exception e) {
					e.printStackTrace();
					String errorPage = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath()+"/table_downloadError.do";
					toPage(errorPage);
					return;
				}
			}else{
//				//暂不支持非弹性表单
			}
			}
		
		//下载的pdf文件加水印
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String waterText = emp.getEmployeeLoginname()+"    "+sdf.format(new Date());
		try {
			WordAndWaterMarkTool wTool = new WordAndWaterMarkTool();
			wTool.addWaterMark(newPdfPath, waterText);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		//下载加日志
		DoFile doFile = new DoFile();
		doFile.setInstanceId(instanceId);
		doFile.setDoFile_title(wfp.getProcessTitle());
		tableInfoExtendService.addFileDownloadLog(doFile, emp, "2");
		
		String fileNameWithPath = "";
		FileInputStream fileinputstream =null;
		File file =null;
		boolean flag = true;
		try {
			fileNameWithPath = newPdfPath;
			file = new File(fileNameWithPath);
			fileinputstream = new FileInputStream(file);
			long l = file.length();
			int k = 0;
			byte abyte0[] = new byte[65000];
			getResponse().setContentType("application/x-msdownload");
			getResponse().setContentLength((int) l);
			title = URLEncoder.encode(title, "UTF-8");
			if(title!=null){
				title = title.replaceAll("%5B", "\\[").replaceAll("%5D", "\\]").replaceAll("%28", "(").replaceAll("%29", ")").replaceAll("%2F", "\\/").replaceAll("%2B", "+").replaceAll("%3D", "=");
			}
			getResponse().setHeader("Content-Disposition", "attachment; filename=" + title + ".pdf");
			while ((long) k < l) {
				int j;
				j = fileinputstream.read(abyte0, 0, 65000);
				k += j;
				getResponse().getOutputStream().write(abyte0, 0, j);
			}
			fileinputstream.close();
		} catch (IOException e) {
			LOGGER.error("下载失败,文件路径为："+fileNameWithPath, e);
			e.printStackTrace();
			
		}finally{
			if(null!=fileinputstream){
				try {
					fileinputstream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if(flag){
				file.delete();
			}
		}
	}
	
	/**
	 * 方法描述: [根据流程id获取所有可以转为pdf的附件数量]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-9-28-下午3:14:42<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * void
	 */
	public void getPdfFjCount(){
		String processId = getRequest().getParameter("processId");
		if(CommonUtil.stringIsNULL(processId)){
			toPage("0");
			return;
		}
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		if(wfProcess == null){
			toPage("0");
			return;
		}
		List<SendAttachments> attList = attachmentService.findSendAttachmentListByInstanceId(wfProcess.getAllInstanceid());//所有附件
		List<SendAttachments> attList2 = new ArrayList<SendAttachments>();
		for (SendAttachments sendAttachments : attList) {
			String skipFileType = "rar,zip,cebx";
			if((skipFileType.indexOf(sendAttachments.getFiletype()) == -1) || sendAttachments.getFiletype().equals("ceb")){
				attList2.add(sendAttachments);
			}
		}
		toPage((attList2.size()+""));
	}
	
	/**
	 * 方法描述: [获取意见排序]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-10-17-下午4:01:21<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * void
	 */
	public void processSort() {
		String instanceId = getRequest().getParameter("instanceId");
		List<String> processIdList = tableInfoService.getOverProcessId(instanceId);
		JSONArray arr = new JSONArray();
		if (null != processIdList && processIdList.size() > 0) {
			for (int i = 0; i < processIdList.size(); i++) {
				JSONObject obj = new JSONObject();
				obj.put("processId", processIdList.get(i));
				obj.put("sort", i);
				arr.add(obj);
			}
		}
		toPage(arr.toString());
	}
	
	//判断字符串是否为乱码
	public static boolean isMessyCode(String strName) {
		Pattern p = Pattern.compile("\\s*|\t*|\r*|\n*");
		Matcher m = p.matcher(strName);
		String after = m.replaceAll("");
		String temp = after.replaceAll("\\p{P}", "");
		char[] ch = temp.trim().toCharArray();
		float chLength = 0;
		float count = 0;
		for (char element : ch) {
			char c = element;
			if (!Character.isLetterOrDigit(c)) {
				if (!isChinese(c)) {
					count = count + 1;
				}
				chLength++;
			}
		}
		float result = count / chLength;
		if (result > 0.4) {
			return true;
		} else {
			return false;
		}
	}

	private static boolean isChinese(char c) {
		Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
		if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
				|| ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
				|| ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
				|| ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
				|| ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
				|| ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
			return true;
		}
		return false;
	}
	
	/**
	 * 方法描述: [字符串乱码处理]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-10-24-上午11:18:39<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @param msg
	 * @return
	 * String
	 */
	public static String toChinese(String msg){
		if(CommonUtil.stringIsNULL(msg)){
			return "";
		}
		if(isMessyCode(msg)){
			try {
				return new String(msg.getBytes("ISO8859-1"),"UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		return msg;
	}
	
	public Map<String, Object> getPDFPathByEnd(String processId,String newPdfPath,String instanceId){
		Map<String, Object> param = new HashMap<String, Object>();
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		if(wfp!=null){
			instanceId = wfp.getWfInstanceUid();
			wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		WfProcess currentProcess = wfProcess;
		
		if(currentProcess != null){
			String oldFormId = currentProcess.getFormId();
			String itemId = currentProcess.getItemId();
			String isFlexForm = "";
			processId = currentProcess.getWfProcessUid();
			if(CommonUtil.stringNotNULL(itemId)){
				WfItem item = itemService.getItemById(itemId);
				isFlexForm = item.getIsFlexibleForm();
			}
			String location = "";
			if("1".equals(isFlexForm)){
				List<TrueformData> outList = getValueForDownload(processId);
				try {
					FlexibleFormJson json = new FlexibleFormJson(outList);
					location = JSONObject.fromObject(json).toString();
				}catch (Exception e) {
				}
				//弹性表单转成pdf路径
				String flexPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"flexWithComt.pdf";
			
				param.put("flexPdfPath", flexPdfPath);
				param.put("location", location);
				param.put("oldFormId", oldFormId);
				param.put("newPdfPath", newPdfPath);
				param.put("processId", processId);
			}
		}
		return param;
	}
	
	public void getQrcodeUrl(){
		String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":"	+ getRequest().getLocalPort() + getRequest().getContextPath();
		String instanceId = getRequest().getParameter("instanceId");
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, QRCODE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		String imgPath = pdfRoot+dstPath+UuidGenerator.generate36UUID()+"."+QRCODE_FILE_TYPE;
		DoFile doFile = tableInfoService.getDoFileByElements("",instanceId);
		String returnType = "no";
		String url = "/table_getOfficeInfoByQrcode.do?instanceId="+instanceId;
		if(doFile!=null&&CommonUtil.stringNotNULL(doFile.getQrcodePath())){
			File file = new File(pdfRoot+doFile.getQrcodePath());
			if(file.exists()){
				returnType = serverUrl+"/form/html/workflow/"+doFile.getQrcodePath();
			}else{
				boolean isSuccess = QrcodeUtil.encoderQRCode(serverUrl+url, pdfRoot+doFile.getQrcodePath(), QRCODE_FILE_TYPE, 16);
				if(isSuccess){
					returnType = serverUrl+"/form/html/workflow/"+doFile.getQrcodePath();
				}else{
					returnType = "";
				}
			}
		}else{
			boolean isSuccess = QrcodeUtil.encoderQRCode(serverUrl+url, imgPath, QRCODE_FILE_TYPE, 16);
			if(isSuccess){
				String path = imgPath.contains(pdfRoot)?imgPath.substring(pdfRoot.length()):imgPath;
				returnType = serverUrl+"/form/html/workflow/"+path;
				doFile.setQrcodePath(path);
				tableInfoService.updateDoFile(doFile);
			}else{
				returnType = "";
			}
		}
		toPage(returnType);
	}
	
	/**
	 * 方法描述: [根据二维码获取信息]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-11-14-下午3:46:55<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * String
	 */
	public String getOfficeInfoByQrcode(){
		JSONObject jsonObject = getJSONObject();
		String instanceId = getRequest().getParameter("instanceId");
		String type = getRequest().getParameter("type");
		if(jsonObject != null){
			instanceId =(String) jsonObject.get("instanceId");			
			type = (String) jsonObject.get("type");
		}else{
			instanceId = getRequest().getParameter("instanceId");			
			type= getRequest().getParameter("type");
		}
		if(CommonUtil.stringIsNULL(type)||!"1".equals(type)){//保证只有我方移动端才能访问
			return "fail";
		}
		OfficeInfoView view = tableInfoService.getOfficeInfoByInstanceId(instanceId);
		getRequest().setAttribute("view", view);
		return "officeInfoByQrcode";
	}
	
	public String pleaseOrWatch(){
		String oldComment = getRequest().getParameter("oldComment");
		String siteId = getRequest().getParameter("siteId");
		String nodeId = getRequest().getParameter("nodeId");
		if(CommonUtil.stringIsNULL(oldComment)||"undefined".equals(oldComment)){
			oldComment="";
		}
		WfNode wfNode = tableInfoService.getWfNodeById(nodeId);
		if(wfNode!=null){
			getRequest().setAttribute("routeType", wfNode.getWfn_route_type());
		}
		oldComment = toChinese(oldComment);
		getRequest().setAttribute("oldComment", oldComment);
		getRequest().setAttribute("nodeId", nodeId);
		getRequest().setAttribute("siteId", siteId);
		return "pleaseOrWatch";
	}
	
	public void downloadExpBatch(){
		String ids = getRequest().getParameter("ids");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String [] rowsName = {"序号","公文标题","公文文号","当前步骤","当前步骤办理人","登记时间","状态"};
		Calendar calendar = Calendar.getInstance();
		String year = calendar.get(Calendar.YEAR)+"";
		List<Object[]> dataList = new ArrayList<Object[]>();
		if(StringUtils.isNotBlank(ids)){
			List<DoFile> doFileList = tableInfoService.findDoFilesByIds(ids);
			int j=1;
			for (DoFile doFile : doFileList) {
				Object[] objs = new Object[7];
				objs[0] = j++;
				objs[1] = doFile.getDoFile_title();
				//获取文号
				String a = tableInfoService.findWh(doFile.getInstanceId());
				objs[2] = a;
				if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
					WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
					if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
						 WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
						 objs[3] = node.getWfn_name();
					}
				}
				objs[4] = doFile.getEntrustName();
				objs[5] = sdf.format(doFile.getDo_time()!=null?doFile.getDo_time():new Date());
				Integer result = doFile.getDoFile_result();
				String status = "";
				if(result==null){
					status = "未办";
				}else if (result.equals(0)) {
					status = "未办";
				}else if(result.equals(1)){
					status = "已办";
				}else if(result.equals(2)){
					status = "办结";
				}
				
				objs[6] = status;
				dataList.add(objs);
			}
			ExportExcel ex = new ExportExcel(year+"年度公文列表", rowsName, dataList);
			try {
				ex.saveExcel();
			} catch (Exception e) {
				e.printStackTrace();
				toPage("10001");
			}
		}else{
			toPage("10001");
		}
	}
	
	/**
	 * 方法描述: [一键办理专用办结方法]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-12-7-下午5:27:44<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @param instanceId
	 * @param workFlowId
	 * @param formId
	 * @param processId
	 * @param currentItemId
	 * @param nodeId
	 * @param trueJson
	 * @param isWriteNewValue
	 * @param userId
	 * @param formData 带入表单参数，用于处理子线程办结request无效的情况
	 * @return
	 * @throws Exception
	 * boolean
	 */
	public boolean endAutoOperate(String instanceId, String workFlowId, String formId,
			String processId, String currentItemId,
			String nodeId, String trueJson,String isWriteNewValue,String userId, String formData,String serverUrl) throws Exception {
		// --1、获取参数、将数据保存如何，办结本身流程数据
		trueJson = JSONReplaceUtil.replaceJson(trueJson);
		// 获取当前登录用户
		Employee emp = tableInfoService.findEmpByUserId(userId);

		// 保存日志信息表
		TrueJson entity = new TrueJson();
		entity.setInstanceId(instanceId);
		entity.setProcessId(processId);
		entity.setSaveDate(new Date());
		entity.setUserId(userId);
		entity.setTrueJson(trueJson);
		entity.setExcute("end");
		trueJsonService.saveTrueJson(entity);

		String pdfRoot = SystemParamConfigUtil
				.getParamValueByParam("workflow_file_path");

		String pdfPath = "";

		// 调用线程生成对应的pdf文件
		String newProcessId = UuidGenerator.generate36UUID();
		WfProcess wfp = tableInfoService.getProcessById(processId);
		// 标题的值
		String title = getTitle(workFlowId, formId, instanceId);
		String vc_title = title.split(";")[0];
		if ((vc_title == null || vc_title.equals(""))) {
			vc_title = wfp.getProcessTitle();
		}
		// 更新步骤(办结插一条数据) 这个是一般办结 加子流程第一步办结
		tableInfoService.addEndProcess(instanceId, vc_title, nodeId, formId, wfp, pdfPath, newProcessId);
		WebSocketUtil webSocket = new WebSocketUtil();
		webSocket.delBadge(userId, "", "");

		// --3、按照存储过程
		excuteProcedure("", 1, instanceId, formId, nodeId);

		WfItem item = itemService.getItemById(currentItemId);

		// --4,生成办件对应的pdf文件存流入库
		if (null != wfp && wfp.getAllInstanceid().equals(instanceId)) {// 主流程办结才生成pdf文件
			String gdPath = FileUploadUtils.getRealFolderPath(pdfRoot,
					Constant.GENE_GD_FILE_PATH);
			DoFile doFile = tableInfoService
					.getDoFileByElements("", instanceId);
			Map<String, Object> param = null;
			if (doFile != null) {

				param = getPDFPathByEnd(processId,
						pdfRoot + gdPath + wfp.getProcessTitle() + ".pdf", "",formData ,userId);
				param.put("serverUrl", serverUrl);
				param.put("doFile", doFile);
				param.put("emp", emp);
			}

			PushDataToPdfThread pushDataToPdfThread = new PushDataToPdfThread(
					thirdpartyInterfaceLogService, tableInfoExtendService,
					attachmentService, tableInfoService, trueJsonService,
					zwkjFormService, this, item, instanceId,
					wfp.getProcessTitle(), param);
			pushDataToPdfThread.start();
		}
		return true;
	}
	
	/**
	 * 方法描述: [获取trueJson参数，带入表单值]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-12-10-上午9:58:19<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @param processId
	 * @param newPdfPath
	 * @param instanceId
	 * @param formData 带入表单参数，用于处理子线程办结request无效的情况
	 * @param userId
	 * @return
	 * Map<String,Object>
	 */
	public Map<String, Object> getPDFPathByEnd(String processId,String newPdfPath,String instanceId,String formData,String userId){
		Map<String, Object> param = new HashMap<String, Object>();
		String pdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		String dstPath = FileUploadUtils.getRealFolderPath(pdfRoot, Constant.GENE_FILE_PATH); // 得到上传文件在服务器上存储的唯一路径,并创建存储目录
		// 查找当前待办的Process实体
		WfProcess wfp = pendingService.getProcessByID(processId);
		//查询办件最新的那步步骤信息
		WfProcess wfProcess = null;
		if(wfp!=null){
			instanceId = wfp.getWfInstanceUid();
			wfProcess = tableInfoService.getParentProcessByInstanceid(instanceId);  //当附件不存在时,在去生成下具体的附件内容
		}else{
			List<WfProcess> list = tableInfoService.getProcessList(instanceId);
			if(list!=null && list.size()>0){
				wfProcess = list.get(0);
			}
		}
		if(wfProcess==null){
			wfProcess = wfp;
		}
		WfProcess currentProcess = wfProcess;
		
		if(currentProcess != null){
			String oldFormId = currentProcess.getFormId();
			String itemId = currentProcess.getItemId();
			String isFlexForm = "";
			processId = currentProcess.getWfProcessUid();
			if(CommonUtil.stringNotNULL(itemId)){
				WfItem item = itemService.getItemById(itemId);
				isFlexForm = item.getIsFlexibleForm();
			}
			String location = "";
			if("1".equals(isFlexForm)){
				List<TrueformData> outList = getValueForDownload(processId, formData,userId);
				try {
					FlexibleFormJson json = new FlexibleFormJson(outList);
					location = JSONObject.fromObject(json).toString();
				}catch (Exception e) {
				}
				//弹性表单转成pdf路径
				String flexPdfPath = pdfRoot+dstPath + UuidGenerator.generate36UUID()+"flexWithComt.pdf";
			
				param.put("flexPdfPath", flexPdfPath);
				param.put("location", location);
				param.put("oldFormId", oldFormId);
				param.put("newPdfPath", newPdfPath);
				param.put("processId", processId);
			}
		}
		return param;
	}
	
	/**
	 * 方法描述: [获取表单的对应参数，自带formData]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-12-10-上午10:00:34<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @param processId
	 * @param value 通过saveform方法获取的表单值
	 * @return
	 * List<TrueformData>
	 */
	public List<TrueformData> getValueForDownload(String processId, String value, String userId){
		List<TrueformData> trueFormList = new ArrayList<TrueformData>();
		WfProcess process = tableInfoService.getProcessById(processId);
		if(process != null){
			//String workflowId = process.getWfUid();
			String instanceId = process.getWfInstanceUid();
			String formId = process.getFormId();
			//String value = this.saveForm(formId, 2,instanceId,formId,null, workflowId,"","false","");
			List<FormTagMapColumn> colMapList = zwkjFormService.getFormTagMapColumnByFormId(formId);
			if(colMapList != null && colMapList.size() > 0){
				// 字典表
				Map<String, String> select_old = formAction.selectDicValuesForMobile(formId);// {needProjection=是否需要投影-是,否-shitouying,notouying}
				Map<String, String>  dicMap = new HashMap<String, String>();
				Map<String, String> selects = new HashMap<String, String>();
				
				//map去除旧数据,添加新的dic
				if(dicMap!=null && dicMap.size()>0){
					//遍历dicMap
					for(String key : dicMap.keySet()){
						selects.put(key, dicMap.get(key));
					}
					//遍历原有的字典表选项
					for(String key : select_old.keySet()){
						if(!selects.containsKey(key)){
							selects.put(key, select_old.get(key));
						}
					}
				}else{
					selects = select_old;
				}
				for(FormTagMapColumn ftm : colMapList){
					TrueformData trueForm = new TrueformData();
					trueForm.setTextMaxLen(ftm.getTextMaxLen());//设置文本最大长度
					trueForm.setCollumnName(ftm.getColumnCname());
					trueForm.setId(ftm.getFormtagname());//表单页面的页面元素属性
					trueForm.setName(ftm.getFormtagname());
					trueForm.setZname(ftm.getColumnCname());
					trueForm.setIsWrite("0");		//设置表单的读写权限
					//字段规则
					trueForm.setAssociatedColumns(ftm.getAssociatedColumns());
					trueForm.setRegularExpression(ftm.getRegularExpression());
					trueForm.setRegularMeanings(ftm.getRegularMeanings());
					trueForm.setGenerationMode(ftm.getGenerationMode());
					
					
					if(("checkbox").equals(ftm.getFormtagtype())){
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "checkbox");
					} else if (("radio").equals(ftm.getFormtagtype())) {
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "radio");
					} else if (("select").equals(ftm.getFormtagtype())) {
						trueForm = setFormTagvalue(ftm, value, selects, trueForm, "select");
					} else {
						if (value != null && !("").equals(value)) {
							String[] values = value.split(";");
							for (String val : values) {
								String tagName = val.split(":")[0];
								String assignColName = ftm.getAssignColumnName();
								if(CommonUtil.stringNotNULL(tagName) && CommonUtil.stringNotNULL(assignColName) && tagName.equalsIgnoreCase(assignColName)){
									int index = val.indexOf(":");
									String[] vals = {val.substring(0,index),val.substring(index+1,val.length())};
									//String[] vals = val.split(":");
									if (vals.length > 1) {
										if(("").equals(vals[1])){
											if(!("").equals(ftm.getConstantValue())){
												String cval = getDefaultValue(ftm, userId, "", instanceId);
												trueForm.setValue(cval);
											}
										}else{
											trueForm.setValue(vals[1]);
										}
									} else {
										trueForm.setValue("");
									}
									String isTrueArea = ftm.getTrueArea();
									if(isTrueArea!=null && isTrueArea.equals("1")){
										trueForm.setType("true");
									}else if(isTrueArea!=null && isTrueArea.equals("2")){
										trueForm.setType("img");
									}else{
										trueForm.setType("text");
									}
									break;
								}
							}
						}
					}
					trueFormList.add(trueForm);
				}
			}
		}
		return trueFormList;
	}
	
	/**
	 * 方法描述: [获取办件日志情况列表]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2018-12-21-下午4:06:37<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @return
	 * String
	 */
	public String getDoFileLogList() {
		//点击菜单进入不传laterSearch，点击搜索才传
		String laterSearch = getRequest().getParameter("laterSearch");
		if(StringUtils.isNotBlank(laterSearch)){
			getRequest().setAttribute("laterSearch", laterSearch);
		}
		String redirect = getRequest().getParameter("redirect");
		String title = getRequest().getParameter("wfTitle");
		String itemName = getRequest().getParameter("itemName");
		String itemid = getRequest().getParameter("itemid");
		String commitTimeFrom = getRequest().getParameter("commitTimeFrom");
		String commitTimeTo = getRequest().getParameter("commitTimeTo");
		String favourite = getRequest().getParameter("favourite");
		String isShowTestDept = getRequest().getParameter("isShowTestDept");
		getRequest().setAttribute("isAdmin",  getRequest().getParameter("isAdmin"));
		String pagesize = getRequest().getParameter("pageSize");
		String isShowExp = getRequest().getParameter("isShowExp");
		String siteId = getRequest().getParameter("siteId");
		String departId = getRequest().getParameter("departId");
		String isFgw = getRequest().getParameter("isFgw");
		
		// 办件删除列表新增了 参数 type = del
		String type = getRequest().getParameter("type");
		getRequest().setAttribute("type",  type);
		
		//新增标题是否展示文号字段
		String isShowWH = getRequest().getParameter("isShowWH");
		
		//高级搜索选项
		String title2 = getRequest().getParameter("wfTitle2");
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'","\\'\\'") : "";
		String commitTimeFrom3 = getRequest().getParameter("commitTimeFrom2");
		String commitTimeTo3 = getRequest().getParameter("commitTimeTo2");
		String itemType2 = getRequest().getParameter("itemType2");
		String status = getRequest().getParameter("status");
		
		title = CommonUtil.stringNotNULL(title) ? title.replaceAll("'",
				"\\'\\'") : "";
		title2 = CommonUtil.stringNotNULL(title2) ? title2.replaceAll("'",
				"\\'\\'") : "";
		itemName = CommonUtil.stringNotNULL(itemName) ? itemName.replaceAll(
				"'", "\\'\\'") : "";
		String conditionSql = "";// 查询条件
		if(StringUtils.isNotBlank(title2)){
			conditionSql = " and t.dofile_title like '%" + title2.trim() + "%' ";
			getRequest().setAttribute("wfTitle2", title2);
		}else{
			if (CommonUtil.stringNotNULL(title)) {
				conditionSql = " and t.dofile_title like '%" + title.trim() + "%' ";
			}
		}
		if (CommonUtil.stringNotNULL(itemName)) {
			conditionSql += " and i.vc_sxmc = '" + itemName + "' ";
		}

		if(StringUtils.isNotBlank(commitTimeFrom3)){
			commitTimeFrom3 = commitTimeFrom3.trim().replaceAll("'","\\'\\'");
			String commitTimeFrom4 = commitTimeFrom3 + " 00:00:00";
			conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom4+"','yyyy-mm-dd hh24:mi:ss') ";	
			getRequest().setAttribute("commitTimeFrom2", commitTimeFrom3);
		}else{
			if (CommonUtil.stringNotNULL(commitTimeFrom)) {
				commitTimeFrom = commitTimeFrom.trim().replaceAll("'","\\'\\'");
				String commitTimeFrom2 = commitTimeFrom + " 00:00:00";
				conditionSql +=" and t.dotime >= to_date('"+commitTimeFrom2+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeFrom", commitTimeFrom);
			}
		}
		if(StringUtils.isNotBlank(commitTimeTo3)){
			commitTimeTo3 = commitTimeTo3.trim().replaceAll("'","\\'\\'");
			String commitTimeTo4 = commitTimeTo3 + " 23:59:59";
			conditionSql +=" and t.dotime <= to_date('"+commitTimeTo4+"','yyyy-mm-dd hh24:mi:ss') ";	
			getRequest().setAttribute("commitTimeTo2", commitTimeTo3);
		}else{
			if (CommonUtil.stringNotNULL(commitTimeTo)) {
				commitTimeTo = commitTimeTo.trim().replaceAll("'","\\'\\'");
				String commitTimeTo2 = commitTimeTo + " 23:59:59";
				conditionSql +=" and t.dotime <= to_date('"+commitTimeTo2+"','yyyy-mm-dd hh24:mi:ss') ";	
				getRequest().setAttribute("commitTimeTo", commitTimeTo);
			}
		}
		
		String itemType = getRequest().getParameter("itemType");
		getRequest().setAttribute("itemType", itemType);
		
		if(StringUtils.isNotBlank(itemType2)){
			conditionSql +=" and i.vc_sxlx = '"+itemType2+"' ";
			getRequest().setAttribute("itemType2", itemType2);
		}else{
			if(StringUtils.isNotBlank(itemType)){
				//收文
				conditionSql +=" and i.vc_sxlx = '"+itemType+"' ";
			}
		}
		
		//在办办结
		if(StringUtils.isNotBlank(status)){
			if(status.equals("4")){//在办
				conditionSql += " and t.instanceid not in (select e.instanceid from t_wf_core_end_instanceid e)";
			}else if(status.equals("2")){//办结
				conditionSql += " and t.instanceid in (select e.instanceid from t_wf_core_end_instanceid e)";
			}
			getRequest().setAttribute("status", status);
		}
		
		//更具部门id查询
		if(StringUtils.isNotBlank(departId)){
			conditionSql += " and p.user_uid in (select e.employee_guid from zwkj_employee e where e.department_guid = '" + departId + "')";
			getRequest().setAttribute("departId", departId);
		}

		//视图字段
		String wh = getRequest().getParameter("wh");
		String lwdw = getRequest().getParameter("lwdw");
		wh = CommonUtil.stringNotNULL(wh) ? wh.replaceAll("'",
				"\\'\\'") : "";
		lwdw = CommonUtil.stringNotNULL(lwdw) ? lwdw.replaceAll("'",
				"\\'\\'") : "";
		
		if (CommonUtil.stringNotNULL(wh)) {
			wh = wh.trim();
			conditionSql += " and v.wh like '%" + wh.trim()+ "%' escape '\\'";
		}
		getRequest().setAttribute("wh", wh);
		if (CommonUtil.stringNotNULL(lwdw)) {
			lwdw = lwdw.trim();
			conditionSql += " and v.lwdw like '%" + lwdw.trim()+ "%' escape '\\'";
			getRequest().setAttribute("lwdw", lwdw);
		}
		
		String itemids = "";
		if(StringUtils.isNotBlank(siteId)){
			if(StringUtils.isNotBlank(itemid)){//去取两个itemId的交集
				itemids = this.getIntersectItemId(itemid, siteId);
			}else{
				itemids = itemService.getItemIdsBydeptId(siteId);
			}
		}else{
			itemids = itemid;
		}
		
		String pendingItemId = "";
		if(CommonUtil.stringNotNULL(itemids)){
			String[] itemIds = itemids.split(",");
			for(String itemId: itemIds){
				pendingItemId += "'"+itemId+"',";
			}
			if(pendingItemId!=null && pendingItemId.length()>0){
				pendingItemId = pendingItemId.substring(0, pendingItemId.length()-1);
			}
			conditionSql += " and i.id  in ("+pendingItemId+")";
		}

		//favourite=1 查询已被收藏的办件
		String bigDepId= null;
		String deptIds = (String) getSession().getAttribute(MyConstants.DEPARMENT_ID);
		int pageSize = Integer.parseInt(StringUtils.isNotBlank(pagesize)?pagesize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
		int count = 0;
		List<DoFile> doFileList = null;
		if(StringUtils.isNotBlank(siteId)){
			bigDepId = siteId;
		}
		Employee employee = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		
		if(StringUtils.isBlank(bigDepId)){
			if(StringUtils.isNotBlank(deptIds)){
				Department dept = departmentService.findSiteDept(deptIds);
				if(null != dept){
					bigDepId = dept.getDepartmentGuid();
				}
			}
			if(employee != null && StringUtils.isBlank(bigDepId)){
				String deptId = employee.getDepartmentGuid();
				Department dep = departmentService.findDepartmentById(deptId);
				if(dep != null){
					String superDeptId = dep.getSuperiorGuid();
					bigDepId = superDeptId;
				}else{
					System.out.println("获取部门失败！");
				}
			}else{
				if(employee == null){
					System.out.println("session中人员信息为空！");
				}
			}
		}
		if(CommonUtil.stringNotNULL(favourite)){
			String userId  =  employee.getEmployeeGuid();
			count = tableInfoService.getCountOfDoFileFavourites(bigDepId, conditionSql, userId);
			Paging.setPagingParams(getRequest(), pageSize, count);
			doFileList = tableInfoService.getDoFileFavouriteList(bigDepId, conditionSql, userId, Paging.pageIndex, Paging.pageSize);
		}else{
			if(StringUtils.isNotBlank(isShowTestDept) && isShowTestDept.equals("1")){
			}else{
				String testDeptId = SystemParamConfigUtil.getParamValueByParam("testDeptId");
				conditionSql += " and dep.department_guid != '" + testDeptId + "' ";
			}
			//conditionSql += " and p.user_uid='"+employee.getEmployeeGuid()+"' ";
			
			count = tableInfoService.getCountDoFiles(bigDepId, conditionSql);
			Paging.setPagingParams(getRequest(), pageSize, count);
			
			doFileList = tableInfoService.getDoFileList(bigDepId,conditionSql, Paging.pageIndex, Paging.pageSize);
			
		}
		
		if(doFileList!=null){
			for (DoFile doFile : doFileList) {
				//如果要显示文号，就到视图里查询
				if(("1").equals(isShowWH)){
					doFile.setWh(tableInfoService.findWh(doFile.getInstanceId()));
					getRequest().setAttribute("isShowWH", isShowWH);
				}
				
				if(doFile.getProcessId()!=null&&!"".equals(doFile.getProcessId())){
					WfProcess process = tableInfoService.getProcessById(doFile.getProcessId());
					if(process.getNodeUid()!=null&&!"".equals(process.getNodeUid())){
						 WfNode node = tableInfoService.getWfNodeById(process.getNodeUid());
						 doFile.setNodeName(node.getWfn_name());
					}
				}
				Integer myFileCount = tableInfoService.countMyProcess(doFile.getInstanceId(), employee.getEmployeeGuid());
				if(myFileCount>0){
					doFile.setIsCanRead("1");
				}else{
					doFile.setIsCanRead("0");
				}
				
				DofileFavourite fav = tableInfoService.getDofileFavouriteById(doFile.getDoFile_id(),employee.getEmployeeGuid());
				if(null != fav){
					doFile.setFavourite("1");
				}else{
					doFile.setFavourite("0");
				}
			}
		}
		getRequest().setAttribute("doFileList", doFileList);
		getRequest().setAttribute("wfTitle", title);
		getRequest().setAttribute("itemName", itemName);
		getRequest().setAttribute("itemid", itemid);
		getRequest().setAttribute("redirect", redirect);
		getRequest().setAttribute("favourite", favourite);
		//事项列表
		String depId = getSession().getAttribute(MyConstants.DEPARMENT_ID)==null?null:(getSession().getAttribute(MyConstants.DEPARMENT_ID)).toString();
		WfItem item = new WfItem();
		if(StringUtils.isNotBlank(siteId)){
			item.setVc_ssbmid("'"+siteId+"'");
		}else{
			item.setVc_ssbmid(depId);
		}
		List<WfItem> items = itemService.getItemListForPage("", "", item, null, null);
		getRequest().setAttribute("myPendItems", items);
		
//		if(StringUtils.isNotBlank(isShowExp) && isShowExp.equals("1")){
			List<Department> depts = departmentService.queryDepartmentsBySuperdepIds("'"+bigDepId+"'");
			getRequest().setAttribute("depts", depts);
//		}
		String fgw_fw_item = SystemParamConfigUtil.getParamValueByParam("fgw_fw_item");
		String fgw_special_dept = SystemParamConfigUtil.getParamValueByParam("fgw_special_dept");
		if(StringUtils.isNotBlank(isFgw) && isFgw.equals("1")){
			List<Department> fgwDepts = departmentService.queryDepartmentsBySuperdepIds("'"+fgw_special_dept+"'");
			getRequest().setAttribute("fgwDepts", fgwDepts);
		}
		getRequest().setAttribute("fgw_fw_item", fgw_fw_item);
		
		getRequest().setAttribute("isShowExp", isShowExp);
		if(StringUtils.isNotBlank(isFgw) && "1".equals(isFgw)){
			getRequest().setAttribute("isFgw", isFgw);
		}
		
		return "getDoFileLogList";			
	}
	
	public String openOperateLogList(){
		String processId = getRequest().getParameter("processId");
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		String pageSize = getRequest().getParameter("pageSize");
		getRequest().setAttribute("processId", processId);
		if(wfProcess!=null){
			String instanceId = wfProcess.getWfInstanceUid();
			int count = tableInfoService.getCountOfOperateLog(instanceId);
			int pagesize = Integer.parseInt(StringUtils.isNotBlank(pageSize)?pageSize:SystemParamConfigUtil.getParamValueByParam("pagesize"));
			getRequest().setAttribute("wfTitle", wfProcess.getProcessTitle());
			getRequest().setAttribute("pageSize", pageSize);
			Paging.setPagingParams(getRequest(), pagesize, count);
			List<TrueOperateLog> logList = tableInfoService.findOperateLogList(instanceId,Paging.pageIndex,Paging.pageSize);
			getRequest().setAttribute("logList", logList);
		}
		return "operateLogList";
	}
	
	public String downloadError(){
		return "downloadErrorPage";
	}
	
	public void isPendingFile(){
		String processId = getRequest().getParameter("processId");
//		if(processId==null || "".equals(processId)){
//			return;
//		}
		WfProcess wfProcess = tableInfoService.getProcessById(processId);
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		if(wfProcess==null || emp==null){
			return;
		}
		boolean isPending = tableInfoService.isHavePendingByInsIdAndEmpId(wfProcess.getWfInstanceUid(),emp.getEmployeeGuid());
		if(isPending){
			toPage("true");
		}
		
	}
	
	/**
	 * 方法描述: [离职人员自动办理]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2019-2-22-上午10:40:01<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * void
	 */
	public void autoOperateForLeave() {
		//查出所有离职人员信息
		List<Employee> list = tableInfoService.findAllLeaveEmps();
		EmployeeLeave employeeLeave = null;
		for (Employee emp : list) {
			//判断该人员是否已经离职完成
			employeeLeave = tableInfoService.findEmpLeave(emp);
			if(employeeLeave!=null || emp==null){
				continue;
			}
			//离职人员的批阅文自动办理
			List<WfProcess> processList = tableInfoService.findPendingOfUserId(emp,1);
			for(WfProcess wfp : processList){
				autoOperateFile(emp,wfp);
			}
			
			//办理完成后该人员离职
			employeeLeave = new EmployeeLeave();
			employeeLeave.setUserId(emp.getEmployeeGuid());
			tableInfoService.saveEmployeeLeave(employeeLeave);
		}
	}
	
	/**
	 * 方法描述: [自动办理该步骤]<br/>
	 * 初始作者: lihanqi<br/> 
	 * 创建日期: 2019-2-22-下午2:05:05<br/> 
	 * 修改记录：<br/>
	 * 修改作者         日期         修改内容<br/>
	 * @param emp
	 * @param wfp
	 * void
	 */
	public void autoOperateFile(Employee emp, WfProcess wfProcess) {
		if(emp==null || wfProcess==null){
			return;
		}
		String formId = wfProcess.getFormId();
		String processId = wfProcess.getWfProcessUid();
		String nodeId = wfProcess.getNodeUid();// 当前节点
		String instanceId = wfProcess.getWfInstanceUid();
		String workFlowId = wfProcess.getWfUid();
		String itemId = wfProcess.getItemId();
		String operate = "1";// 0:保存流程(只保存表单)
		// 查找当前待办的Process实体
		String oldFormId = "";
		if(wfProcess!=null){
			wfProcess.getOldFormId();
		}
		//获取当前登录用户
		String userId = emp.getEmployeeGuid();
		TrueJson trueJsonObj = trueJsonService.findNewestTrueJsonByInstanceId(instanceId);
		String trueJson = trueJsonObj.getTrueJson();
		trueJson = JSONReplaceUtil.replaceJson(trueJson);
		//保存日志信息表
		TrueJsonLogThread trueJsonLogThread = new TrueJsonLogThread(trueJsonService, instanceId, processId, userId, trueJson, "autoOperateFile");
		trueJsonLogThread.start();
		
		// 标题
		String vc_title = getTitle(workFlowId, formId, instanceId).split(";")[0];
		if((vc_title==null || vc_title.equals("")) && wfProcess!=null){			//标题为空; 过程不为空
			vc_title =  wfProcess.getProcessTitle();
		}
		boolean isCyWF = false;
		
		//oldPdfPath: 为延用的父流程的表单
		String pdfPath = "";
		//简单流程,将全部意见保存到主板之中
		WfProcess process = pendingService.getProcessByID(processId);
		// 3,保存意见
		Integer urgency = null;
//		String value = this.saveForm(oldFormId, 1, instanceId, formId, nodeId,workFlowId,"","",userId);
		
		// 4,更新步骤
		tableInfoService.updateProcess(processId, operate, instanceId, nodeId, userId, vc_title, workFlowId, itemId, pdfPath, trueJson,oldFormId, urgency);
		// 5,更新主办信息: 主办在协办之前完成,完成协办时,更新下一步待办表单
		if (Integer.parseInt(operate) == 1) {
			RemoteLogin remote = new RemoteLogin();
			boolean checkUser = RemoteLogin.checkPassed;
			if(checkUser){
				remote.deleteThirdPend(process.getUserUid(), processId);
			}
			WfNode wfnode = workflowBasicFlowService.getWfNode(nodeId);	//获取当前node
			String route_type = "";
			if(wfnode!=null){
				route_type = wfnode.getWfn_route_type(); 
			}
			if(route_type!=null && (route_type.equals("4"))){		//并行传阅式样
				
				int count = 0;
				List<WfProcess> sameStepWfList = tableInfoService.findWfProcessListByIsOver(wfProcess);
				for(int i = 0; i < sameStepWfList.size(); i++){
					if(sameStepWfList.get(i).getIsOver().equals("NOT_OVER")){
						count ++;
						break;
					}
				}
				
				WfNode nowNode = workflowBasicFlowService.getWfNode(nodeId);	//获取当前node
				String autoEndNodeId = SystemParamConfigUtil.getParamValueByParam("autoEndNodeId");
				if(StringUtils.isBlank(autoEndNodeId) || (StringUtils.isNotBlank(autoEndNodeId) && autoEndNodeId.indexOf(nowNode.getWfn_id()) == -1)){
					if(count==0){	//	count=0时表示该节点已经办结完成
						List<WfNode> nodeList = workflowBasicFlowService.showNode(wfProcess.getWfUid(), wfProcess.getNodeUid(), instanceId);
						WfNode nextNode = null;		//下一节点
						if(nodeList!=null && nodeList.size()>0){
							for(WfNode node : nodeList){
								String xtoUserId = node.getWfn_bd_user();
								if(StringUtils.isNotBlank(xtoUserId)){
									nextNode = node;
									break;
								}
							}
							if(null == nextNode){
								nextNode = nodeList.get(0);
							}
						}
//						sendNextProcess(nextNode, wfProcess, value, vc_title, trueJson, "", isCyWF,userId);
						autoSendNextProcess(nextNode, wfProcess, "", vc_title, trueJson, "", isCyWF,userId);
					}
				}
				
			}
		//获取当前节点的节点类型       
		if (Integer.parseInt(operate) == 1) {		//执行保存操作      
			wfProcess.setFinshTime(new Date());
			wfProcess.setIsOver(Constant.OVER);
			tableInfoService.updateProcess(wfProcess);
		}                                                                                                                                             	
	    // 6,同步数据
		excuteProcedure(oldFormId, 1, instanceId, oldFormId, nodeId);
		}
		
	}
	private void autoSendNextProcess(WfNode nextNode, WfProcess wfprocess,
			String string, String vc_title, String trueJson, String vaue,
			boolean isCyWF, String userId) {

		String xtoUserId = "";	//发送的人员
		if(nextNode!=null){
			xtoUserId = nextNode.getWfn_bd_user();
		}
		String workFlowId = wfprocess.getWfUid();
		String instanceId = wfprocess.getWfInstanceUid();
		String nextNodeId = nextNode.getWfn_id();
		String title = wfprocess.getProcessTitle();
		if(xtoUserId==null || xtoUserId.equals("")){
			//检查下是否存在自动追溯
			List<WfBackNode> wfbList = workflowBasicFlowService.getBackNodeListByWfId(workFlowId, nextNodeId);
			if (wfbList != null && wfbList.size() != 0) {
				if ((nextNodeId).equals(wfbList.get(0).getFromNodeId())) {
					List<WfProcess> desPersons = tableInfoService.findProcesses(workFlowId, instanceId,wfbList.get(0).getToNodeId());
					if (desPersons.size() != 0 && desPersons != null
							&& !("").equals(desPersons)) {
						String xtoname = "";// 主送
						String xccname = "";// 抄送
						for (WfProcess wfProcess : desPersons) {
							if (wfProcess.getIsMaster() == 1) {
								xtoname = wfProcess.getUserUid();
							} else {
								xccname += wfProcess.getUserUid() + ",";
							}
						}
						if (!("").equals(xccname) && xccname.length() > 1) {
							xccname = xccname.substring(0, xccname.length() - 1);
						}
						LOGGER.warn("办件："+title+",处于并行传阅节点模式,自动追溯的人员为："+xtoname+",抄送人员暂时给予过滤！");
						xtoUserId = xtoname;
					}
				}
			}
		}
		try {
			
			WfNode node = workflowBasicFlowService.getWfNode(nextNodeId);
			String truePath = "";
			tableInfoService.sendNextProcess(title, xtoUserId, userId,trueJson, truePath, wfprocess, nextNodeId);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void doFileIsDelete(){
		String id = getRequest().getParameter("id");
		if(id!=null){
			DoFile doFile = tableInfoService.getDoFileById(id);
			if(doFile!=null && doFile.getIsDelete()!=null && doFile.getIsDelete()==1){
				PrintWriter pw = null;
				try {
					pw = getResponse().getWriter();
					pw.print("false");
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					if(pw!=null){
						pw.close();
					}
				}
			}
		}
	}

	public String viewForm(){

		String workFlowId = getRequest().getParameter("workflowid");
		String directSend =  getRequest().getParameter("directSend");
		String instanceId = getRequest().getParameter("instanceId");
		String processId = getRequest().getParameter("processId");
		String dicValue = getRequest().getParameter("dicValue");
		String modId = getRequest().getParameter("modId");//模块id
		String matchId = getRequest().getParameter("matchId");//匹配id
		String dicId = getRequest().getParameter("dicId");//数据字典id
		// 事项id
		String itemId = getRequest().getParameter("itemid");
		// 是否是从子流程进来
		String isChildWf = getRequest().getParameter("isChildWf");
		String oldFormId = getRequest().getParameter("formId");
		//第一步节点
		WfNode wfNode = workflowBasicFlowService.findFirstNodeId(workFlowId);
		getRequest().setAttribute("dqNodeName", wfNode.getWfn_name());
		getRequest().setAttribute("iszf", wfNode.getWfn_iszf());
		getRequest().setAttribute("iswcsx", wfNode.getWfn_iswcsx());
		getRequest().setAttribute("isUploadAttach", wfNode.getWfn_isUploadAttach());		//是否必须上传附件
		// 当前节点所绑定的表单Id
		String formId = wfNode.getWfn_defaultform();
		//根据formId获取表单
		ZwkjForm form = zwkjFormService.getOneFormById(formId);
		String formLocation = form.getForm_jspfilename();
		// 根据当前节点Id查找下一节点Id
		Object[] nodeList =   workflowBasicFlowService.showNextNode(workFlowId, wfNode.getWfn_id());
		// 根据当前节点Id查找下一子流程(只判断了子流程在线的后端的情况)
		List<WfChild> childs = workflowBasicFlowService.showChildOfWf(workFlowId, wfNode.getWfn_id());
		// 下一步是否包含办结节点
		String isHaveEndNode = "false";
		List<WfNode> nodes = new ArrayList<WfNode>();
		if(nodeList!=null && nodeList.length==2){
			if(nodeList[0]!=null){
				nodes = (List<WfNode>)nodeList[0];
				int k = nodeList[1]==null?0:Integer.parseInt(nodeList[1].toString());
				if(k>0){		//存在配置着条件的节点
					WfMain wfMain = workflowBasicFlowService.getWfMainById(workFlowId);
					if(wfMain!=null){		//获取设定的默认的节点名称
						String nodeName = wfMain.getWfm_nodeName();
						if(nodeName==null || nodeName.equals("")){
							nodeName = "提交";
						}
						getRequest().setAttribute("nodeName", nodeName);
					}
				}
			}
		}
		boolean isEndReply = false;
		for (WfNode wn : nodes) {
			if (("end").equals(wn.getWfn_type())) {
				isHaveEndNode = "true";
				break;
			}
		}
		boolean isSend = false; // 办文为false,发文为true
		WfItem item = docNumberService.findItemByWorkFlowId(workFlowId);
		if (item != null && item.getVc_sxlx().equals(Constant.DEFINE_TYPE_SEND)) {
			isSend = true;
		}
		String oldPath = null;
		// 步骤记录
		if(directSend != null && "true".equals(directSend)){
			// 直接发文 取 sw 表里面的instanceId
		}else{
			instanceId = UuidGenerator.generate36UUID();
			processId = UuidGenerator.generate36UUID();
		}
	
		// 第一步的标志
		boolean isFirst = true;
		// 标题的字段---用于页面中判断必填
		String title_column = getTitle(workFlowId, formId, instanceId).split(";")[1];
		// 下一步是否是最后一步
		boolean isEndProcess = false;
		for (WfNode node : nodes) {
			if (("end").equals(node.getWfn_type())) {
				isEndProcess = true;
			}
			if(node.getNode_isReply() != null && node.getNode_isReply()==1){
				isEndReply = true;
			}
		}
		// 判断是第一步(为阅者状态用)
		boolean firstStep = true;
		// 获取当前登录用户
		Employee emp = (Employee) getSession().getAttribute(MyConstants.loginEmployee);
		// webid(存的是部门id)
		List<String> depIds = (List<String>) getSession().getAttribute(MyConstants.DEPARMENT_IDS);
		String userId = emp.getEmployeeGuid();
		
		 // 根据目录的前缀 匹配虚拟目录
	    String newPdfRoot = SystemParamConfigUtil.getParamValueByParam("workflow_file_path");	
		// 获取前面的主流程id
		String proceId = getRequest().getParameter("processId");
		getRequest().setAttribute("f_proceId", proceId);
		// 查找当前待办的Process实体
		WfProcess wfProcess = pendingService.getProcessByID(proceId);
		// 生成的pdf地址
		String pdfPath = "";
		isFirst = false;
		// 查找父流程的表单值
		//获取父流程步骤finstanceId
		getRequest().getSession().removeAttribute("pdfpath");	
		// 生成pdf
		pdfPath = getRequest().getParameter("newPdfPath");
		oldPath=pdfPath;
		if (pdfPath != null && !"".equals(pdfPath)){
			String serverUrl = getRequest().getScheme()+"://" + getRequest().getServerName() + ":" + getRequest().getLocalPort() + getRequest().getContextPath();
		    pdfPath = pdfPath.split(",")[0];
		    if(pdfPath.startsWith(newPdfRoot)){
		    	pdfPath = serverUrl+ "/form/html/workflow/"+pdfPath.substring(newPdfRoot.length());
		    }else{
		    	pdfPath = serverUrl+ "/form/html/"+pdfPath.substring(pdfPath.lastIndexOf("/") + 1);
		    }
		}
		getRequest().setAttribute("pdfPath", pdfPath);
		getRequest().setAttribute("oldFormId", oldFormId);
		getRequest().setAttribute("formId", formId);
		getRequest().setAttribute("userId", userId);
		getRequest().setAttribute("instanceId", instanceId);
		getRequest().setAttribute("processId", processId);
		getRequest().setAttribute("nodeId", wfNode.getWfn_id());
		WfItem wfitem = itemService.getItemById(itemId);
		
		String isFlexibleForm = wfitem.getIsFlexibleForm();
		getRequest().setAttribute("isFlexibleForm", isFlexibleForm!=null?isFlexibleForm:"0");		//是否使用弹性表单
		getRequest().setAttribute("itemType", wfitem.getVc_sxlx());
		getRequest().setAttribute("workFlowId", workFlowId);
		if(isFlexibleForm!=null && isFlexibleForm.equals("1")){
			String formPageJson = form.getFormPageJson();					//表单转换为true的内容
			getRequest().setAttribute("formPageJson", formPageJson);		
		}
	
		//获取页面风格相关参数
		Map<String, String> map = new HashMap<String, String>();                             		
		List<FormStyle> formStylelist = zwkjFormService.getFormStyle(map);                   		
		if(formStylelist != null && formStylelist.size() > 0){                               		
			FormStyle formStyle = formStylelist.get(0);                                      		
			if(formStyle != null){                                                           		
				getRequest().setAttribute("fontSize", formStyle.getFontSize());              		
				getRequest().setAttribute("verticalSpacing", formStyle.getVerticalSpacing());		
				getRequest().setAttribute("dateFormat", formStyle.getDateFormat());   
				getRequest().setAttribute("font", formStyle.getFont());
			}
		}    
		return "viewForm";
	}
}